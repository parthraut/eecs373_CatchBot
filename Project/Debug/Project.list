
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b080  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  0800b240  0800b240  0001b240  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6e0  0800b6e0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b6e0  0800b6e0  0001b6e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b6e8  0800b6e8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6e8  0800b6e8  0001b6e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b6ec  0800b6ec  0001b6ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b6f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  200001e4  0800b8d4  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  0800b8d4  000204cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017727  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028b3  00000000  00000000  0003793b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001518  00000000  00000000  0003a1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001420  00000000  00000000  0003b708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d58a  00000000  00000000  0003cb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000176f2  00000000  00000000  0006a0b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011e02d  00000000  00000000  000817a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019f7d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e80  00000000  00000000  0019f824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800b228 	.word	0x0800b228

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	0800b228 	.word	0x0800b228

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b974 	b.w	8000f78 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468e      	mov	lr, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14d      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4694      	mov	ip, r2
 8000cba:	d969      	bls.n	8000d90 <__udivmoddi4+0xe8>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b152      	cbz	r2, 8000cd8 <__udivmoddi4+0x30>
 8000cc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cc6:	f1c2 0120 	rsb	r1, r2, #32
 8000cca:	fa20 f101 	lsr.w	r1, r0, r1
 8000cce:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cd6:	4094      	lsls	r4, r2
 8000cd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cdc:	0c21      	lsrs	r1, r4, #16
 8000cde:	fbbe f6f8 	udiv	r6, lr, r8
 8000ce2:	fa1f f78c 	uxth.w	r7, ip
 8000ce6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cee:	fb06 f107 	mul.w	r1, r6, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cfe:	f080 811f 	bcs.w	8000f40 <__udivmoddi4+0x298>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 811c 	bls.w	8000f40 <__udivmoddi4+0x298>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d1c:	fb00 f707 	mul.w	r7, r0, r7
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x92>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2c:	f080 810a 	bcs.w	8000f44 <__udivmoddi4+0x29c>
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	f240 8107 	bls.w	8000f44 <__udivmoddi4+0x29c>
 8000d36:	4464      	add	r4, ip
 8000d38:	3802      	subs	r0, #2
 8000d3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3e:	1be4      	subs	r4, r4, r7
 8000d40:	2600      	movs	r6, #0
 8000d42:	b11d      	cbz	r5, 8000d4c <__udivmoddi4+0xa4>
 8000d44:	40d4      	lsrs	r4, r2
 8000d46:	2300      	movs	r3, #0
 8000d48:	e9c5 4300 	strd	r4, r3, [r5]
 8000d4c:	4631      	mov	r1, r6
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0xc2>
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	f000 80ef 	beq.w	8000f3a <__udivmoddi4+0x292>
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d62:	4630      	mov	r0, r6
 8000d64:	4631      	mov	r1, r6
 8000d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6a:	fab3 f683 	clz	r6, r3
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d14a      	bne.n	8000e08 <__udivmoddi4+0x160>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d302      	bcc.n	8000d7c <__udivmoddi4+0xd4>
 8000d76:	4282      	cmp	r2, r0
 8000d78:	f200 80f9 	bhi.w	8000f6e <__udivmoddi4+0x2c6>
 8000d7c:	1a84      	subs	r4, r0, r2
 8000d7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d82:	2001      	movs	r0, #1
 8000d84:	469e      	mov	lr, r3
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d0e0      	beq.n	8000d4c <__udivmoddi4+0xa4>
 8000d8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d8e:	e7dd      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000d90:	b902      	cbnz	r2, 8000d94 <__udivmoddi4+0xec>
 8000d92:	deff      	udf	#255	; 0xff
 8000d94:	fab2 f282 	clz	r2, r2
 8000d98:	2a00      	cmp	r2, #0
 8000d9a:	f040 8092 	bne.w	8000ec2 <__udivmoddi4+0x21a>
 8000d9e:	eba1 010c 	sub.w	r1, r1, ip
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	2601      	movs	r6, #1
 8000dac:	0c20      	lsrs	r0, r4, #16
 8000dae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000db2:	fb07 1113 	mls	r1, r7, r3, r1
 8000db6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dba:	fb0e f003 	mul.w	r0, lr, r3
 8000dbe:	4288      	cmp	r0, r1
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x12c>
 8000dc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x12a>
 8000dcc:	4288      	cmp	r0, r1
 8000dce:	f200 80cb 	bhi.w	8000f68 <__udivmoddi4+0x2c0>
 8000dd2:	4643      	mov	r3, r8
 8000dd4:	1a09      	subs	r1, r1, r0
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ddc:	fb07 1110 	mls	r1, r7, r0, r1
 8000de0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de4:	fb0e fe00 	mul.w	lr, lr, r0
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x156>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000df4:	d202      	bcs.n	8000dfc <__udivmoddi4+0x154>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f200 80bb 	bhi.w	8000f72 <__udivmoddi4+0x2ca>
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	eba4 040e 	sub.w	r4, r4, lr
 8000e02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e06:	e79c      	b.n	8000d42 <__udivmoddi4+0x9a>
 8000e08:	f1c6 0720 	rsb	r7, r6, #32
 8000e0c:	40b3      	lsls	r3, r6
 8000e0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e16:	fa20 f407 	lsr.w	r4, r0, r7
 8000e1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	40f9      	lsrs	r1, r7
 8000e22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e26:	fa00 f306 	lsl.w	r3, r0, r6
 8000e2a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e2e:	0c20      	lsrs	r0, r4, #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fb09 1118 	mls	r1, r9, r8, r1
 8000e38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e40:	4288      	cmp	r0, r1
 8000e42:	fa02 f206 	lsl.w	r2, r2, r6
 8000e46:	d90b      	bls.n	8000e60 <__udivmoddi4+0x1b8>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e50:	f080 8088 	bcs.w	8000f64 <__udivmoddi4+0x2bc>
 8000e54:	4288      	cmp	r0, r1
 8000e56:	f240 8085 	bls.w	8000f64 <__udivmoddi4+0x2bc>
 8000e5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e68:	fb09 1110 	mls	r1, r9, r0, r1
 8000e6c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e74:	458e      	cmp	lr, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x1e2>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e80:	d26c      	bcs.n	8000f5c <__udivmoddi4+0x2b4>
 8000e82:	458e      	cmp	lr, r1
 8000e84:	d96a      	bls.n	8000f5c <__udivmoddi4+0x2b4>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e8e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e92:	eba1 010e 	sub.w	r1, r1, lr
 8000e96:	42a1      	cmp	r1, r4
 8000e98:	46c8      	mov	r8, r9
 8000e9a:	46a6      	mov	lr, r4
 8000e9c:	d356      	bcc.n	8000f4c <__udivmoddi4+0x2a4>
 8000e9e:	d053      	beq.n	8000f48 <__udivmoddi4+0x2a0>
 8000ea0:	b15d      	cbz	r5, 8000eba <__udivmoddi4+0x212>
 8000ea2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ea6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eaa:	fa01 f707 	lsl.w	r7, r1, r7
 8000eae:	fa22 f306 	lsr.w	r3, r2, r6
 8000eb2:	40f1      	lsrs	r1, r6
 8000eb4:	431f      	orrs	r7, r3
 8000eb6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eba:	2600      	movs	r6, #0
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	f1c2 0320 	rsb	r3, r2, #32
 8000ec6:	40d8      	lsrs	r0, r3
 8000ec8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ecc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed0:	4091      	lsls	r1, r2
 8000ed2:	4301      	orrs	r1, r0
 8000ed4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed8:	fa1f fe8c 	uxth.w	lr, ip
 8000edc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ee0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee4:	0c0b      	lsrs	r3, r1, #16
 8000ee6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eea:	fb00 f60e 	mul.w	r6, r0, lr
 8000eee:	429e      	cmp	r6, r3
 8000ef0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x260>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000efe:	d22f      	bcs.n	8000f60 <__udivmoddi4+0x2b8>
 8000f00:	429e      	cmp	r6, r3
 8000f02:	d92d      	bls.n	8000f60 <__udivmoddi4+0x2b8>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	1b9b      	subs	r3, r3, r6
 8000f0a:	b289      	uxth	r1, r1
 8000f0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f10:	fb07 3316 	mls	r3, r7, r6, r3
 8000f14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f18:	fb06 f30e 	mul.w	r3, r6, lr
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x28a>
 8000f20:	eb1c 0101 	adds.w	r1, ip, r1
 8000f24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f28:	d216      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	d914      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2e:	3e02      	subs	r6, #2
 8000f30:	4461      	add	r1, ip
 8000f32:	1ac9      	subs	r1, r1, r3
 8000f34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f38:	e738      	b.n	8000dac <__udivmoddi4+0x104>
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e705      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e3      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6f8      	b.n	8000d3a <__udivmoddi4+0x92>
 8000f48:	454b      	cmp	r3, r9
 8000f4a:	d2a9      	bcs.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7a3      	b.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f58:	4646      	mov	r6, r8
 8000f5a:	e7ea      	b.n	8000f32 <__udivmoddi4+0x28a>
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	e794      	b.n	8000e8a <__udivmoddi4+0x1e2>
 8000f60:	4640      	mov	r0, r8
 8000f62:	e7d1      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f64:	46d0      	mov	r8, sl
 8000f66:	e77b      	b.n	8000e60 <__udivmoddi4+0x1b8>
 8000f68:	3b02      	subs	r3, #2
 8000f6a:	4461      	add	r1, ip
 8000f6c:	e732      	b.n	8000dd4 <__udivmoddi4+0x12c>
 8000f6e:	4630      	mov	r0, r6
 8000f70:	e709      	b.n	8000d86 <__udivmoddi4+0xde>
 8000f72:	4464      	add	r4, ip
 8000f74:	3802      	subs	r0, #2
 8000f76:	e742      	b.n	8000dfe <__udivmoddi4+0x156>

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <getStart>:
static BlockType g_blockType; // use this to remember the next object block type between function calls
static int g_skipStart = 0;
static Block *g_blocks;

int getStart(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
  uint16_t w, lastw;

  lastw = 0xffff; // some inconsequential initial value
 8000f82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f86:	80fb      	strh	r3, [r7, #6]

  while(1)
  {
    w = getWord();
 8000f88:	f000 f9ac 	bl	80012e4 <getWord>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	80bb      	strh	r3, [r7, #4]
    //printf("%x\n", w);
    if (w==0 && lastw==0){
 8000f90:	88bb      	ldrh	r3, [r7, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d104      	bne.n	8000fa0 <getStart+0x24>
 8000f96:	88fb      	ldrh	r3, [r7, #6]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d101      	bne.n	8000fa0 <getStart+0x24>

      return 0; // in I2C and SPI modes this means no data, so return immediately
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	e028      	b.n	8000ff2 <getStart+0x76>
    }
    else if (w==PIXY_START_WORD && lastw==PIXY_START_WORD)
 8000fa0:	88bb      	ldrh	r3, [r7, #4]
 8000fa2:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d109      	bne.n	8000fbe <getStart+0x42>
 8000faa:	88fb      	ldrh	r3, [r7, #6]
 8000fac:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d104      	bne.n	8000fbe <getStart+0x42>
    {
      g_blockType = NORMAL_BLOCK; // remember block type
 8000fb4:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <getStart+0x80>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
      return 1; // code found!
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e019      	b.n	8000ff2 <getStart+0x76>
    }
    else if (w==PIXY_START_WORD_CC && lastw==PIXY_START_WORD)
 8000fbe:	88bb      	ldrh	r3, [r7, #4]
 8000fc0:	f64a 2256 	movw	r2, #43606	; 0xaa56
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d109      	bne.n	8000fdc <getStart+0x60>
 8000fc8:	88fb      	ldrh	r3, [r7, #6]
 8000fca:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d104      	bne.n	8000fdc <getStart+0x60>
    {
      g_blockType = CC_BLOCK; // found color code block
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <getStart+0x80>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	701a      	strb	r2, [r3, #0]
      return 1;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e00a      	b.n	8000ff2 <getStart+0x76>
    }
    else if (w==PIXY_START_WORDX) // this is important, we might be juxtaposed
 8000fdc:	88bb      	ldrh	r3, [r7, #4]
 8000fde:	f245 52aa 	movw	r2, #21930	; 0x55aa
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d102      	bne.n	8000fec <getStart+0x70>
      getByte(0); // we're out of sync! (backwards)
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f000 f94e 	bl	8001288 <getByte>
    lastw = w; // save
 8000fec:	88bb      	ldrh	r3, [r7, #4]
 8000fee:	80fb      	strh	r3, [r7, #6]
    w = getWord();
 8000ff0:	e7ca      	b.n	8000f88 <getStart+0xc>
  }
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	2000048c 	.word	0x2000048c

08001000 <getBlocks>:

uint16_t getBlocks(uint16_t maxBlocks)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	80fb      	strh	r3, [r7, #6]
  uint8_t i;
  uint16_t w, blockCount, checksum, sum;
  Block *block;

  if (!g_skipStart)
 800100a:	4b47      	ldr	r3, [pc, #284]	; (8001128 <getBlocks+0x128>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d106      	bne.n	8001020 <getBlocks+0x20>
  {
    if (getStart()==0)
 8001012:	f7ff ffb3 	bl	8000f7c <getStart>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d104      	bne.n	8001026 <getBlocks+0x26>
      return 0;
 800101c:	2300      	movs	r3, #0
 800101e:	e07f      	b.n	8001120 <getBlocks+0x120>
  }
  else
    g_skipStart = 0;
 8001020:	4b41      	ldr	r3, [pc, #260]	; (8001128 <getBlocks+0x128>)
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]

  for(blockCount=0; blockCount<maxBlocks && blockCount<PIXY_ARRAYSIZE;)
 8001026:	2300      	movs	r3, #0
 8001028:	82bb      	strh	r3, [r7, #20]
 800102a:	e072      	b.n	8001112 <getBlocks+0x112>
  {
    checksum = getWord();
 800102c:	f000 f95a 	bl	80012e4 <getWord>
 8001030:	4603      	mov	r3, r0
 8001032:	823b      	strh	r3, [r7, #16]
    if (checksum==PIXY_START_WORD) // we've reached the beginning of the next frame
 8001034:	8a3b      	ldrh	r3, [r7, #16]
 8001036:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800103a:	4293      	cmp	r3, r2
 800103c:	d107      	bne.n	800104e <getBlocks+0x4e>
    {
      g_skipStart = 1;
 800103e:	4b3a      	ldr	r3, [pc, #232]	; (8001128 <getBlocks+0x128>)
 8001040:	2201      	movs	r2, #1
 8001042:	601a      	str	r2, [r3, #0]
      g_blockType = NORMAL_BLOCK;
 8001044:	4b39      	ldr	r3, [pc, #228]	; (800112c <getBlocks+0x12c>)
 8001046:	2200      	movs	r2, #0
 8001048:	701a      	strb	r2, [r3, #0]
      return blockCount;
 800104a:	8abb      	ldrh	r3, [r7, #20]
 800104c:	e068      	b.n	8001120 <getBlocks+0x120>
    }
    else if (checksum==PIXY_START_WORD_CC)
 800104e:	8a3b      	ldrh	r3, [r7, #16]
 8001050:	f64a 2256 	movw	r2, #43606	; 0xaa56
 8001054:	4293      	cmp	r3, r2
 8001056:	d107      	bne.n	8001068 <getBlocks+0x68>
    {
      g_skipStart = 1;
 8001058:	4b33      	ldr	r3, [pc, #204]	; (8001128 <getBlocks+0x128>)
 800105a:	2201      	movs	r2, #1
 800105c:	601a      	str	r2, [r3, #0]
      g_blockType = CC_BLOCK;
 800105e:	4b33      	ldr	r3, [pc, #204]	; (800112c <getBlocks+0x12c>)
 8001060:	2201      	movs	r2, #1
 8001062:	701a      	strb	r2, [r3, #0]
      return blockCount;
 8001064:	8abb      	ldrh	r3, [r7, #20]
 8001066:	e05b      	b.n	8001120 <getBlocks+0x120>
    }
    else if (checksum==0)
 8001068:	8a3b      	ldrh	r3, [r7, #16]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <getBlocks+0x72>
      return blockCount;
 800106e:	8abb      	ldrh	r3, [r7, #20]
 8001070:	e056      	b.n	8001120 <getBlocks+0x120>

    block = g_blocks + blockCount;
 8001072:	4b2f      	ldr	r3, [pc, #188]	; (8001130 <getBlocks+0x130>)
 8001074:	6819      	ldr	r1, [r3, #0]
 8001076:	8aba      	ldrh	r2, [r7, #20]
 8001078:	4613      	mov	r3, r2
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	4413      	add	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	440b      	add	r3, r1
 8001082:	60fb      	str	r3, [r7, #12]

    for (i=0, sum=0; i<sizeof(Block)/sizeof(uint16_t); i++)
 8001084:	2300      	movs	r3, #0
 8001086:	75fb      	strb	r3, [r7, #23]
 8001088:	2300      	movs	r3, #0
 800108a:	827b      	strh	r3, [r7, #18]
 800108c:	e01b      	b.n	80010c6 <getBlocks+0xc6>
    {
      if (g_blockType==NORMAL_BLOCK && i>=5) // no angle for normal block
 800108e:	4b27      	ldr	r3, [pc, #156]	; (800112c <getBlocks+0x12c>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d106      	bne.n	80010a4 <getBlocks+0xa4>
 8001096:	7dfb      	ldrb	r3, [r7, #23]
 8001098:	2b04      	cmp	r3, #4
 800109a:	d903      	bls.n	80010a4 <getBlocks+0xa4>
      {
        block->angle = 0;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	2200      	movs	r2, #0
 80010a0:	815a      	strh	r2, [r3, #10]
        break;
 80010a2:	e013      	b.n	80010cc <getBlocks+0xcc>
      }
      w = getWord();
 80010a4:	f000 f91e 	bl	80012e4 <getWord>
 80010a8:	4603      	mov	r3, r0
 80010aa:	817b      	strh	r3, [r7, #10]
      sum += w;
 80010ac:	8a7a      	ldrh	r2, [r7, #18]
 80010ae:	897b      	ldrh	r3, [r7, #10]
 80010b0:	4413      	add	r3, r2
 80010b2:	827b      	strh	r3, [r7, #18]
      *((uint16_t *)block + i) = w;
 80010b4:	7dfb      	ldrb	r3, [r7, #23]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	68fa      	ldr	r2, [r7, #12]
 80010ba:	4413      	add	r3, r2
 80010bc:	897a      	ldrh	r2, [r7, #10]
 80010be:	801a      	strh	r2, [r3, #0]
    for (i=0, sum=0; i<sizeof(Block)/sizeof(uint16_t); i++)
 80010c0:	7dfb      	ldrb	r3, [r7, #23]
 80010c2:	3301      	adds	r3, #1
 80010c4:	75fb      	strb	r3, [r7, #23]
 80010c6:	7dfb      	ldrb	r3, [r7, #23]
 80010c8:	2b05      	cmp	r3, #5
 80010ca:	d9e0      	bls.n	800108e <getBlocks+0x8e>
    }

    // check checksum
    if (checksum==sum)
 80010cc:	8a3a      	ldrh	r2, [r7, #16]
 80010ce:	8a7b      	ldrh	r3, [r7, #18]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d103      	bne.n	80010dc <getBlocks+0xdc>
      blockCount++;
 80010d4:	8abb      	ldrh	r3, [r7, #20]
 80010d6:	3301      	adds	r3, #1
 80010d8:	82bb      	strh	r3, [r7, #20]
 80010da:	e002      	b.n	80010e2 <getBlocks+0xe2>
    else
      printf("checksum error!\n");
 80010dc:	4815      	ldr	r0, [pc, #84]	; (8001134 <getBlocks+0x134>)
 80010de:	f007 fcc9 	bl	8008a74 <puts>

    w = getWord();
 80010e2:	f000 f8ff 	bl	80012e4 <getWord>
 80010e6:	4603      	mov	r3, r0
 80010e8:	817b      	strh	r3, [r7, #10]
    if (w==PIXY_START_WORD)
 80010ea:	897b      	ldrh	r3, [r7, #10]
 80010ec:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d103      	bne.n	80010fc <getBlocks+0xfc>
      g_blockType = NORMAL_BLOCK;
 80010f4:	4b0d      	ldr	r3, [pc, #52]	; (800112c <getBlocks+0x12c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
 80010fa:	e00a      	b.n	8001112 <getBlocks+0x112>
    else if (w==PIXY_START_WORD_CC)
 80010fc:	897b      	ldrh	r3, [r7, #10]
 80010fe:	f64a 2256 	movw	r2, #43606	; 0xaa56
 8001102:	4293      	cmp	r3, r2
 8001104:	d103      	bne.n	800110e <getBlocks+0x10e>
      g_blockType = CC_BLOCK;
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <getBlocks+0x12c>)
 8001108:	2201      	movs	r2, #1
 800110a:	701a      	strb	r2, [r3, #0]
 800110c:	e001      	b.n	8001112 <getBlocks+0x112>
    else
      return blockCount;
 800110e:	8abb      	ldrh	r3, [r7, #20]
 8001110:	e006      	b.n	8001120 <getBlocks+0x120>
  for(blockCount=0; blockCount<maxBlocks && blockCount<PIXY_ARRAYSIZE;)
 8001112:	8aba      	ldrh	r2, [r7, #20]
 8001114:	88fb      	ldrh	r3, [r7, #6]
 8001116:	429a      	cmp	r2, r3
 8001118:	d202      	bcs.n	8001120 <getBlocks+0x120>
 800111a:	8abb      	ldrh	r3, [r7, #20]
 800111c:	2b63      	cmp	r3, #99	; 0x63
 800111e:	d985      	bls.n	800102c <getBlocks+0x2c>
  }
}
 8001120:	4618      	mov	r0, r3
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000490 	.word	0x20000490
 800112c:	2000048c 	.word	0x2000048c
 8001130:	20000494 	.word	0x20000494
 8001134:	0800b240 	.word	0x0800b240

08001138 <pixy_init>:

void pixy_init()
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  g_blocks = (Block *)malloc(sizeof(Block)*PIXY_ARRAYSIZE);
 800113c:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8001140:	f006 feb8 	bl	8007eb4 <malloc>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	4b01      	ldr	r3, [pc, #4]	; (8001150 <pixy_init+0x18>)
 800114a:	601a      	str	r2, [r3, #0]
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000494 	.word	0x20000494

08001154 <SetPWM>:

// Sets a timer's PWM to a value
// timerIndex = which timer (eg TIM2 -> pass 2, TIM3 -> pass 3)
// pwmVal = value to set that timer's CCR to; these should be defined below
void SetPWM(uint16_t timerIndex, uint16_t pwmVal)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	460a      	mov	r2, r1
 800115e:	80fb      	strh	r3, [r7, #6]
 8001160:	4613      	mov	r3, r2
 8001162:	80bb      	strh	r3, [r7, #4]
	TIM_TypeDef* timer;

	switch (timerIndex)
 8001164:	88fb      	ldrh	r3, [r7, #6]
 8001166:	3b02      	subs	r3, #2
 8001168:	2b03      	cmp	r3, #3
 800116a:	d81c      	bhi.n	80011a6 <SetPWM+0x52>
 800116c:	a201      	add	r2, pc, #4	; (adr r2, 8001174 <SetPWM+0x20>)
 800116e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001172:	bf00      	nop
 8001174:	08001185 	.word	0x08001185
 8001178:	0800118d 	.word	0x0800118d
 800117c:	08001193 	.word	0x08001193
 8001180:	08001199 	.word	0x08001199
	{
	case 2:
		timer = TIM2;
 8001184:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001188:	60fb      	str	r3, [r7, #12]
		break;
 800118a:	e008      	b.n	800119e <SetPWM+0x4a>
	case 3:
		timer = TIM3;
 800118c:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <SetPWM+0x60>)
 800118e:	60fb      	str	r3, [r7, #12]
		break;
 8001190:	e005      	b.n	800119e <SetPWM+0x4a>
	case 4:
		timer = TIM4;
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <SetPWM+0x64>)
 8001194:	60fb      	str	r3, [r7, #12]
		break;
 8001196:	e002      	b.n	800119e <SetPWM+0x4a>
	case 5:
		timer = TIM5;
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <SetPWM+0x68>)
 800119a:	60fb      	str	r3, [r7, #12]
		break;
 800119c:	bf00      	nop
	default:
		return; // just in case.
	}

	timer->CCR3 = pwmVal;
 800119e:	88ba      	ldrh	r2, [r7, #4]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80011a4:	e000      	b.n	80011a8 <SetPWM+0x54>
		return; // just in case.
 80011a6:	bf00      	nop
}
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	40000400 	.word	0x40000400
 80011b8:	40000800 	.word	0x40000800
 80011bc:	40000c00 	.word	0x40000c00

080011c0 <UpdateState>:

uint8_t currentState = STATE_IDLE;

// Updates the current state
void UpdateState(uint8_t nextState)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
	currentState = nextState;
 80011ca:	4a04      	ldr	r2, [pc, #16]	; (80011dc <UpdateState+0x1c>)
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	7013      	strb	r3, [r2, #0]
	ResetAverage();
 80011d0:	f000 f8ac 	bl	800132c <ResetAverage>
		ResetAverage();
		break;
	case STATE_
	}
	//*/
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000000 	.word	0x20000000

080011e0 <CheckButton>:
// Start: Code to handle start button and head
//
// ============================

void CheckButton()
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_0))
 80011e4:	2101      	movs	r1, #1
 80011e6:	4805      	ldr	r0, [pc, #20]	; (80011fc <CheckButton+0x1c>)
 80011e8:	f002 fe46 	bl	8003e78 <HAL_GPIO_ReadPin>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d002      	beq.n	80011f8 <CheckButton+0x18>
		UpdateState(STATE_FIND_BALL);
 80011f2:	2000      	movs	r0, #0
 80011f4:	f7ff ffe4 	bl	80011c0 <UpdateState>
}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	48001800 	.word	0x48001800

08001200 <UpdateHead>:
uint16_t headServoWidth = HEAD_SERVO_MIN;
uint16_t headServoChange = HEAD_SERVO_CHANGE;
uint16_t headServoCounter = 0;

void UpdateHead()
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	headServoCounter += 1;
 8001204:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <UpdateHead+0x78>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	3301      	adds	r3, #1
 800120a:	b29a      	uxth	r2, r3
 800120c:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <UpdateHead+0x78>)
 800120e:	801a      	strh	r2, [r3, #0]
	if (headServoCounter < HEAD_SERVO_COUNTER_MAX)
 8001210:	4b19      	ldr	r3, [pc, #100]	; (8001278 <UpdateHead+0x78>)
 8001212:	881b      	ldrh	r3, [r3, #0]
 8001214:	2b4f      	cmp	r3, #79	; 0x4f
 8001216:	d92c      	bls.n	8001272 <UpdateHead+0x72>
		return;

	headServoCounter = 0;
 8001218:	4b17      	ldr	r3, [pc, #92]	; (8001278 <UpdateHead+0x78>)
 800121a:	2200      	movs	r2, #0
 800121c:	801a      	strh	r2, [r3, #0]
	if (currentState == STATE_IDLE ||
 800121e:	4b17      	ldr	r3, [pc, #92]	; (800127c <UpdateHead+0x7c>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b04      	cmp	r3, #4
 8001224:	d003      	beq.n	800122e <UpdateHead+0x2e>
		currentState == STATE_GRAB_BALL)
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <UpdateHead+0x7c>)
 8001228:	781b      	ldrb	r3, [r3, #0]
	if (currentState == STATE_IDLE ||
 800122a:	2b01      	cmp	r3, #1
 800122c:	d103      	bne.n	8001236 <UpdateHead+0x36>
	{
		headServoWidth = HEAD_SERVO_MID;
 800122e:	4b14      	ldr	r3, [pc, #80]	; (8001280 <UpdateHead+0x80>)
 8001230:	228c      	movs	r2, #140	; 0x8c
 8001232:	801a      	strh	r2, [r3, #0]
 8001234:	e016      	b.n	8001264 <UpdateHead+0x64>
	}
	else
	{
		headServoWidth += headServoChange;
 8001236:	4b12      	ldr	r3, [pc, #72]	; (8001280 <UpdateHead+0x80>)
 8001238:	881a      	ldrh	r2, [r3, #0]
 800123a:	4b12      	ldr	r3, [pc, #72]	; (8001284 <UpdateHead+0x84>)
 800123c:	881b      	ldrh	r3, [r3, #0]
 800123e:	4413      	add	r3, r2
 8001240:	b29a      	uxth	r2, r3
 8001242:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <UpdateHead+0x80>)
 8001244:	801a      	strh	r2, [r3, #0]
		if (headServoWidth >= HEAD_SERVO_MAX)
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <UpdateHead+0x80>)
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	2bb3      	cmp	r3, #179	; 0xb3
 800124c:	d903      	bls.n	8001256 <UpdateHead+0x56>
			headServoChange = -1 * HEAD_SERVO_CHANGE;
 800124e:	4b0d      	ldr	r3, [pc, #52]	; (8001284 <UpdateHead+0x84>)
 8001250:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001254:	801a      	strh	r2, [r3, #0]
		if (headServoWidth <= HEAD_SERVO_MIN)
 8001256:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <UpdateHead+0x80>)
 8001258:	881b      	ldrh	r3, [r3, #0]
 800125a:	2b64      	cmp	r3, #100	; 0x64
 800125c:	d802      	bhi.n	8001264 <UpdateHead+0x64>
			headServoChange = HEAD_SERVO_CHANGE;
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <UpdateHead+0x84>)
 8001260:	2202      	movs	r2, #2
 8001262:	801a      	strh	r2, [r3, #0]
	}
	SetPWM(5, headServoWidth);
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <UpdateHead+0x80>)
 8001266:	881b      	ldrh	r3, [r3, #0]
 8001268:	4619      	mov	r1, r3
 800126a:	2005      	movs	r0, #5
 800126c:	f7ff ff72 	bl	8001154 <SetPWM>
 8001270:	e000      	b.n	8001274 <UpdateHead+0x74>
		return;
 8001272:	bf00      	nop
}
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000498 	.word	0x20000498
 800127c:	20000000 	.word	0x20000000
 8001280:	20000002 	.word	0x20000002
 8001284:	20000004 	.word	0x20000004

08001288 <getByte>:
uint8_t rx_data[2];
uint8_t tx_data[2] = { PIXY_SYNC_BYTE, 0 };

// Gets one byte from the Pixy cam
uint8_t getByte(uint8_t output)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af02      	add	r7, sp, #8
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef hal_status;
	uint8_t data = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001296:	2200      	movs	r2, #0
 8001298:	2140      	movs	r1, #64	; 0x40
 800129a:	480f      	ldr	r0, [pc, #60]	; (80012d8 <getByte+0x50>)
 800129c:	f002 fe04 	bl	8003ea8 <HAL_GPIO_WritePin>
	hal_status = HAL_SPI_TransmitReceive(&hspi1, &output, &data, 1, 0xFFFFFFFF);
 80012a0:	f107 020e 	add.w	r2, r7, #14
 80012a4:	1df9      	adds	r1, r7, #7
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2301      	movs	r3, #1
 80012ae:	480b      	ldr	r0, [pc, #44]	; (80012dc <getByte+0x54>)
 80012b0:	f004 fb79 	bl	80059a6 <HAL_SPI_TransmitReceive>
 80012b4:	4603      	mov	r3, r0
 80012b6:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80012b8:	2201      	movs	r2, #1
 80012ba:	2140      	movs	r1, #64	; 0x40
 80012bc:	4806      	ldr	r0, [pc, #24]	; (80012d8 <getByte+0x50>)
 80012be:	f002 fdf3 	bl	8003ea8 <HAL_GPIO_WritePin>

	if (hal_status != HAL_OK)
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d002      	beq.n	80012ce <getByte+0x46>
	{
		printf("not ok\n");
 80012c8:	4805      	ldr	r0, [pc, #20]	; (80012e0 <getByte+0x58>)
 80012ca:	f007 fbd3 	bl	8008a74 <puts>
	}

	return data;
 80012ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	48000400 	.word	0x48000400
 80012dc:	200002f8 	.word	0x200002f8
 80012e0:	0800b250 	.word	0x0800b250

080012e4 <getWord>:

// Gets a word (2 bytes) from the Pixy cam
uint16_t getWord(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
	uint16_t w;

	rx_data[0] = getByte(PIXY_SYNC_BYTE_DATA);
 80012ea:	205b      	movs	r0, #91	; 0x5b
 80012ec:	f7ff ffcc 	bl	8001288 <getByte>
 80012f0:	4603      	mov	r3, r0
 80012f2:	461a      	mov	r2, r3
 80012f4:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <getWord+0x44>)
 80012f6:	701a      	strb	r2, [r3, #0]
	rx_data[1] = getByte(0);
 80012f8:	2000      	movs	r0, #0
 80012fa:	f7ff ffc5 	bl	8001288 <getByte>
 80012fe:	4603      	mov	r3, r0
 8001300:	461a      	mov	r2, r3
 8001302:	4b09      	ldr	r3, [pc, #36]	; (8001328 <getWord+0x44>)
 8001304:	705a      	strb	r2, [r3, #1]

	w = rx_data[0];
 8001306:	4b08      	ldr	r3, [pc, #32]	; (8001328 <getWord+0x44>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	80fb      	strh	r3, [r7, #6]
	w <<= 8;
 800130c:	88fb      	ldrh	r3, [r7, #6]
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	80fb      	strh	r3, [r7, #6]
	w |= rx_data[1];
 8001312:	4b05      	ldr	r3, [pc, #20]	; (8001328 <getWord+0x44>)
 8001314:	785b      	ldrb	r3, [r3, #1]
 8001316:	b29a      	uxth	r2, r3
 8001318:	88fb      	ldrh	r3, [r7, #6]
 800131a:	4313      	orrs	r3, r2
 800131c:	80fb      	strh	r3, [r7, #6]

	return w;
 800131e:	88fb      	ldrh	r3, [r7, #6]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	2000049c 	.word	0x2000049c

0800132c <ResetAverage>:
uint16_t xValsIndex = 0;
float runningAverage = 0.0f;

// Resets the running average and array
void ResetAverage()
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
	xVals[0] = xVals[1] = xVals[2] = xVals[3] = 0;
 8001330:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <ResetAverage+0x34>)
 8001332:	2200      	movs	r2, #0
 8001334:	80da      	strh	r2, [r3, #6]
 8001336:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <ResetAverage+0x34>)
 8001338:	88da      	ldrh	r2, [r3, #6]
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <ResetAverage+0x34>)
 800133c:	809a      	strh	r2, [r3, #4]
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <ResetAverage+0x34>)
 8001340:	889a      	ldrh	r2, [r3, #4]
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <ResetAverage+0x34>)
 8001344:	805a      	strh	r2, [r3, #2]
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <ResetAverage+0x34>)
 8001348:	885a      	ldrh	r2, [r3, #2]
 800134a:	4b05      	ldr	r3, [pc, #20]	; (8001360 <ResetAverage+0x34>)
 800134c:	801a      	strh	r2, [r3, #0]
	runningAverage = 0.0f;
 800134e:	4b05      	ldr	r3, [pc, #20]	; (8001364 <ResetAverage+0x38>)
 8001350:	f04f 0200 	mov.w	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
}
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	200004a0 	.word	0x200004a0
 8001364:	200004ac 	.word	0x200004ac

08001368 <GetSignatureIndex>:

// Gets the index of whatever signature we're looking for in the block data from the Pixy cam
// I'm basically assuming whatever we're looking for will be the first piece of data in the blocks.
uint16_t GetSignatureIndex(uint32_t num_blocks, uint16_t sigVal)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	807b      	strh	r3, [r7, #2]
	int i = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
	while (i < num_blocks)
 8001378:	e015      	b.n	80013a6 <GetSignatureIndex+0x3e>
	{
		if (g_blocks[i].signature == sigVal)
 800137a:	4b10      	ldr	r3, [pc, #64]	; (80013bc <GetSignatureIndex+0x54>)
 800137c:	6819      	ldr	r1, [r3, #0]
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	4613      	mov	r3, r2
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	4413      	add	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	440b      	add	r3, r1
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	887a      	ldrh	r2, [r7, #2]
 800138e:	429a      	cmp	r2, r3
 8001390:	d106      	bne.n	80013a0 <GetSignatureIndex+0x38>
		{
			printf("index: %d\n", i);
 8001392:	68f9      	ldr	r1, [r7, #12]
 8001394:	480a      	ldr	r0, [pc, #40]	; (80013c0 <GetSignatureIndex+0x58>)
 8001396:	f007 fae7 	bl	8008968 <iprintf>
			return i;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	b29b      	uxth	r3, r3
 800139e:	e008      	b.n	80013b2 <GetSignatureIndex+0x4a>
		}
		i++;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	3301      	adds	r3, #1
 80013a4:	60fb      	str	r3, [r7, #12]
	while (i < num_blocks)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d8e5      	bhi.n	800137a <GetSignatureIndex+0x12>
	}
	return num_blocks;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	b29b      	uxth	r3, r3
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000494 	.word	0x20000494
 80013c0:	0800b258 	.word	0x0800b258

080013c4 <GetNextX>:
uint16_t noBallCounter = 0;
uint16_t objectWidth = 0;
// Gets the X value of the signature items and updates the running average
// sig = one of the two signatures defined above
void GetNextX(uint16_t sig)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	80fb      	strh	r3, [r7, #6]
	uint32_t num_blocks = getBlocks(PIXY_ARRAYSIZE);
 80013ce:	2064      	movs	r0, #100	; 0x64
 80013d0:	f7ff fe16 	bl	8001000 <getBlocks>
 80013d4:	4603      	mov	r3, r0
 80013d6:	617b      	str	r3, [r7, #20]
	if (!num_blocks)
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d10c      	bne.n	80013f8 <GetNextX+0x34>
	{
		noBallCounter += 1;
 80013de:	4b3c      	ldr	r3, [pc, #240]	; (80014d0 <GetNextX+0x10c>)
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	3301      	adds	r3, #1
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	4b3a      	ldr	r3, [pc, #232]	; (80014d0 <GetNextX+0x10c>)
 80013e8:	801a      	strh	r2, [r3, #0]
		if (noBallCounter >= NO_BALL_LIMIT)
 80013ea:	4b39      	ldr	r3, [pc, #228]	; (80014d0 <GetNextX+0x10c>)
 80013ec:	881b      	ldrh	r3, [r3, #0]
 80013ee:	2b31      	cmp	r3, #49	; 0x31
 80013f0:	d968      	bls.n	80014c4 <GetNextX+0x100>
			ResetAverage();
 80013f2:	f7ff ff9b 	bl	800132c <ResetAverage>
		return;
 80013f6:	e065      	b.n	80014c4 <GetNextX+0x100>
	}

	noBallCounter = 0;
 80013f8:	4b35      	ldr	r3, [pc, #212]	; (80014d0 <GetNextX+0x10c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	801a      	strh	r2, [r3, #0]

	uint16_t index = GetSignatureIndex(num_blocks, sig);
 80013fe:	88fb      	ldrh	r3, [r7, #6]
 8001400:	4619      	mov	r1, r3
 8001402:	6978      	ldr	r0, [r7, #20]
 8001404:	f7ff ffb0 	bl	8001368 <GetSignatureIndex>
 8001408:	4603      	mov	r3, r0
 800140a:	827b      	strh	r3, [r7, #18]
	if (index == num_blocks)
 800140c:	8a7b      	ldrh	r3, [r7, #18]
 800140e:	697a      	ldr	r2, [r7, #20]
 8001410:	429a      	cmp	r2, r3
 8001412:	d059      	beq.n	80014c8 <GetNextX+0x104>
		return;

	uint16_t newX = g_blocks[index].x;
 8001414:	4b2f      	ldr	r3, [pc, #188]	; (80014d4 <GetNextX+0x110>)
 8001416:	6819      	ldr	r1, [r3, #0]
 8001418:	8a7a      	ldrh	r2, [r7, #18]
 800141a:	4613      	mov	r3, r2
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	4413      	add	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	440b      	add	r3, r1
 8001424:	885b      	ldrh	r3, [r3, #2]
 8001426:	823b      	strh	r3, [r7, #16]
	int16_t diff = newX - xVals[xValsIndex];
 8001428:	4b2b      	ldr	r3, [pc, #172]	; (80014d8 <GetNextX+0x114>)
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	4b2b      	ldr	r3, [pc, #172]	; (80014dc <GetNextX+0x118>)
 8001430:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001434:	8a3a      	ldrh	r2, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	b29b      	uxth	r3, r3
 800143a:	81fb      	strh	r3, [r7, #14]
	runningAverage += diff * 0.25f;
 800143c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001440:	ee07 3a90 	vmov	s15, r3
 8001444:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001448:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800144c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001450:	4b23      	ldr	r3, [pc, #140]	; (80014e0 <GetNextX+0x11c>)
 8001452:	edd3 7a00 	vldr	s15, [r3]
 8001456:	ee77 7a27 	vadd.f32	s15, s14, s15
 800145a:	4b21      	ldr	r3, [pc, #132]	; (80014e0 <GetNextX+0x11c>)
 800145c:	edc3 7a00 	vstr	s15, [r3]

	xVals[xValsIndex] = newX;
 8001460:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <GetNextX+0x114>)
 8001462:	881b      	ldrh	r3, [r3, #0]
 8001464:	4619      	mov	r1, r3
 8001466:	4a1d      	ldr	r2, [pc, #116]	; (80014dc <GetNextX+0x118>)
 8001468:	8a3b      	ldrh	r3, [r7, #16]
 800146a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	xValsIndex = (xValsIndex + 1) % 4;
 800146e:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <GetNextX+0x114>)
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	3301      	adds	r3, #1
 8001474:	425a      	negs	r2, r3
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	f002 0203 	and.w	r2, r2, #3
 800147e:	bf58      	it	pl
 8001480:	4253      	negpl	r3, r2
 8001482:	b29a      	uxth	r2, r3
 8001484:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <GetNextX+0x114>)
 8001486:	801a      	strh	r2, [r3, #0]

	if (g_blocks[index].y >= HEIGHT && currentState == STATE_FIND_BALL)
 8001488:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <GetNextX+0x110>)
 800148a:	6819      	ldr	r1, [r3, #0]
 800148c:	8a7a      	ldrh	r2, [r7, #18]
 800148e:	4613      	mov	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	4413      	add	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	440b      	add	r3, r1
 8001498:	889b      	ldrh	r3, [r3, #4]
 800149a:	2bb8      	cmp	r3, #184	; 0xb8
 800149c:	d906      	bls.n	80014ac <GetNextX+0xe8>
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <GetNextX+0x120>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d102      	bne.n	80014ac <GetNextX+0xe8>
	{
		UpdateState(STATE_GRAB_BALL);
 80014a6:	2001      	movs	r0, #1
 80014a8:	f7ff fe8a 	bl	80011c0 <UpdateState>
	}

	objectWidth = g_blocks[index].width;
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <GetNextX+0x110>)
 80014ae:	6819      	ldr	r1, [r3, #0]
 80014b0:	8a7a      	ldrh	r2, [r7, #18]
 80014b2:	4613      	mov	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4413      	add	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	440b      	add	r3, r1
 80014bc:	88da      	ldrh	r2, [r3, #6]
 80014be:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <GetNextX+0x124>)
 80014c0:	801a      	strh	r2, [r3, #0]
 80014c2:	e002      	b.n	80014ca <GetNextX+0x106>
		return;
 80014c4:	bf00      	nop
 80014c6:	e000      	b.n	80014ca <GetNextX+0x106>
		return;
 80014c8:	bf00      	nop
}
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	200004b0 	.word	0x200004b0
 80014d4:	20000494 	.word	0x20000494
 80014d8:	200004a8 	.word	0x200004a8
 80014dc:	200004a0 	.word	0x200004a0
 80014e0:	200004ac 	.word	0x200004ac
 80014e4:	20000000 	.word	0x20000000
 80014e8:	200004b2 	.word	0x200004b2

080014ec <UpdatePixyCam>:


// Updates the Pixy cam
void UpdatePixyCam()
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
	switch (currentState)
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <UpdatePixyCam+0x2c>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d009      	beq.n	800150c <UpdatePixyCam+0x20>
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	dc0b      	bgt.n	8001514 <UpdatePixyCam+0x28>
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <UpdatePixyCam+0x18>
 8001500:	2b01      	cmp	r3, #1
	{
	case STATE_FIND_BALL:
		GetNextX(PIXY_SIG_BALL);
		break;
	case STATE_GRAB_BALL:
		return; // pixy cam doesn't need to do anything here
 8001502:	e007      	b.n	8001514 <UpdatePixyCam+0x28>
		GetNextX(PIXY_SIG_BALL);
 8001504:	2001      	movs	r0, #1
 8001506:	f7ff ff5d 	bl	80013c4 <GetNextX>
		break;
 800150a:	e003      	b.n	8001514 <UpdatePixyCam+0x28>
	case STATE_RETURN_BALL:
		GetNextX(PIXY_SIG_RETURN);
 800150c:	2002      	movs	r0, #2
 800150e:	f7ff ff59 	bl	80013c4 <GetNextX>
		break;
 8001512:	bf00      	nop
	}
}
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000000 	.word	0x20000000

0800151c <SetWheelSpeed>:
// Sets the wheel speed
// speed = PWM value for the wheel
// wheel = which wheel to use
// Use the defines above.
void SetWheelSpeed(uint8_t wheel, uint8_t speed)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	460a      	mov	r2, r1
 8001526:	71fb      	strb	r3, [r7, #7]
 8001528:	4613      	mov	r3, r2
 800152a:	71bb      	strb	r3, [r7, #6]
	// still need to determine which timer is controlling which wheel
	// speed = PWM value
	SetPWM(wheel, speed);
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	b29b      	uxth	r3, r3
 8001530:	79ba      	ldrb	r2, [r7, #6]
 8001532:	b292      	uxth	r2, r2
 8001534:	4611      	mov	r1, r2
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff fe0c 	bl	8001154 <SetPWM>
}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <UpdateWheelSpeed>:
// avgMax = max value the running average can be
// avgMin = min value the running average can be
// speed = speed to set the wheels
// This will turn off one of the wheels depending on where the ball is
void UpdateWheelSpeed(uint16_t avgMax, uint16_t avgMin, uint8_t speed)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	80fb      	strh	r3, [r7, #6]
 800154e:	460b      	mov	r3, r1
 8001550:	80bb      	strh	r3, [r7, #4]
 8001552:	4613      	mov	r3, r2
 8001554:	70fb      	strb	r3, [r7, #3]
	uint8_t wheelLeftSpeed = speed;
 8001556:	78fb      	ldrb	r3, [r7, #3]
 8001558:	73fb      	strb	r3, [r7, #15]
	uint8_t wheelRightSpeed = speed;
 800155a:	78fb      	ldrb	r3, [r7, #3]
 800155c:	73bb      	strb	r3, [r7, #14]
	if (runningAverage < avgMin)
 800155e:	88bb      	ldrh	r3, [r7, #4]
 8001560:	ee07 3a90 	vmov	s15, r3
 8001564:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001568:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <UpdateWheelSpeed+0x74>)
 800156a:	edd3 7a00 	vldr	s15, [r3]
 800156e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001576:	dd01      	ble.n	800157c <UpdateWheelSpeed+0x38>
		wheelLeftSpeed = WHEEL_SPEED_ZERO;
 8001578:	238b      	movs	r3, #139	; 0x8b
 800157a:	73fb      	strb	r3, [r7, #15]
	if (runningAverage > avgMax)
 800157c:	88fb      	ldrh	r3, [r7, #6]
 800157e:	ee07 3a90 	vmov	s15, r3
 8001582:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001586:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <UpdateWheelSpeed+0x74>)
 8001588:	edd3 7a00 	vldr	s15, [r3]
 800158c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001594:	d501      	bpl.n	800159a <UpdateWheelSpeed+0x56>
		wheelRightSpeed = WHEEL_SPEED_ZERO;
 8001596:	238b      	movs	r3, #139	; 0x8b
 8001598:	73bb      	strb	r3, [r7, #14]

	SetWheelSpeed(WHEEL_LEFT, wheelLeftSpeed);
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	4619      	mov	r1, r3
 800159e:	2002      	movs	r0, #2
 80015a0:	f7ff ffbc 	bl	800151c <SetWheelSpeed>
	SetWheelSpeed(WHEEL_RIGHT, wheelRightSpeed);
 80015a4:	7bbb      	ldrb	r3, [r7, #14]
 80015a6:	4619      	mov	r1, r3
 80015a8:	2003      	movs	r0, #3
 80015aa:	f7ff ffb7 	bl	800151c <SetWheelSpeed>
}
 80015ae:	bf00      	nop
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	200004ac 	.word	0x200004ac

080015bc <UpdateWheels>:

// Updates the wheels
void UpdateWheels()
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
	uint8_t speed = WHEEL_SPEED_FULL;
 80015c2:	2350      	movs	r3, #80	; 0x50
 80015c4:	71fb      	strb	r3, [r7, #7]
	switch (currentState)
 80015c6:	4b13      	ldr	r3, [pc, #76]	; (8001614 <UpdateWheels+0x58>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d016      	beq.n	80015fc <UpdateWheels+0x40>
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	dc1b      	bgt.n	800160a <UpdateWheels+0x4e>
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d002      	beq.n	80015dc <UpdateWheels+0x20>
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d007      	beq.n	80015ea <UpdateWheels+0x2e>
		break;
	case STATE_RETURN_BALL:
		UpdateWheelSpeed(MAX_RETURN_X, MIN_RETURN_X, speed);
		break;
	}
}
 80015da:	e016      	b.n	800160a <UpdateWheels+0x4e>
		UpdateWheelSpeed(MAX_BALL_X, MIN_BALL_X, speed);
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	461a      	mov	r2, r3
 80015e0:	2182      	movs	r1, #130	; 0x82
 80015e2:	20be      	movs	r0, #190	; 0xbe
 80015e4:	f7ff ffae 	bl	8001544 <UpdateWheelSpeed>
		break;
 80015e8:	e00f      	b.n	800160a <UpdateWheels+0x4e>
		SetWheelSpeed(WHEEL_LEFT, WHEEL_SPEED_HALF);
 80015ea:	2178      	movs	r1, #120	; 0x78
 80015ec:	2002      	movs	r0, #2
 80015ee:	f7ff ff95 	bl	800151c <SetWheelSpeed>
		SetWheelSpeed(WHEEL_RIGHT, WHEEL_SPEED_HALF);
 80015f2:	2178      	movs	r1, #120	; 0x78
 80015f4:	2003      	movs	r0, #3
 80015f6:	f7ff ff91 	bl	800151c <SetWheelSpeed>
		break;
 80015fa:	e006      	b.n	800160a <UpdateWheels+0x4e>
		UpdateWheelSpeed(MAX_RETURN_X, MIN_RETURN_X, speed);
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	461a      	mov	r2, r3
 8001600:	218c      	movs	r1, #140	; 0x8c
 8001602:	20b4      	movs	r0, #180	; 0xb4
 8001604:	f7ff ff9e 	bl	8001544 <UpdateWheelSpeed>
		break;
 8001608:	bf00      	nop
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000000 	.word	0x20000000

08001618 <CheckIR>:

#define DIST_TO_BALL	11.0f

// Checks the value reported by the IR sensor
uint8_t CheckIR()
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
	uint16_t adcVal = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Start(&hadc1);
 8001622:	4829      	ldr	r0, [pc, #164]	; (80016c8 <CheckIR+0xb0>)
 8001624:	f001 fc2e 	bl	8002e84 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 0xFFFFFFFF);
 8001628:	f04f 31ff 	mov.w	r1, #4294967295
 800162c:	4826      	ldr	r0, [pc, #152]	; (80016c8 <CheckIR+0xb0>)
 800162e:	f001 fc8c 	bl	8002f4a <HAL_ADC_PollForConversion>
	adcVal = HAL_ADC_GetValue(&hadc1);
 8001632:	4825      	ldr	r0, [pc, #148]	; (80016c8 <CheckIR+0xb0>)
 8001634:	f001 fd18 	bl	8003068 <HAL_ADC_GetValue>
 8001638:	4603      	mov	r3, r0
 800163a:	80fb      	strh	r3, [r7, #6]
	float distVal = exp((log(adcVal) - 10.66) / (-1.123));
 800163c:	88fb      	ldrh	r3, [r7, #6]
 800163e:	4618      	mov	r0, r3
 8001640:	f7fe ff78 	bl	8000534 <__aeabi_ui2d>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	ec43 2b10 	vmov	d0, r2, r3
 800164c:	f009 fa28 	bl	800aaa0 <log>
 8001650:	ec51 0b10 	vmov	r0, r1, d0
 8001654:	a318      	add	r3, pc, #96	; (adr r3, 80016b8 <CheckIR+0xa0>)
 8001656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165a:	f7fe fe2d 	bl	80002b8 <__aeabi_dsub>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4610      	mov	r0, r2
 8001664:	4619      	mov	r1, r3
 8001666:	a316      	add	r3, pc, #88	; (adr r3, 80016c0 <CheckIR+0xa8>)
 8001668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166c:	f7ff f906 	bl	800087c <__aeabi_ddiv>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	ec43 2b17 	vmov	d7, r2, r3
 8001678:	eeb0 0a47 	vmov.f32	s0, s14
 800167c:	eef0 0a67 	vmov.f32	s1, s15
 8001680:	f009 f9c6 	bl	800aa10 <exp>
 8001684:	ec53 2b10 	vmov	r2, r3, d0
 8001688:	4610      	mov	r0, r2
 800168a:	4619      	mov	r1, r3
 800168c:	f7ff faa4 	bl	8000bd8 <__aeabi_d2f>
 8001690:	4603      	mov	r3, r0
 8001692:	603b      	str	r3, [r7, #0]
	//printf("distVal: %f\n", distVal);
	if (distVal <= DIST_TO_BALL)
 8001694:	edd7 7a00 	vldr	s15, [r7]
 8001698:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 800169c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a4:	d801      	bhi.n	80016aa <CheckIR+0x92>
		return 1;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e000      	b.n	80016ac <CheckIR+0x94>
	return 0;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	f3af 8000 	nop.w
 80016b8:	851eb852 	.word	0x851eb852
 80016bc:	402551eb 	.word	0x402551eb
 80016c0:	d916872b 	.word	0xd916872b
 80016c4:	bff1f7ce 	.word	0xbff1f7ce
 80016c8:	20000200 	.word	0x20000200

080016cc <CloseClaw>:
#define WAIT_TIME		1000000
#define CLAW_WAIT_TIME	200000

// Closes the claw
void CloseClaw()
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
	SetPWM(4, CLAW_CLOSED);
 80016d0:	21aa      	movs	r1, #170	; 0xaa
 80016d2:	2004      	movs	r0, #4
 80016d4:	f7ff fd3e 	bl	8001154 <SetPWM>
}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}

080016dc <OpenClaw>:

// Opens the claw
void OpenClaw()
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
	SetPWM(4, CLAW_OPEN);
 80016e0:	216e      	movs	r1, #110	; 0x6e
 80016e2:	2004      	movs	r0, #4
 80016e4:	f7ff fd36 	bl	8001154 <SetPWM>
}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}

080016ec <WaitForClaw>:

void WaitForClaw()
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
	SetWheelSpeed(WHEEL_LEFT, WHEEL_SPEED_ZERO);
 80016f2:	218b      	movs	r1, #139	; 0x8b
 80016f4:	2002      	movs	r0, #2
 80016f6:	f7ff ff11 	bl	800151c <SetWheelSpeed>
	SetWheelSpeed(WHEEL_RIGHT, WHEEL_SPEED_ZERO);
 80016fa:	218b      	movs	r1, #139	; 0x8b
 80016fc:	2003      	movs	r0, #3
 80016fe:	f7ff ff0d 	bl	800151c <SetWheelSpeed>
	for (int i = 0; i < CLAW_WAIT_TIME; i++);
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	e002      	b.n	800170e <WaitForClaw+0x22>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3301      	adds	r3, #1
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a03      	ldr	r2, [pc, #12]	; (8001720 <WaitForClaw+0x34>)
 8001712:	4293      	cmp	r3, r2
 8001714:	ddf8      	ble.n	8001708 <WaitForClaw+0x1c>
}
 8001716:	bf00      	nop
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	00030d3f 	.word	0x00030d3f

08001724 <ReturnBall>:

// Routine for returning the ball
void ReturnBall()
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
	uint8_t speed = WHEEL_SPEED_MAX;
 800172a:	2300      	movs	r3, #0
 800172c:	70fb      	strb	r3, [r7, #3]
	//speed /= 2;

	// roll the ball forward
	SetWheelSpeed(WHEEL_LEFT, speed);
 800172e:	78fb      	ldrb	r3, [r7, #3]
 8001730:	4619      	mov	r1, r3
 8001732:	2002      	movs	r0, #2
 8001734:	f7ff fef2 	bl	800151c <SetWheelSpeed>
	SetWheelSpeed(WHEEL_RIGHT, speed);
 8001738:	78fb      	ldrb	r3, [r7, #3]
 800173a:	4619      	mov	r1, r3
 800173c:	2003      	movs	r0, #3
 800173e:	f7ff feed 	bl	800151c <SetWheelSpeed>
	OpenClaw();
 8001742:	f7ff ffcb 	bl	80016dc <OpenClaw>
	for (int i = 0; i < PUSH_TIME; i++);
 8001746:	2300      	movs	r3, #0
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	e002      	b.n	8001752 <ReturnBall+0x2e>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3301      	adds	r3, #1
 8001750:	607b      	str	r3, [r7, #4]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a07      	ldr	r2, [pc, #28]	; (8001774 <ReturnBall+0x50>)
 8001756:	4293      	cmp	r3, r2
 8001758:	ddf8      	ble.n	800174c <ReturnBall+0x28>

	// stop for a little bit
	SetWheelSpeed(WHEEL_LEFT, WHEEL_SPEED_ZERO);
 800175a:	218b      	movs	r1, #139	; 0x8b
 800175c:	2002      	movs	r0, #2
 800175e:	f7ff fedd 	bl	800151c <SetWheelSpeed>
	SetWheelSpeed(WHEEL_RIGHT, WHEEL_SPEED_ZERO);
 8001762:	218b      	movs	r1, #139	; 0x8b
 8001764:	2003      	movs	r0, #3
 8001766:	f7ff fed9 	bl	800151c <SetWheelSpeed>
	speed = WHEEL_SPEED_FULL;
	SetWheelSpeed(WHEEL_LEFT, WHEEL_SPEED_ZERO);
	SetWheelSpeed(WHEEL_RIGHT, speed);
	for (int i = 0; i < PUSH_TIME * 2; i++);
	//*/
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	00030d3f 	.word	0x00030d3f

08001778 <UpdateClaw>:

// Update the claw
void UpdateClaw()
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
	switch (currentState)
 800177c:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <UpdateClaw+0x74>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b02      	cmp	r3, #2
 8001782:	d012      	beq.n	80017aa <UpdateClaw+0x32>
 8001784:	2b02      	cmp	r3, #2
 8001786:	dc2f      	bgt.n	80017e8 <UpdateClaw+0x70>
 8001788:	2b00      	cmp	r3, #0
 800178a:	d02a      	beq.n	80017e2 <UpdateClaw+0x6a>
 800178c:	2b01      	cmp	r3, #1
 800178e:	d12b      	bne.n	80017e8 <UpdateClaw+0x70>
	{
	case STATE_FIND_BALL:
		return; // Claw shouldn't need to do anything here
	case STATE_GRAB_BALL:
    // if IR sensor detects ball
		if (CheckIR())
 8001790:	f7ff ff42 	bl	8001618 <CheckIR>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d025      	beq.n	80017e6 <UpdateClaw+0x6e>
		{
			CloseClaw();
 800179a:	f7ff ff97 	bl	80016cc <CloseClaw>
			WaitForClaw();
 800179e:	f7ff ffa5 	bl	80016ec <WaitForClaw>
			UpdateState(STATE_RETURN_BALL);
 80017a2:	2002      	movs	r0, #2
 80017a4:	f7ff fd0c 	bl	80011c0 <UpdateState>
		}
		break;
 80017a8:	e01d      	b.n	80017e6 <UpdateClaw+0x6e>
	case STATE_RETURN_BALL:
		if (runningAverage >= MIN_RETURN_X &&
 80017aa:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <UpdateClaw+0x78>)
 80017ac:	edd3 7a00 	vldr	s15, [r3]
 80017b0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80017f4 <UpdateClaw+0x7c>
 80017b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017bc:	da00      	bge.n	80017c0 <UpdateClaw+0x48>
			runningAverage <= MAX_RETURN_X)
		{
			ReturnBall();
			UpdateState(STATE_FIND_BALL);
		}
		break;
 80017be:	e013      	b.n	80017e8 <UpdateClaw+0x70>
			runningAverage <= MAX_RETURN_X)
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <UpdateClaw+0x78>)
 80017c2:	edd3 7a00 	vldr	s15, [r3]
		if (runningAverage >= MIN_RETURN_X &&
 80017c6:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80017f8 <UpdateClaw+0x80>
 80017ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d2:	d900      	bls.n	80017d6 <UpdateClaw+0x5e>
		break;
 80017d4:	e008      	b.n	80017e8 <UpdateClaw+0x70>
			ReturnBall();
 80017d6:	f7ff ffa5 	bl	8001724 <ReturnBall>
			UpdateState(STATE_FIND_BALL);
 80017da:	2000      	movs	r0, #0
 80017dc:	f7ff fcf0 	bl	80011c0 <UpdateState>
		break;
 80017e0:	e002      	b.n	80017e8 <UpdateClaw+0x70>
		return; // Claw shouldn't need to do anything here
 80017e2:	bf00      	nop
 80017e4:	e000      	b.n	80017e8 <UpdateClaw+0x70>
		break;
 80017e6:	bf00      	nop
	}
}
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000000 	.word	0x20000000
 80017f0:	200004ac 	.word	0x200004ac
 80017f4:	430c0000 	.word	0x430c0000
 80017f8:	43340000 	.word	0x43340000

080017fc <WheelsInit>:

// Initializes the timers for the wheels
void WheelsInit()
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001800:	2108      	movs	r1, #8
 8001802:	4808      	ldr	r0, [pc, #32]	; (8001824 <WheelsInit+0x28>)
 8001804:	f004 fcf4 	bl	80061f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001808:	2108      	movs	r1, #8
 800180a:	4807      	ldr	r0, [pc, #28]	; (8001828 <WheelsInit+0x2c>)
 800180c:	f004 fcf0 	bl	80061f0 <HAL_TIM_PWM_Start>
	SetWheelSpeed(WHEEL_LEFT, WHEEL_SPEED_ZERO);
 8001810:	218b      	movs	r1, #139	; 0x8b
 8001812:	2002      	movs	r0, #2
 8001814:	f7ff fe82 	bl	800151c <SetWheelSpeed>
	SetWheelSpeed(WHEEL_RIGHT, WHEEL_SPEED_ZERO);
 8001818:	218b      	movs	r1, #139	; 0x8b
 800181a:	2003      	movs	r0, #3
 800181c:	f7ff fe7e 	bl	800151c <SetWheelSpeed>
}
 8001820:	bf00      	nop
 8001822:	bd80      	pop	{r7, pc}
 8001824:	2000035c 	.word	0x2000035c
 8001828:	200003a8 	.word	0x200003a8

0800182c <ClawInit>:

// Initializes the timer for the claw
void ClawInit()
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001830:	2108      	movs	r1, #8
 8001832:	4803      	ldr	r0, [pc, #12]	; (8001840 <ClawInit+0x14>)
 8001834:	f004 fcdc 	bl	80061f0 <HAL_TIM_PWM_Start>
	OpenClaw();
 8001838:	f7ff ff50 	bl	80016dc <OpenClaw>
}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}
 8001840:	200003f4 	.word	0x200003f4

08001844 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001848:	f000 ff81 	bl	800274e <HAL_Init>

  /* USER CODE BEGIN Init */
	pixy_init();
 800184c:	f7ff fc74 	bl	8001138 <pixy_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001850:	f000 f842 	bl	80018d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001854:	f000 fb30 	bl	8001eb8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001858:	f000 f934 	bl	8001ac4 <MX_SPI1_Init>
  MX_LPUART1_UART_Init();
 800185c:	f000 f8e6 	bl	8001a2c <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8001860:	f000 f880 	bl	8001964 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001864:	f000 f96c 	bl	8001b40 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001868:	f000 f9e0 	bl	8001c2c <MX_TIM3_Init>
  MX_TIM4_Init();
 800186c:	f000 fa54 	bl	8001d18 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001870:	f000 fac8 	bl	8001e04 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
	WheelsInit();
 8001874:	f7ff ffc2 	bl	80017fc <WheelsInit>
	ClawInit();
 8001878:	f7ff ffd8 	bl	800182c <ClawInit>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800187c:	2201      	movs	r2, #1
 800187e:	2102      	movs	r1, #2
 8001880:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001884:	f002 fb10 	bl	8003ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8001888:	2201      	movs	r2, #1
 800188a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800188e:	480e      	ldr	r0, [pc, #56]	; (80018c8 <main+0x84>)
 8001890:	f002 fb0a 	bl	8003ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_SET);
 8001894:	2201      	movs	r2, #1
 8001896:	2102      	movs	r1, #2
 8001898:	480c      	ldr	r0, [pc, #48]	; (80018cc <main+0x88>)
 800189a:	f002 fb05 	bl	8003ea8 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 800189e:	2108      	movs	r1, #8
 80018a0:	480b      	ldr	r0, [pc, #44]	; (80018d0 <main+0x8c>)
 80018a2:	f004 fca5 	bl	80061f0 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		UpdateHead();
 80018a6:	f7ff fcab 	bl	8001200 <UpdateHead>
		if (currentState == STATE_IDLE)
 80018aa:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <main+0x90>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	d102      	bne.n	80018b8 <main+0x74>
		{
			CheckButton();
 80018b2:	f7ff fc95 	bl	80011e0 <CheckButton>
 80018b6:	e7f6      	b.n	80018a6 <main+0x62>
		}
		else
		{
			UpdatePixyCam();
 80018b8:	f7ff fe18 	bl	80014ec <UpdatePixyCam>
			UpdateWheels();
 80018bc:	f7ff fe7e 	bl	80015bc <UpdateWheels>
			UpdateClaw();
 80018c0:	f7ff ff5a 	bl	8001778 <UpdateClaw>
		UpdateHead();
 80018c4:	e7ef      	b.n	80018a6 <main+0x62>
 80018c6:	bf00      	nop
 80018c8:	48001000 	.word	0x48001000
 80018cc:	48001800 	.word	0x48001800
 80018d0:	20000440 	.word	0x20000440
 80018d4:	20000000 	.word	0x20000000

080018d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b096      	sub	sp, #88	; 0x58
 80018dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	2244      	movs	r2, #68	; 0x44
 80018e4:	2100      	movs	r1, #0
 80018e6:	4618      	mov	r0, r3
 80018e8:	f006 faec 	bl	8007ec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018ec:	463b      	mov	r3, r7
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
 80018f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80018fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80018fe:	f002 fb0b 	bl	8003f18 <HAL_PWREx_ControlVoltageScaling>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001908:	f000 fbb2 	bl	8002070 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800190c:	2310      	movs	r3, #16
 800190e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001910:	2301      	movs	r3, #1
 8001912:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001918:	2360      	movs	r3, #96	; 0x60
 800191a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800191c:	2300      	movs	r3, #0
 800191e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	4618      	mov	r0, r3
 8001926:	f002 fbab 	bl	8004080 <HAL_RCC_OscConfig>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001930:	f000 fb9e 	bl	8002070 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001934:	230f      	movs	r3, #15
 8001936:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001938:	2300      	movs	r3, #0
 800193a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800193c:	2300      	movs	r3, #0
 800193e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001944:	2300      	movs	r3, #0
 8001946:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001948:	463b      	mov	r3, r7
 800194a:	2100      	movs	r1, #0
 800194c:	4618      	mov	r0, r3
 800194e:	f002 ffb1 	bl	80048b4 <HAL_RCC_ClockConfig>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001958:	f000 fb8a 	bl	8002070 <Error_Handler>
  }
}
 800195c:	bf00      	nop
 800195e:	3758      	adds	r7, #88	; 0x58
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800196a:	463b      	mov	r3, r7
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
 8001978:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800197a:	4b29      	ldr	r3, [pc, #164]	; (8001a20 <MX_ADC1_Init+0xbc>)
 800197c:	4a29      	ldr	r2, [pc, #164]	; (8001a24 <MX_ADC1_Init+0xc0>)
 800197e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8001980:	4b27      	ldr	r3, [pc, #156]	; (8001a20 <MX_ADC1_Init+0xbc>)
 8001982:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001986:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001988:	4b25      	ldr	r3, [pc, #148]	; (8001a20 <MX_ADC1_Init+0xbc>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800198e:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <MX_ADC1_Init+0xbc>)
 8001990:	2200      	movs	r2, #0
 8001992:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001994:	4b22      	ldr	r3, [pc, #136]	; (8001a20 <MX_ADC1_Init+0xbc>)
 8001996:	2200      	movs	r2, #0
 8001998:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800199a:	4b21      	ldr	r3, [pc, #132]	; (8001a20 <MX_ADC1_Init+0xbc>)
 800199c:	2204      	movs	r2, #4
 800199e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80019a0:	4b1f      	ldr	r3, [pc, #124]	; (8001a20 <MX_ADC1_Init+0xbc>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019a6:	4b1e      	ldr	r3, [pc, #120]	; (8001a20 <MX_ADC1_Init+0xbc>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80019ac:	4b1c      	ldr	r3, [pc, #112]	; (8001a20 <MX_ADC1_Init+0xbc>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019b2:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <MX_ADC1_Init+0xbc>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019ba:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <MX_ADC1_Init+0xbc>)
 80019bc:	2200      	movs	r2, #0
 80019be:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019c0:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <MX_ADC1_Init+0xbc>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80019c6:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <MX_ADC1_Init+0xbc>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80019ce:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <MX_ADC1_Init+0xbc>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <MX_ADC1_Init+0xbc>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019dc:	4810      	ldr	r0, [pc, #64]	; (8001a20 <MX_ADC1_Init+0xbc>)
 80019de:	f001 f905 	bl	8002bec <HAL_ADC_Init>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80019e8:	f000 fb42 	bl	8002070 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80019ec:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <MX_ADC1_Init+0xc4>)
 80019ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019f0:	2306      	movs	r3, #6
 80019f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80019f4:	2307      	movs	r3, #7
 80019f6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80019f8:	237f      	movs	r3, #127	; 0x7f
 80019fa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80019fc:	2304      	movs	r3, #4
 80019fe:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a04:	463b      	mov	r3, r7
 8001a06:	4619      	mov	r1, r3
 8001a08:	4805      	ldr	r0, [pc, #20]	; (8001a20 <MX_ADC1_Init+0xbc>)
 8001a0a:	f001 fb3b 	bl	8003084 <HAL_ADC_ConfigChannel>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001a14:	f000 fb2c 	bl	8002070 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a18:	bf00      	nop
 8001a1a:	3718      	adds	r7, #24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000200 	.word	0x20000200
 8001a24:	50040000 	.word	0x50040000
 8001a28:	04300002 	.word	0x04300002

08001a2c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001a30:	4b22      	ldr	r3, [pc, #136]	; (8001abc <MX_LPUART1_UART_Init+0x90>)
 8001a32:	4a23      	ldr	r2, [pc, #140]	; (8001ac0 <MX_LPUART1_UART_Init+0x94>)
 8001a34:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001a36:	4b21      	ldr	r3, [pc, #132]	; (8001abc <MX_LPUART1_UART_Init+0x90>)
 8001a38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a3c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a3e:	4b1f      	ldr	r3, [pc, #124]	; (8001abc <MX_LPUART1_UART_Init+0x90>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001a44:	4b1d      	ldr	r3, [pc, #116]	; (8001abc <MX_LPUART1_UART_Init+0x90>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001a4a:	4b1c      	ldr	r3, [pc, #112]	; (8001abc <MX_LPUART1_UART_Init+0x90>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001a50:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <MX_LPUART1_UART_Init+0x90>)
 8001a52:	220c      	movs	r2, #12
 8001a54:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a56:	4b19      	ldr	r3, [pc, #100]	; (8001abc <MX_LPUART1_UART_Init+0x90>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a5c:	4b17      	ldr	r3, [pc, #92]	; (8001abc <MX_LPUART1_UART_Init+0x90>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a62:	4b16      	ldr	r3, [pc, #88]	; (8001abc <MX_LPUART1_UART_Init+0x90>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a68:	4b14      	ldr	r3, [pc, #80]	; (8001abc <MX_LPUART1_UART_Init+0x90>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001a6e:	4b13      	ldr	r3, [pc, #76]	; (8001abc <MX_LPUART1_UART_Init+0x90>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001a74:	4811      	ldr	r0, [pc, #68]	; (8001abc <MX_LPUART1_UART_Init+0x90>)
 8001a76:	f005 fb57 	bl	8007128 <HAL_UART_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001a80:	f000 faf6 	bl	8002070 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a84:	2100      	movs	r1, #0
 8001a86:	480d      	ldr	r0, [pc, #52]	; (8001abc <MX_LPUART1_UART_Init+0x90>)
 8001a88:	f006 f920 	bl	8007ccc <HAL_UARTEx_SetTxFifoThreshold>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001a92:	f000 faed 	bl	8002070 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a96:	2100      	movs	r1, #0
 8001a98:	4808      	ldr	r0, [pc, #32]	; (8001abc <MX_LPUART1_UART_Init+0x90>)
 8001a9a:	f006 f955 	bl	8007d48 <HAL_UARTEx_SetRxFifoThreshold>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001aa4:	f000 fae4 	bl	8002070 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001aa8:	4804      	ldr	r0, [pc, #16]	; (8001abc <MX_LPUART1_UART_Init+0x90>)
 8001aaa:	f006 f8d6 	bl	8007c5a <HAL_UARTEx_DisableFifoMode>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001ab4:	f000 fadc 	bl	8002070 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001ab8:	bf00      	nop
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20000268 	.word	0x20000268
 8001ac0:	40008000 	.word	0x40008000

08001ac4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ac8:	4b1b      	ldr	r3, [pc, #108]	; (8001b38 <MX_SPI1_Init+0x74>)
 8001aca:	4a1c      	ldr	r2, [pc, #112]	; (8001b3c <MX_SPI1_Init+0x78>)
 8001acc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ace:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <MX_SPI1_Init+0x74>)
 8001ad0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ad4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ad6:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <MX_SPI1_Init+0x74>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001adc:	4b16      	ldr	r3, [pc, #88]	; (8001b38 <MX_SPI1_Init+0x74>)
 8001ade:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001ae2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ae4:	4b14      	ldr	r3, [pc, #80]	; (8001b38 <MX_SPI1_Init+0x74>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001aea:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <MX_SPI1_Init+0x74>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001af0:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <MX_SPI1_Init+0x74>)
 8001af2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001af6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001af8:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <MX_SPI1_Init+0x74>)
 8001afa:	2208      	movs	r2, #8
 8001afc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001afe:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <MX_SPI1_Init+0x74>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b04:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <MX_SPI1_Init+0x74>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b0a:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <MX_SPI1_Init+0x74>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001b10:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <MX_SPI1_Init+0x74>)
 8001b12:	2207      	movs	r2, #7
 8001b14:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b16:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <MX_SPI1_Init+0x74>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <MX_SPI1_Init+0x74>)
 8001b1e:	2208      	movs	r2, #8
 8001b20:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b22:	4805      	ldr	r0, [pc, #20]	; (8001b38 <MX_SPI1_Init+0x74>)
 8001b24:	f003 fe9c 	bl	8005860 <HAL_SPI_Init>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001b2e:	f000 fa9f 	bl	8002070 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	200002f8 	.word	0x200002f8
 8001b3c:	40013000 	.word	0x40013000

08001b40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08e      	sub	sp, #56	; 0x38
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	609a      	str	r2, [r3, #8]
 8001b52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b54:	f107 031c 	add.w	r3, r7, #28
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b60:	463b      	mov	r3, r7
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	605a      	str	r2, [r3, #4]
 8001b68:	609a      	str	r2, [r3, #8]
 8001b6a:	60da      	str	r2, [r3, #12]
 8001b6c:	611a      	str	r2, [r3, #16]
 8001b6e:	615a      	str	r2, [r3, #20]
 8001b70:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b72:	4b2d      	ldr	r3, [pc, #180]	; (8001c28 <MX_TIM2_Init+0xe8>)
 8001b74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b78:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b7a:	4b2b      	ldr	r3, [pc, #172]	; (8001c28 <MX_TIM2_Init+0xe8>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b80:	4b29      	ldr	r3, [pc, #164]	; (8001c28 <MX_TIM2_Init+0xe8>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 159;
 8001b86:	4b28      	ldr	r3, [pc, #160]	; (8001c28 <MX_TIM2_Init+0xe8>)
 8001b88:	229f      	movs	r2, #159	; 0x9f
 8001b8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b8c:	4b26      	ldr	r3, [pc, #152]	; (8001c28 <MX_TIM2_Init+0xe8>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b92:	4b25      	ldr	r3, [pc, #148]	; (8001c28 <MX_TIM2_Init+0xe8>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b98:	4823      	ldr	r0, [pc, #140]	; (8001c28 <MX_TIM2_Init+0xe8>)
 8001b9a:	f004 fa7b 	bl	8006094 <HAL_TIM_Base_Init>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001ba4:	f000 fa64 	bl	8002070 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	481c      	ldr	r0, [pc, #112]	; (8001c28 <MX_TIM2_Init+0xe8>)
 8001bb6:	f004 fd35 	bl	8006624 <HAL_TIM_ConfigClockSource>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001bc0:	f000 fa56 	bl	8002070 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001bc4:	4818      	ldr	r0, [pc, #96]	; (8001c28 <MX_TIM2_Init+0xe8>)
 8001bc6:	f004 fabc 	bl	8006142 <HAL_TIM_PWM_Init>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001bd0:	f000 fa4e 	bl	8002070 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bdc:	f107 031c 	add.w	r3, r7, #28
 8001be0:	4619      	mov	r1, r3
 8001be2:	4811      	ldr	r0, [pc, #68]	; (8001c28 <MX_TIM2_Init+0xe8>)
 8001be4:	f005 fa18 	bl	8007018 <HAL_TIMEx_MasterConfigSynchronization>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001bee:	f000 fa3f 	bl	8002070 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bf2:	2360      	movs	r3, #96	; 0x60
 8001bf4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 79;
 8001bf6:	234f      	movs	r3, #79	; 0x4f
 8001bf8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c02:	463b      	mov	r3, r7
 8001c04:	2208      	movs	r2, #8
 8001c06:	4619      	mov	r1, r3
 8001c08:	4807      	ldr	r0, [pc, #28]	; (8001c28 <MX_TIM2_Init+0xe8>)
 8001c0a:	f004 fbf7 	bl	80063fc <HAL_TIM_PWM_ConfigChannel>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001c14:	f000 fa2c 	bl	8002070 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c18:	4803      	ldr	r0, [pc, #12]	; (8001c28 <MX_TIM2_Init+0xe8>)
 8001c1a:	f000 fbc5 	bl	80023a8 <HAL_TIM_MspPostInit>

}
 8001c1e:	bf00      	nop
 8001c20:	3738      	adds	r7, #56	; 0x38
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	2000035c 	.word	0x2000035c

08001c2c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08e      	sub	sp, #56	; 0x38
 8001c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	605a      	str	r2, [r3, #4]
 8001c3c:	609a      	str	r2, [r3, #8]
 8001c3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c40:	f107 031c 	add.w	r3, r7, #28
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c4c:	463b      	mov	r3, r7
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	60da      	str	r2, [r3, #12]
 8001c58:	611a      	str	r2, [r3, #16]
 8001c5a:	615a      	str	r2, [r3, #20]
 8001c5c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c5e:	4b2c      	ldr	r3, [pc, #176]	; (8001d10 <MX_TIM3_Init+0xe4>)
 8001c60:	4a2c      	ldr	r2, [pc, #176]	; (8001d14 <MX_TIM3_Init+0xe8>)
 8001c62:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c64:	4b2a      	ldr	r3, [pc, #168]	; (8001d10 <MX_TIM3_Init+0xe4>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c6a:	4b29      	ldr	r3, [pc, #164]	; (8001d10 <MX_TIM3_Init+0xe4>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 159;
 8001c70:	4b27      	ldr	r3, [pc, #156]	; (8001d10 <MX_TIM3_Init+0xe4>)
 8001c72:	229f      	movs	r2, #159	; 0x9f
 8001c74:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c76:	4b26      	ldr	r3, [pc, #152]	; (8001d10 <MX_TIM3_Init+0xe4>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c7c:	4b24      	ldr	r3, [pc, #144]	; (8001d10 <MX_TIM3_Init+0xe4>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c82:	4823      	ldr	r0, [pc, #140]	; (8001d10 <MX_TIM3_Init+0xe4>)
 8001c84:	f004 fa06 	bl	8006094 <HAL_TIM_Base_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001c8e:	f000 f9ef 	bl	8002070 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c96:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	481c      	ldr	r0, [pc, #112]	; (8001d10 <MX_TIM3_Init+0xe4>)
 8001ca0:	f004 fcc0 	bl	8006624 <HAL_TIM_ConfigClockSource>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001caa:	f000 f9e1 	bl	8002070 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001cae:	4818      	ldr	r0, [pc, #96]	; (8001d10 <MX_TIM3_Init+0xe4>)
 8001cb0:	f004 fa47 	bl	8006142 <HAL_TIM_PWM_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001cba:	f000 f9d9 	bl	8002070 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cc6:	f107 031c 	add.w	r3, r7, #28
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4810      	ldr	r0, [pc, #64]	; (8001d10 <MX_TIM3_Init+0xe4>)
 8001cce:	f005 f9a3 	bl	8007018 <HAL_TIMEx_MasterConfigSynchronization>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001cd8:	f000 f9ca 	bl	8002070 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cdc:	2360      	movs	r3, #96	; 0x60
 8001cde:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 79;
 8001ce0:	234f      	movs	r3, #79	; 0x4f
 8001ce2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cec:	463b      	mov	r3, r7
 8001cee:	2208      	movs	r2, #8
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4807      	ldr	r0, [pc, #28]	; (8001d10 <MX_TIM3_Init+0xe4>)
 8001cf4:	f004 fb82 	bl	80063fc <HAL_TIM_PWM_ConfigChannel>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001cfe:	f000 f9b7 	bl	8002070 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d02:	4803      	ldr	r0, [pc, #12]	; (8001d10 <MX_TIM3_Init+0xe4>)
 8001d04:	f000 fb50 	bl	80023a8 <HAL_TIM_MspPostInit>

}
 8001d08:	bf00      	nop
 8001d0a:	3738      	adds	r7, #56	; 0x38
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	200003a8 	.word	0x200003a8
 8001d14:	40000400 	.word	0x40000400

08001d18 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08e      	sub	sp, #56	; 0x38
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]
 8001d28:	609a      	str	r2, [r3, #8]
 8001d2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d2c:	f107 031c 	add.w	r3, r7, #28
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d38:	463b      	mov	r3, r7
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
 8001d40:	609a      	str	r2, [r3, #8]
 8001d42:	60da      	str	r2, [r3, #12]
 8001d44:	611a      	str	r2, [r3, #16]
 8001d46:	615a      	str	r2, [r3, #20]
 8001d48:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d4a:	4b2c      	ldr	r3, [pc, #176]	; (8001dfc <MX_TIM4_Init+0xe4>)
 8001d4c:	4a2c      	ldr	r2, [pc, #176]	; (8001e00 <MX_TIM4_Init+0xe8>)
 8001d4e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 39;
 8001d50:	4b2a      	ldr	r3, [pc, #168]	; (8001dfc <MX_TIM4_Init+0xe4>)
 8001d52:	2227      	movs	r2, #39	; 0x27
 8001d54:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d56:	4b29      	ldr	r3, [pc, #164]	; (8001dfc <MX_TIM4_Init+0xe4>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 249;
 8001d5c:	4b27      	ldr	r3, [pc, #156]	; (8001dfc <MX_TIM4_Init+0xe4>)
 8001d5e:	22f9      	movs	r2, #249	; 0xf9
 8001d60:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d62:	4b26      	ldr	r3, [pc, #152]	; (8001dfc <MX_TIM4_Init+0xe4>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d68:	4b24      	ldr	r3, [pc, #144]	; (8001dfc <MX_TIM4_Init+0xe4>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d6e:	4823      	ldr	r0, [pc, #140]	; (8001dfc <MX_TIM4_Init+0xe4>)
 8001d70:	f004 f990 	bl	8006094 <HAL_TIM_Base_Init>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001d7a:	f000 f979 	bl	8002070 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d82:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d88:	4619      	mov	r1, r3
 8001d8a:	481c      	ldr	r0, [pc, #112]	; (8001dfc <MX_TIM4_Init+0xe4>)
 8001d8c:	f004 fc4a 	bl	8006624 <HAL_TIM_ConfigClockSource>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001d96:	f000 f96b 	bl	8002070 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d9a:	4818      	ldr	r0, [pc, #96]	; (8001dfc <MX_TIM4_Init+0xe4>)
 8001d9c:	f004 f9d1 	bl	8006142 <HAL_TIM_PWM_Init>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001da6:	f000 f963 	bl	8002070 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dae:	2300      	movs	r3, #0
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001db2:	f107 031c 	add.w	r3, r7, #28
 8001db6:	4619      	mov	r1, r3
 8001db8:	4810      	ldr	r0, [pc, #64]	; (8001dfc <MX_TIM4_Init+0xe4>)
 8001dba:	f005 f92d 	bl	8007018 <HAL_TIMEx_MasterConfigSynchronization>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001dc4:	f000 f954 	bl	8002070 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dc8:	2360      	movs	r3, #96	; 0x60
 8001dca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 79;
 8001dcc:	234f      	movs	r3, #79	; 0x4f
 8001dce:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001dd8:	463b      	mov	r3, r7
 8001dda:	2208      	movs	r2, #8
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4807      	ldr	r0, [pc, #28]	; (8001dfc <MX_TIM4_Init+0xe4>)
 8001de0:	f004 fb0c 	bl	80063fc <HAL_TIM_PWM_ConfigChannel>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001dea:	f000 f941 	bl	8002070 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001dee:	4803      	ldr	r0, [pc, #12]	; (8001dfc <MX_TIM4_Init+0xe4>)
 8001df0:	f000 fada 	bl	80023a8 <HAL_TIM_MspPostInit>

}
 8001df4:	bf00      	nop
 8001df6:	3738      	adds	r7, #56	; 0x38
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	200003f4 	.word	0x200003f4
 8001e00:	40000800 	.word	0x40000800

08001e04 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08a      	sub	sp, #40	; 0x28
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e0a:	f107 031c 	add.w	r3, r7, #28
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]
 8001e14:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e16:	463b      	mov	r3, r7
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
 8001e24:	615a      	str	r2, [r3, #20]
 8001e26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001e28:	4b21      	ldr	r3, [pc, #132]	; (8001eb0 <MX_TIM5_Init+0xac>)
 8001e2a:	4a22      	ldr	r2, [pc, #136]	; (8001eb4 <MX_TIM5_Init+0xb0>)
 8001e2c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 39;
 8001e2e:	4b20      	ldr	r3, [pc, #128]	; (8001eb0 <MX_TIM5_Init+0xac>)
 8001e30:	2227      	movs	r2, #39	; 0x27
 8001e32:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e34:	4b1e      	ldr	r3, [pc, #120]	; (8001eb0 <MX_TIM5_Init+0xac>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1999;
 8001e3a:	4b1d      	ldr	r3, [pc, #116]	; (8001eb0 <MX_TIM5_Init+0xac>)
 8001e3c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001e40:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e42:	4b1b      	ldr	r3, [pc, #108]	; (8001eb0 <MX_TIM5_Init+0xac>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e48:	4b19      	ldr	r3, [pc, #100]	; (8001eb0 <MX_TIM5_Init+0xac>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001e4e:	4818      	ldr	r0, [pc, #96]	; (8001eb0 <MX_TIM5_Init+0xac>)
 8001e50:	f004 f977 	bl	8006142 <HAL_TIM_PWM_Init>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8001e5a:	f000 f909 	bl	8002070 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e62:	2300      	movs	r3, #0
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e66:	f107 031c 	add.w	r3, r7, #28
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4810      	ldr	r0, [pc, #64]	; (8001eb0 <MX_TIM5_Init+0xac>)
 8001e6e:	f005 f8d3 	bl	8007018 <HAL_TIMEx_MasterConfigSynchronization>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001e78:	f000 f8fa 	bl	8002070 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e7c:	2360      	movs	r3, #96	; 0x60
 8001e7e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8001e80:	230a      	movs	r3, #10
 8001e82:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e84:	2300      	movs	r3, #0
 8001e86:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e8c:	463b      	mov	r3, r7
 8001e8e:	2208      	movs	r2, #8
 8001e90:	4619      	mov	r1, r3
 8001e92:	4807      	ldr	r0, [pc, #28]	; (8001eb0 <MX_TIM5_Init+0xac>)
 8001e94:	f004 fab2 	bl	80063fc <HAL_TIM_PWM_ConfigChannel>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001e9e:	f000 f8e7 	bl	8002070 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001ea2:	4803      	ldr	r0, [pc, #12]	; (8001eb0 <MX_TIM5_Init+0xac>)
 8001ea4:	f000 fa80 	bl	80023a8 <HAL_TIM_MspPostInit>

}
 8001ea8:	bf00      	nop
 8001eaa:	3728      	adds	r7, #40	; 0x28
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20000440 	.word	0x20000440
 8001eb4:	40000c00 	.word	0x40000c00

08001eb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08c      	sub	sp, #48	; 0x30
 8001ebc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebe:	f107 031c 	add.w	r3, r7, #28
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	605a      	str	r2, [r3, #4]
 8001ec8:	609a      	str	r2, [r3, #8]
 8001eca:	60da      	str	r2, [r3, #12]
 8001ecc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ece:	4b5b      	ldr	r3, [pc, #364]	; (800203c <MX_GPIO_Init+0x184>)
 8001ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed2:	4a5a      	ldr	r2, [pc, #360]	; (800203c <MX_GPIO_Init+0x184>)
 8001ed4:	f043 0320 	orr.w	r3, r3, #32
 8001ed8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eda:	4b58      	ldr	r3, [pc, #352]	; (800203c <MX_GPIO_Init+0x184>)
 8001edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ede:	f003 0320 	and.w	r3, r3, #32
 8001ee2:	61bb      	str	r3, [r7, #24]
 8001ee4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee6:	4b55      	ldr	r3, [pc, #340]	; (800203c <MX_GPIO_Init+0x184>)
 8001ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eea:	4a54      	ldr	r2, [pc, #336]	; (800203c <MX_GPIO_Init+0x184>)
 8001eec:	f043 0304 	orr.w	r3, r3, #4
 8001ef0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ef2:	4b52      	ldr	r3, [pc, #328]	; (800203c <MX_GPIO_Init+0x184>)
 8001ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	617b      	str	r3, [r7, #20]
 8001efc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efe:	4b4f      	ldr	r3, [pc, #316]	; (800203c <MX_GPIO_Init+0x184>)
 8001f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f02:	4a4e      	ldr	r2, [pc, #312]	; (800203c <MX_GPIO_Init+0x184>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f0a:	4b4c      	ldr	r3, [pc, #304]	; (800203c <MX_GPIO_Init+0x184>)
 8001f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	613b      	str	r3, [r7, #16]
 8001f14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f16:	4b49      	ldr	r3, [pc, #292]	; (800203c <MX_GPIO_Init+0x184>)
 8001f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1a:	4a48      	ldr	r2, [pc, #288]	; (800203c <MX_GPIO_Init+0x184>)
 8001f1c:	f043 0302 	orr.w	r3, r3, #2
 8001f20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f22:	4b46      	ldr	r3, [pc, #280]	; (800203c <MX_GPIO_Init+0x184>)
 8001f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f2e:	4b43      	ldr	r3, [pc, #268]	; (800203c <MX_GPIO_Init+0x184>)
 8001f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f32:	4a42      	ldr	r2, [pc, #264]	; (800203c <MX_GPIO_Init+0x184>)
 8001f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f3a:	4b40      	ldr	r3, [pc, #256]	; (800203c <MX_GPIO_Init+0x184>)
 8001f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f46:	4b3d      	ldr	r3, [pc, #244]	; (800203c <MX_GPIO_Init+0x184>)
 8001f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4a:	4a3c      	ldr	r2, [pc, #240]	; (800203c <MX_GPIO_Init+0x184>)
 8001f4c:	f043 0310 	orr.w	r3, r3, #16
 8001f50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f52:	4b3a      	ldr	r3, [pc, #232]	; (800203c <MX_GPIO_Init+0x184>)
 8001f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f56:	f003 0310 	and.w	r3, r3, #16
 8001f5a:	607b      	str	r3, [r7, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f5e:	4b37      	ldr	r3, [pc, #220]	; (800203c <MX_GPIO_Init+0x184>)
 8001f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f62:	4a36      	ldr	r2, [pc, #216]	; (800203c <MX_GPIO_Init+0x184>)
 8001f64:	f043 0308 	orr.w	r3, r3, #8
 8001f68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f6a:	4b34      	ldr	r3, [pc, #208]	; (800203c <MX_GPIO_Init+0x184>)
 8001f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6e:	f003 0308 	and.w	r3, r3, #8
 8001f72:	603b      	str	r3, [r7, #0]
 8001f74:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8001f76:	f002 f873 	bl	8004060 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2102      	movs	r1, #2
 8001f7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f82:	f001 ff91 	bl	8003ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 8001f86:	2200      	movs	r2, #0
 8001f88:	2102      	movs	r1, #2
 8001f8a:	482d      	ldr	r0, [pc, #180]	; (8002040 <MX_GPIO_Init+0x188>)
 8001f8c:	f001 ff8c 	bl	8003ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8001f90:	2200      	movs	r2, #0
 8001f92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f96:	482b      	ldr	r0, [pc, #172]	; (8002044 <MX_GPIO_Init+0x18c>)
 8001f98:	f001 ff86 	bl	8003ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	2140      	movs	r1, #64	; 0x40
 8001fa0:	4829      	ldr	r0, [pc, #164]	; (8002048 <MX_GPIO_Init+0x190>)
 8001fa2:	f001 ff81 	bl	8003ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001faa:	2301      	movs	r3, #1
 8001fac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb6:	f107 031c 	add.w	r3, r7, #28
 8001fba:	4619      	mov	r1, r3
 8001fbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fc0:	f001 fdc8 	bl	8003b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fd0:	f107 031c 	add.w	r3, r7, #28
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	481a      	ldr	r0, [pc, #104]	; (8002040 <MX_GPIO_Init+0x188>)
 8001fd8:	f001 fdbc 	bl	8003b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fec:	f107 031c 	add.w	r3, r7, #28
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4813      	ldr	r0, [pc, #76]	; (8002040 <MX_GPIO_Init+0x188>)
 8001ff4:	f001 fdae 	bl	8003b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ff8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ffc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ffe:	2301      	movs	r3, #1
 8002000:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002006:	2300      	movs	r3, #0
 8002008:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800200a:	f107 031c 	add.w	r3, r7, #28
 800200e:	4619      	mov	r1, r3
 8002010:	480c      	ldr	r0, [pc, #48]	; (8002044 <MX_GPIO_Init+0x18c>)
 8002012:	f001 fd9f 	bl	8003b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002016:	2340      	movs	r3, #64	; 0x40
 8002018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800201a:	2301      	movs	r3, #1
 800201c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002022:	2300      	movs	r3, #0
 8002024:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002026:	f107 031c 	add.w	r3, r7, #28
 800202a:	4619      	mov	r1, r3
 800202c:	4806      	ldr	r0, [pc, #24]	; (8002048 <MX_GPIO_Init+0x190>)
 800202e:	f001 fd91 	bl	8003b54 <HAL_GPIO_Init>

}
 8002032:	bf00      	nop
 8002034:	3730      	adds	r7, #48	; 0x30
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40021000 	.word	0x40021000
 8002040:	48001800 	.word	0x48001800
 8002044:	48001000 	.word	0x48001000
 8002048:	48000400 	.word	0x48000400

0800204c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)&ch, 1, 0xFFFF);
 8002054:	1d39      	adds	r1, r7, #4
 8002056:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800205a:	2201      	movs	r2, #1
 800205c:	4803      	ldr	r0, [pc, #12]	; (800206c <__io_putchar+0x20>)
 800205e:	f005 f8b3 	bl	80071c8 <HAL_UART_Transmit>
	return ch;
 8002062:	687b      	ldr	r3, [r7, #4]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20000268 	.word	0x20000268

08002070 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002074:	b672      	cpsid	i
}
 8002076:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002078:	e7fe      	b.n	8002078 <Error_Handler+0x8>
	...

0800207c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002082:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <HAL_MspInit+0x44>)
 8002084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002086:	4a0e      	ldr	r2, [pc, #56]	; (80020c0 <HAL_MspInit+0x44>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	6613      	str	r3, [r2, #96]	; 0x60
 800208e:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <HAL_MspInit+0x44>)
 8002090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	607b      	str	r3, [r7, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800209a:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <HAL_MspInit+0x44>)
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209e:	4a08      	ldr	r2, [pc, #32]	; (80020c0 <HAL_MspInit+0x44>)
 80020a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a4:	6593      	str	r3, [r2, #88]	; 0x58
 80020a6:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <HAL_MspInit+0x44>)
 80020a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ae:	603b      	str	r3, [r7, #0]
 80020b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	40021000 	.word	0x40021000

080020c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b0ae      	sub	sp, #184	; 0xb8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	609a      	str	r2, [r3, #8]
 80020d8:	60da      	str	r2, [r3, #12]
 80020da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020dc:	f107 0310 	add.w	r3, r7, #16
 80020e0:	2294      	movs	r2, #148	; 0x94
 80020e2:	2100      	movs	r1, #0
 80020e4:	4618      	mov	r0, r3
 80020e6:	f005 feed 	bl	8007ec4 <memset>
  if(hadc->Instance==ADC1)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a27      	ldr	r2, [pc, #156]	; (800218c <HAL_ADC_MspInit+0xc8>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d146      	bne.n	8002182 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80020f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020f8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80020fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80020fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002102:	2301      	movs	r3, #1
 8002104:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002106:	2301      	movs	r3, #1
 8002108:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800210a:	2310      	movs	r3, #16
 800210c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800210e:	2302      	movs	r3, #2
 8002110:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002112:	2302      	movs	r3, #2
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002116:	2302      	movs	r3, #2
 8002118:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800211a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800211e:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002120:	f107 0310 	add.w	r3, r7, #16
 8002124:	4618      	mov	r0, r3
 8002126:	f002 fe83 	bl	8004e30 <HAL_RCCEx_PeriphCLKConfig>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8002130:	f7ff ff9e 	bl	8002070 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002134:	4b16      	ldr	r3, [pc, #88]	; (8002190 <HAL_ADC_MspInit+0xcc>)
 8002136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002138:	4a15      	ldr	r2, [pc, #84]	; (8002190 <HAL_ADC_MspInit+0xcc>)
 800213a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800213e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002140:	4b13      	ldr	r3, [pc, #76]	; (8002190 <HAL_ADC_MspInit+0xcc>)
 8002142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002144:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800214c:	4b10      	ldr	r3, [pc, #64]	; (8002190 <HAL_ADC_MspInit+0xcc>)
 800214e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002150:	4a0f      	ldr	r2, [pc, #60]	; (8002190 <HAL_ADC_MspInit+0xcc>)
 8002152:	f043 0304 	orr.w	r3, r3, #4
 8002156:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002158:	4b0d      	ldr	r3, [pc, #52]	; (8002190 <HAL_ADC_MspInit+0xcc>)
 800215a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002164:	2301      	movs	r3, #1
 8002166:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800216a:	230b      	movs	r3, #11
 800216c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002170:	2300      	movs	r3, #0
 8002172:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002176:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800217a:	4619      	mov	r1, r3
 800217c:	4805      	ldr	r0, [pc, #20]	; (8002194 <HAL_ADC_MspInit+0xd0>)
 800217e:	f001 fce9 	bl	8003b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002182:	bf00      	nop
 8002184:	37b8      	adds	r7, #184	; 0xb8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	50040000 	.word	0x50040000
 8002190:	40021000 	.word	0x40021000
 8002194:	48000800 	.word	0x48000800

08002198 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b0ae      	sub	sp, #184	; 0xb8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021b0:	f107 0310 	add.w	r3, r7, #16
 80021b4:	2294      	movs	r2, #148	; 0x94
 80021b6:	2100      	movs	r1, #0
 80021b8:	4618      	mov	r0, r3
 80021ba:	f005 fe83 	bl	8007ec4 <memset>
  if(huart->Instance==LPUART1)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a22      	ldr	r2, [pc, #136]	; (800224c <HAL_UART_MspInit+0xb4>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d13d      	bne.n	8002244 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80021c8:	2320      	movs	r3, #32
 80021ca:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80021cc:	2300      	movs	r3, #0
 80021ce:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021d0:	f107 0310 	add.w	r3, r7, #16
 80021d4:	4618      	mov	r0, r3
 80021d6:	f002 fe2b 	bl	8004e30 <HAL_RCCEx_PeriphCLKConfig>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021e0:	f7ff ff46 	bl	8002070 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80021e4:	4b1a      	ldr	r3, [pc, #104]	; (8002250 <HAL_UART_MspInit+0xb8>)
 80021e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e8:	4a19      	ldr	r2, [pc, #100]	; (8002250 <HAL_UART_MspInit+0xb8>)
 80021ea:	f043 0301 	orr.w	r3, r3, #1
 80021ee:	65d3      	str	r3, [r2, #92]	; 0x5c
 80021f0:	4b17      	ldr	r3, [pc, #92]	; (8002250 <HAL_UART_MspInit+0xb8>)
 80021f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80021fc:	4b14      	ldr	r3, [pc, #80]	; (8002250 <HAL_UART_MspInit+0xb8>)
 80021fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002200:	4a13      	ldr	r2, [pc, #76]	; (8002250 <HAL_UART_MspInit+0xb8>)
 8002202:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002206:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002208:	4b11      	ldr	r3, [pc, #68]	; (8002250 <HAL_UART_MspInit+0xb8>)
 800220a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800220c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8002214:	f001 ff24 	bl	8004060 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002218:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800221c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002220:	2302      	movs	r3, #2
 8002222:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222c:	2303      	movs	r3, #3
 800222e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002232:	2308      	movs	r3, #8
 8002234:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002238:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800223c:	4619      	mov	r1, r3
 800223e:	4805      	ldr	r0, [pc, #20]	; (8002254 <HAL_UART_MspInit+0xbc>)
 8002240:	f001 fc88 	bl	8003b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002244:	bf00      	nop
 8002246:	37b8      	adds	r7, #184	; 0xb8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40008000 	.word	0x40008000
 8002250:	40021000 	.word	0x40021000
 8002254:	48001800 	.word	0x48001800

08002258 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b08a      	sub	sp, #40	; 0x28
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002260:	f107 0314 	add.w	r3, r7, #20
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	60da      	str	r2, [r3, #12]
 800226e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a17      	ldr	r2, [pc, #92]	; (80022d4 <HAL_SPI_MspInit+0x7c>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d128      	bne.n	80022cc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800227a:	4b17      	ldr	r3, [pc, #92]	; (80022d8 <HAL_SPI_MspInit+0x80>)
 800227c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800227e:	4a16      	ldr	r2, [pc, #88]	; (80022d8 <HAL_SPI_MspInit+0x80>)
 8002280:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002284:	6613      	str	r3, [r2, #96]	; 0x60
 8002286:	4b14      	ldr	r3, [pc, #80]	; (80022d8 <HAL_SPI_MspInit+0x80>)
 8002288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800228a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800228e:	613b      	str	r3, [r7, #16]
 8002290:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002292:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <HAL_SPI_MspInit+0x80>)
 8002294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002296:	4a10      	ldr	r2, [pc, #64]	; (80022d8 <HAL_SPI_MspInit+0x80>)
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800229e:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <HAL_SPI_MspInit+0x80>)
 80022a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80022aa:	23e0      	movs	r3, #224	; 0xe0
 80022ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ae:	2302      	movs	r3, #2
 80022b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b6:	2303      	movs	r3, #3
 80022b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022ba:	2305      	movs	r3, #5
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022be:	f107 0314 	add.w	r3, r7, #20
 80022c2:	4619      	mov	r1, r3
 80022c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022c8:	f001 fc44 	bl	8003b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80022cc:	bf00      	nop
 80022ce:	3728      	adds	r7, #40	; 0x28
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40013000 	.word	0x40013000
 80022d8:	40021000 	.word	0x40021000

080022dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022dc:	b480      	push	{r7}
 80022de:	b087      	sub	sp, #28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ec:	d10c      	bne.n	8002308 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022ee:	4b1b      	ldr	r3, [pc, #108]	; (800235c <HAL_TIM_Base_MspInit+0x80>)
 80022f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f2:	4a1a      	ldr	r2, [pc, #104]	; (800235c <HAL_TIM_Base_MspInit+0x80>)
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	6593      	str	r3, [r2, #88]	; 0x58
 80022fa:	4b18      	ldr	r3, [pc, #96]	; (800235c <HAL_TIM_Base_MspInit+0x80>)
 80022fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002306:	e022      	b.n	800234e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a14      	ldr	r2, [pc, #80]	; (8002360 <HAL_TIM_Base_MspInit+0x84>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d10c      	bne.n	800232c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002312:	4b12      	ldr	r3, [pc, #72]	; (800235c <HAL_TIM_Base_MspInit+0x80>)
 8002314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002316:	4a11      	ldr	r2, [pc, #68]	; (800235c <HAL_TIM_Base_MspInit+0x80>)
 8002318:	f043 0302 	orr.w	r3, r3, #2
 800231c:	6593      	str	r3, [r2, #88]	; 0x58
 800231e:	4b0f      	ldr	r3, [pc, #60]	; (800235c <HAL_TIM_Base_MspInit+0x80>)
 8002320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	613b      	str	r3, [r7, #16]
 8002328:	693b      	ldr	r3, [r7, #16]
}
 800232a:	e010      	b.n	800234e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a0c      	ldr	r2, [pc, #48]	; (8002364 <HAL_TIM_Base_MspInit+0x88>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d10b      	bne.n	800234e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002336:	4b09      	ldr	r3, [pc, #36]	; (800235c <HAL_TIM_Base_MspInit+0x80>)
 8002338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233a:	4a08      	ldr	r2, [pc, #32]	; (800235c <HAL_TIM_Base_MspInit+0x80>)
 800233c:	f043 0304 	orr.w	r3, r3, #4
 8002340:	6593      	str	r3, [r2, #88]	; 0x58
 8002342:	4b06      	ldr	r3, [pc, #24]	; (800235c <HAL_TIM_Base_MspInit+0x80>)
 8002344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002346:	f003 0304 	and.w	r3, r3, #4
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	68fb      	ldr	r3, [r7, #12]
}
 800234e:	bf00      	nop
 8002350:	371c      	adds	r7, #28
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	40021000 	.word	0x40021000
 8002360:	40000400 	.word	0x40000400
 8002364:	40000800 	.word	0x40000800

08002368 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a0a      	ldr	r2, [pc, #40]	; (80023a0 <HAL_TIM_PWM_MspInit+0x38>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d10b      	bne.n	8002392 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800237a:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <HAL_TIM_PWM_MspInit+0x3c>)
 800237c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237e:	4a09      	ldr	r2, [pc, #36]	; (80023a4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002380:	f043 0308 	orr.w	r3, r3, #8
 8002384:	6593      	str	r3, [r2, #88]	; 0x58
 8002386:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002392:	bf00      	nop
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	40000c00 	.word	0x40000c00
 80023a4:	40021000 	.word	0x40021000

080023a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08c      	sub	sp, #48	; 0x30
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b0:	f107 031c 	add.w	r3, r7, #28
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	605a      	str	r2, [r3, #4]
 80023ba:	609a      	str	r2, [r3, #8]
 80023bc:	60da      	str	r2, [r3, #12]
 80023be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023c8:	d11d      	bne.n	8002406 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ca:	4b44      	ldr	r3, [pc, #272]	; (80024dc <HAL_TIM_MspPostInit+0x134>)
 80023cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ce:	4a43      	ldr	r2, [pc, #268]	; (80024dc <HAL_TIM_MspPostInit+0x134>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023d6:	4b41      	ldr	r3, [pc, #260]	; (80024dc <HAL_TIM_MspPostInit+0x134>)
 80023d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	61bb      	str	r3, [r7, #24]
 80023e0:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023e2:	2304      	movs	r3, #4
 80023e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e6:	2302      	movs	r3, #2
 80023e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ee:	2300      	movs	r3, #0
 80023f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023f2:	2301      	movs	r3, #1
 80023f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f6:	f107 031c 	add.w	r3, r7, #28
 80023fa:	4619      	mov	r1, r3
 80023fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002400:	f001 fba8 	bl	8003b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002404:	e066      	b.n	80024d4 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM3)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a35      	ldr	r2, [pc, #212]	; (80024e0 <HAL_TIM_MspPostInit+0x138>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d11c      	bne.n	800244a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002410:	4b32      	ldr	r3, [pc, #200]	; (80024dc <HAL_TIM_MspPostInit+0x134>)
 8002412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002414:	4a31      	ldr	r2, [pc, #196]	; (80024dc <HAL_TIM_MspPostInit+0x134>)
 8002416:	f043 0302 	orr.w	r3, r3, #2
 800241a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800241c:	4b2f      	ldr	r3, [pc, #188]	; (80024dc <HAL_TIM_MspPostInit+0x134>)
 800241e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002428:	2301      	movs	r3, #1
 800242a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242c:	2302      	movs	r3, #2
 800242e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002430:	2300      	movs	r3, #0
 8002432:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002434:	2300      	movs	r3, #0
 8002436:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002438:	2302      	movs	r3, #2
 800243a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800243c:	f107 031c 	add.w	r3, r7, #28
 8002440:	4619      	mov	r1, r3
 8002442:	4828      	ldr	r0, [pc, #160]	; (80024e4 <HAL_TIM_MspPostInit+0x13c>)
 8002444:	f001 fb86 	bl	8003b54 <HAL_GPIO_Init>
}
 8002448:	e044      	b.n	80024d4 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM4)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a26      	ldr	r2, [pc, #152]	; (80024e8 <HAL_TIM_MspPostInit+0x140>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d11d      	bne.n	8002490 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002454:	4b21      	ldr	r3, [pc, #132]	; (80024dc <HAL_TIM_MspPostInit+0x134>)
 8002456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002458:	4a20      	ldr	r2, [pc, #128]	; (80024dc <HAL_TIM_MspPostInit+0x134>)
 800245a:	f043 0308 	orr.w	r3, r3, #8
 800245e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002460:	4b1e      	ldr	r3, [pc, #120]	; (80024dc <HAL_TIM_MspPostInit+0x134>)
 8002462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002464:	f003 0308 	and.w	r3, r3, #8
 8002468:	613b      	str	r3, [r7, #16]
 800246a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800246c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002472:	2302      	movs	r3, #2
 8002474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002476:	2300      	movs	r3, #0
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247a:	2300      	movs	r3, #0
 800247c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800247e:	2302      	movs	r3, #2
 8002480:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002482:	f107 031c 	add.w	r3, r7, #28
 8002486:	4619      	mov	r1, r3
 8002488:	4818      	ldr	r0, [pc, #96]	; (80024ec <HAL_TIM_MspPostInit+0x144>)
 800248a:	f001 fb63 	bl	8003b54 <HAL_GPIO_Init>
}
 800248e:	e021      	b.n	80024d4 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM5)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a16      	ldr	r2, [pc, #88]	; (80024f0 <HAL_TIM_MspPostInit+0x148>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d11c      	bne.n	80024d4 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800249a:	4b10      	ldr	r3, [pc, #64]	; (80024dc <HAL_TIM_MspPostInit+0x134>)
 800249c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800249e:	4a0f      	ldr	r2, [pc, #60]	; (80024dc <HAL_TIM_MspPostInit+0x134>)
 80024a0:	f043 0320 	orr.w	r3, r3, #32
 80024a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024a6:	4b0d      	ldr	r3, [pc, #52]	; (80024dc <HAL_TIM_MspPostInit+0x134>)
 80024a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024aa:	f003 0320 	and.w	r3, r3, #32
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80024b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b8:	2302      	movs	r3, #2
 80024ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024bc:	2300      	movs	r3, #0
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c0:	2300      	movs	r3, #0
 80024c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80024c4:	2302      	movs	r3, #2
 80024c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024c8:	f107 031c 	add.w	r3, r7, #28
 80024cc:	4619      	mov	r1, r3
 80024ce:	4809      	ldr	r0, [pc, #36]	; (80024f4 <HAL_TIM_MspPostInit+0x14c>)
 80024d0:	f001 fb40 	bl	8003b54 <HAL_GPIO_Init>
}
 80024d4:	bf00      	nop
 80024d6:	3730      	adds	r7, #48	; 0x30
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40000400 	.word	0x40000400
 80024e4:	48000400 	.word	0x48000400
 80024e8:	40000800 	.word	0x40000800
 80024ec:	48000c00 	.word	0x48000c00
 80024f0:	40000c00 	.word	0x40000c00
 80024f4:	48001400 	.word	0x48001400

080024f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024fc:	e7fe      	b.n	80024fc <NMI_Handler+0x4>

080024fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024fe:	b480      	push	{r7}
 8002500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002502:	e7fe      	b.n	8002502 <HardFault_Handler+0x4>

08002504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002508:	e7fe      	b.n	8002508 <MemManage_Handler+0x4>

0800250a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800250a:	b480      	push	{r7}
 800250c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800250e:	e7fe      	b.n	800250e <BusFault_Handler+0x4>

08002510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002514:	e7fe      	b.n	8002514 <UsageFault_Handler+0x4>

08002516 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002532:	b480      	push	{r7}
 8002534:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002536:	bf00      	nop
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002544:	f000 f958 	bl	80027f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002548:	bf00      	nop
 800254a:	bd80      	pop	{r7, pc}

0800254c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
	return 1;
 8002550:	2301      	movs	r3, #1
}
 8002552:	4618      	mov	r0, r3
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <_kill>:

int _kill(int pid, int sig)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002566:	f005 fc7b 	bl	8007e60 <__errno>
 800256a:	4603      	mov	r3, r0
 800256c:	2216      	movs	r2, #22
 800256e:	601a      	str	r2, [r3, #0]
	return -1;
 8002570:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002574:	4618      	mov	r0, r3
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <_exit>:

void _exit (int status)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002584:	f04f 31ff 	mov.w	r1, #4294967295
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7ff ffe7 	bl	800255c <_kill>
	while (1) {}		/* Make sure we hang here */
 800258e:	e7fe      	b.n	800258e <_exit+0x12>

08002590 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]
 80025a0:	e00a      	b.n	80025b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025a2:	f3af 8000 	nop.w
 80025a6:	4601      	mov	r1, r0
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	1c5a      	adds	r2, r3, #1
 80025ac:	60ba      	str	r2, [r7, #8]
 80025ae:	b2ca      	uxtb	r2, r1
 80025b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	3301      	adds	r3, #1
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	429a      	cmp	r2, r3
 80025be:	dbf0      	blt.n	80025a2 <_read+0x12>
	}

return len;
 80025c0:	687b      	ldr	r3, [r7, #4]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b086      	sub	sp, #24
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	60f8      	str	r0, [r7, #12]
 80025d2:	60b9      	str	r1, [r7, #8]
 80025d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]
 80025da:	e009      	b.n	80025f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	60ba      	str	r2, [r7, #8]
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff fd31 	bl	800204c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	3301      	adds	r3, #1
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	dbf1      	blt.n	80025dc <_write+0x12>
	}
	return len;
 80025f8:	687b      	ldr	r3, [r7, #4]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3718      	adds	r7, #24
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <_close>:

int _close(int file)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
	return -1;
 800260a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800260e:	4618      	mov	r0, r3
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
 8002622:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800262a:	605a      	str	r2, [r3, #4]
	return 0;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <_isatty>:

int _isatty(int file)
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
	return 1;
 8002642:	2301      	movs	r3, #1
}
 8002644:	4618      	mov	r0, r3
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
	return 0;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
	...

0800266c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002674:	4a14      	ldr	r2, [pc, #80]	; (80026c8 <_sbrk+0x5c>)
 8002676:	4b15      	ldr	r3, [pc, #84]	; (80026cc <_sbrk+0x60>)
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002680:	4b13      	ldr	r3, [pc, #76]	; (80026d0 <_sbrk+0x64>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d102      	bne.n	800268e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002688:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <_sbrk+0x64>)
 800268a:	4a12      	ldr	r2, [pc, #72]	; (80026d4 <_sbrk+0x68>)
 800268c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800268e:	4b10      	ldr	r3, [pc, #64]	; (80026d0 <_sbrk+0x64>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4413      	add	r3, r2
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	429a      	cmp	r2, r3
 800269a:	d207      	bcs.n	80026ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800269c:	f005 fbe0 	bl	8007e60 <__errno>
 80026a0:	4603      	mov	r3, r0
 80026a2:	220c      	movs	r2, #12
 80026a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026a6:	f04f 33ff 	mov.w	r3, #4294967295
 80026aa:	e009      	b.n	80026c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026ac:	4b08      	ldr	r3, [pc, #32]	; (80026d0 <_sbrk+0x64>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026b2:	4b07      	ldr	r3, [pc, #28]	; (80026d0 <_sbrk+0x64>)
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4413      	add	r3, r2
 80026ba:	4a05      	ldr	r2, [pc, #20]	; (80026d0 <_sbrk+0x64>)
 80026bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026be:	68fb      	ldr	r3, [r7, #12]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	200a0000 	.word	0x200a0000
 80026cc:	00000400 	.word	0x00000400
 80026d0:	200004b4 	.word	0x200004b4
 80026d4:	200004d0 	.word	0x200004d0

080026d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <SystemInit+0x20>)
 80026de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e2:	4a05      	ldr	r2, [pc, #20]	; (80026f8 <SystemInit+0x20>)
 80026e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80026ec:	bf00      	nop
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	e000ed00 	.word	0xe000ed00

080026fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80026fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002734 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002700:	f7ff ffea 	bl	80026d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002704:	480c      	ldr	r0, [pc, #48]	; (8002738 <LoopForever+0x6>)
  ldr r1, =_edata
 8002706:	490d      	ldr	r1, [pc, #52]	; (800273c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002708:	4a0d      	ldr	r2, [pc, #52]	; (8002740 <LoopForever+0xe>)
  movs r3, #0
 800270a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800270c:	e002      	b.n	8002714 <LoopCopyDataInit>

0800270e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800270e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002712:	3304      	adds	r3, #4

08002714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002718:	d3f9      	bcc.n	800270e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800271a:	4a0a      	ldr	r2, [pc, #40]	; (8002744 <LoopForever+0x12>)
  ldr r4, =_ebss
 800271c:	4c0a      	ldr	r4, [pc, #40]	; (8002748 <LoopForever+0x16>)
  movs r3, #0
 800271e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002720:	e001      	b.n	8002726 <LoopFillZerobss>

08002722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002724:	3204      	adds	r2, #4

08002726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002728:	d3fb      	bcc.n	8002722 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800272a:	f005 fb9f 	bl	8007e6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800272e:	f7ff f889 	bl	8001844 <main>

08002732 <LoopForever>:

LoopForever:
    b LoopForever
 8002732:	e7fe      	b.n	8002732 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002734:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800273c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002740:	0800b6f0 	.word	0x0800b6f0
  ldr r2, =_sbss
 8002744:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002748:	200004cc 	.word	0x200004cc

0800274c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800274c:	e7fe      	b.n	800274c <ADC1_IRQHandler>

0800274e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002754:	2300      	movs	r3, #0
 8002756:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002758:	2003      	movs	r0, #3
 800275a:	f001 f9c7 	bl	8003aec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800275e:	200f      	movs	r0, #15
 8002760:	f000 f80e 	bl	8002780 <HAL_InitTick>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d002      	beq.n	8002770 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	71fb      	strb	r3, [r7, #7]
 800276e:	e001      	b.n	8002774 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002770:	f7ff fc84 	bl	800207c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002774:	79fb      	ldrb	r3, [r7, #7]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
	...

08002780 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800278c:	4b17      	ldr	r3, [pc, #92]	; (80027ec <HAL_InitTick+0x6c>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d023      	beq.n	80027dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002794:	4b16      	ldr	r3, [pc, #88]	; (80027f0 <HAL_InitTick+0x70>)
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	4b14      	ldr	r3, [pc, #80]	; (80027ec <HAL_InitTick+0x6c>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	4619      	mov	r1, r3
 800279e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80027a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027aa:	4618      	mov	r0, r3
 80027ac:	f001 f9c5 	bl	8003b3a <HAL_SYSTICK_Config>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10f      	bne.n	80027d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b0f      	cmp	r3, #15
 80027ba:	d809      	bhi.n	80027d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027bc:	2200      	movs	r2, #0
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	f04f 30ff 	mov.w	r0, #4294967295
 80027c4:	f001 f99d 	bl	8003b02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027c8:	4a0a      	ldr	r2, [pc, #40]	; (80027f4 <HAL_InitTick+0x74>)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6013      	str	r3, [r2, #0]
 80027ce:	e007      	b.n	80027e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	73fb      	strb	r3, [r7, #15]
 80027d4:	e004      	b.n	80027e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	73fb      	strb	r3, [r7, #15]
 80027da:	e001      	b.n	80027e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80027e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20000010 	.word	0x20000010
 80027f0:	20000008 	.word	0x20000008
 80027f4:	2000000c 	.word	0x2000000c

080027f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <HAL_IncTick+0x20>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	461a      	mov	r2, r3
 8002802:	4b06      	ldr	r3, [pc, #24]	; (800281c <HAL_IncTick+0x24>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4413      	add	r3, r2
 8002808:	4a04      	ldr	r2, [pc, #16]	; (800281c <HAL_IncTick+0x24>)
 800280a:	6013      	str	r3, [r2, #0]
}
 800280c:	bf00      	nop
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	20000010 	.word	0x20000010
 800281c:	200004b8 	.word	0x200004b8

08002820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  return uwTick;
 8002824:	4b03      	ldr	r3, [pc, #12]	; (8002834 <HAL_GetTick+0x14>)
 8002826:	681b      	ldr	r3, [r3, #0]
}
 8002828:	4618      	mov	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	200004b8 	.word	0x200004b8

08002838 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	431a      	orrs	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	609a      	str	r2, [r3, #8]
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
 8002866:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	431a      	orrs	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	609a      	str	r2, [r3, #8]
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002894:	4618      	mov	r0, r3
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b087      	sub	sp, #28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
 80028ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	3360      	adds	r3, #96	; 0x60
 80028b2:	461a      	mov	r2, r3
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <LL_ADC_SetOffset+0x44>)
 80028c2:	4013      	ands	r3, r2
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80028d8:	bf00      	nop
 80028da:	371c      	adds	r7, #28
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	03fff000 	.word	0x03fff000

080028e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3360      	adds	r3, #96	; 0x60
 80028f6:	461a      	mov	r2, r3
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002908:	4618      	mov	r0, r3
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002914:	b480      	push	{r7}
 8002916:	b087      	sub	sp, #28
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	3360      	adds	r3, #96	; 0x60
 8002924:	461a      	mov	r2, r3
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	431a      	orrs	r2, r3
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800293e:	bf00      	nop
 8002940:	371c      	adds	r7, #28
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	431a      	orrs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	615a      	str	r2, [r3, #20]
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002984:	2301      	movs	r3, #1
 8002986:	e000      	b.n	800298a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002996:	b480      	push	{r7}
 8002998:	b087      	sub	sp, #28
 800299a:	af00      	add	r7, sp, #0
 800299c:	60f8      	str	r0, [r7, #12]
 800299e:	60b9      	str	r1, [r7, #8]
 80029a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	3330      	adds	r3, #48	; 0x30
 80029a6:	461a      	mov	r2, r3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	0a1b      	lsrs	r3, r3, #8
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	f003 030c 	and.w	r3, r3, #12
 80029b2:	4413      	add	r3, r2
 80029b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	f003 031f 	and.w	r3, r3, #31
 80029c0:	211f      	movs	r1, #31
 80029c2:	fa01 f303 	lsl.w	r3, r1, r3
 80029c6:	43db      	mvns	r3, r3
 80029c8:	401a      	ands	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	0e9b      	lsrs	r3, r3, #26
 80029ce:	f003 011f 	and.w	r1, r3, #31
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	f003 031f 	and.w	r3, r3, #31
 80029d8:	fa01 f303 	lsl.w	r3, r1, r3
 80029dc:	431a      	orrs	r2, r3
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029e2:	bf00      	nop
 80029e4:	371c      	adds	r7, #28
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b087      	sub	sp, #28
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	60f8      	str	r0, [r7, #12]
 80029f6:	60b9      	str	r1, [r7, #8]
 80029f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	3314      	adds	r3, #20
 80029fe:	461a      	mov	r2, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	0e5b      	lsrs	r3, r3, #25
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	f003 0304 	and.w	r3, r3, #4
 8002a0a:	4413      	add	r3, r2
 8002a0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	0d1b      	lsrs	r3, r3, #20
 8002a16:	f003 031f 	and.w	r3, r3, #31
 8002a1a:	2107      	movs	r1, #7
 8002a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a20:	43db      	mvns	r3, r3
 8002a22:	401a      	ands	r2, r3
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	0d1b      	lsrs	r3, r3, #20
 8002a28:	f003 031f 	and.w	r3, r3, #31
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a32:	431a      	orrs	r2, r3
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a38:	bf00      	nop
 8002a3a:	371c      	adds	r7, #28
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	401a      	ands	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f003 0318 	and.w	r3, r3, #24
 8002a66:	4908      	ldr	r1, [pc, #32]	; (8002a88 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a68:	40d9      	lsrs	r1, r3
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	400b      	ands	r3, r1
 8002a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a72:	431a      	orrs	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002a7a:	bf00      	nop
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	0007ffff 	.word	0x0007ffff

08002a8c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002a9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6093      	str	r3, [r2, #8]
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ac0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ac4:	d101      	bne.n	8002aca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002ae8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002aec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b14:	d101      	bne.n	8002b1a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b16:	2301      	movs	r3, #1
 8002b18:	e000      	b.n	8002b1c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b3c:	f043 0201 	orr.w	r2, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d101      	bne.n	8002b68 <LL_ADC_IsEnabled+0x18>
 8002b64:	2301      	movs	r3, #1
 8002b66:	e000      	b.n	8002b6a <LL_ADC_IsEnabled+0x1a>
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b86:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b8a:	f043 0204 	orr.w	r2, r3, #4
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 0304 	and.w	r3, r3, #4
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d101      	bne.n	8002bb6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 0308 	and.w	r3, r3, #8
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	d101      	bne.n	8002bdc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e000      	b.n	8002bde <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
	...

08002bec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b088      	sub	sp, #32
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e12f      	b.n	8002e66 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d109      	bne.n	8002c28 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f7ff fa55 	bl	80020c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff ff3f 	bl	8002ab0 <LL_ADC_IsDeepPowerDownEnabled>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d004      	beq.n	8002c42 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff ff25 	bl	8002a8c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff ff5a 	bl	8002b00 <LL_ADC_IsInternalRegulatorEnabled>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d115      	bne.n	8002c7e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff ff3e 	bl	8002ad8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c5c:	4b84      	ldr	r3, [pc, #528]	; (8002e70 <HAL_ADC_Init+0x284>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	099b      	lsrs	r3, r3, #6
 8002c62:	4a84      	ldr	r2, [pc, #528]	; (8002e74 <HAL_ADC_Init+0x288>)
 8002c64:	fba2 2303 	umull	r2, r3, r2, r3
 8002c68:	099b      	lsrs	r3, r3, #6
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c70:	e002      	b.n	8002c78 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	3b01      	subs	r3, #1
 8002c76:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f9      	bne.n	8002c72 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff ff3c 	bl	8002b00 <LL_ADC_IsInternalRegulatorEnabled>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10d      	bne.n	8002caa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c92:	f043 0210 	orr.w	r2, r3, #16
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9e:	f043 0201 	orr.w	r2, r3, #1
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff ff75 	bl	8002b9e <LL_ADC_REG_IsConversionOngoing>
 8002cb4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cba:	f003 0310 	and.w	r3, r3, #16
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f040 80c8 	bne.w	8002e54 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f040 80c4 	bne.w	8002e54 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002cd4:	f043 0202 	orr.w	r2, r3, #2
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff ff35 	bl	8002b50 <LL_ADC_IsEnabled>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10b      	bne.n	8002d04 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cec:	4862      	ldr	r0, [pc, #392]	; (8002e78 <HAL_ADC_Init+0x28c>)
 8002cee:	f7ff ff2f 	bl	8002b50 <LL_ADC_IsEnabled>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d105      	bne.n	8002d04 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	485f      	ldr	r0, [pc, #380]	; (8002e7c <HAL_ADC_Init+0x290>)
 8002d00:	f7ff fd9a 	bl	8002838 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	7e5b      	ldrb	r3, [r3, #25]
 8002d08:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d0e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002d14:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002d1a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d22:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d24:	4313      	orrs	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d106      	bne.n	8002d40 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	3b01      	subs	r3, #1
 8002d38:	045b      	lsls	r3, r3, #17
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d009      	beq.n	8002d5c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d54:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68da      	ldr	r2, [r3, #12]
 8002d62:	4b47      	ldr	r3, [pc, #284]	; (8002e80 <HAL_ADC_Init+0x294>)
 8002d64:	4013      	ands	r3, r2
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	6812      	ldr	r2, [r2, #0]
 8002d6a:	69b9      	ldr	r1, [r7, #24]
 8002d6c:	430b      	orrs	r3, r1
 8002d6e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff ff12 	bl	8002b9e <LL_ADC_REG_IsConversionOngoing>
 8002d7a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff ff1f 	bl	8002bc4 <LL_ADC_INJ_IsConversionOngoing>
 8002d86:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d140      	bne.n	8002e10 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d13d      	bne.n	8002e10 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	7e1b      	ldrb	r3, [r3, #24]
 8002d9c:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d9e:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002da6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002da8:	4313      	orrs	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002db6:	f023 0306 	bic.w	r3, r3, #6
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	6812      	ldr	r2, [r2, #0]
 8002dbe:	69b9      	ldr	r1, [r7, #24]
 8002dc0:	430b      	orrs	r3, r1
 8002dc2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d118      	bne.n	8002e00 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002dd8:	f023 0304 	bic.w	r3, r3, #4
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002de4:	4311      	orrs	r1, r2
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002dea:	4311      	orrs	r1, r2
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002df0:	430a      	orrs	r2, r1
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f042 0201 	orr.w	r2, r2, #1
 8002dfc:	611a      	str	r2, [r3, #16]
 8002dfe:	e007      	b.n	8002e10 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691a      	ldr	r2, [r3, #16]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 0201 	bic.w	r2, r2, #1
 8002e0e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d10c      	bne.n	8002e32 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	f023 010f 	bic.w	r1, r3, #15
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	1e5a      	subs	r2, r3, #1
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	631a      	str	r2, [r3, #48]	; 0x30
 8002e30:	e007      	b.n	8002e42 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 020f 	bic.w	r2, r2, #15
 8002e40:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e46:	f023 0303 	bic.w	r3, r3, #3
 8002e4a:	f043 0201 	orr.w	r2, r3, #1
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	659a      	str	r2, [r3, #88]	; 0x58
 8002e52:	e007      	b.n	8002e64 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e58:	f043 0210 	orr.w	r2, r3, #16
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e64:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3720      	adds	r7, #32
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	20000008 	.word	0x20000008
 8002e74:	053e2d63 	.word	0x053e2d63
 8002e78:	50040000 	.word	0x50040000
 8002e7c:	50040300 	.word	0x50040300
 8002e80:	fff0c007 	.word	0xfff0c007

08002e84 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff fe84 	bl	8002b9e <LL_ADC_REG_IsConversionOngoing>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d14f      	bne.n	8002f3c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d101      	bne.n	8002eaa <HAL_ADC_Start+0x26>
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	e04b      	b.n	8002f42 <HAL_ADC_Start+0xbe>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 fce2 	bl	800387c <ADC_Enable>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002ebc:	7bfb      	ldrb	r3, [r7, #15]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d137      	bne.n	8002f32 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002eca:	f023 0301 	bic.w	r3, r3, #1
 8002ece:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee2:	d106      	bne.n	8002ef2 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee8:	f023 0206 	bic.w	r2, r3, #6
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ef0:	e002      	b.n	8002ef8 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	221c      	movs	r2, #28
 8002efe:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d007      	beq.n	8002f26 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f1e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff fe23 	bl	8002b76 <LL_ADC_REG_StartConversion>
 8002f30:	e006      	b.n	8002f40 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002f3a:	e001      	b.n	8002f40 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b086      	sub	sp, #24
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
 8002f52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d102      	bne.n	8002f62 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002f5c:	2308      	movs	r3, #8
 8002f5e:	617b      	str	r3, [r7, #20]
 8002f60:	e010      	b.n	8002f84 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d007      	beq.n	8002f80 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f74:	f043 0220 	orr.w	r2, r3, #32
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e06f      	b.n	8003060 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002f80:	2304      	movs	r3, #4
 8002f82:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002f84:	f7ff fc4c 	bl	8002820 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002f8a:	e021      	b.n	8002fd0 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f92:	d01d      	beq.n	8002fd0 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002f94:	f7ff fc44 	bl	8002820 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d302      	bcc.n	8002faa <HAL_ADC_PollForConversion+0x60>
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d112      	bne.n	8002fd0 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10b      	bne.n	8002fd0 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fbc:	f043 0204 	orr.w	r2, r3, #4
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e047      	b.n	8003060 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d0d6      	beq.n	8002f8c <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff fcbe 	bl	8002970 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d01c      	beq.n	8003034 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	7e5b      	ldrb	r3, [r3, #25]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d118      	bne.n	8003034 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0308 	and.w	r3, r3, #8
 800300c:	2b08      	cmp	r3, #8
 800300e:	d111      	bne.n	8003034 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003014:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003020:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d105      	bne.n	8003034 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800302c:	f043 0201 	orr.w	r2, r3, #1
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	2b08      	cmp	r3, #8
 8003040:	d104      	bne.n	800304c <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2208      	movs	r2, #8
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	e008      	b.n	800305e <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d103      	bne.n	800305e <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	220c      	movs	r2, #12
 800305c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3718      	adds	r7, #24
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003076:	4618      	mov	r0, r3
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
	...

08003084 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b0b6      	sub	sp, #216	; 0xd8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800308e:	2300      	movs	r3, #0
 8003090:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003094:	2300      	movs	r3, #0
 8003096:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d101      	bne.n	80030a6 <HAL_ADC_ConfigChannel+0x22>
 80030a2:	2302      	movs	r3, #2
 80030a4:	e3d5      	b.n	8003852 <HAL_ADC_ConfigChannel+0x7ce>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff fd73 	bl	8002b9e <LL_ADC_REG_IsConversionOngoing>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f040 83ba 	bne.w	8003834 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2b05      	cmp	r3, #5
 80030c6:	d824      	bhi.n	8003112 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	3b02      	subs	r3, #2
 80030ce:	2b03      	cmp	r3, #3
 80030d0:	d81b      	bhi.n	800310a <HAL_ADC_ConfigChannel+0x86>
 80030d2:	a201      	add	r2, pc, #4	; (adr r2, 80030d8 <HAL_ADC_ConfigChannel+0x54>)
 80030d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d8:	080030e9 	.word	0x080030e9
 80030dc:	080030f1 	.word	0x080030f1
 80030e0:	080030f9 	.word	0x080030f9
 80030e4:	08003101 	.word	0x08003101
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	220c      	movs	r2, #12
 80030ec:	605a      	str	r2, [r3, #4]
          break;
 80030ee:	e011      	b.n	8003114 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	2212      	movs	r2, #18
 80030f4:	605a      	str	r2, [r3, #4]
          break;
 80030f6:	e00d      	b.n	8003114 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	2218      	movs	r2, #24
 80030fc:	605a      	str	r2, [r3, #4]
          break;
 80030fe:	e009      	b.n	8003114 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003106:	605a      	str	r2, [r3, #4]
          break;
 8003108:	e004      	b.n	8003114 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2206      	movs	r2, #6
 800310e:	605a      	str	r2, [r3, #4]
          break;
 8003110:	e000      	b.n	8003114 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003112:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6818      	ldr	r0, [r3, #0]
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	6859      	ldr	r1, [r3, #4]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	461a      	mov	r2, r3
 8003122:	f7ff fc38 	bl	8002996 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff fd37 	bl	8002b9e <LL_ADC_REG_IsConversionOngoing>
 8003130:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff fd43 	bl	8002bc4 <LL_ADC_INJ_IsConversionOngoing>
 800313e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003142:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003146:	2b00      	cmp	r3, #0
 8003148:	f040 81c1 	bne.w	80034ce <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800314c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003150:	2b00      	cmp	r3, #0
 8003152:	f040 81bc 	bne.w	80034ce <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800315e:	d10f      	bne.n	8003180 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6818      	ldr	r0, [r3, #0]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2200      	movs	r2, #0
 800316a:	4619      	mov	r1, r3
 800316c:	f7ff fc3f 	bl	80029ee <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff fbe6 	bl	800294a <LL_ADC_SetSamplingTimeCommonConfig>
 800317e:	e00e      	b.n	800319e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6818      	ldr	r0, [r3, #0]
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	6819      	ldr	r1, [r3, #0]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	461a      	mov	r2, r3
 800318e:	f7ff fc2e 	bl	80029ee <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2100      	movs	r1, #0
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff fbd6 	bl	800294a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	695a      	ldr	r2, [r3, #20]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	08db      	lsrs	r3, r3, #3
 80031aa:	f003 0303 	and.w	r3, r3, #3
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	2b04      	cmp	r3, #4
 80031be:	d00a      	beq.n	80031d6 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6818      	ldr	r0, [r3, #0]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	6919      	ldr	r1, [r3, #16]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80031d0:	f7ff fb66 	bl	80028a0 <LL_ADC_SetOffset>
 80031d4:	e17b      	b.n	80034ce <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2100      	movs	r1, #0
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff fb83 	bl	80028e8 <LL_ADC_GetOffsetChannel>
 80031e2:	4603      	mov	r3, r0
 80031e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10a      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x17e>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2100      	movs	r1, #0
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff fb78 	bl	80028e8 <LL_ADC_GetOffsetChannel>
 80031f8:	4603      	mov	r3, r0
 80031fa:	0e9b      	lsrs	r3, r3, #26
 80031fc:	f003 021f 	and.w	r2, r3, #31
 8003200:	e01e      	b.n	8003240 <HAL_ADC_ConfigChannel+0x1bc>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2100      	movs	r1, #0
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff fb6d 	bl	80028e8 <LL_ADC_GetOffsetChannel>
 800320e:	4603      	mov	r3, r0
 8003210:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003214:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003218:	fa93 f3a3 	rbit	r3, r3
 800321c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003220:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003224:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003228:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8003230:	2320      	movs	r3, #32
 8003232:	e004      	b.n	800323e <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8003234:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003238:	fab3 f383 	clz	r3, r3
 800323c:	b2db      	uxtb	r3, r3
 800323e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003248:	2b00      	cmp	r3, #0
 800324a:	d105      	bne.n	8003258 <HAL_ADC_ConfigChannel+0x1d4>
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	0e9b      	lsrs	r3, r3, #26
 8003252:	f003 031f 	and.w	r3, r3, #31
 8003256:	e018      	b.n	800328a <HAL_ADC_ConfigChannel+0x206>
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003260:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003264:	fa93 f3a3 	rbit	r3, r3
 8003268:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800326c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003270:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003274:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003278:	2b00      	cmp	r3, #0
 800327a:	d101      	bne.n	8003280 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 800327c:	2320      	movs	r3, #32
 800327e:	e004      	b.n	800328a <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8003280:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003284:	fab3 f383 	clz	r3, r3
 8003288:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800328a:	429a      	cmp	r2, r3
 800328c:	d106      	bne.n	800329c <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2200      	movs	r2, #0
 8003294:	2100      	movs	r1, #0
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff fb3c 	bl	8002914 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2101      	movs	r1, #1
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7ff fb20 	bl	80028e8 <LL_ADC_GetOffsetChannel>
 80032a8:	4603      	mov	r3, r0
 80032aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10a      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x244>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2101      	movs	r1, #1
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff fb15 	bl	80028e8 <LL_ADC_GetOffsetChannel>
 80032be:	4603      	mov	r3, r0
 80032c0:	0e9b      	lsrs	r3, r3, #26
 80032c2:	f003 021f 	and.w	r2, r3, #31
 80032c6:	e01e      	b.n	8003306 <HAL_ADC_ConfigChannel+0x282>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2101      	movs	r1, #1
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff fb0a 	bl	80028e8 <LL_ADC_GetOffsetChannel>
 80032d4:	4603      	mov	r3, r0
 80032d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80032de:	fa93 f3a3 	rbit	r3, r3
 80032e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80032e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80032ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80032ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80032f6:	2320      	movs	r3, #32
 80032f8:	e004      	b.n	8003304 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80032fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80032fe:	fab3 f383 	clz	r3, r3
 8003302:	b2db      	uxtb	r3, r3
 8003304:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800330e:	2b00      	cmp	r3, #0
 8003310:	d105      	bne.n	800331e <HAL_ADC_ConfigChannel+0x29a>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	0e9b      	lsrs	r3, r3, #26
 8003318:	f003 031f 	and.w	r3, r3, #31
 800331c:	e018      	b.n	8003350 <HAL_ADC_ConfigChannel+0x2cc>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003326:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800332a:	fa93 f3a3 	rbit	r3, r3
 800332e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003332:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003336:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800333a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8003342:	2320      	movs	r3, #32
 8003344:	e004      	b.n	8003350 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8003346:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800334a:	fab3 f383 	clz	r3, r3
 800334e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003350:	429a      	cmp	r2, r3
 8003352:	d106      	bne.n	8003362 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2200      	movs	r2, #0
 800335a:	2101      	movs	r1, #1
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff fad9 	bl	8002914 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2102      	movs	r1, #2
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff fabd 	bl	80028e8 <LL_ADC_GetOffsetChannel>
 800336e:	4603      	mov	r3, r0
 8003370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10a      	bne.n	800338e <HAL_ADC_ConfigChannel+0x30a>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2102      	movs	r1, #2
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff fab2 	bl	80028e8 <LL_ADC_GetOffsetChannel>
 8003384:	4603      	mov	r3, r0
 8003386:	0e9b      	lsrs	r3, r3, #26
 8003388:	f003 021f 	and.w	r2, r3, #31
 800338c:	e01e      	b.n	80033cc <HAL_ADC_ConfigChannel+0x348>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2102      	movs	r1, #2
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff faa7 	bl	80028e8 <LL_ADC_GetOffsetChannel>
 800339a:	4603      	mov	r3, r0
 800339c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033a4:	fa93 f3a3 	rbit	r3, r3
 80033a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80033ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80033b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80033bc:	2320      	movs	r3, #32
 80033be:	e004      	b.n	80033ca <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80033c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033c4:	fab3 f383 	clz	r3, r3
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d105      	bne.n	80033e4 <HAL_ADC_ConfigChannel+0x360>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	0e9b      	lsrs	r3, r3, #26
 80033de:	f003 031f 	and.w	r3, r3, #31
 80033e2:	e016      	b.n	8003412 <HAL_ADC_ConfigChannel+0x38e>
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033f0:	fa93 f3a3 	rbit	r3, r3
 80033f4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80033f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80033fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003400:	2b00      	cmp	r3, #0
 8003402:	d101      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8003404:	2320      	movs	r3, #32
 8003406:	e004      	b.n	8003412 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003408:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800340c:	fab3 f383 	clz	r3, r3
 8003410:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003412:	429a      	cmp	r2, r3
 8003414:	d106      	bne.n	8003424 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2200      	movs	r2, #0
 800341c:	2102      	movs	r1, #2
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff fa78 	bl	8002914 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2103      	movs	r1, #3
 800342a:	4618      	mov	r0, r3
 800342c:	f7ff fa5c 	bl	80028e8 <LL_ADC_GetOffsetChannel>
 8003430:	4603      	mov	r3, r0
 8003432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10a      	bne.n	8003450 <HAL_ADC_ConfigChannel+0x3cc>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2103      	movs	r1, #3
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff fa51 	bl	80028e8 <LL_ADC_GetOffsetChannel>
 8003446:	4603      	mov	r3, r0
 8003448:	0e9b      	lsrs	r3, r3, #26
 800344a:	f003 021f 	and.w	r2, r3, #31
 800344e:	e017      	b.n	8003480 <HAL_ADC_ConfigChannel+0x3fc>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2103      	movs	r1, #3
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff fa46 	bl	80028e8 <LL_ADC_GetOffsetChannel>
 800345c:	4603      	mov	r3, r0
 800345e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003460:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003462:	fa93 f3a3 	rbit	r3, r3
 8003466:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003468:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800346a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800346c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003472:	2320      	movs	r3, #32
 8003474:	e003      	b.n	800347e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003476:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003478:	fab3 f383 	clz	r3, r3
 800347c:	b2db      	uxtb	r3, r3
 800347e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003488:	2b00      	cmp	r3, #0
 800348a:	d105      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x414>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	0e9b      	lsrs	r3, r3, #26
 8003492:	f003 031f 	and.w	r3, r3, #31
 8003496:	e011      	b.n	80034bc <HAL_ADC_ConfigChannel+0x438>
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034a0:	fa93 f3a3 	rbit	r3, r3
 80034a4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80034a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80034aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80034b0:	2320      	movs	r3, #32
 80034b2:	e003      	b.n	80034bc <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80034b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034b6:	fab3 f383 	clz	r3, r3
 80034ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80034bc:	429a      	cmp	r2, r3
 80034be:	d106      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2200      	movs	r2, #0
 80034c6:	2103      	movs	r1, #3
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff fa23 	bl	8002914 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff fb3c 	bl	8002b50 <LL_ADC_IsEnabled>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f040 8140 	bne.w	8003760 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6818      	ldr	r0, [r3, #0]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	6819      	ldr	r1, [r3, #0]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	461a      	mov	r2, r3
 80034ee:	f7ff faa9 	bl	8002a44 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	4a8f      	ldr	r2, [pc, #572]	; (8003734 <HAL_ADC_ConfigChannel+0x6b0>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	f040 8131 	bne.w	8003760 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10b      	bne.n	8003526 <HAL_ADC_ConfigChannel+0x4a2>
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	0e9b      	lsrs	r3, r3, #26
 8003514:	3301      	adds	r3, #1
 8003516:	f003 031f 	and.w	r3, r3, #31
 800351a:	2b09      	cmp	r3, #9
 800351c:	bf94      	ite	ls
 800351e:	2301      	movls	r3, #1
 8003520:	2300      	movhi	r3, #0
 8003522:	b2db      	uxtb	r3, r3
 8003524:	e019      	b.n	800355a <HAL_ADC_ConfigChannel+0x4d6>
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800352e:	fa93 f3a3 	rbit	r3, r3
 8003532:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003534:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003536:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003538:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800353e:	2320      	movs	r3, #32
 8003540:	e003      	b.n	800354a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8003542:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003544:	fab3 f383 	clz	r3, r3
 8003548:	b2db      	uxtb	r3, r3
 800354a:	3301      	adds	r3, #1
 800354c:	f003 031f 	and.w	r3, r3, #31
 8003550:	2b09      	cmp	r3, #9
 8003552:	bf94      	ite	ls
 8003554:	2301      	movls	r3, #1
 8003556:	2300      	movhi	r3, #0
 8003558:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800355a:	2b00      	cmp	r3, #0
 800355c:	d079      	beq.n	8003652 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003566:	2b00      	cmp	r3, #0
 8003568:	d107      	bne.n	800357a <HAL_ADC_ConfigChannel+0x4f6>
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	0e9b      	lsrs	r3, r3, #26
 8003570:	3301      	adds	r3, #1
 8003572:	069b      	lsls	r3, r3, #26
 8003574:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003578:	e015      	b.n	80035a6 <HAL_ADC_ConfigChannel+0x522>
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003580:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003582:	fa93 f3a3 	rbit	r3, r3
 8003586:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800358a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800358c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8003592:	2320      	movs	r3, #32
 8003594:	e003      	b.n	800359e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8003596:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003598:	fab3 f383 	clz	r3, r3
 800359c:	b2db      	uxtb	r3, r3
 800359e:	3301      	adds	r3, #1
 80035a0:	069b      	lsls	r3, r3, #26
 80035a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d109      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0x542>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	0e9b      	lsrs	r3, r3, #26
 80035b8:	3301      	adds	r3, #1
 80035ba:	f003 031f 	and.w	r3, r3, #31
 80035be:	2101      	movs	r1, #1
 80035c0:	fa01 f303 	lsl.w	r3, r1, r3
 80035c4:	e017      	b.n	80035f6 <HAL_ADC_ConfigChannel+0x572>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035ce:	fa93 f3a3 	rbit	r3, r3
 80035d2:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80035d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035d6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80035d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80035de:	2320      	movs	r3, #32
 80035e0:	e003      	b.n	80035ea <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80035e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035e4:	fab3 f383 	clz	r3, r3
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	3301      	adds	r3, #1
 80035ec:	f003 031f 	and.w	r3, r3, #31
 80035f0:	2101      	movs	r1, #1
 80035f2:	fa01 f303 	lsl.w	r3, r1, r3
 80035f6:	ea42 0103 	orr.w	r1, r2, r3
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10a      	bne.n	800361c <HAL_ADC_ConfigChannel+0x598>
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	0e9b      	lsrs	r3, r3, #26
 800360c:	3301      	adds	r3, #1
 800360e:	f003 021f 	and.w	r2, r3, #31
 8003612:	4613      	mov	r3, r2
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	4413      	add	r3, r2
 8003618:	051b      	lsls	r3, r3, #20
 800361a:	e018      	b.n	800364e <HAL_ADC_ConfigChannel+0x5ca>
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003624:	fa93 f3a3 	rbit	r3, r3
 8003628:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800362a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800362c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800362e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8003634:	2320      	movs	r3, #32
 8003636:	e003      	b.n	8003640 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8003638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800363a:	fab3 f383 	clz	r3, r3
 800363e:	b2db      	uxtb	r3, r3
 8003640:	3301      	adds	r3, #1
 8003642:	f003 021f 	and.w	r2, r3, #31
 8003646:	4613      	mov	r3, r2
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	4413      	add	r3, r2
 800364c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800364e:	430b      	orrs	r3, r1
 8003650:	e081      	b.n	8003756 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800365a:	2b00      	cmp	r3, #0
 800365c:	d107      	bne.n	800366e <HAL_ADC_ConfigChannel+0x5ea>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	0e9b      	lsrs	r3, r3, #26
 8003664:	3301      	adds	r3, #1
 8003666:	069b      	lsls	r3, r3, #26
 8003668:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800366c:	e015      	b.n	800369a <HAL_ADC_ConfigChannel+0x616>
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003676:	fa93 f3a3 	rbit	r3, r3
 800367a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800367c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8003686:	2320      	movs	r3, #32
 8003688:	e003      	b.n	8003692 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800368a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368c:	fab3 f383 	clz	r3, r3
 8003690:	b2db      	uxtb	r3, r3
 8003692:	3301      	adds	r3, #1
 8003694:	069b      	lsls	r3, r3, #26
 8003696:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d109      	bne.n	80036ba <HAL_ADC_ConfigChannel+0x636>
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	0e9b      	lsrs	r3, r3, #26
 80036ac:	3301      	adds	r3, #1
 80036ae:	f003 031f 	and.w	r3, r3, #31
 80036b2:	2101      	movs	r1, #1
 80036b4:	fa01 f303 	lsl.w	r3, r1, r3
 80036b8:	e017      	b.n	80036ea <HAL_ADC_ConfigChannel+0x666>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c0:	6a3b      	ldr	r3, [r7, #32]
 80036c2:	fa93 f3a3 	rbit	r3, r3
 80036c6:	61fb      	str	r3, [r7, #28]
  return result;
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80036cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80036d2:	2320      	movs	r3, #32
 80036d4:	e003      	b.n	80036de <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	fab3 f383 	clz	r3, r3
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	3301      	adds	r3, #1
 80036e0:	f003 031f 	and.w	r3, r3, #31
 80036e4:	2101      	movs	r1, #1
 80036e6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ea:	ea42 0103 	orr.w	r1, r2, r3
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10d      	bne.n	8003716 <HAL_ADC_ConfigChannel+0x692>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	0e9b      	lsrs	r3, r3, #26
 8003700:	3301      	adds	r3, #1
 8003702:	f003 021f 	and.w	r2, r3, #31
 8003706:	4613      	mov	r3, r2
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	4413      	add	r3, r2
 800370c:	3b1e      	subs	r3, #30
 800370e:	051b      	lsls	r3, r3, #20
 8003710:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003714:	e01e      	b.n	8003754 <HAL_ADC_ConfigChannel+0x6d0>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	fa93 f3a3 	rbit	r3, r3
 8003722:	613b      	str	r3, [r7, #16]
  return result;
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d104      	bne.n	8003738 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800372e:	2320      	movs	r3, #32
 8003730:	e006      	b.n	8003740 <HAL_ADC_ConfigChannel+0x6bc>
 8003732:	bf00      	nop
 8003734:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	fab3 f383 	clz	r3, r3
 800373e:	b2db      	uxtb	r3, r3
 8003740:	3301      	adds	r3, #1
 8003742:	f003 021f 	and.w	r2, r3, #31
 8003746:	4613      	mov	r3, r2
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	4413      	add	r3, r2
 800374c:	3b1e      	subs	r3, #30
 800374e:	051b      	lsls	r3, r3, #20
 8003750:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003754:	430b      	orrs	r3, r1
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	6892      	ldr	r2, [r2, #8]
 800375a:	4619      	mov	r1, r3
 800375c:	f7ff f947 	bl	80029ee <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	4b3d      	ldr	r3, [pc, #244]	; (800385c <HAL_ADC_ConfigChannel+0x7d8>)
 8003766:	4013      	ands	r3, r2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d06c      	beq.n	8003846 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800376c:	483c      	ldr	r0, [pc, #240]	; (8003860 <HAL_ADC_ConfigChannel+0x7dc>)
 800376e:	f7ff f889 	bl	8002884 <LL_ADC_GetCommonPathInternalCh>
 8003772:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a3a      	ldr	r2, [pc, #232]	; (8003864 <HAL_ADC_ConfigChannel+0x7e0>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d127      	bne.n	80037d0 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003780:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003784:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d121      	bne.n	80037d0 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a35      	ldr	r2, [pc, #212]	; (8003868 <HAL_ADC_ConfigChannel+0x7e4>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d157      	bne.n	8003846 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003796:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800379a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800379e:	4619      	mov	r1, r3
 80037a0:	482f      	ldr	r0, [pc, #188]	; (8003860 <HAL_ADC_ConfigChannel+0x7dc>)
 80037a2:	f7ff f85c 	bl	800285e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037a6:	4b31      	ldr	r3, [pc, #196]	; (800386c <HAL_ADC_ConfigChannel+0x7e8>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	099b      	lsrs	r3, r3, #6
 80037ac:	4a30      	ldr	r2, [pc, #192]	; (8003870 <HAL_ADC_ConfigChannel+0x7ec>)
 80037ae:	fba2 2303 	umull	r2, r3, r2, r3
 80037b2:	099b      	lsrs	r3, r3, #6
 80037b4:	1c5a      	adds	r2, r3, #1
 80037b6:	4613      	mov	r3, r2
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	4413      	add	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037c0:	e002      	b.n	80037c8 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	3b01      	subs	r3, #1
 80037c6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1f9      	bne.n	80037c2 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037ce:	e03a      	b.n	8003846 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a27      	ldr	r2, [pc, #156]	; (8003874 <HAL_ADC_ConfigChannel+0x7f0>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d113      	bne.n	8003802 <HAL_ADC_ConfigChannel+0x77e>
 80037da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10d      	bne.n	8003802 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a1f      	ldr	r2, [pc, #124]	; (8003868 <HAL_ADC_ConfigChannel+0x7e4>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d12a      	bne.n	8003846 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037f8:	4619      	mov	r1, r3
 80037fa:	4819      	ldr	r0, [pc, #100]	; (8003860 <HAL_ADC_ConfigChannel+0x7dc>)
 80037fc:	f7ff f82f 	bl	800285e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003800:	e021      	b.n	8003846 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a1c      	ldr	r2, [pc, #112]	; (8003878 <HAL_ADC_ConfigChannel+0x7f4>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d11c      	bne.n	8003846 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800380c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003810:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d116      	bne.n	8003846 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a12      	ldr	r2, [pc, #72]	; (8003868 <HAL_ADC_ConfigChannel+0x7e4>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d111      	bne.n	8003846 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003822:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003826:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800382a:	4619      	mov	r1, r3
 800382c:	480c      	ldr	r0, [pc, #48]	; (8003860 <HAL_ADC_ConfigChannel+0x7dc>)
 800382e:	f7ff f816 	bl	800285e <LL_ADC_SetCommonPathInternalCh>
 8003832:	e008      	b.n	8003846 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003838:	f043 0220 	orr.w	r2, r3, #32
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800384e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003852:	4618      	mov	r0, r3
 8003854:	37d8      	adds	r7, #216	; 0xd8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	80080000 	.word	0x80080000
 8003860:	50040300 	.word	0x50040300
 8003864:	c7520000 	.word	0xc7520000
 8003868:	50040000 	.word	0x50040000
 800386c:	20000008 	.word	0x20000008
 8003870:	053e2d63 	.word	0x053e2d63
 8003874:	cb840000 	.word	0xcb840000
 8003878:	80000001 	.word	0x80000001

0800387c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003884:	2300      	movs	r3, #0
 8003886:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff f95f 	bl	8002b50 <LL_ADC_IsEnabled>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d169      	bne.n	800396c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689a      	ldr	r2, [r3, #8]
 800389e:	4b36      	ldr	r3, [pc, #216]	; (8003978 <ADC_Enable+0xfc>)
 80038a0:	4013      	ands	r3, r2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00d      	beq.n	80038c2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038aa:	f043 0210 	orr.w	r2, r3, #16
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b6:	f043 0201 	orr.w	r2, r3, #1
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e055      	b.n	800396e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7ff f92e 	bl	8002b28 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80038cc:	482b      	ldr	r0, [pc, #172]	; (800397c <ADC_Enable+0x100>)
 80038ce:	f7fe ffd9 	bl	8002884 <LL_ADC_GetCommonPathInternalCh>
 80038d2:	4603      	mov	r3, r0
 80038d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d013      	beq.n	8003904 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038dc:	4b28      	ldr	r3, [pc, #160]	; (8003980 <ADC_Enable+0x104>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	099b      	lsrs	r3, r3, #6
 80038e2:	4a28      	ldr	r2, [pc, #160]	; (8003984 <ADC_Enable+0x108>)
 80038e4:	fba2 2303 	umull	r2, r3, r2, r3
 80038e8:	099b      	lsrs	r3, r3, #6
 80038ea:	1c5a      	adds	r2, r3, #1
 80038ec:	4613      	mov	r3, r2
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	4413      	add	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80038f6:	e002      	b.n	80038fe <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1f9      	bne.n	80038f8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003904:	f7fe ff8c 	bl	8002820 <HAL_GetTick>
 8003908:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800390a:	e028      	b.n	800395e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4618      	mov	r0, r3
 8003912:	f7ff f91d 	bl	8002b50 <LL_ADC_IsEnabled>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d104      	bne.n	8003926 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff f901 	bl	8002b28 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003926:	f7fe ff7b 	bl	8002820 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d914      	bls.n	800395e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b01      	cmp	r3, #1
 8003940:	d00d      	beq.n	800395e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003946:	f043 0210 	orr.w	r2, r3, #16
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003952:	f043 0201 	orr.w	r2, r3, #1
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e007      	b.n	800396e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	2b01      	cmp	r3, #1
 800396a:	d1cf      	bne.n	800390c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	8000003f 	.word	0x8000003f
 800397c:	50040300 	.word	0x50040300
 8003980:	20000008 	.word	0x20000008
 8003984:	053e2d63 	.word	0x053e2d63

08003988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003998:	4b0c      	ldr	r3, [pc, #48]	; (80039cc <__NVIC_SetPriorityGrouping+0x44>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039a4:	4013      	ands	r3, r2
 80039a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039ba:	4a04      	ldr	r2, [pc, #16]	; (80039cc <__NVIC_SetPriorityGrouping+0x44>)
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	60d3      	str	r3, [r2, #12]
}
 80039c0:	bf00      	nop
 80039c2:	3714      	adds	r7, #20
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	e000ed00 	.word	0xe000ed00

080039d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039d4:	4b04      	ldr	r3, [pc, #16]	; (80039e8 <__NVIC_GetPriorityGrouping+0x18>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	0a1b      	lsrs	r3, r3, #8
 80039da:	f003 0307 	and.w	r3, r3, #7
}
 80039de:	4618      	mov	r0, r3
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	e000ed00 	.word	0xe000ed00

080039ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	4603      	mov	r3, r0
 80039f4:	6039      	str	r1, [r7, #0]
 80039f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	db0a      	blt.n	8003a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	490c      	ldr	r1, [pc, #48]	; (8003a38 <__NVIC_SetPriority+0x4c>)
 8003a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a0a:	0112      	lsls	r2, r2, #4
 8003a0c:	b2d2      	uxtb	r2, r2
 8003a0e:	440b      	add	r3, r1
 8003a10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a14:	e00a      	b.n	8003a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	4908      	ldr	r1, [pc, #32]	; (8003a3c <__NVIC_SetPriority+0x50>)
 8003a1c:	79fb      	ldrb	r3, [r7, #7]
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	3b04      	subs	r3, #4
 8003a24:	0112      	lsls	r2, r2, #4
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	440b      	add	r3, r1
 8003a2a:	761a      	strb	r2, [r3, #24]
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr
 8003a38:	e000e100 	.word	0xe000e100
 8003a3c:	e000ed00 	.word	0xe000ed00

08003a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b089      	sub	sp, #36	; 0x24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	f1c3 0307 	rsb	r3, r3, #7
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	bf28      	it	cs
 8003a5e:	2304      	movcs	r3, #4
 8003a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	3304      	adds	r3, #4
 8003a66:	2b06      	cmp	r3, #6
 8003a68:	d902      	bls.n	8003a70 <NVIC_EncodePriority+0x30>
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	3b03      	subs	r3, #3
 8003a6e:	e000      	b.n	8003a72 <NVIC_EncodePriority+0x32>
 8003a70:	2300      	movs	r3, #0
 8003a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a74:	f04f 32ff 	mov.w	r2, #4294967295
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	43da      	mvns	r2, r3
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	401a      	ands	r2, r3
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a88:	f04f 31ff 	mov.w	r1, #4294967295
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a92:	43d9      	mvns	r1, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a98:	4313      	orrs	r3, r2
         );
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3724      	adds	r7, #36	; 0x24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
	...

08003aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ab8:	d301      	bcc.n	8003abe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003aba:	2301      	movs	r3, #1
 8003abc:	e00f      	b.n	8003ade <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003abe:	4a0a      	ldr	r2, [pc, #40]	; (8003ae8 <SysTick_Config+0x40>)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ac6:	210f      	movs	r1, #15
 8003ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8003acc:	f7ff ff8e 	bl	80039ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ad0:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <SysTick_Config+0x40>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ad6:	4b04      	ldr	r3, [pc, #16]	; (8003ae8 <SysTick_Config+0x40>)
 8003ad8:	2207      	movs	r2, #7
 8003ada:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	e000e010 	.word	0xe000e010

08003aec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f7ff ff47 	bl	8003988 <__NVIC_SetPriorityGrouping>
}
 8003afa:	bf00      	nop
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b086      	sub	sp, #24
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	4603      	mov	r3, r0
 8003b0a:	60b9      	str	r1, [r7, #8]
 8003b0c:	607a      	str	r2, [r7, #4]
 8003b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b10:	2300      	movs	r3, #0
 8003b12:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b14:	f7ff ff5c 	bl	80039d0 <__NVIC_GetPriorityGrouping>
 8003b18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	68b9      	ldr	r1, [r7, #8]
 8003b1e:	6978      	ldr	r0, [r7, #20]
 8003b20:	f7ff ff8e 	bl	8003a40 <NVIC_EncodePriority>
 8003b24:	4602      	mov	r2, r0
 8003b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7ff ff5d 	bl	80039ec <__NVIC_SetPriority>
}
 8003b32:	bf00      	nop
 8003b34:	3718      	adds	r7, #24
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b082      	sub	sp, #8
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7ff ffb0 	bl	8003aa8 <SysTick_Config>
 8003b48:	4603      	mov	r3, r0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b087      	sub	sp, #28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b62:	e166      	b.n	8003e32 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	2101      	movs	r1, #1
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b70:	4013      	ands	r3, r2
 8003b72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 8158 	beq.w	8003e2c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f003 0303 	and.w	r3, r3, #3
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d005      	beq.n	8003b94 <HAL_GPIO_Init+0x40>
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f003 0303 	and.w	r3, r3, #3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d130      	bne.n	8003bf6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	2203      	movs	r2, #3
 8003ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	68da      	ldr	r2, [r3, #12]
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bca:	2201      	movs	r2, #1
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd2:	43db      	mvns	r3, r3
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	091b      	lsrs	r3, r3, #4
 8003be0:	f003 0201 	and.w	r2, r3, #1
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	2b03      	cmp	r3, #3
 8003c00:	d017      	beq.n	8003c32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	2203      	movs	r2, #3
 8003c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c12:	43db      	mvns	r3, r3
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	4013      	ands	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	689a      	ldr	r2, [r3, #8]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	fa02 f303 	lsl.w	r3, r2, r3
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f003 0303 	and.w	r3, r3, #3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d123      	bne.n	8003c86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	08da      	lsrs	r2, r3, #3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	3208      	adds	r2, #8
 8003c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	f003 0307 	and.w	r3, r3, #7
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	220f      	movs	r2, #15
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	43db      	mvns	r3, r3
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	691a      	ldr	r2, [r3, #16]
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	08da      	lsrs	r2, r3, #3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	3208      	adds	r2, #8
 8003c80:	6939      	ldr	r1, [r7, #16]
 8003c82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	2203      	movs	r2, #3
 8003c92:	fa02 f303 	lsl.w	r3, r2, r3
 8003c96:	43db      	mvns	r3, r3
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f003 0203 	and.w	r2, r3, #3
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 80b2 	beq.w	8003e2c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cc8:	4b61      	ldr	r3, [pc, #388]	; (8003e50 <HAL_GPIO_Init+0x2fc>)
 8003cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ccc:	4a60      	ldr	r2, [pc, #384]	; (8003e50 <HAL_GPIO_Init+0x2fc>)
 8003cce:	f043 0301 	orr.w	r3, r3, #1
 8003cd2:	6613      	str	r3, [r2, #96]	; 0x60
 8003cd4:	4b5e      	ldr	r3, [pc, #376]	; (8003e50 <HAL_GPIO_Init+0x2fc>)
 8003cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	60bb      	str	r3, [r7, #8]
 8003cde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ce0:	4a5c      	ldr	r2, [pc, #368]	; (8003e54 <HAL_GPIO_Init+0x300>)
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	089b      	lsrs	r3, r3, #2
 8003ce6:	3302      	adds	r3, #2
 8003ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f003 0303 	and.w	r3, r3, #3
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	220f      	movs	r2, #15
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	4013      	ands	r3, r2
 8003d02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d0a:	d02b      	beq.n	8003d64 <HAL_GPIO_Init+0x210>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a52      	ldr	r2, [pc, #328]	; (8003e58 <HAL_GPIO_Init+0x304>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d025      	beq.n	8003d60 <HAL_GPIO_Init+0x20c>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a51      	ldr	r2, [pc, #324]	; (8003e5c <HAL_GPIO_Init+0x308>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d01f      	beq.n	8003d5c <HAL_GPIO_Init+0x208>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a50      	ldr	r2, [pc, #320]	; (8003e60 <HAL_GPIO_Init+0x30c>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d019      	beq.n	8003d58 <HAL_GPIO_Init+0x204>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a4f      	ldr	r2, [pc, #316]	; (8003e64 <HAL_GPIO_Init+0x310>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d013      	beq.n	8003d54 <HAL_GPIO_Init+0x200>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a4e      	ldr	r2, [pc, #312]	; (8003e68 <HAL_GPIO_Init+0x314>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d00d      	beq.n	8003d50 <HAL_GPIO_Init+0x1fc>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a4d      	ldr	r2, [pc, #308]	; (8003e6c <HAL_GPIO_Init+0x318>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d007      	beq.n	8003d4c <HAL_GPIO_Init+0x1f8>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a4c      	ldr	r2, [pc, #304]	; (8003e70 <HAL_GPIO_Init+0x31c>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d101      	bne.n	8003d48 <HAL_GPIO_Init+0x1f4>
 8003d44:	2307      	movs	r3, #7
 8003d46:	e00e      	b.n	8003d66 <HAL_GPIO_Init+0x212>
 8003d48:	2308      	movs	r3, #8
 8003d4a:	e00c      	b.n	8003d66 <HAL_GPIO_Init+0x212>
 8003d4c:	2306      	movs	r3, #6
 8003d4e:	e00a      	b.n	8003d66 <HAL_GPIO_Init+0x212>
 8003d50:	2305      	movs	r3, #5
 8003d52:	e008      	b.n	8003d66 <HAL_GPIO_Init+0x212>
 8003d54:	2304      	movs	r3, #4
 8003d56:	e006      	b.n	8003d66 <HAL_GPIO_Init+0x212>
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e004      	b.n	8003d66 <HAL_GPIO_Init+0x212>
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	e002      	b.n	8003d66 <HAL_GPIO_Init+0x212>
 8003d60:	2301      	movs	r3, #1
 8003d62:	e000      	b.n	8003d66 <HAL_GPIO_Init+0x212>
 8003d64:	2300      	movs	r3, #0
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	f002 0203 	and.w	r2, r2, #3
 8003d6c:	0092      	lsls	r2, r2, #2
 8003d6e:	4093      	lsls	r3, r2
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d76:	4937      	ldr	r1, [pc, #220]	; (8003e54 <HAL_GPIO_Init+0x300>)
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	089b      	lsrs	r3, r3, #2
 8003d7c:	3302      	adds	r3, #2
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d84:	4b3b      	ldr	r3, [pc, #236]	; (8003e74 <HAL_GPIO_Init+0x320>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	4013      	ands	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d003      	beq.n	8003da8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003da8:	4a32      	ldr	r2, [pc, #200]	; (8003e74 <HAL_GPIO_Init+0x320>)
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003dae:	4b31      	ldr	r3, [pc, #196]	; (8003e74 <HAL_GPIO_Init+0x320>)
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	43db      	mvns	r3, r3
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003dd2:	4a28      	ldr	r2, [pc, #160]	; (8003e74 <HAL_GPIO_Init+0x320>)
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003dd8:	4b26      	ldr	r3, [pc, #152]	; (8003e74 <HAL_GPIO_Init+0x320>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	43db      	mvns	r3, r3
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	4013      	ands	r3, r2
 8003de6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d003      	beq.n	8003dfc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003dfc:	4a1d      	ldr	r2, [pc, #116]	; (8003e74 <HAL_GPIO_Init+0x320>)
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003e02:	4b1c      	ldr	r3, [pc, #112]	; (8003e74 <HAL_GPIO_Init+0x320>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	43db      	mvns	r3, r3
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e26:	4a13      	ldr	r2, [pc, #76]	; (8003e74 <HAL_GPIO_Init+0x320>)
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	fa22 f303 	lsr.w	r3, r2, r3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f47f ae91 	bne.w	8003b64 <HAL_GPIO_Init+0x10>
  }
}
 8003e42:	bf00      	nop
 8003e44:	bf00      	nop
 8003e46:	371c      	adds	r7, #28
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr
 8003e50:	40021000 	.word	0x40021000
 8003e54:	40010000 	.word	0x40010000
 8003e58:	48000400 	.word	0x48000400
 8003e5c:	48000800 	.word	0x48000800
 8003e60:	48000c00 	.word	0x48000c00
 8003e64:	48001000 	.word	0x48001000
 8003e68:	48001400 	.word	0x48001400
 8003e6c:	48001800 	.word	0x48001800
 8003e70:	48001c00 	.word	0x48001c00
 8003e74:	40010400 	.word	0x40010400

08003e78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	460b      	mov	r3, r1
 8003e82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	691a      	ldr	r2, [r3, #16]
 8003e88:	887b      	ldrh	r3, [r7, #2]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d002      	beq.n	8003e96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e90:	2301      	movs	r3, #1
 8003e92:	73fb      	strb	r3, [r7, #15]
 8003e94:	e001      	b.n	8003e9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e96:	2300      	movs	r3, #0
 8003e98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	807b      	strh	r3, [r7, #2]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003eb8:	787b      	ldrb	r3, [r7, #1]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ebe:	887a      	ldrh	r2, [r7, #2]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ec4:	e002      	b.n	8003ecc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ec6:	887a      	ldrh	r2, [r7, #2]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003edc:	4b0d      	ldr	r3, [pc, #52]	; (8003f14 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee8:	d102      	bne.n	8003ef0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003eea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003eee:	e00b      	b.n	8003f08 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003ef0:	4b08      	ldr	r3, [pc, #32]	; (8003f14 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003efe:	d102      	bne.n	8003f06 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003f00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f04:	e000      	b.n	8003f08 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003f06:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	40007000 	.word	0x40007000

08003f18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d141      	bne.n	8003faa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f26:	4b4b      	ldr	r3, [pc, #300]	; (8004054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f32:	d131      	bne.n	8003f98 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f34:	4b47      	ldr	r3, [pc, #284]	; (8004054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f3a:	4a46      	ldr	r2, [pc, #280]	; (8004054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f44:	4b43      	ldr	r3, [pc, #268]	; (8004054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f4c:	4a41      	ldr	r2, [pc, #260]	; (8004054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003f54:	4b40      	ldr	r3, [pc, #256]	; (8004058 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2232      	movs	r2, #50	; 0x32
 8003f5a:	fb02 f303 	mul.w	r3, r2, r3
 8003f5e:	4a3f      	ldr	r2, [pc, #252]	; (800405c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f60:	fba2 2303 	umull	r2, r3, r2, r3
 8003f64:	0c9b      	lsrs	r3, r3, #18
 8003f66:	3301      	adds	r3, #1
 8003f68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f6a:	e002      	b.n	8003f72 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f72:	4b38      	ldr	r3, [pc, #224]	; (8004054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f7e:	d102      	bne.n	8003f86 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1f2      	bne.n	8003f6c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f86:	4b33      	ldr	r3, [pc, #204]	; (8004054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f92:	d158      	bne.n	8004046 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e057      	b.n	8004048 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f98:	4b2e      	ldr	r3, [pc, #184]	; (8004054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f9e:	4a2d      	ldr	r2, [pc, #180]	; (8004054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fa4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003fa8:	e04d      	b.n	8004046 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fb0:	d141      	bne.n	8004036 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fb2:	4b28      	ldr	r3, [pc, #160]	; (8004054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003fba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fbe:	d131      	bne.n	8004024 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fc0:	4b24      	ldr	r3, [pc, #144]	; (8004054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fc6:	4a23      	ldr	r2, [pc, #140]	; (8004054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fcc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fd0:	4b20      	ldr	r3, [pc, #128]	; (8004054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fd8:	4a1e      	ldr	r2, [pc, #120]	; (8004054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fde:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003fe0:	4b1d      	ldr	r3, [pc, #116]	; (8004058 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2232      	movs	r2, #50	; 0x32
 8003fe6:	fb02 f303 	mul.w	r3, r2, r3
 8003fea:	4a1c      	ldr	r2, [pc, #112]	; (800405c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003fec:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff0:	0c9b      	lsrs	r3, r3, #18
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ff6:	e002      	b.n	8003ffe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ffe:	4b15      	ldr	r3, [pc, #84]	; (8004054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800400a:	d102      	bne.n	8004012 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1f2      	bne.n	8003ff8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004012:	4b10      	ldr	r3, [pc, #64]	; (8004054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800401a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800401e:	d112      	bne.n	8004046 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e011      	b.n	8004048 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004024:	4b0b      	ldr	r3, [pc, #44]	; (8004054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004026:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800402a:	4a0a      	ldr	r2, [pc, #40]	; (8004054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800402c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004030:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004034:	e007      	b.n	8004046 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004036:	4b07      	ldr	r3, [pc, #28]	; (8004054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800403e:	4a05      	ldr	r2, [pc, #20]	; (8004054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004040:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004044:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr
 8004054:	40007000 	.word	0x40007000
 8004058:	20000008 	.word	0x20000008
 800405c:	431bde83 	.word	0x431bde83

08004060 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004060:	b480      	push	{r7}
 8004062:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004064:	4b05      	ldr	r3, [pc, #20]	; (800407c <HAL_PWREx_EnableVddIO2+0x1c>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	4a04      	ldr	r2, [pc, #16]	; (800407c <HAL_PWREx_EnableVddIO2+0x1c>)
 800406a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800406e:	6053      	str	r3, [r2, #4]
}
 8004070:	bf00      	nop
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	40007000 	.word	0x40007000

08004080 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b088      	sub	sp, #32
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d102      	bne.n	8004094 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	f000 bc08 	b.w	80048a4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004094:	4b96      	ldr	r3, [pc, #600]	; (80042f0 <HAL_RCC_OscConfig+0x270>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f003 030c 	and.w	r3, r3, #12
 800409c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800409e:	4b94      	ldr	r3, [pc, #592]	; (80042f0 <HAL_RCC_OscConfig+0x270>)
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	f003 0303 	and.w	r3, r3, #3
 80040a6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0310 	and.w	r3, r3, #16
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 80e4 	beq.w	800427e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d007      	beq.n	80040cc <HAL_RCC_OscConfig+0x4c>
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	2b0c      	cmp	r3, #12
 80040c0:	f040 808b 	bne.w	80041da <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	f040 8087 	bne.w	80041da <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040cc:	4b88      	ldr	r3, [pc, #544]	; (80042f0 <HAL_RCC_OscConfig+0x270>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d005      	beq.n	80040e4 <HAL_RCC_OscConfig+0x64>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e3df      	b.n	80048a4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a1a      	ldr	r2, [r3, #32]
 80040e8:	4b81      	ldr	r3, [pc, #516]	; (80042f0 <HAL_RCC_OscConfig+0x270>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0308 	and.w	r3, r3, #8
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d004      	beq.n	80040fe <HAL_RCC_OscConfig+0x7e>
 80040f4:	4b7e      	ldr	r3, [pc, #504]	; (80042f0 <HAL_RCC_OscConfig+0x270>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040fc:	e005      	b.n	800410a <HAL_RCC_OscConfig+0x8a>
 80040fe:	4b7c      	ldr	r3, [pc, #496]	; (80042f0 <HAL_RCC_OscConfig+0x270>)
 8004100:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004104:	091b      	lsrs	r3, r3, #4
 8004106:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800410a:	4293      	cmp	r3, r2
 800410c:	d223      	bcs.n	8004156 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	4618      	mov	r0, r3
 8004114:	f000 fdcc 	bl	8004cb0 <RCC_SetFlashLatencyFromMSIRange>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e3c0      	b.n	80048a4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004122:	4b73      	ldr	r3, [pc, #460]	; (80042f0 <HAL_RCC_OscConfig+0x270>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a72      	ldr	r2, [pc, #456]	; (80042f0 <HAL_RCC_OscConfig+0x270>)
 8004128:	f043 0308 	orr.w	r3, r3, #8
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	4b70      	ldr	r3, [pc, #448]	; (80042f0 <HAL_RCC_OscConfig+0x270>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	496d      	ldr	r1, [pc, #436]	; (80042f0 <HAL_RCC_OscConfig+0x270>)
 800413c:	4313      	orrs	r3, r2
 800413e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004140:	4b6b      	ldr	r3, [pc, #428]	; (80042f0 <HAL_RCC_OscConfig+0x270>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	69db      	ldr	r3, [r3, #28]
 800414c:	021b      	lsls	r3, r3, #8
 800414e:	4968      	ldr	r1, [pc, #416]	; (80042f0 <HAL_RCC_OscConfig+0x270>)
 8004150:	4313      	orrs	r3, r2
 8004152:	604b      	str	r3, [r1, #4]
 8004154:	e025      	b.n	80041a2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004156:	4b66      	ldr	r3, [pc, #408]	; (80042f0 <HAL_RCC_OscConfig+0x270>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a65      	ldr	r2, [pc, #404]	; (80042f0 <HAL_RCC_OscConfig+0x270>)
 800415c:	f043 0308 	orr.w	r3, r3, #8
 8004160:	6013      	str	r3, [r2, #0]
 8004162:	4b63      	ldr	r3, [pc, #396]	; (80042f0 <HAL_RCC_OscConfig+0x270>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	4960      	ldr	r1, [pc, #384]	; (80042f0 <HAL_RCC_OscConfig+0x270>)
 8004170:	4313      	orrs	r3, r2
 8004172:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004174:	4b5e      	ldr	r3, [pc, #376]	; (80042f0 <HAL_RCC_OscConfig+0x270>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	021b      	lsls	r3, r3, #8
 8004182:	495b      	ldr	r1, [pc, #364]	; (80042f0 <HAL_RCC_OscConfig+0x270>)
 8004184:	4313      	orrs	r3, r2
 8004186:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d109      	bne.n	80041a2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	4618      	mov	r0, r3
 8004194:	f000 fd8c 	bl	8004cb0 <RCC_SetFlashLatencyFromMSIRange>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e380      	b.n	80048a4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041a2:	f000 fcc1 	bl	8004b28 <HAL_RCC_GetSysClockFreq>
 80041a6:	4602      	mov	r2, r0
 80041a8:	4b51      	ldr	r3, [pc, #324]	; (80042f0 <HAL_RCC_OscConfig+0x270>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	091b      	lsrs	r3, r3, #4
 80041ae:	f003 030f 	and.w	r3, r3, #15
 80041b2:	4950      	ldr	r1, [pc, #320]	; (80042f4 <HAL_RCC_OscConfig+0x274>)
 80041b4:	5ccb      	ldrb	r3, [r1, r3]
 80041b6:	f003 031f 	and.w	r3, r3, #31
 80041ba:	fa22 f303 	lsr.w	r3, r2, r3
 80041be:	4a4e      	ldr	r2, [pc, #312]	; (80042f8 <HAL_RCC_OscConfig+0x278>)
 80041c0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80041c2:	4b4e      	ldr	r3, [pc, #312]	; (80042fc <HAL_RCC_OscConfig+0x27c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fe fada 	bl	8002780 <HAL_InitTick>
 80041cc:	4603      	mov	r3, r0
 80041ce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80041d0:	7bfb      	ldrb	r3, [r7, #15]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d052      	beq.n	800427c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80041d6:	7bfb      	ldrb	r3, [r7, #15]
 80041d8:	e364      	b.n	80048a4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d032      	beq.n	8004248 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80041e2:	4b43      	ldr	r3, [pc, #268]	; (80042f0 <HAL_RCC_OscConfig+0x270>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a42      	ldr	r2, [pc, #264]	; (80042f0 <HAL_RCC_OscConfig+0x270>)
 80041e8:	f043 0301 	orr.w	r3, r3, #1
 80041ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041ee:	f7fe fb17 	bl	8002820 <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041f4:	e008      	b.n	8004208 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041f6:	f7fe fb13 	bl	8002820 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d901      	bls.n	8004208 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e34d      	b.n	80048a4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004208:	4b39      	ldr	r3, [pc, #228]	; (80042f0 <HAL_RCC_OscConfig+0x270>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d0f0      	beq.n	80041f6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004214:	4b36      	ldr	r3, [pc, #216]	; (80042f0 <HAL_RCC_OscConfig+0x270>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a35      	ldr	r2, [pc, #212]	; (80042f0 <HAL_RCC_OscConfig+0x270>)
 800421a:	f043 0308 	orr.w	r3, r3, #8
 800421e:	6013      	str	r3, [r2, #0]
 8004220:	4b33      	ldr	r3, [pc, #204]	; (80042f0 <HAL_RCC_OscConfig+0x270>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	4930      	ldr	r1, [pc, #192]	; (80042f0 <HAL_RCC_OscConfig+0x270>)
 800422e:	4313      	orrs	r3, r2
 8004230:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004232:	4b2f      	ldr	r3, [pc, #188]	; (80042f0 <HAL_RCC_OscConfig+0x270>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	021b      	lsls	r3, r3, #8
 8004240:	492b      	ldr	r1, [pc, #172]	; (80042f0 <HAL_RCC_OscConfig+0x270>)
 8004242:	4313      	orrs	r3, r2
 8004244:	604b      	str	r3, [r1, #4]
 8004246:	e01a      	b.n	800427e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004248:	4b29      	ldr	r3, [pc, #164]	; (80042f0 <HAL_RCC_OscConfig+0x270>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a28      	ldr	r2, [pc, #160]	; (80042f0 <HAL_RCC_OscConfig+0x270>)
 800424e:	f023 0301 	bic.w	r3, r3, #1
 8004252:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004254:	f7fe fae4 	bl	8002820 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800425c:	f7fe fae0 	bl	8002820 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e31a      	b.n	80048a4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800426e:	4b20      	ldr	r3, [pc, #128]	; (80042f0 <HAL_RCC_OscConfig+0x270>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1f0      	bne.n	800425c <HAL_RCC_OscConfig+0x1dc>
 800427a:	e000      	b.n	800427e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800427c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d073      	beq.n	8004372 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	2b08      	cmp	r3, #8
 800428e:	d005      	beq.n	800429c <HAL_RCC_OscConfig+0x21c>
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	2b0c      	cmp	r3, #12
 8004294:	d10e      	bne.n	80042b4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	2b03      	cmp	r3, #3
 800429a:	d10b      	bne.n	80042b4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800429c:	4b14      	ldr	r3, [pc, #80]	; (80042f0 <HAL_RCC_OscConfig+0x270>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d063      	beq.n	8004370 <HAL_RCC_OscConfig+0x2f0>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d15f      	bne.n	8004370 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e2f7      	b.n	80048a4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042bc:	d106      	bne.n	80042cc <HAL_RCC_OscConfig+0x24c>
 80042be:	4b0c      	ldr	r3, [pc, #48]	; (80042f0 <HAL_RCC_OscConfig+0x270>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a0b      	ldr	r2, [pc, #44]	; (80042f0 <HAL_RCC_OscConfig+0x270>)
 80042c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	e025      	b.n	8004318 <HAL_RCC_OscConfig+0x298>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042d4:	d114      	bne.n	8004300 <HAL_RCC_OscConfig+0x280>
 80042d6:	4b06      	ldr	r3, [pc, #24]	; (80042f0 <HAL_RCC_OscConfig+0x270>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a05      	ldr	r2, [pc, #20]	; (80042f0 <HAL_RCC_OscConfig+0x270>)
 80042dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042e0:	6013      	str	r3, [r2, #0]
 80042e2:	4b03      	ldr	r3, [pc, #12]	; (80042f0 <HAL_RCC_OscConfig+0x270>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a02      	ldr	r2, [pc, #8]	; (80042f0 <HAL_RCC_OscConfig+0x270>)
 80042e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ec:	6013      	str	r3, [r2, #0]
 80042ee:	e013      	b.n	8004318 <HAL_RCC_OscConfig+0x298>
 80042f0:	40021000 	.word	0x40021000
 80042f4:	0800b264 	.word	0x0800b264
 80042f8:	20000008 	.word	0x20000008
 80042fc:	2000000c 	.word	0x2000000c
 8004300:	4ba0      	ldr	r3, [pc, #640]	; (8004584 <HAL_RCC_OscConfig+0x504>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a9f      	ldr	r2, [pc, #636]	; (8004584 <HAL_RCC_OscConfig+0x504>)
 8004306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800430a:	6013      	str	r3, [r2, #0]
 800430c:	4b9d      	ldr	r3, [pc, #628]	; (8004584 <HAL_RCC_OscConfig+0x504>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a9c      	ldr	r2, [pc, #624]	; (8004584 <HAL_RCC_OscConfig+0x504>)
 8004312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d013      	beq.n	8004348 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004320:	f7fe fa7e 	bl	8002820 <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004328:	f7fe fa7a 	bl	8002820 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b64      	cmp	r3, #100	; 0x64
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e2b4      	b.n	80048a4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800433a:	4b92      	ldr	r3, [pc, #584]	; (8004584 <HAL_RCC_OscConfig+0x504>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d0f0      	beq.n	8004328 <HAL_RCC_OscConfig+0x2a8>
 8004346:	e014      	b.n	8004372 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004348:	f7fe fa6a 	bl	8002820 <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004350:	f7fe fa66 	bl	8002820 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b64      	cmp	r3, #100	; 0x64
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e2a0      	b.n	80048a4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004362:	4b88      	ldr	r3, [pc, #544]	; (8004584 <HAL_RCC_OscConfig+0x504>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1f0      	bne.n	8004350 <HAL_RCC_OscConfig+0x2d0>
 800436e:	e000      	b.n	8004372 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d060      	beq.n	8004440 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	2b04      	cmp	r3, #4
 8004382:	d005      	beq.n	8004390 <HAL_RCC_OscConfig+0x310>
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	2b0c      	cmp	r3, #12
 8004388:	d119      	bne.n	80043be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2b02      	cmp	r3, #2
 800438e:	d116      	bne.n	80043be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004390:	4b7c      	ldr	r3, [pc, #496]	; (8004584 <HAL_RCC_OscConfig+0x504>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004398:	2b00      	cmp	r3, #0
 800439a:	d005      	beq.n	80043a8 <HAL_RCC_OscConfig+0x328>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e27d      	b.n	80048a4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a8:	4b76      	ldr	r3, [pc, #472]	; (8004584 <HAL_RCC_OscConfig+0x504>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	061b      	lsls	r3, r3, #24
 80043b6:	4973      	ldr	r1, [pc, #460]	; (8004584 <HAL_RCC_OscConfig+0x504>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043bc:	e040      	b.n	8004440 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d023      	beq.n	800440e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043c6:	4b6f      	ldr	r3, [pc, #444]	; (8004584 <HAL_RCC_OscConfig+0x504>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a6e      	ldr	r2, [pc, #440]	; (8004584 <HAL_RCC_OscConfig+0x504>)
 80043cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d2:	f7fe fa25 	bl	8002820 <HAL_GetTick>
 80043d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043d8:	e008      	b.n	80043ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043da:	f7fe fa21 	bl	8002820 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d901      	bls.n	80043ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e25b      	b.n	80048a4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043ec:	4b65      	ldr	r3, [pc, #404]	; (8004584 <HAL_RCC_OscConfig+0x504>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0f0      	beq.n	80043da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043f8:	4b62      	ldr	r3, [pc, #392]	; (8004584 <HAL_RCC_OscConfig+0x504>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	061b      	lsls	r3, r3, #24
 8004406:	495f      	ldr	r1, [pc, #380]	; (8004584 <HAL_RCC_OscConfig+0x504>)
 8004408:	4313      	orrs	r3, r2
 800440a:	604b      	str	r3, [r1, #4]
 800440c:	e018      	b.n	8004440 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800440e:	4b5d      	ldr	r3, [pc, #372]	; (8004584 <HAL_RCC_OscConfig+0x504>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a5c      	ldr	r2, [pc, #368]	; (8004584 <HAL_RCC_OscConfig+0x504>)
 8004414:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004418:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800441a:	f7fe fa01 	bl	8002820 <HAL_GetTick>
 800441e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004420:	e008      	b.n	8004434 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004422:	f7fe f9fd 	bl	8002820 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d901      	bls.n	8004434 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e237      	b.n	80048a4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004434:	4b53      	ldr	r3, [pc, #332]	; (8004584 <HAL_RCC_OscConfig+0x504>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1f0      	bne.n	8004422 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0308 	and.w	r3, r3, #8
 8004448:	2b00      	cmp	r3, #0
 800444a:	d03c      	beq.n	80044c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d01c      	beq.n	800448e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004454:	4b4b      	ldr	r3, [pc, #300]	; (8004584 <HAL_RCC_OscConfig+0x504>)
 8004456:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800445a:	4a4a      	ldr	r2, [pc, #296]	; (8004584 <HAL_RCC_OscConfig+0x504>)
 800445c:	f043 0301 	orr.w	r3, r3, #1
 8004460:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004464:	f7fe f9dc 	bl	8002820 <HAL_GetTick>
 8004468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800446a:	e008      	b.n	800447e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800446c:	f7fe f9d8 	bl	8002820 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b02      	cmp	r3, #2
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e212      	b.n	80048a4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800447e:	4b41      	ldr	r3, [pc, #260]	; (8004584 <HAL_RCC_OscConfig+0x504>)
 8004480:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d0ef      	beq.n	800446c <HAL_RCC_OscConfig+0x3ec>
 800448c:	e01b      	b.n	80044c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800448e:	4b3d      	ldr	r3, [pc, #244]	; (8004584 <HAL_RCC_OscConfig+0x504>)
 8004490:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004494:	4a3b      	ldr	r2, [pc, #236]	; (8004584 <HAL_RCC_OscConfig+0x504>)
 8004496:	f023 0301 	bic.w	r3, r3, #1
 800449a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800449e:	f7fe f9bf 	bl	8002820 <HAL_GetTick>
 80044a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044a4:	e008      	b.n	80044b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044a6:	f7fe f9bb 	bl	8002820 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d901      	bls.n	80044b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e1f5      	b.n	80048a4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044b8:	4b32      	ldr	r3, [pc, #200]	; (8004584 <HAL_RCC_OscConfig+0x504>)
 80044ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1ef      	bne.n	80044a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0304 	and.w	r3, r3, #4
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f000 80a6 	beq.w	8004620 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044d4:	2300      	movs	r3, #0
 80044d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80044d8:	4b2a      	ldr	r3, [pc, #168]	; (8004584 <HAL_RCC_OscConfig+0x504>)
 80044da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10d      	bne.n	8004500 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044e4:	4b27      	ldr	r3, [pc, #156]	; (8004584 <HAL_RCC_OscConfig+0x504>)
 80044e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e8:	4a26      	ldr	r2, [pc, #152]	; (8004584 <HAL_RCC_OscConfig+0x504>)
 80044ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ee:	6593      	str	r3, [r2, #88]	; 0x58
 80044f0:	4b24      	ldr	r3, [pc, #144]	; (8004584 <HAL_RCC_OscConfig+0x504>)
 80044f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f8:	60bb      	str	r3, [r7, #8]
 80044fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044fc:	2301      	movs	r3, #1
 80044fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004500:	4b21      	ldr	r3, [pc, #132]	; (8004588 <HAL_RCC_OscConfig+0x508>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004508:	2b00      	cmp	r3, #0
 800450a:	d118      	bne.n	800453e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800450c:	4b1e      	ldr	r3, [pc, #120]	; (8004588 <HAL_RCC_OscConfig+0x508>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a1d      	ldr	r2, [pc, #116]	; (8004588 <HAL_RCC_OscConfig+0x508>)
 8004512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004516:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004518:	f7fe f982 	bl	8002820 <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004520:	f7fe f97e 	bl	8002820 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e1b8      	b.n	80048a4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004532:	4b15      	ldr	r3, [pc, #84]	; (8004588 <HAL_RCC_OscConfig+0x508>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0f0      	beq.n	8004520 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d108      	bne.n	8004558 <HAL_RCC_OscConfig+0x4d8>
 8004546:	4b0f      	ldr	r3, [pc, #60]	; (8004584 <HAL_RCC_OscConfig+0x504>)
 8004548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800454c:	4a0d      	ldr	r2, [pc, #52]	; (8004584 <HAL_RCC_OscConfig+0x504>)
 800454e:	f043 0301 	orr.w	r3, r3, #1
 8004552:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004556:	e029      	b.n	80045ac <HAL_RCC_OscConfig+0x52c>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	2b05      	cmp	r3, #5
 800455e:	d115      	bne.n	800458c <HAL_RCC_OscConfig+0x50c>
 8004560:	4b08      	ldr	r3, [pc, #32]	; (8004584 <HAL_RCC_OscConfig+0x504>)
 8004562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004566:	4a07      	ldr	r2, [pc, #28]	; (8004584 <HAL_RCC_OscConfig+0x504>)
 8004568:	f043 0304 	orr.w	r3, r3, #4
 800456c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004570:	4b04      	ldr	r3, [pc, #16]	; (8004584 <HAL_RCC_OscConfig+0x504>)
 8004572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004576:	4a03      	ldr	r2, [pc, #12]	; (8004584 <HAL_RCC_OscConfig+0x504>)
 8004578:	f043 0301 	orr.w	r3, r3, #1
 800457c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004580:	e014      	b.n	80045ac <HAL_RCC_OscConfig+0x52c>
 8004582:	bf00      	nop
 8004584:	40021000 	.word	0x40021000
 8004588:	40007000 	.word	0x40007000
 800458c:	4b9d      	ldr	r3, [pc, #628]	; (8004804 <HAL_RCC_OscConfig+0x784>)
 800458e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004592:	4a9c      	ldr	r2, [pc, #624]	; (8004804 <HAL_RCC_OscConfig+0x784>)
 8004594:	f023 0301 	bic.w	r3, r3, #1
 8004598:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800459c:	4b99      	ldr	r3, [pc, #612]	; (8004804 <HAL_RCC_OscConfig+0x784>)
 800459e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a2:	4a98      	ldr	r2, [pc, #608]	; (8004804 <HAL_RCC_OscConfig+0x784>)
 80045a4:	f023 0304 	bic.w	r3, r3, #4
 80045a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d016      	beq.n	80045e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b4:	f7fe f934 	bl	8002820 <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045ba:	e00a      	b.n	80045d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045bc:	f7fe f930 	bl	8002820 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e168      	b.n	80048a4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045d2:	4b8c      	ldr	r3, [pc, #560]	; (8004804 <HAL_RCC_OscConfig+0x784>)
 80045d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d0ed      	beq.n	80045bc <HAL_RCC_OscConfig+0x53c>
 80045e0:	e015      	b.n	800460e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e2:	f7fe f91d 	bl	8002820 <HAL_GetTick>
 80045e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045e8:	e00a      	b.n	8004600 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ea:	f7fe f919 	bl	8002820 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e151      	b.n	80048a4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004600:	4b80      	ldr	r3, [pc, #512]	; (8004804 <HAL_RCC_OscConfig+0x784>)
 8004602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1ed      	bne.n	80045ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800460e:	7ffb      	ldrb	r3, [r7, #31]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d105      	bne.n	8004620 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004614:	4b7b      	ldr	r3, [pc, #492]	; (8004804 <HAL_RCC_OscConfig+0x784>)
 8004616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004618:	4a7a      	ldr	r2, [pc, #488]	; (8004804 <HAL_RCC_OscConfig+0x784>)
 800461a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800461e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0320 	and.w	r3, r3, #32
 8004628:	2b00      	cmp	r3, #0
 800462a:	d03c      	beq.n	80046a6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004630:	2b00      	cmp	r3, #0
 8004632:	d01c      	beq.n	800466e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004634:	4b73      	ldr	r3, [pc, #460]	; (8004804 <HAL_RCC_OscConfig+0x784>)
 8004636:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800463a:	4a72      	ldr	r2, [pc, #456]	; (8004804 <HAL_RCC_OscConfig+0x784>)
 800463c:	f043 0301 	orr.w	r3, r3, #1
 8004640:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004644:	f7fe f8ec 	bl	8002820 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800464c:	f7fe f8e8 	bl	8002820 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e122      	b.n	80048a4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800465e:	4b69      	ldr	r3, [pc, #420]	; (8004804 <HAL_RCC_OscConfig+0x784>)
 8004660:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0ef      	beq.n	800464c <HAL_RCC_OscConfig+0x5cc>
 800466c:	e01b      	b.n	80046a6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800466e:	4b65      	ldr	r3, [pc, #404]	; (8004804 <HAL_RCC_OscConfig+0x784>)
 8004670:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004674:	4a63      	ldr	r2, [pc, #396]	; (8004804 <HAL_RCC_OscConfig+0x784>)
 8004676:	f023 0301 	bic.w	r3, r3, #1
 800467a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800467e:	f7fe f8cf 	bl	8002820 <HAL_GetTick>
 8004682:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004684:	e008      	b.n	8004698 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004686:	f7fe f8cb 	bl	8002820 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	2b02      	cmp	r3, #2
 8004692:	d901      	bls.n	8004698 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e105      	b.n	80048a4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004698:	4b5a      	ldr	r3, [pc, #360]	; (8004804 <HAL_RCC_OscConfig+0x784>)
 800469a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1ef      	bne.n	8004686 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f000 80f9 	beq.w	80048a2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	f040 80cf 	bne.w	8004858 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80046ba:	4b52      	ldr	r3, [pc, #328]	; (8004804 <HAL_RCC_OscConfig+0x784>)
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	f003 0203 	and.w	r2, r3, #3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d12c      	bne.n	8004728 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d8:	3b01      	subs	r3, #1
 80046da:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046dc:	429a      	cmp	r2, r3
 80046de:	d123      	bne.n	8004728 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ea:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d11b      	bne.n	8004728 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d113      	bne.n	8004728 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800470a:	085b      	lsrs	r3, r3, #1
 800470c:	3b01      	subs	r3, #1
 800470e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004710:	429a      	cmp	r2, r3
 8004712:	d109      	bne.n	8004728 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471e:	085b      	lsrs	r3, r3, #1
 8004720:	3b01      	subs	r3, #1
 8004722:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004724:	429a      	cmp	r2, r3
 8004726:	d071      	beq.n	800480c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	2b0c      	cmp	r3, #12
 800472c:	d068      	beq.n	8004800 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800472e:	4b35      	ldr	r3, [pc, #212]	; (8004804 <HAL_RCC_OscConfig+0x784>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d105      	bne.n	8004746 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800473a:	4b32      	ldr	r3, [pc, #200]	; (8004804 <HAL_RCC_OscConfig+0x784>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e0ac      	b.n	80048a4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800474a:	4b2e      	ldr	r3, [pc, #184]	; (8004804 <HAL_RCC_OscConfig+0x784>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a2d      	ldr	r2, [pc, #180]	; (8004804 <HAL_RCC_OscConfig+0x784>)
 8004750:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004754:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004756:	f7fe f863 	bl	8002820 <HAL_GetTick>
 800475a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800475c:	e008      	b.n	8004770 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800475e:	f7fe f85f 	bl	8002820 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d901      	bls.n	8004770 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e099      	b.n	80048a4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004770:	4b24      	ldr	r3, [pc, #144]	; (8004804 <HAL_RCC_OscConfig+0x784>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1f0      	bne.n	800475e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800477c:	4b21      	ldr	r3, [pc, #132]	; (8004804 <HAL_RCC_OscConfig+0x784>)
 800477e:	68da      	ldr	r2, [r3, #12]
 8004780:	4b21      	ldr	r3, [pc, #132]	; (8004808 <HAL_RCC_OscConfig+0x788>)
 8004782:	4013      	ands	r3, r2
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800478c:	3a01      	subs	r2, #1
 800478e:	0112      	lsls	r2, r2, #4
 8004790:	4311      	orrs	r1, r2
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004796:	0212      	lsls	r2, r2, #8
 8004798:	4311      	orrs	r1, r2
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800479e:	0852      	lsrs	r2, r2, #1
 80047a0:	3a01      	subs	r2, #1
 80047a2:	0552      	lsls	r2, r2, #21
 80047a4:	4311      	orrs	r1, r2
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80047aa:	0852      	lsrs	r2, r2, #1
 80047ac:	3a01      	subs	r2, #1
 80047ae:	0652      	lsls	r2, r2, #25
 80047b0:	4311      	orrs	r1, r2
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047b6:	06d2      	lsls	r2, r2, #27
 80047b8:	430a      	orrs	r2, r1
 80047ba:	4912      	ldr	r1, [pc, #72]	; (8004804 <HAL_RCC_OscConfig+0x784>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80047c0:	4b10      	ldr	r3, [pc, #64]	; (8004804 <HAL_RCC_OscConfig+0x784>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a0f      	ldr	r2, [pc, #60]	; (8004804 <HAL_RCC_OscConfig+0x784>)
 80047c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047cc:	4b0d      	ldr	r3, [pc, #52]	; (8004804 <HAL_RCC_OscConfig+0x784>)
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	4a0c      	ldr	r2, [pc, #48]	; (8004804 <HAL_RCC_OscConfig+0x784>)
 80047d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80047d8:	f7fe f822 	bl	8002820 <HAL_GetTick>
 80047dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047de:	e008      	b.n	80047f2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047e0:	f7fe f81e 	bl	8002820 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e058      	b.n	80048a4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047f2:	4b04      	ldr	r3, [pc, #16]	; (8004804 <HAL_RCC_OscConfig+0x784>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d0f0      	beq.n	80047e0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047fe:	e050      	b.n	80048a2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e04f      	b.n	80048a4 <HAL_RCC_OscConfig+0x824>
 8004804:	40021000 	.word	0x40021000
 8004808:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800480c:	4b27      	ldr	r3, [pc, #156]	; (80048ac <HAL_RCC_OscConfig+0x82c>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d144      	bne.n	80048a2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004818:	4b24      	ldr	r3, [pc, #144]	; (80048ac <HAL_RCC_OscConfig+0x82c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a23      	ldr	r2, [pc, #140]	; (80048ac <HAL_RCC_OscConfig+0x82c>)
 800481e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004822:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004824:	4b21      	ldr	r3, [pc, #132]	; (80048ac <HAL_RCC_OscConfig+0x82c>)
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	4a20      	ldr	r2, [pc, #128]	; (80048ac <HAL_RCC_OscConfig+0x82c>)
 800482a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800482e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004830:	f7fd fff6 	bl	8002820 <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004836:	e008      	b.n	800484a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004838:	f7fd fff2 	bl	8002820 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b02      	cmp	r3, #2
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e02c      	b.n	80048a4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800484a:	4b18      	ldr	r3, [pc, #96]	; (80048ac <HAL_RCC_OscConfig+0x82c>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d0f0      	beq.n	8004838 <HAL_RCC_OscConfig+0x7b8>
 8004856:	e024      	b.n	80048a2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	2b0c      	cmp	r3, #12
 800485c:	d01f      	beq.n	800489e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800485e:	4b13      	ldr	r3, [pc, #76]	; (80048ac <HAL_RCC_OscConfig+0x82c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a12      	ldr	r2, [pc, #72]	; (80048ac <HAL_RCC_OscConfig+0x82c>)
 8004864:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004868:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800486a:	f7fd ffd9 	bl	8002820 <HAL_GetTick>
 800486e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004870:	e008      	b.n	8004884 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004872:	f7fd ffd5 	bl	8002820 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d901      	bls.n	8004884 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e00f      	b.n	80048a4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004884:	4b09      	ldr	r3, [pc, #36]	; (80048ac <HAL_RCC_OscConfig+0x82c>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1f0      	bne.n	8004872 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004890:	4b06      	ldr	r3, [pc, #24]	; (80048ac <HAL_RCC_OscConfig+0x82c>)
 8004892:	68da      	ldr	r2, [r3, #12]
 8004894:	4905      	ldr	r1, [pc, #20]	; (80048ac <HAL_RCC_OscConfig+0x82c>)
 8004896:	4b06      	ldr	r3, [pc, #24]	; (80048b0 <HAL_RCC_OscConfig+0x830>)
 8004898:	4013      	ands	r3, r2
 800489a:	60cb      	str	r3, [r1, #12]
 800489c:	e001      	b.n	80048a2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e000      	b.n	80048a4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3720      	adds	r7, #32
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	40021000 	.word	0x40021000
 80048b0:	feeefffc 	.word	0xfeeefffc

080048b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80048be:	2300      	movs	r3, #0
 80048c0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d101      	bne.n	80048cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e11d      	b.n	8004b08 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048cc:	4b90      	ldr	r3, [pc, #576]	; (8004b10 <HAL_RCC_ClockConfig+0x25c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 030f 	and.w	r3, r3, #15
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d910      	bls.n	80048fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048da:	4b8d      	ldr	r3, [pc, #564]	; (8004b10 <HAL_RCC_ClockConfig+0x25c>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f023 020f 	bic.w	r2, r3, #15
 80048e2:	498b      	ldr	r1, [pc, #556]	; (8004b10 <HAL_RCC_ClockConfig+0x25c>)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ea:	4b89      	ldr	r3, [pc, #548]	; (8004b10 <HAL_RCC_ClockConfig+0x25c>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 030f 	and.w	r3, r3, #15
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d001      	beq.n	80048fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e105      	b.n	8004b08 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d010      	beq.n	800492a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	4b81      	ldr	r3, [pc, #516]	; (8004b14 <HAL_RCC_ClockConfig+0x260>)
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004914:	429a      	cmp	r2, r3
 8004916:	d908      	bls.n	800492a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004918:	4b7e      	ldr	r3, [pc, #504]	; (8004b14 <HAL_RCC_ClockConfig+0x260>)
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	497b      	ldr	r1, [pc, #492]	; (8004b14 <HAL_RCC_ClockConfig+0x260>)
 8004926:	4313      	orrs	r3, r2
 8004928:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	d079      	beq.n	8004a2a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	2b03      	cmp	r3, #3
 800493c:	d11e      	bne.n	800497c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800493e:	4b75      	ldr	r3, [pc, #468]	; (8004b14 <HAL_RCC_ClockConfig+0x260>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d101      	bne.n	800494e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e0dc      	b.n	8004b08 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800494e:	f000 fa09 	bl	8004d64 <RCC_GetSysClockFreqFromPLLSource>
 8004952:	4603      	mov	r3, r0
 8004954:	4a70      	ldr	r2, [pc, #448]	; (8004b18 <HAL_RCC_ClockConfig+0x264>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d946      	bls.n	80049e8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800495a:	4b6e      	ldr	r3, [pc, #440]	; (8004b14 <HAL_RCC_ClockConfig+0x260>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d140      	bne.n	80049e8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004966:	4b6b      	ldr	r3, [pc, #428]	; (8004b14 <HAL_RCC_ClockConfig+0x260>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800496e:	4a69      	ldr	r2, [pc, #420]	; (8004b14 <HAL_RCC_ClockConfig+0x260>)
 8004970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004974:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004976:	2380      	movs	r3, #128	; 0x80
 8004978:	617b      	str	r3, [r7, #20]
 800497a:	e035      	b.n	80049e8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	2b02      	cmp	r3, #2
 8004982:	d107      	bne.n	8004994 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004984:	4b63      	ldr	r3, [pc, #396]	; (8004b14 <HAL_RCC_ClockConfig+0x260>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d115      	bne.n	80049bc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e0b9      	b.n	8004b08 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d107      	bne.n	80049ac <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800499c:	4b5d      	ldr	r3, [pc, #372]	; (8004b14 <HAL_RCC_ClockConfig+0x260>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d109      	bne.n	80049bc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e0ad      	b.n	8004b08 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049ac:	4b59      	ldr	r3, [pc, #356]	; (8004b14 <HAL_RCC_ClockConfig+0x260>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d101      	bne.n	80049bc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e0a5      	b.n	8004b08 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80049bc:	f000 f8b4 	bl	8004b28 <HAL_RCC_GetSysClockFreq>
 80049c0:	4603      	mov	r3, r0
 80049c2:	4a55      	ldr	r2, [pc, #340]	; (8004b18 <HAL_RCC_ClockConfig+0x264>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d90f      	bls.n	80049e8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80049c8:	4b52      	ldr	r3, [pc, #328]	; (8004b14 <HAL_RCC_ClockConfig+0x260>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d109      	bne.n	80049e8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80049d4:	4b4f      	ldr	r3, [pc, #316]	; (8004b14 <HAL_RCC_ClockConfig+0x260>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049dc:	4a4d      	ldr	r2, [pc, #308]	; (8004b14 <HAL_RCC_ClockConfig+0x260>)
 80049de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049e2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80049e4:	2380      	movs	r3, #128	; 0x80
 80049e6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049e8:	4b4a      	ldr	r3, [pc, #296]	; (8004b14 <HAL_RCC_ClockConfig+0x260>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f023 0203 	bic.w	r2, r3, #3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	4947      	ldr	r1, [pc, #284]	; (8004b14 <HAL_RCC_ClockConfig+0x260>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049fa:	f7fd ff11 	bl	8002820 <HAL_GetTick>
 80049fe:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a00:	e00a      	b.n	8004a18 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a02:	f7fd ff0d 	bl	8002820 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d901      	bls.n	8004a18 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e077      	b.n	8004b08 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a18:	4b3e      	ldr	r3, [pc, #248]	; (8004b14 <HAL_RCC_ClockConfig+0x260>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f003 020c 	and.w	r2, r3, #12
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d1eb      	bne.n	8004a02 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	2b80      	cmp	r3, #128	; 0x80
 8004a2e:	d105      	bne.n	8004a3c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004a30:	4b38      	ldr	r3, [pc, #224]	; (8004b14 <HAL_RCC_ClockConfig+0x260>)
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	4a37      	ldr	r2, [pc, #220]	; (8004b14 <HAL_RCC_ClockConfig+0x260>)
 8004a36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a3a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d010      	beq.n	8004a6a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	4b31      	ldr	r3, [pc, #196]	; (8004b14 <HAL_RCC_ClockConfig+0x260>)
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d208      	bcs.n	8004a6a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a58:	4b2e      	ldr	r3, [pc, #184]	; (8004b14 <HAL_RCC_ClockConfig+0x260>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	492b      	ldr	r1, [pc, #172]	; (8004b14 <HAL_RCC_ClockConfig+0x260>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a6a:	4b29      	ldr	r3, [pc, #164]	; (8004b10 <HAL_RCC_ClockConfig+0x25c>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d210      	bcs.n	8004a9a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a78:	4b25      	ldr	r3, [pc, #148]	; (8004b10 <HAL_RCC_ClockConfig+0x25c>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f023 020f 	bic.w	r2, r3, #15
 8004a80:	4923      	ldr	r1, [pc, #140]	; (8004b10 <HAL_RCC_ClockConfig+0x25c>)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a88:	4b21      	ldr	r3, [pc, #132]	; (8004b10 <HAL_RCC_ClockConfig+0x25c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 030f 	and.w	r3, r3, #15
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d001      	beq.n	8004a9a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e036      	b.n	8004b08 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0304 	and.w	r3, r3, #4
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d008      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004aa6:	4b1b      	ldr	r3, [pc, #108]	; (8004b14 <HAL_RCC_ClockConfig+0x260>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	4918      	ldr	r1, [pc, #96]	; (8004b14 <HAL_RCC_ClockConfig+0x260>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0308 	and.w	r3, r3, #8
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d009      	beq.n	8004ad8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ac4:	4b13      	ldr	r3, [pc, #76]	; (8004b14 <HAL_RCC_ClockConfig+0x260>)
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	00db      	lsls	r3, r3, #3
 8004ad2:	4910      	ldr	r1, [pc, #64]	; (8004b14 <HAL_RCC_ClockConfig+0x260>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ad8:	f000 f826 	bl	8004b28 <HAL_RCC_GetSysClockFreq>
 8004adc:	4602      	mov	r2, r0
 8004ade:	4b0d      	ldr	r3, [pc, #52]	; (8004b14 <HAL_RCC_ClockConfig+0x260>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	091b      	lsrs	r3, r3, #4
 8004ae4:	f003 030f 	and.w	r3, r3, #15
 8004ae8:	490c      	ldr	r1, [pc, #48]	; (8004b1c <HAL_RCC_ClockConfig+0x268>)
 8004aea:	5ccb      	ldrb	r3, [r1, r3]
 8004aec:	f003 031f 	and.w	r3, r3, #31
 8004af0:	fa22 f303 	lsr.w	r3, r2, r3
 8004af4:	4a0a      	ldr	r2, [pc, #40]	; (8004b20 <HAL_RCC_ClockConfig+0x26c>)
 8004af6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004af8:	4b0a      	ldr	r3, [pc, #40]	; (8004b24 <HAL_RCC_ClockConfig+0x270>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7fd fe3f 	bl	8002780 <HAL_InitTick>
 8004b02:	4603      	mov	r3, r0
 8004b04:	73fb      	strb	r3, [r7, #15]

  return status;
 8004b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3718      	adds	r7, #24
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	40022000 	.word	0x40022000
 8004b14:	40021000 	.word	0x40021000
 8004b18:	04c4b400 	.word	0x04c4b400
 8004b1c:	0800b264 	.word	0x0800b264
 8004b20:	20000008 	.word	0x20000008
 8004b24:	2000000c 	.word	0x2000000c

08004b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b089      	sub	sp, #36	; 0x24
 8004b2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	61fb      	str	r3, [r7, #28]
 8004b32:	2300      	movs	r3, #0
 8004b34:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b36:	4b3e      	ldr	r3, [pc, #248]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f003 030c 	and.w	r3, r3, #12
 8004b3e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b40:	4b3b      	ldr	r3, [pc, #236]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f003 0303 	and.w	r3, r3, #3
 8004b48:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d005      	beq.n	8004b5c <HAL_RCC_GetSysClockFreq+0x34>
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	2b0c      	cmp	r3, #12
 8004b54:	d121      	bne.n	8004b9a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d11e      	bne.n	8004b9a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b5c:	4b34      	ldr	r3, [pc, #208]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0308 	and.w	r3, r3, #8
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d107      	bne.n	8004b78 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b68:	4b31      	ldr	r3, [pc, #196]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b6e:	0a1b      	lsrs	r3, r3, #8
 8004b70:	f003 030f 	and.w	r3, r3, #15
 8004b74:	61fb      	str	r3, [r7, #28]
 8004b76:	e005      	b.n	8004b84 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b78:	4b2d      	ldr	r3, [pc, #180]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	091b      	lsrs	r3, r3, #4
 8004b7e:	f003 030f 	and.w	r3, r3, #15
 8004b82:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004b84:	4a2b      	ldr	r2, [pc, #172]	; (8004c34 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b8c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10d      	bne.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b98:	e00a      	b.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	2b04      	cmp	r3, #4
 8004b9e:	d102      	bne.n	8004ba6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ba0:	4b25      	ldr	r3, [pc, #148]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ba2:	61bb      	str	r3, [r7, #24]
 8004ba4:	e004      	b.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	d101      	bne.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004bac:	4b23      	ldr	r3, [pc, #140]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x114>)
 8004bae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	2b0c      	cmp	r3, #12
 8004bb4:	d134      	bne.n	8004c20 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004bb6:	4b1e      	ldr	r3, [pc, #120]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	f003 0303 	and.w	r3, r3, #3
 8004bbe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d003      	beq.n	8004bce <HAL_RCC_GetSysClockFreq+0xa6>
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	2b03      	cmp	r3, #3
 8004bca:	d003      	beq.n	8004bd4 <HAL_RCC_GetSysClockFreq+0xac>
 8004bcc:	e005      	b.n	8004bda <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004bce:	4b1a      	ldr	r3, [pc, #104]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x110>)
 8004bd0:	617b      	str	r3, [r7, #20]
      break;
 8004bd2:	e005      	b.n	8004be0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004bd4:	4b19      	ldr	r3, [pc, #100]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x114>)
 8004bd6:	617b      	str	r3, [r7, #20]
      break;
 8004bd8:	e002      	b.n	8004be0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	617b      	str	r3, [r7, #20]
      break;
 8004bde:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004be0:	4b13      	ldr	r3, [pc, #76]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	091b      	lsrs	r3, r3, #4
 8004be6:	f003 030f 	and.w	r3, r3, #15
 8004bea:	3301      	adds	r3, #1
 8004bec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004bee:	4b10      	ldr	r3, [pc, #64]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	0a1b      	lsrs	r3, r3, #8
 8004bf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	fb03 f202 	mul.w	r2, r3, r2
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c04:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c06:	4b0a      	ldr	r3, [pc, #40]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	0e5b      	lsrs	r3, r3, #25
 8004c0c:	f003 0303 	and.w	r3, r3, #3
 8004c10:	3301      	adds	r3, #1
 8004c12:	005b      	lsls	r3, r3, #1
 8004c14:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c1e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004c20:	69bb      	ldr	r3, [r7, #24]
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3724      	adds	r7, #36	; 0x24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	40021000 	.word	0x40021000
 8004c34:	0800b27c 	.word	0x0800b27c
 8004c38:	00f42400 	.word	0x00f42400
 8004c3c:	007a1200 	.word	0x007a1200

08004c40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c44:	4b03      	ldr	r3, [pc, #12]	; (8004c54 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c46:	681b      	ldr	r3, [r3, #0]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	20000008 	.word	0x20000008

08004c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004c5c:	f7ff fff0 	bl	8004c40 <HAL_RCC_GetHCLKFreq>
 8004c60:	4602      	mov	r2, r0
 8004c62:	4b06      	ldr	r3, [pc, #24]	; (8004c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	0a1b      	lsrs	r3, r3, #8
 8004c68:	f003 0307 	and.w	r3, r3, #7
 8004c6c:	4904      	ldr	r1, [pc, #16]	; (8004c80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c6e:	5ccb      	ldrb	r3, [r1, r3]
 8004c70:	f003 031f 	and.w	r3, r3, #31
 8004c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	40021000 	.word	0x40021000
 8004c80:	0800b274 	.word	0x0800b274

08004c84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004c88:	f7ff ffda 	bl	8004c40 <HAL_RCC_GetHCLKFreq>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	4b06      	ldr	r3, [pc, #24]	; (8004ca8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	0adb      	lsrs	r3, r3, #11
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	4904      	ldr	r1, [pc, #16]	; (8004cac <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c9a:	5ccb      	ldrb	r3, [r1, r3]
 8004c9c:	f003 031f 	and.w	r3, r3, #31
 8004ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	40021000 	.word	0x40021000
 8004cac:	0800b274 	.word	0x0800b274

08004cb0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004cb8:	2300      	movs	r3, #0
 8004cba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004cbc:	4b27      	ldr	r3, [pc, #156]	; (8004d5c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d003      	beq.n	8004cd0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004cc8:	f7ff f906 	bl	8003ed8 <HAL_PWREx_GetVoltageRange>
 8004ccc:	6178      	str	r0, [r7, #20]
 8004cce:	e014      	b.n	8004cfa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cd0:	4b22      	ldr	r3, [pc, #136]	; (8004d5c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd4:	4a21      	ldr	r2, [pc, #132]	; (8004d5c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004cd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cda:	6593      	str	r3, [r2, #88]	; 0x58
 8004cdc:	4b1f      	ldr	r3, [pc, #124]	; (8004d5c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ce4:	60fb      	str	r3, [r7, #12]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ce8:	f7ff f8f6 	bl	8003ed8 <HAL_PWREx_GetVoltageRange>
 8004cec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004cee:	4b1b      	ldr	r3, [pc, #108]	; (8004d5c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cf2:	4a1a      	ldr	r2, [pc, #104]	; (8004d5c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004cf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cf8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d00:	d10b      	bne.n	8004d1a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b80      	cmp	r3, #128	; 0x80
 8004d06:	d913      	bls.n	8004d30 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2ba0      	cmp	r3, #160	; 0xa0
 8004d0c:	d902      	bls.n	8004d14 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d0e:	2302      	movs	r3, #2
 8004d10:	613b      	str	r3, [r7, #16]
 8004d12:	e00d      	b.n	8004d30 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d14:	2301      	movs	r3, #1
 8004d16:	613b      	str	r3, [r7, #16]
 8004d18:	e00a      	b.n	8004d30 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b7f      	cmp	r3, #127	; 0x7f
 8004d1e:	d902      	bls.n	8004d26 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004d20:	2302      	movs	r3, #2
 8004d22:	613b      	str	r3, [r7, #16]
 8004d24:	e004      	b.n	8004d30 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2b70      	cmp	r3, #112	; 0x70
 8004d2a:	d101      	bne.n	8004d30 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004d30:	4b0b      	ldr	r3, [pc, #44]	; (8004d60 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f023 020f 	bic.w	r2, r3, #15
 8004d38:	4909      	ldr	r1, [pc, #36]	; (8004d60 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004d40:	4b07      	ldr	r3, [pc, #28]	; (8004d60 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 030f 	and.w	r3, r3, #15
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d001      	beq.n	8004d52 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e000      	b.n	8004d54 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3718      	adds	r7, #24
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	40021000 	.word	0x40021000
 8004d60:	40022000 	.word	0x40022000

08004d64 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b087      	sub	sp, #28
 8004d68:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d6a:	4b2d      	ldr	r3, [pc, #180]	; (8004e20 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f003 0303 	and.w	r3, r3, #3
 8004d72:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2b03      	cmp	r3, #3
 8004d78:	d00b      	beq.n	8004d92 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2b03      	cmp	r3, #3
 8004d7e:	d825      	bhi.n	8004dcc <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d008      	beq.n	8004d98 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d11f      	bne.n	8004dcc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004d8c:	4b25      	ldr	r3, [pc, #148]	; (8004e24 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004d8e:	613b      	str	r3, [r7, #16]
    break;
 8004d90:	e01f      	b.n	8004dd2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004d92:	4b25      	ldr	r3, [pc, #148]	; (8004e28 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004d94:	613b      	str	r3, [r7, #16]
    break;
 8004d96:	e01c      	b.n	8004dd2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d98:	4b21      	ldr	r3, [pc, #132]	; (8004e20 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0308 	and.w	r3, r3, #8
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d107      	bne.n	8004db4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004da4:	4b1e      	ldr	r3, [pc, #120]	; (8004e20 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004daa:	0a1b      	lsrs	r3, r3, #8
 8004dac:	f003 030f 	and.w	r3, r3, #15
 8004db0:	617b      	str	r3, [r7, #20]
 8004db2:	e005      	b.n	8004dc0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004db4:	4b1a      	ldr	r3, [pc, #104]	; (8004e20 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	091b      	lsrs	r3, r3, #4
 8004dba:	f003 030f 	and.w	r3, r3, #15
 8004dbe:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004dc0:	4a1a      	ldr	r2, [pc, #104]	; (8004e2c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dc8:	613b      	str	r3, [r7, #16]
    break;
 8004dca:	e002      	b.n	8004dd2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	613b      	str	r3, [r7, #16]
    break;
 8004dd0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004dd2:	4b13      	ldr	r3, [pc, #76]	; (8004e20 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	091b      	lsrs	r3, r3, #4
 8004dd8:	f003 030f 	and.w	r3, r3, #15
 8004ddc:	3301      	adds	r3, #1
 8004dde:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004de0:	4b0f      	ldr	r3, [pc, #60]	; (8004e20 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	0a1b      	lsrs	r3, r3, #8
 8004de6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	fb03 f202 	mul.w	r2, r3, r2
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004df8:	4b09      	ldr	r3, [pc, #36]	; (8004e20 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	0e5b      	lsrs	r3, r3, #25
 8004dfe:	f003 0303 	and.w	r3, r3, #3
 8004e02:	3301      	adds	r3, #1
 8004e04:	005b      	lsls	r3, r3, #1
 8004e06:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e10:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004e12:	683b      	ldr	r3, [r7, #0]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	371c      	adds	r7, #28
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr
 8004e20:	40021000 	.word	0x40021000
 8004e24:	00f42400 	.word	0x00f42400
 8004e28:	007a1200 	.word	0x007a1200
 8004e2c:	0800b27c 	.word	0x0800b27c

08004e30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e38:	2300      	movs	r3, #0
 8004e3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d040      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e50:	2b80      	cmp	r3, #128	; 0x80
 8004e52:	d02a      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004e54:	2b80      	cmp	r3, #128	; 0x80
 8004e56:	d825      	bhi.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004e58:	2b60      	cmp	r3, #96	; 0x60
 8004e5a:	d026      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004e5c:	2b60      	cmp	r3, #96	; 0x60
 8004e5e:	d821      	bhi.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004e60:	2b40      	cmp	r3, #64	; 0x40
 8004e62:	d006      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004e64:	2b40      	cmp	r3, #64	; 0x40
 8004e66:	d81d      	bhi.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d009      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004e6c:	2b20      	cmp	r3, #32
 8004e6e:	d010      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004e70:	e018      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e72:	4b89      	ldr	r3, [pc, #548]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	4a88      	ldr	r2, [pc, #544]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e7c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e7e:	e015      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	3304      	adds	r3, #4
 8004e84:	2100      	movs	r1, #0
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 fb02 	bl	8005490 <RCCEx_PLLSAI1_Config>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e90:	e00c      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	3320      	adds	r3, #32
 8004e96:	2100      	movs	r1, #0
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f000 fbed 	bl	8005678 <RCCEx_PLLSAI2_Config>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ea2:	e003      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	74fb      	strb	r3, [r7, #19]
      break;
 8004ea8:	e000      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004eaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004eac:	7cfb      	ldrb	r3, [r7, #19]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10b      	bne.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004eb2:	4b79      	ldr	r3, [pc, #484]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004eb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004eb8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ec0:	4975      	ldr	r1, [pc, #468]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004ec8:	e001      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eca:	7cfb      	ldrb	r3, [r7, #19]
 8004ecc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d047      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ee2:	d030      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ee8:	d82a      	bhi.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004eea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eee:	d02a      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004ef0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ef4:	d824      	bhi.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004ef6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004efa:	d008      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f00:	d81e      	bhi.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00a      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f0a:	d010      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004f0c:	e018      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f0e:	4b62      	ldr	r3, [pc, #392]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	4a61      	ldr	r2, [pc, #388]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f18:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f1a:	e015      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	3304      	adds	r3, #4
 8004f20:	2100      	movs	r1, #0
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 fab4 	bl	8005490 <RCCEx_PLLSAI1_Config>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f2c:	e00c      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	3320      	adds	r3, #32
 8004f32:	2100      	movs	r1, #0
 8004f34:	4618      	mov	r0, r3
 8004f36:	f000 fb9f 	bl	8005678 <RCCEx_PLLSAI2_Config>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f3e:	e003      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	74fb      	strb	r3, [r7, #19]
      break;
 8004f44:	e000      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004f46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f48:	7cfb      	ldrb	r3, [r7, #19]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10b      	bne.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f4e:	4b52      	ldr	r3, [pc, #328]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5c:	494e      	ldr	r1, [pc, #312]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004f64:	e001      	b.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f66:	7cfb      	ldrb	r3, [r7, #19]
 8004f68:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f000 809f 	beq.w	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f7c:	4b46      	ldr	r3, [pc, #280]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d101      	bne.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e000      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00d      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f92:	4b41      	ldr	r3, [pc, #260]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f96:	4a40      	ldr	r2, [pc, #256]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f9c:	6593      	str	r3, [r2, #88]	; 0x58
 8004f9e:	4b3e      	ldr	r3, [pc, #248]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa6:	60bb      	str	r3, [r7, #8]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004faa:	2301      	movs	r3, #1
 8004fac:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fae:	4b3b      	ldr	r3, [pc, #236]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a3a      	ldr	r2, [pc, #232]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fb8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fba:	f7fd fc31 	bl	8002820 <HAL_GetTick>
 8004fbe:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004fc0:	e009      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fc2:	f7fd fc2d 	bl	8002820 <HAL_GetTick>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d902      	bls.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	74fb      	strb	r3, [r7, #19]
        break;
 8004fd4:	e005      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004fd6:	4b31      	ldr	r3, [pc, #196]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d0ef      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004fe2:	7cfb      	ldrb	r3, [r7, #19]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d15b      	bne.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004fe8:	4b2b      	ldr	r3, [pc, #172]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ff2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d01f      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	429a      	cmp	r2, r3
 8005004:	d019      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005006:	4b24      	ldr	r3, [pc, #144]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005010:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005012:	4b21      	ldr	r3, [pc, #132]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005018:	4a1f      	ldr	r2, [pc, #124]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800501a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800501e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005022:	4b1d      	ldr	r3, [pc, #116]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005028:	4a1b      	ldr	r2, [pc, #108]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800502a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800502e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005032:	4a19      	ldr	r2, [pc, #100]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f003 0301 	and.w	r3, r3, #1
 8005040:	2b00      	cmp	r3, #0
 8005042:	d016      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005044:	f7fd fbec 	bl	8002820 <HAL_GetTick>
 8005048:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800504a:	e00b      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800504c:	f7fd fbe8 	bl	8002820 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	f241 3288 	movw	r2, #5000	; 0x1388
 800505a:	4293      	cmp	r3, r2
 800505c:	d902      	bls.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	74fb      	strb	r3, [r7, #19]
            break;
 8005062:	e006      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005064:	4b0c      	ldr	r3, [pc, #48]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d0ec      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005072:	7cfb      	ldrb	r3, [r7, #19]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10c      	bne.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005078:	4b07      	ldr	r3, [pc, #28]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800507a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800507e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005088:	4903      	ldr	r1, [pc, #12]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800508a:	4313      	orrs	r3, r2
 800508c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005090:	e008      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005092:	7cfb      	ldrb	r3, [r7, #19]
 8005094:	74bb      	strb	r3, [r7, #18]
 8005096:	e005      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005098:	40021000 	.word	0x40021000
 800509c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a0:	7cfb      	ldrb	r3, [r7, #19]
 80050a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050a4:	7c7b      	ldrb	r3, [r7, #17]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d105      	bne.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050aa:	4ba0      	ldr	r3, [pc, #640]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ae:	4a9f      	ldr	r2, [pc, #636]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00a      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050c2:	4b9a      	ldr	r3, [pc, #616]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c8:	f023 0203 	bic.w	r2, r3, #3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d0:	4996      	ldr	r1, [pc, #600]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00a      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050e4:	4b91      	ldr	r3, [pc, #580]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ea:	f023 020c 	bic.w	r2, r3, #12
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f2:	498e      	ldr	r1, [pc, #568]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0304 	and.w	r3, r3, #4
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00a      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005106:	4b89      	ldr	r3, [pc, #548]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005114:	4985      	ldr	r1, [pc, #532]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005116:	4313      	orrs	r3, r2
 8005118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0308 	and.w	r3, r3, #8
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00a      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005128:	4b80      	ldr	r3, [pc, #512]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800512a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800512e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005136:	497d      	ldr	r1, [pc, #500]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005138:	4313      	orrs	r3, r2
 800513a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0310 	and.w	r3, r3, #16
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00a      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800514a:	4b78      	ldr	r3, [pc, #480]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800514c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005150:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005158:	4974      	ldr	r1, [pc, #464]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800515a:	4313      	orrs	r3, r2
 800515c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0320 	and.w	r3, r3, #32
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00a      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800516c:	4b6f      	ldr	r3, [pc, #444]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800516e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005172:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800517a:	496c      	ldr	r1, [pc, #432]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800517c:	4313      	orrs	r3, r2
 800517e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00a      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800518e:	4b67      	ldr	r3, [pc, #412]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005194:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800519c:	4963      	ldr	r1, [pc, #396]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00a      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051b0:	4b5e      	ldr	r3, [pc, #376]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051be:	495b      	ldr	r1, [pc, #364]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00a      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051d2:	4b56      	ldr	r3, [pc, #344]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e0:	4952      	ldr	r1, [pc, #328]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00a      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051f4:	4b4d      	ldr	r3, [pc, #308]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005202:	494a      	ldr	r1, [pc, #296]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005204:	4313      	orrs	r3, r2
 8005206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00a      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005216:	4b45      	ldr	r3, [pc, #276]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005224:	4941      	ldr	r1, [pc, #260]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005226:	4313      	orrs	r3, r2
 8005228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00a      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005238:	4b3c      	ldr	r3, [pc, #240]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800523a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800523e:	f023 0203 	bic.w	r2, r3, #3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005246:	4939      	ldr	r1, [pc, #228]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005248:	4313      	orrs	r3, r2
 800524a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d028      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800525a:	4b34      	ldr	r3, [pc, #208]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800525c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005260:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005268:	4930      	ldr	r1, [pc, #192]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800526a:	4313      	orrs	r3, r2
 800526c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005274:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005278:	d106      	bne.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800527a:	4b2c      	ldr	r3, [pc, #176]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	4a2b      	ldr	r2, [pc, #172]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005280:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005284:	60d3      	str	r3, [r2, #12]
 8005286:	e011      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800528c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005290:	d10c      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	3304      	adds	r3, #4
 8005296:	2101      	movs	r1, #1
 8005298:	4618      	mov	r0, r3
 800529a:	f000 f8f9 	bl	8005490 <RCCEx_PLLSAI1_Config>
 800529e:	4603      	mov	r3, r0
 80052a0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80052a2:	7cfb      	ldrb	r3, [r7, #19]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d001      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80052a8:	7cfb      	ldrb	r3, [r7, #19]
 80052aa:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d04d      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052c0:	d108      	bne.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80052c2:	4b1a      	ldr	r3, [pc, #104]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052c8:	4a18      	ldr	r2, [pc, #96]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052ce:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80052d2:	e012      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80052d4:	4b15      	ldr	r3, [pc, #84]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052da:	4a14      	ldr	r2, [pc, #80]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052e0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80052e4:	4b11      	ldr	r3, [pc, #68]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052f2:	490e      	ldr	r1, [pc, #56]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005302:	d106      	bne.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005304:	4b09      	ldr	r3, [pc, #36]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	4a08      	ldr	r2, [pc, #32]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800530a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800530e:	60d3      	str	r3, [r2, #12]
 8005310:	e020      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005316:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800531a:	d109      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800531c:	4b03      	ldr	r3, [pc, #12]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	4a02      	ldr	r2, [pc, #8]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005326:	60d3      	str	r3, [r2, #12]
 8005328:	e014      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800532a:	bf00      	nop
 800532c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005334:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005338:	d10c      	bne.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	3304      	adds	r3, #4
 800533e:	2101      	movs	r1, #1
 8005340:	4618      	mov	r0, r3
 8005342:	f000 f8a5 	bl	8005490 <RCCEx_PLLSAI1_Config>
 8005346:	4603      	mov	r3, r0
 8005348:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800534a:	7cfb      	ldrb	r3, [r7, #19]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d001      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005350:	7cfb      	ldrb	r3, [r7, #19]
 8005352:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d028      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005360:	4b4a      	ldr	r3, [pc, #296]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005366:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800536e:	4947      	ldr	r1, [pc, #284]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005370:	4313      	orrs	r3, r2
 8005372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800537a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800537e:	d106      	bne.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005380:	4b42      	ldr	r3, [pc, #264]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	4a41      	ldr	r2, [pc, #260]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005386:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800538a:	60d3      	str	r3, [r2, #12]
 800538c:	e011      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005392:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005396:	d10c      	bne.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	3304      	adds	r3, #4
 800539c:	2101      	movs	r1, #1
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 f876 	bl	8005490 <RCCEx_PLLSAI1_Config>
 80053a4:	4603      	mov	r3, r0
 80053a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053a8:	7cfb      	ldrb	r3, [r7, #19]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d001      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80053ae:	7cfb      	ldrb	r3, [r7, #19]
 80053b0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d01e      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053be:	4b33      	ldr	r3, [pc, #204]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053ce:	492f      	ldr	r1, [pc, #188]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053e0:	d10c      	bne.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	3304      	adds	r3, #4
 80053e6:	2102      	movs	r1, #2
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 f851 	bl	8005490 <RCCEx_PLLSAI1_Config>
 80053ee:	4603      	mov	r3, r0
 80053f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053f2:	7cfb      	ldrb	r3, [r7, #19]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d001      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80053f8:	7cfb      	ldrb	r3, [r7, #19]
 80053fa:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00b      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005408:	4b20      	ldr	r3, [pc, #128]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800540a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800540e:	f023 0204 	bic.w	r2, r3, #4
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005418:	491c      	ldr	r1, [pc, #112]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800541a:	4313      	orrs	r3, r2
 800541c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00b      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800542c:	4b17      	ldr	r3, [pc, #92]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800542e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005432:	f023 0218 	bic.w	r2, r3, #24
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800543c:	4913      	ldr	r1, [pc, #76]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800543e:	4313      	orrs	r3, r2
 8005440:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d017      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005450:	4b0e      	ldr	r3, [pc, #56]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005452:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005456:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005460:	490a      	ldr	r1, [pc, #40]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005462:	4313      	orrs	r3, r2
 8005464:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800546e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005472:	d105      	bne.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005474:	4b05      	ldr	r3, [pc, #20]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	4a04      	ldr	r2, [pc, #16]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800547a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800547e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005480:	7cbb      	ldrb	r3, [r7, #18]
}
 8005482:	4618      	mov	r0, r3
 8005484:	3718      	adds	r7, #24
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	40021000 	.word	0x40021000

08005490 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800549a:	2300      	movs	r3, #0
 800549c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800549e:	4b72      	ldr	r3, [pc, #456]	; (8005668 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	f003 0303 	and.w	r3, r3, #3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00e      	beq.n	80054c8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80054aa:	4b6f      	ldr	r3, [pc, #444]	; (8005668 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	f003 0203 	and.w	r2, r3, #3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d103      	bne.n	80054c2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
       ||
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d142      	bne.n	8005548 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	73fb      	strb	r3, [r7, #15]
 80054c6:	e03f      	b.n	8005548 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2b03      	cmp	r3, #3
 80054ce:	d018      	beq.n	8005502 <RCCEx_PLLSAI1_Config+0x72>
 80054d0:	2b03      	cmp	r3, #3
 80054d2:	d825      	bhi.n	8005520 <RCCEx_PLLSAI1_Config+0x90>
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d002      	beq.n	80054de <RCCEx_PLLSAI1_Config+0x4e>
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d009      	beq.n	80054f0 <RCCEx_PLLSAI1_Config+0x60>
 80054dc:	e020      	b.n	8005520 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80054de:	4b62      	ldr	r3, [pc, #392]	; (8005668 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d11d      	bne.n	8005526 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054ee:	e01a      	b.n	8005526 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80054f0:	4b5d      	ldr	r3, [pc, #372]	; (8005668 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d116      	bne.n	800552a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005500:	e013      	b.n	800552a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005502:	4b59      	ldr	r3, [pc, #356]	; (8005668 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10f      	bne.n	800552e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800550e:	4b56      	ldr	r3, [pc, #344]	; (8005668 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d109      	bne.n	800552e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800551e:	e006      	b.n	800552e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	73fb      	strb	r3, [r7, #15]
      break;
 8005524:	e004      	b.n	8005530 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005526:	bf00      	nop
 8005528:	e002      	b.n	8005530 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800552a:	bf00      	nop
 800552c:	e000      	b.n	8005530 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800552e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005530:	7bfb      	ldrb	r3, [r7, #15]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d108      	bne.n	8005548 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005536:	4b4c      	ldr	r3, [pc, #304]	; (8005668 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	f023 0203 	bic.w	r2, r3, #3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4949      	ldr	r1, [pc, #292]	; (8005668 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005544:	4313      	orrs	r3, r2
 8005546:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005548:	7bfb      	ldrb	r3, [r7, #15]
 800554a:	2b00      	cmp	r3, #0
 800554c:	f040 8086 	bne.w	800565c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005550:	4b45      	ldr	r3, [pc, #276]	; (8005668 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a44      	ldr	r2, [pc, #272]	; (8005668 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005556:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800555a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800555c:	f7fd f960 	bl	8002820 <HAL_GetTick>
 8005560:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005562:	e009      	b.n	8005578 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005564:	f7fd f95c 	bl	8002820 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	2b02      	cmp	r3, #2
 8005570:	d902      	bls.n	8005578 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	73fb      	strb	r3, [r7, #15]
        break;
 8005576:	e005      	b.n	8005584 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005578:	4b3b      	ldr	r3, [pc, #236]	; (8005668 <RCCEx_PLLSAI1_Config+0x1d8>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1ef      	bne.n	8005564 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005584:	7bfb      	ldrb	r3, [r7, #15]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d168      	bne.n	800565c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d113      	bne.n	80055b8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005590:	4b35      	ldr	r3, [pc, #212]	; (8005668 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005592:	691a      	ldr	r2, [r3, #16]
 8005594:	4b35      	ldr	r3, [pc, #212]	; (800566c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005596:	4013      	ands	r3, r2
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	6892      	ldr	r2, [r2, #8]
 800559c:	0211      	lsls	r1, r2, #8
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	68d2      	ldr	r2, [r2, #12]
 80055a2:	06d2      	lsls	r2, r2, #27
 80055a4:	4311      	orrs	r1, r2
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	6852      	ldr	r2, [r2, #4]
 80055aa:	3a01      	subs	r2, #1
 80055ac:	0112      	lsls	r2, r2, #4
 80055ae:	430a      	orrs	r2, r1
 80055b0:	492d      	ldr	r1, [pc, #180]	; (8005668 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	610b      	str	r3, [r1, #16]
 80055b6:	e02d      	b.n	8005614 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d115      	bne.n	80055ea <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055be:	4b2a      	ldr	r3, [pc, #168]	; (8005668 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055c0:	691a      	ldr	r2, [r3, #16]
 80055c2:	4b2b      	ldr	r3, [pc, #172]	; (8005670 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055c4:	4013      	ands	r3, r2
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	6892      	ldr	r2, [r2, #8]
 80055ca:	0211      	lsls	r1, r2, #8
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	6912      	ldr	r2, [r2, #16]
 80055d0:	0852      	lsrs	r2, r2, #1
 80055d2:	3a01      	subs	r2, #1
 80055d4:	0552      	lsls	r2, r2, #21
 80055d6:	4311      	orrs	r1, r2
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	6852      	ldr	r2, [r2, #4]
 80055dc:	3a01      	subs	r2, #1
 80055de:	0112      	lsls	r2, r2, #4
 80055e0:	430a      	orrs	r2, r1
 80055e2:	4921      	ldr	r1, [pc, #132]	; (8005668 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	610b      	str	r3, [r1, #16]
 80055e8:	e014      	b.n	8005614 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055ea:	4b1f      	ldr	r3, [pc, #124]	; (8005668 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055ec:	691a      	ldr	r2, [r3, #16]
 80055ee:	4b21      	ldr	r3, [pc, #132]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055f0:	4013      	ands	r3, r2
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	6892      	ldr	r2, [r2, #8]
 80055f6:	0211      	lsls	r1, r2, #8
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	6952      	ldr	r2, [r2, #20]
 80055fc:	0852      	lsrs	r2, r2, #1
 80055fe:	3a01      	subs	r2, #1
 8005600:	0652      	lsls	r2, r2, #25
 8005602:	4311      	orrs	r1, r2
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	6852      	ldr	r2, [r2, #4]
 8005608:	3a01      	subs	r2, #1
 800560a:	0112      	lsls	r2, r2, #4
 800560c:	430a      	orrs	r2, r1
 800560e:	4916      	ldr	r1, [pc, #88]	; (8005668 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005610:	4313      	orrs	r3, r2
 8005612:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005614:	4b14      	ldr	r3, [pc, #80]	; (8005668 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a13      	ldr	r2, [pc, #76]	; (8005668 <RCCEx_PLLSAI1_Config+0x1d8>)
 800561a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800561e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005620:	f7fd f8fe 	bl	8002820 <HAL_GetTick>
 8005624:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005626:	e009      	b.n	800563c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005628:	f7fd f8fa 	bl	8002820 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b02      	cmp	r3, #2
 8005634:	d902      	bls.n	800563c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	73fb      	strb	r3, [r7, #15]
          break;
 800563a:	e005      	b.n	8005648 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800563c:	4b0a      	ldr	r3, [pc, #40]	; (8005668 <RCCEx_PLLSAI1_Config+0x1d8>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d0ef      	beq.n	8005628 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005648:	7bfb      	ldrb	r3, [r7, #15]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d106      	bne.n	800565c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800564e:	4b06      	ldr	r3, [pc, #24]	; (8005668 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005650:	691a      	ldr	r2, [r3, #16]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	4904      	ldr	r1, [pc, #16]	; (8005668 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005658:	4313      	orrs	r3, r2
 800565a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800565c:	7bfb      	ldrb	r3, [r7, #15]
}
 800565e:	4618      	mov	r0, r3
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	40021000 	.word	0x40021000
 800566c:	07ff800f 	.word	0x07ff800f
 8005670:	ff9f800f 	.word	0xff9f800f
 8005674:	f9ff800f 	.word	0xf9ff800f

08005678 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005682:	2300      	movs	r3, #0
 8005684:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005686:	4b72      	ldr	r3, [pc, #456]	; (8005850 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	f003 0303 	and.w	r3, r3, #3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00e      	beq.n	80056b0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005692:	4b6f      	ldr	r3, [pc, #444]	; (8005850 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	f003 0203 	and.w	r2, r3, #3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d103      	bne.n	80056aa <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
       ||
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d142      	bne.n	8005730 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	73fb      	strb	r3, [r7, #15]
 80056ae:	e03f      	b.n	8005730 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2b03      	cmp	r3, #3
 80056b6:	d018      	beq.n	80056ea <RCCEx_PLLSAI2_Config+0x72>
 80056b8:	2b03      	cmp	r3, #3
 80056ba:	d825      	bhi.n	8005708 <RCCEx_PLLSAI2_Config+0x90>
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d002      	beq.n	80056c6 <RCCEx_PLLSAI2_Config+0x4e>
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d009      	beq.n	80056d8 <RCCEx_PLLSAI2_Config+0x60>
 80056c4:	e020      	b.n	8005708 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80056c6:	4b62      	ldr	r3, [pc, #392]	; (8005850 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d11d      	bne.n	800570e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056d6:	e01a      	b.n	800570e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056d8:	4b5d      	ldr	r3, [pc, #372]	; (8005850 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d116      	bne.n	8005712 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056e8:	e013      	b.n	8005712 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80056ea:	4b59      	ldr	r3, [pc, #356]	; (8005850 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10f      	bne.n	8005716 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80056f6:	4b56      	ldr	r3, [pc, #344]	; (8005850 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d109      	bne.n	8005716 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005706:	e006      	b.n	8005716 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	73fb      	strb	r3, [r7, #15]
      break;
 800570c:	e004      	b.n	8005718 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800570e:	bf00      	nop
 8005710:	e002      	b.n	8005718 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005712:	bf00      	nop
 8005714:	e000      	b.n	8005718 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005716:	bf00      	nop
    }

    if(status == HAL_OK)
 8005718:	7bfb      	ldrb	r3, [r7, #15]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d108      	bne.n	8005730 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800571e:	4b4c      	ldr	r3, [pc, #304]	; (8005850 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	f023 0203 	bic.w	r2, r3, #3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4949      	ldr	r1, [pc, #292]	; (8005850 <RCCEx_PLLSAI2_Config+0x1d8>)
 800572c:	4313      	orrs	r3, r2
 800572e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005730:	7bfb      	ldrb	r3, [r7, #15]
 8005732:	2b00      	cmp	r3, #0
 8005734:	f040 8086 	bne.w	8005844 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005738:	4b45      	ldr	r3, [pc, #276]	; (8005850 <RCCEx_PLLSAI2_Config+0x1d8>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a44      	ldr	r2, [pc, #272]	; (8005850 <RCCEx_PLLSAI2_Config+0x1d8>)
 800573e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005742:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005744:	f7fd f86c 	bl	8002820 <HAL_GetTick>
 8005748:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800574a:	e009      	b.n	8005760 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800574c:	f7fd f868 	bl	8002820 <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	2b02      	cmp	r3, #2
 8005758:	d902      	bls.n	8005760 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	73fb      	strb	r3, [r7, #15]
        break;
 800575e:	e005      	b.n	800576c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005760:	4b3b      	ldr	r3, [pc, #236]	; (8005850 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1ef      	bne.n	800574c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800576c:	7bfb      	ldrb	r3, [r7, #15]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d168      	bne.n	8005844 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d113      	bne.n	80057a0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005778:	4b35      	ldr	r3, [pc, #212]	; (8005850 <RCCEx_PLLSAI2_Config+0x1d8>)
 800577a:	695a      	ldr	r2, [r3, #20]
 800577c:	4b35      	ldr	r3, [pc, #212]	; (8005854 <RCCEx_PLLSAI2_Config+0x1dc>)
 800577e:	4013      	ands	r3, r2
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	6892      	ldr	r2, [r2, #8]
 8005784:	0211      	lsls	r1, r2, #8
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	68d2      	ldr	r2, [r2, #12]
 800578a:	06d2      	lsls	r2, r2, #27
 800578c:	4311      	orrs	r1, r2
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	6852      	ldr	r2, [r2, #4]
 8005792:	3a01      	subs	r2, #1
 8005794:	0112      	lsls	r2, r2, #4
 8005796:	430a      	orrs	r2, r1
 8005798:	492d      	ldr	r1, [pc, #180]	; (8005850 <RCCEx_PLLSAI2_Config+0x1d8>)
 800579a:	4313      	orrs	r3, r2
 800579c:	614b      	str	r3, [r1, #20]
 800579e:	e02d      	b.n	80057fc <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d115      	bne.n	80057d2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057a6:	4b2a      	ldr	r3, [pc, #168]	; (8005850 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057a8:	695a      	ldr	r2, [r3, #20]
 80057aa:	4b2b      	ldr	r3, [pc, #172]	; (8005858 <RCCEx_PLLSAI2_Config+0x1e0>)
 80057ac:	4013      	ands	r3, r2
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	6892      	ldr	r2, [r2, #8]
 80057b2:	0211      	lsls	r1, r2, #8
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	6912      	ldr	r2, [r2, #16]
 80057b8:	0852      	lsrs	r2, r2, #1
 80057ba:	3a01      	subs	r2, #1
 80057bc:	0552      	lsls	r2, r2, #21
 80057be:	4311      	orrs	r1, r2
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	6852      	ldr	r2, [r2, #4]
 80057c4:	3a01      	subs	r2, #1
 80057c6:	0112      	lsls	r2, r2, #4
 80057c8:	430a      	orrs	r2, r1
 80057ca:	4921      	ldr	r1, [pc, #132]	; (8005850 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	614b      	str	r3, [r1, #20]
 80057d0:	e014      	b.n	80057fc <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057d2:	4b1f      	ldr	r3, [pc, #124]	; (8005850 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057d4:	695a      	ldr	r2, [r3, #20]
 80057d6:	4b21      	ldr	r3, [pc, #132]	; (800585c <RCCEx_PLLSAI2_Config+0x1e4>)
 80057d8:	4013      	ands	r3, r2
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	6892      	ldr	r2, [r2, #8]
 80057de:	0211      	lsls	r1, r2, #8
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	6952      	ldr	r2, [r2, #20]
 80057e4:	0852      	lsrs	r2, r2, #1
 80057e6:	3a01      	subs	r2, #1
 80057e8:	0652      	lsls	r2, r2, #25
 80057ea:	4311      	orrs	r1, r2
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	6852      	ldr	r2, [r2, #4]
 80057f0:	3a01      	subs	r2, #1
 80057f2:	0112      	lsls	r2, r2, #4
 80057f4:	430a      	orrs	r2, r1
 80057f6:	4916      	ldr	r1, [pc, #88]	; (8005850 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80057fc:	4b14      	ldr	r3, [pc, #80]	; (8005850 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a13      	ldr	r2, [pc, #76]	; (8005850 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005806:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005808:	f7fd f80a 	bl	8002820 <HAL_GetTick>
 800580c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800580e:	e009      	b.n	8005824 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005810:	f7fd f806 	bl	8002820 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	2b02      	cmp	r3, #2
 800581c:	d902      	bls.n	8005824 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	73fb      	strb	r3, [r7, #15]
          break;
 8005822:	e005      	b.n	8005830 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005824:	4b0a      	ldr	r3, [pc, #40]	; (8005850 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d0ef      	beq.n	8005810 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005830:	7bfb      	ldrb	r3, [r7, #15]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d106      	bne.n	8005844 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005836:	4b06      	ldr	r3, [pc, #24]	; (8005850 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005838:	695a      	ldr	r2, [r3, #20]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	4904      	ldr	r1, [pc, #16]	; (8005850 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005840:	4313      	orrs	r3, r2
 8005842:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005844:	7bfb      	ldrb	r3, [r7, #15]
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	40021000 	.word	0x40021000
 8005854:	07ff800f 	.word	0x07ff800f
 8005858:	ff9f800f 	.word	0xff9f800f
 800585c:	f9ff800f 	.word	0xf9ff800f

08005860 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e095      	b.n	800599e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005876:	2b00      	cmp	r3, #0
 8005878:	d108      	bne.n	800588c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005882:	d009      	beq.n	8005898 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	61da      	str	r2, [r3, #28]
 800588a:	e005      	b.n	8005898 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d106      	bne.n	80058b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f7fc fcd0 	bl	8002258 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2202      	movs	r2, #2
 80058bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058d8:	d902      	bls.n	80058e0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80058da:	2300      	movs	r3, #0
 80058dc:	60fb      	str	r3, [r7, #12]
 80058de:	e002      	b.n	80058e6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80058e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058e4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80058ee:	d007      	beq.n	8005900 <HAL_SPI_Init+0xa0>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058f8:	d002      	beq.n	8005900 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005910:	431a      	orrs	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	431a      	orrs	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	f003 0301 	and.w	r3, r3, #1
 8005924:	431a      	orrs	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800592e:	431a      	orrs	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	69db      	ldr	r3, [r3, #28]
 8005934:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005938:	431a      	orrs	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005942:	ea42 0103 	orr.w	r1, r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	430a      	orrs	r2, r1
 8005954:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	0c1b      	lsrs	r3, r3, #16
 800595c:	f003 0204 	and.w	r2, r3, #4
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005964:	f003 0310 	and.w	r3, r3, #16
 8005968:	431a      	orrs	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800596e:	f003 0308 	and.w	r3, r3, #8
 8005972:	431a      	orrs	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800597c:	ea42 0103 	orr.w	r1, r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	430a      	orrs	r2, r1
 800598c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b08a      	sub	sp, #40	; 0x28
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	60f8      	str	r0, [r7, #12]
 80059ae:	60b9      	str	r1, [r7, #8]
 80059b0:	607a      	str	r2, [r7, #4]
 80059b2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80059b4:	2301      	movs	r3, #1
 80059b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80059b8:	2300      	movs	r3, #0
 80059ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d101      	bne.n	80059cc <HAL_SPI_TransmitReceive+0x26>
 80059c8:	2302      	movs	r3, #2
 80059ca:	e1fb      	b.n	8005dc4 <HAL_SPI_TransmitReceive+0x41e>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059d4:	f7fc ff24 	bl	8002820 <HAL_GetTick>
 80059d8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80059e0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80059e8:	887b      	ldrh	r3, [r7, #2]
 80059ea:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80059ec:	887b      	ldrh	r3, [r7, #2]
 80059ee:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80059f0:	7efb      	ldrb	r3, [r7, #27]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d00e      	beq.n	8005a14 <HAL_SPI_TransmitReceive+0x6e>
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059fc:	d106      	bne.n	8005a0c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d102      	bne.n	8005a0c <HAL_SPI_TransmitReceive+0x66>
 8005a06:	7efb      	ldrb	r3, [r7, #27]
 8005a08:	2b04      	cmp	r3, #4
 8005a0a:	d003      	beq.n	8005a14 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005a12:	e1cd      	b.n	8005db0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d005      	beq.n	8005a26 <HAL_SPI_TransmitReceive+0x80>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d002      	beq.n	8005a26 <HAL_SPI_TransmitReceive+0x80>
 8005a20:	887b      	ldrh	r3, [r7, #2]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d103      	bne.n	8005a2e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005a2c:	e1c0      	b.n	8005db0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b04      	cmp	r3, #4
 8005a38:	d003      	beq.n	8005a42 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2205      	movs	r2, #5
 8005a3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	887a      	ldrh	r2, [r7, #2]
 8005a52:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	887a      	ldrh	r2, [r7, #2]
 8005a5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	887a      	ldrh	r2, [r7, #2]
 8005a68:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	887a      	ldrh	r2, [r7, #2]
 8005a6e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a84:	d802      	bhi.n	8005a8c <HAL_SPI_TransmitReceive+0xe6>
 8005a86:	8a3b      	ldrh	r3, [r7, #16]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d908      	bls.n	8005a9e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a9a:	605a      	str	r2, [r3, #4]
 8005a9c:	e007      	b.n	8005aae <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	685a      	ldr	r2, [r3, #4]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005aac:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab8:	2b40      	cmp	r3, #64	; 0x40
 8005aba:	d007      	beq.n	8005acc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005aca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ad4:	d97c      	bls.n	8005bd0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d002      	beq.n	8005ae4 <HAL_SPI_TransmitReceive+0x13e>
 8005ade:	8a7b      	ldrh	r3, [r7, #18]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d169      	bne.n	8005bb8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae8:	881a      	ldrh	r2, [r3, #0]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af4:	1c9a      	adds	r2, r3, #2
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	3b01      	subs	r3, #1
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b08:	e056      	b.n	8005bb8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f003 0302 	and.w	r3, r3, #2
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d11b      	bne.n	8005b50 <HAL_SPI_TransmitReceive+0x1aa>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d016      	beq.n	8005b50 <HAL_SPI_TransmitReceive+0x1aa>
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d113      	bne.n	8005b50 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2c:	881a      	ldrh	r2, [r3, #0]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b38:	1c9a      	adds	r2, r3, #2
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	3b01      	subs	r3, #1
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d11c      	bne.n	8005b98 <HAL_SPI_TransmitReceive+0x1f2>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d016      	beq.n	8005b98 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68da      	ldr	r2, [r3, #12]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b74:	b292      	uxth	r2, r2
 8005b76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7c:	1c9a      	adds	r2, r3, #2
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b94:	2301      	movs	r3, #1
 8005b96:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005b98:	f7fc fe42 	bl	8002820 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d807      	bhi.n	8005bb8 <HAL_SPI_TransmitReceive+0x212>
 8005ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bae:	d003      	beq.n	8005bb8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005bb6:	e0fb      	b.n	8005db0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1a3      	bne.n	8005b0a <HAL_SPI_TransmitReceive+0x164>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d19d      	bne.n	8005b0a <HAL_SPI_TransmitReceive+0x164>
 8005bce:	e0df      	b.n	8005d90 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d003      	beq.n	8005be0 <HAL_SPI_TransmitReceive+0x23a>
 8005bd8:	8a7b      	ldrh	r3, [r7, #18]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	f040 80cb 	bne.w	8005d76 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d912      	bls.n	8005c10 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bee:	881a      	ldrh	r2, [r3, #0]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfa:	1c9a      	adds	r2, r3, #2
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	3b02      	subs	r3, #2
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c0e:	e0b2      	b.n	8005d76 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	330c      	adds	r3, #12
 8005c1a:	7812      	ldrb	r2, [r2, #0]
 8005c1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c22:	1c5a      	adds	r2, r3, #1
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c36:	e09e      	b.n	8005d76 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d134      	bne.n	8005cb0 <HAL_SPI_TransmitReceive+0x30a>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d02f      	beq.n	8005cb0 <HAL_SPI_TransmitReceive+0x30a>
 8005c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d12c      	bne.n	8005cb0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d912      	bls.n	8005c86 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c64:	881a      	ldrh	r2, [r3, #0]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c70:	1c9a      	adds	r2, r3, #2
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	3b02      	subs	r3, #2
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c84:	e012      	b.n	8005cac <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	330c      	adds	r3, #12
 8005c90:	7812      	ldrb	r2, [r2, #0]
 8005c92:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c98:	1c5a      	adds	r2, r3, #1
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d148      	bne.n	8005d50 <HAL_SPI_TransmitReceive+0x3aa>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d042      	beq.n	8005d50 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d923      	bls.n	8005d1e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68da      	ldr	r2, [r3, #12]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce0:	b292      	uxth	r2, r2
 8005ce2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce8:	1c9a      	adds	r2, r3, #2
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	3b02      	subs	r3, #2
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d81f      	bhi.n	8005d4c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d1a:	605a      	str	r2, [r3, #4]
 8005d1c:	e016      	b.n	8005d4c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f103 020c 	add.w	r2, r3, #12
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2a:	7812      	ldrb	r2, [r2, #0]
 8005d2c:	b2d2      	uxtb	r2, r2
 8005d2e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d34:	1c5a      	adds	r2, r3, #1
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	3b01      	subs	r3, #1
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d50:	f7fc fd66 	bl	8002820 <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d803      	bhi.n	8005d68 <HAL_SPI_TransmitReceive+0x3c2>
 8005d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d66:	d102      	bne.n	8005d6e <HAL_SPI_TransmitReceive+0x3c8>
 8005d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d103      	bne.n	8005d76 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005d74:	e01c      	b.n	8005db0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f47f af5b 	bne.w	8005c38 <HAL_SPI_TransmitReceive+0x292>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f47f af54 	bne.w	8005c38 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d90:	69fa      	ldr	r2, [r7, #28]
 8005d92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d94:	68f8      	ldr	r0, [r7, #12]
 8005d96:	f000 f937 	bl	8006008 <SPI_EndRxTxTransaction>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d006      	beq.n	8005dae <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2220      	movs	r2, #32
 8005daa:	661a      	str	r2, [r3, #96]	; 0x60
 8005dac:	e000      	b.n	8005db0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005dae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005dc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3728      	adds	r7, #40	; 0x28
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b088      	sub	sp, #32
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	603b      	str	r3, [r7, #0]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ddc:	f7fc fd20 	bl	8002820 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de4:	1a9b      	subs	r3, r3, r2
 8005de6:	683a      	ldr	r2, [r7, #0]
 8005de8:	4413      	add	r3, r2
 8005dea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005dec:	f7fc fd18 	bl	8002820 <HAL_GetTick>
 8005df0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005df2:	4b39      	ldr	r3, [pc, #228]	; (8005ed8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	015b      	lsls	r3, r3, #5
 8005df8:	0d1b      	lsrs	r3, r3, #20
 8005dfa:	69fa      	ldr	r2, [r7, #28]
 8005dfc:	fb02 f303 	mul.w	r3, r2, r3
 8005e00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e02:	e054      	b.n	8005eae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e0a:	d050      	beq.n	8005eae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e0c:	f7fc fd08 	bl	8002820 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	69fa      	ldr	r2, [r7, #28]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d902      	bls.n	8005e22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d13d      	bne.n	8005e9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	685a      	ldr	r2, [r3, #4]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e3a:	d111      	bne.n	8005e60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e44:	d004      	beq.n	8005e50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e4e:	d107      	bne.n	8005e60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e68:	d10f      	bne.n	8005e8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e78:	601a      	str	r2, [r3, #0]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e017      	b.n	8005ece <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d101      	bne.n	8005ea8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689a      	ldr	r2, [r3, #8]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	bf0c      	ite	eq
 8005ebe:	2301      	moveq	r3, #1
 8005ec0:	2300      	movne	r3, #0
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	79fb      	ldrb	r3, [r7, #7]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d19b      	bne.n	8005e04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3720      	adds	r7, #32
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	20000008 	.word	0x20000008

08005edc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b08a      	sub	sp, #40	; 0x28
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
 8005ee8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005eea:	2300      	movs	r3, #0
 8005eec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005eee:	f7fc fc97 	bl	8002820 <HAL_GetTick>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef6:	1a9b      	subs	r3, r3, r2
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	4413      	add	r3, r2
 8005efc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005efe:	f7fc fc8f 	bl	8002820 <HAL_GetTick>
 8005f02:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	330c      	adds	r3, #12
 8005f0a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005f0c:	4b3d      	ldr	r3, [pc, #244]	; (8006004 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	4613      	mov	r3, r2
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4413      	add	r3, r2
 8005f16:	00da      	lsls	r2, r3, #3
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	0d1b      	lsrs	r3, r3, #20
 8005f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f1e:	fb02 f303 	mul.w	r3, r2, r3
 8005f22:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005f24:	e060      	b.n	8005fe8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005f2c:	d107      	bne.n	8005f3e <SPI_WaitFifoStateUntilTimeout+0x62>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d104      	bne.n	8005f3e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005f3c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f44:	d050      	beq.n	8005fe8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f46:	f7fc fc6b 	bl	8002820 <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	6a3b      	ldr	r3, [r7, #32]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d902      	bls.n	8005f5c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d13d      	bne.n	8005fd8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685a      	ldr	r2, [r3, #4]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f6a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f74:	d111      	bne.n	8005f9a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f7e:	d004      	beq.n	8005f8a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f88:	d107      	bne.n	8005f9a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f98:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fa2:	d10f      	bne.n	8005fc4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fb2:	601a      	str	r2, [r3, #0]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fc2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e010      	b.n	8005ffa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d101      	bne.n	8005fe2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689a      	ldr	r2, [r3, #8]
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d196      	bne.n	8005f26 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3728      	adds	r7, #40	; 0x28
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	20000008 	.word	0x20000008

08006008 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af02      	add	r7, sp, #8
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	9300      	str	r3, [sp, #0]
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	2200      	movs	r2, #0
 800601c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f7ff ff5b 	bl	8005edc <SPI_WaitFifoStateUntilTimeout>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d007      	beq.n	800603c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006030:	f043 0220 	orr.w	r2, r3, #32
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e027      	b.n	800608c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	9300      	str	r3, [sp, #0]
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	2200      	movs	r2, #0
 8006044:	2180      	movs	r1, #128	; 0x80
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f7ff fec0 	bl	8005dcc <SPI_WaitFlagStateUntilTimeout>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d007      	beq.n	8006062 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006056:	f043 0220 	orr.w	r2, r3, #32
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e014      	b.n	800608c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	9300      	str	r3, [sp, #0]
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	2200      	movs	r2, #0
 800606a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f7ff ff34 	bl	8005edc <SPI_WaitFifoStateUntilTimeout>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d007      	beq.n	800608a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800607e:	f043 0220 	orr.w	r2, r3, #32
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e000      	b.n	800608c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e049      	b.n	800613a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d106      	bne.n	80060c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7fc f90e 	bl	80022dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2202      	movs	r2, #2
 80060c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	3304      	adds	r3, #4
 80060d0:	4619      	mov	r1, r3
 80060d2:	4610      	mov	r0, r2
 80060d4:	f000 fb70 	bl	80067b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3708      	adds	r7, #8
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b082      	sub	sp, #8
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d101      	bne.n	8006154 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e049      	b.n	80061e8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b00      	cmp	r3, #0
 800615e:	d106      	bne.n	800616e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f7fc f8fd 	bl	8002368 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2202      	movs	r2, #2
 8006172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	3304      	adds	r3, #4
 800617e:	4619      	mov	r1, r3
 8006180:	4610      	mov	r0, r2
 8006182:	f000 fb19 	bl	80067b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2201      	movs	r2, #1
 80061da:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3708      	adds	r7, #8
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d109      	bne.n	8006214 <HAL_TIM_PWM_Start+0x24>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006206:	b2db      	uxtb	r3, r3
 8006208:	2b01      	cmp	r3, #1
 800620a:	bf14      	ite	ne
 800620c:	2301      	movne	r3, #1
 800620e:	2300      	moveq	r3, #0
 8006210:	b2db      	uxtb	r3, r3
 8006212:	e03c      	b.n	800628e <HAL_TIM_PWM_Start+0x9e>
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	2b04      	cmp	r3, #4
 8006218:	d109      	bne.n	800622e <HAL_TIM_PWM_Start+0x3e>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006220:	b2db      	uxtb	r3, r3
 8006222:	2b01      	cmp	r3, #1
 8006224:	bf14      	ite	ne
 8006226:	2301      	movne	r3, #1
 8006228:	2300      	moveq	r3, #0
 800622a:	b2db      	uxtb	r3, r3
 800622c:	e02f      	b.n	800628e <HAL_TIM_PWM_Start+0x9e>
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2b08      	cmp	r3, #8
 8006232:	d109      	bne.n	8006248 <HAL_TIM_PWM_Start+0x58>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800623a:	b2db      	uxtb	r3, r3
 800623c:	2b01      	cmp	r3, #1
 800623e:	bf14      	ite	ne
 8006240:	2301      	movne	r3, #1
 8006242:	2300      	moveq	r3, #0
 8006244:	b2db      	uxtb	r3, r3
 8006246:	e022      	b.n	800628e <HAL_TIM_PWM_Start+0x9e>
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	2b0c      	cmp	r3, #12
 800624c:	d109      	bne.n	8006262 <HAL_TIM_PWM_Start+0x72>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b01      	cmp	r3, #1
 8006258:	bf14      	ite	ne
 800625a:	2301      	movne	r3, #1
 800625c:	2300      	moveq	r3, #0
 800625e:	b2db      	uxtb	r3, r3
 8006260:	e015      	b.n	800628e <HAL_TIM_PWM_Start+0x9e>
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b10      	cmp	r3, #16
 8006266:	d109      	bne.n	800627c <HAL_TIM_PWM_Start+0x8c>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b01      	cmp	r3, #1
 8006272:	bf14      	ite	ne
 8006274:	2301      	movne	r3, #1
 8006276:	2300      	moveq	r3, #0
 8006278:	b2db      	uxtb	r3, r3
 800627a:	e008      	b.n	800628e <HAL_TIM_PWM_Start+0x9e>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006282:	b2db      	uxtb	r3, r3
 8006284:	2b01      	cmp	r3, #1
 8006286:	bf14      	ite	ne
 8006288:	2301      	movne	r3, #1
 800628a:	2300      	moveq	r3, #0
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b00      	cmp	r3, #0
 8006290:	d001      	beq.n	8006296 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e09c      	b.n	80063d0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d104      	bne.n	80062a6 <HAL_TIM_PWM_Start+0xb6>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2202      	movs	r2, #2
 80062a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062a4:	e023      	b.n	80062ee <HAL_TIM_PWM_Start+0xfe>
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	2b04      	cmp	r3, #4
 80062aa:	d104      	bne.n	80062b6 <HAL_TIM_PWM_Start+0xc6>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2202      	movs	r2, #2
 80062b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062b4:	e01b      	b.n	80062ee <HAL_TIM_PWM_Start+0xfe>
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	2b08      	cmp	r3, #8
 80062ba:	d104      	bne.n	80062c6 <HAL_TIM_PWM_Start+0xd6>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2202      	movs	r2, #2
 80062c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062c4:	e013      	b.n	80062ee <HAL_TIM_PWM_Start+0xfe>
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	2b0c      	cmp	r3, #12
 80062ca:	d104      	bne.n	80062d6 <HAL_TIM_PWM_Start+0xe6>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2202      	movs	r2, #2
 80062d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062d4:	e00b      	b.n	80062ee <HAL_TIM_PWM_Start+0xfe>
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	2b10      	cmp	r3, #16
 80062da:	d104      	bne.n	80062e6 <HAL_TIM_PWM_Start+0xf6>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2202      	movs	r2, #2
 80062e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062e4:	e003      	b.n	80062ee <HAL_TIM_PWM_Start+0xfe>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2202      	movs	r2, #2
 80062ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2201      	movs	r2, #1
 80062f4:	6839      	ldr	r1, [r7, #0]
 80062f6:	4618      	mov	r0, r3
 80062f8:	f000 fe68 	bl	8006fcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a35      	ldr	r2, [pc, #212]	; (80063d8 <HAL_TIM_PWM_Start+0x1e8>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d013      	beq.n	800632e <HAL_TIM_PWM_Start+0x13e>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a34      	ldr	r2, [pc, #208]	; (80063dc <HAL_TIM_PWM_Start+0x1ec>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d00e      	beq.n	800632e <HAL_TIM_PWM_Start+0x13e>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a32      	ldr	r2, [pc, #200]	; (80063e0 <HAL_TIM_PWM_Start+0x1f0>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d009      	beq.n	800632e <HAL_TIM_PWM_Start+0x13e>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a31      	ldr	r2, [pc, #196]	; (80063e4 <HAL_TIM_PWM_Start+0x1f4>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d004      	beq.n	800632e <HAL_TIM_PWM_Start+0x13e>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a2f      	ldr	r2, [pc, #188]	; (80063e8 <HAL_TIM_PWM_Start+0x1f8>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d101      	bne.n	8006332 <HAL_TIM_PWM_Start+0x142>
 800632e:	2301      	movs	r3, #1
 8006330:	e000      	b.n	8006334 <HAL_TIM_PWM_Start+0x144>
 8006332:	2300      	movs	r3, #0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d007      	beq.n	8006348 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006346:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a22      	ldr	r2, [pc, #136]	; (80063d8 <HAL_TIM_PWM_Start+0x1e8>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d01d      	beq.n	800638e <HAL_TIM_PWM_Start+0x19e>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800635a:	d018      	beq.n	800638e <HAL_TIM_PWM_Start+0x19e>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a22      	ldr	r2, [pc, #136]	; (80063ec <HAL_TIM_PWM_Start+0x1fc>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d013      	beq.n	800638e <HAL_TIM_PWM_Start+0x19e>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a21      	ldr	r2, [pc, #132]	; (80063f0 <HAL_TIM_PWM_Start+0x200>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d00e      	beq.n	800638e <HAL_TIM_PWM_Start+0x19e>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a1f      	ldr	r2, [pc, #124]	; (80063f4 <HAL_TIM_PWM_Start+0x204>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d009      	beq.n	800638e <HAL_TIM_PWM_Start+0x19e>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a17      	ldr	r2, [pc, #92]	; (80063dc <HAL_TIM_PWM_Start+0x1ec>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d004      	beq.n	800638e <HAL_TIM_PWM_Start+0x19e>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a15      	ldr	r2, [pc, #84]	; (80063e0 <HAL_TIM_PWM_Start+0x1f0>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d115      	bne.n	80063ba <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	689a      	ldr	r2, [r3, #8]
 8006394:	4b18      	ldr	r3, [pc, #96]	; (80063f8 <HAL_TIM_PWM_Start+0x208>)
 8006396:	4013      	ands	r3, r2
 8006398:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2b06      	cmp	r3, #6
 800639e:	d015      	beq.n	80063cc <HAL_TIM_PWM_Start+0x1dc>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063a6:	d011      	beq.n	80063cc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f042 0201 	orr.w	r2, r2, #1
 80063b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063b8:	e008      	b.n	80063cc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f042 0201 	orr.w	r2, r2, #1
 80063c8:	601a      	str	r2, [r3, #0]
 80063ca:	e000      	b.n	80063ce <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3710      	adds	r7, #16
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	40012c00 	.word	0x40012c00
 80063dc:	40013400 	.word	0x40013400
 80063e0:	40014000 	.word	0x40014000
 80063e4:	40014400 	.word	0x40014400
 80063e8:	40014800 	.word	0x40014800
 80063ec:	40000400 	.word	0x40000400
 80063f0:	40000800 	.word	0x40000800
 80063f4:	40000c00 	.word	0x40000c00
 80063f8:	00010007 	.word	0x00010007

080063fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006408:	2300      	movs	r3, #0
 800640a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006412:	2b01      	cmp	r3, #1
 8006414:	d101      	bne.n	800641a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006416:	2302      	movs	r3, #2
 8006418:	e0ff      	b.n	800661a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b14      	cmp	r3, #20
 8006426:	f200 80f0 	bhi.w	800660a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800642a:	a201      	add	r2, pc, #4	; (adr r2, 8006430 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800642c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006430:	08006485 	.word	0x08006485
 8006434:	0800660b 	.word	0x0800660b
 8006438:	0800660b 	.word	0x0800660b
 800643c:	0800660b 	.word	0x0800660b
 8006440:	080064c5 	.word	0x080064c5
 8006444:	0800660b 	.word	0x0800660b
 8006448:	0800660b 	.word	0x0800660b
 800644c:	0800660b 	.word	0x0800660b
 8006450:	08006507 	.word	0x08006507
 8006454:	0800660b 	.word	0x0800660b
 8006458:	0800660b 	.word	0x0800660b
 800645c:	0800660b 	.word	0x0800660b
 8006460:	08006547 	.word	0x08006547
 8006464:	0800660b 	.word	0x0800660b
 8006468:	0800660b 	.word	0x0800660b
 800646c:	0800660b 	.word	0x0800660b
 8006470:	08006589 	.word	0x08006589
 8006474:	0800660b 	.word	0x0800660b
 8006478:	0800660b 	.word	0x0800660b
 800647c:	0800660b 	.word	0x0800660b
 8006480:	080065c9 	.word	0x080065c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68b9      	ldr	r1, [r7, #8]
 800648a:	4618      	mov	r0, r3
 800648c:	f000 fa2e 	bl	80068ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	699a      	ldr	r2, [r3, #24]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f042 0208 	orr.w	r2, r2, #8
 800649e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	699a      	ldr	r2, [r3, #24]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f022 0204 	bic.w	r2, r2, #4
 80064ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	6999      	ldr	r1, [r3, #24]
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	691a      	ldr	r2, [r3, #16]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	430a      	orrs	r2, r1
 80064c0:	619a      	str	r2, [r3, #24]
      break;
 80064c2:	e0a5      	b.n	8006610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68b9      	ldr	r1, [r7, #8]
 80064ca:	4618      	mov	r0, r3
 80064cc:	f000 fa9e 	bl	8006a0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	699a      	ldr	r2, [r3, #24]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	699a      	ldr	r2, [r3, #24]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6999      	ldr	r1, [r3, #24]
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	021a      	lsls	r2, r3, #8
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	430a      	orrs	r2, r1
 8006502:	619a      	str	r2, [r3, #24]
      break;
 8006504:	e084      	b.n	8006610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68b9      	ldr	r1, [r7, #8]
 800650c:	4618      	mov	r0, r3
 800650e:	f000 fb07 	bl	8006b20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	69da      	ldr	r2, [r3, #28]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f042 0208 	orr.w	r2, r2, #8
 8006520:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	69da      	ldr	r2, [r3, #28]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f022 0204 	bic.w	r2, r2, #4
 8006530:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	69d9      	ldr	r1, [r3, #28]
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	691a      	ldr	r2, [r3, #16]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	430a      	orrs	r2, r1
 8006542:	61da      	str	r2, [r3, #28]
      break;
 8006544:	e064      	b.n	8006610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68b9      	ldr	r1, [r7, #8]
 800654c:	4618      	mov	r0, r3
 800654e:	f000 fb6f 	bl	8006c30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	69da      	ldr	r2, [r3, #28]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006560:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	69da      	ldr	r2, [r3, #28]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006570:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	69d9      	ldr	r1, [r3, #28]
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	021a      	lsls	r2, r3, #8
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	430a      	orrs	r2, r1
 8006584:	61da      	str	r2, [r3, #28]
      break;
 8006586:	e043      	b.n	8006610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68b9      	ldr	r1, [r7, #8]
 800658e:	4618      	mov	r0, r3
 8006590:	f000 fbb8 	bl	8006d04 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f042 0208 	orr.w	r2, r2, #8
 80065a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f022 0204 	bic.w	r2, r2, #4
 80065b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	691a      	ldr	r2, [r3, #16]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	430a      	orrs	r2, r1
 80065c4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80065c6:	e023      	b.n	8006610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68b9      	ldr	r1, [r7, #8]
 80065ce:	4618      	mov	r0, r3
 80065d0:	f000 fbfc 	bl	8006dcc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	021a      	lsls	r2, r3, #8
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	430a      	orrs	r2, r1
 8006606:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006608:	e002      	b.n	8006610 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	75fb      	strb	r3, [r7, #23]
      break;
 800660e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006618:	7dfb      	ldrb	r3, [r7, #23]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3718      	adds	r7, #24
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop

08006624 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800662e:	2300      	movs	r3, #0
 8006630:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006638:	2b01      	cmp	r3, #1
 800663a:	d101      	bne.n	8006640 <HAL_TIM_ConfigClockSource+0x1c>
 800663c:	2302      	movs	r3, #2
 800663e:	e0b6      	b.n	80067ae <HAL_TIM_ConfigClockSource+0x18a>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2202      	movs	r2, #2
 800664c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800665e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006662:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800666a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68ba      	ldr	r2, [r7, #8]
 8006672:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800667c:	d03e      	beq.n	80066fc <HAL_TIM_ConfigClockSource+0xd8>
 800667e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006682:	f200 8087 	bhi.w	8006794 <HAL_TIM_ConfigClockSource+0x170>
 8006686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800668a:	f000 8086 	beq.w	800679a <HAL_TIM_ConfigClockSource+0x176>
 800668e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006692:	d87f      	bhi.n	8006794 <HAL_TIM_ConfigClockSource+0x170>
 8006694:	2b70      	cmp	r3, #112	; 0x70
 8006696:	d01a      	beq.n	80066ce <HAL_TIM_ConfigClockSource+0xaa>
 8006698:	2b70      	cmp	r3, #112	; 0x70
 800669a:	d87b      	bhi.n	8006794 <HAL_TIM_ConfigClockSource+0x170>
 800669c:	2b60      	cmp	r3, #96	; 0x60
 800669e:	d050      	beq.n	8006742 <HAL_TIM_ConfigClockSource+0x11e>
 80066a0:	2b60      	cmp	r3, #96	; 0x60
 80066a2:	d877      	bhi.n	8006794 <HAL_TIM_ConfigClockSource+0x170>
 80066a4:	2b50      	cmp	r3, #80	; 0x50
 80066a6:	d03c      	beq.n	8006722 <HAL_TIM_ConfigClockSource+0xfe>
 80066a8:	2b50      	cmp	r3, #80	; 0x50
 80066aa:	d873      	bhi.n	8006794 <HAL_TIM_ConfigClockSource+0x170>
 80066ac:	2b40      	cmp	r3, #64	; 0x40
 80066ae:	d058      	beq.n	8006762 <HAL_TIM_ConfigClockSource+0x13e>
 80066b0:	2b40      	cmp	r3, #64	; 0x40
 80066b2:	d86f      	bhi.n	8006794 <HAL_TIM_ConfigClockSource+0x170>
 80066b4:	2b30      	cmp	r3, #48	; 0x30
 80066b6:	d064      	beq.n	8006782 <HAL_TIM_ConfigClockSource+0x15e>
 80066b8:	2b30      	cmp	r3, #48	; 0x30
 80066ba:	d86b      	bhi.n	8006794 <HAL_TIM_ConfigClockSource+0x170>
 80066bc:	2b20      	cmp	r3, #32
 80066be:	d060      	beq.n	8006782 <HAL_TIM_ConfigClockSource+0x15e>
 80066c0:	2b20      	cmp	r3, #32
 80066c2:	d867      	bhi.n	8006794 <HAL_TIM_ConfigClockSource+0x170>
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d05c      	beq.n	8006782 <HAL_TIM_ConfigClockSource+0x15e>
 80066c8:	2b10      	cmp	r3, #16
 80066ca:	d05a      	beq.n	8006782 <HAL_TIM_ConfigClockSource+0x15e>
 80066cc:	e062      	b.n	8006794 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6818      	ldr	r0, [r3, #0]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	6899      	ldr	r1, [r3, #8]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	685a      	ldr	r2, [r3, #4]
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	f000 fc55 	bl	8006f8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68ba      	ldr	r2, [r7, #8]
 80066f8:	609a      	str	r2, [r3, #8]
      break;
 80066fa:	e04f      	b.n	800679c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6818      	ldr	r0, [r3, #0]
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	6899      	ldr	r1, [r3, #8]
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	685a      	ldr	r2, [r3, #4]
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	f000 fc3e 	bl	8006f8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	689a      	ldr	r2, [r3, #8]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800671e:	609a      	str	r2, [r3, #8]
      break;
 8006720:	e03c      	b.n	800679c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6818      	ldr	r0, [r3, #0]
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	6859      	ldr	r1, [r3, #4]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	461a      	mov	r2, r3
 8006730:	f000 fbb2 	bl	8006e98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2150      	movs	r1, #80	; 0x50
 800673a:	4618      	mov	r0, r3
 800673c:	f000 fc0b 	bl	8006f56 <TIM_ITRx_SetConfig>
      break;
 8006740:	e02c      	b.n	800679c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6818      	ldr	r0, [r3, #0]
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	6859      	ldr	r1, [r3, #4]
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	461a      	mov	r2, r3
 8006750:	f000 fbd1 	bl	8006ef6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2160      	movs	r1, #96	; 0x60
 800675a:	4618      	mov	r0, r3
 800675c:	f000 fbfb 	bl	8006f56 <TIM_ITRx_SetConfig>
      break;
 8006760:	e01c      	b.n	800679c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6818      	ldr	r0, [r3, #0]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	6859      	ldr	r1, [r3, #4]
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	461a      	mov	r2, r3
 8006770:	f000 fb92 	bl	8006e98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2140      	movs	r1, #64	; 0x40
 800677a:	4618      	mov	r0, r3
 800677c:	f000 fbeb 	bl	8006f56 <TIM_ITRx_SetConfig>
      break;
 8006780:	e00c      	b.n	800679c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4619      	mov	r1, r3
 800678c:	4610      	mov	r0, r2
 800678e:	f000 fbe2 	bl	8006f56 <TIM_ITRx_SetConfig>
      break;
 8006792:	e003      	b.n	800679c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	73fb      	strb	r3, [r7, #15]
      break;
 8006798:	e000      	b.n	800679c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800679a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
	...

080067b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a40      	ldr	r2, [pc, #256]	; (80068cc <TIM_Base_SetConfig+0x114>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d013      	beq.n	80067f8 <TIM_Base_SetConfig+0x40>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067d6:	d00f      	beq.n	80067f8 <TIM_Base_SetConfig+0x40>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a3d      	ldr	r2, [pc, #244]	; (80068d0 <TIM_Base_SetConfig+0x118>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d00b      	beq.n	80067f8 <TIM_Base_SetConfig+0x40>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a3c      	ldr	r2, [pc, #240]	; (80068d4 <TIM_Base_SetConfig+0x11c>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d007      	beq.n	80067f8 <TIM_Base_SetConfig+0x40>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a3b      	ldr	r2, [pc, #236]	; (80068d8 <TIM_Base_SetConfig+0x120>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d003      	beq.n	80067f8 <TIM_Base_SetConfig+0x40>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a3a      	ldr	r2, [pc, #232]	; (80068dc <TIM_Base_SetConfig+0x124>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d108      	bne.n	800680a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	4313      	orrs	r3, r2
 8006808:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a2f      	ldr	r2, [pc, #188]	; (80068cc <TIM_Base_SetConfig+0x114>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d01f      	beq.n	8006852 <TIM_Base_SetConfig+0x9a>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006818:	d01b      	beq.n	8006852 <TIM_Base_SetConfig+0x9a>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a2c      	ldr	r2, [pc, #176]	; (80068d0 <TIM_Base_SetConfig+0x118>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d017      	beq.n	8006852 <TIM_Base_SetConfig+0x9a>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a2b      	ldr	r2, [pc, #172]	; (80068d4 <TIM_Base_SetConfig+0x11c>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d013      	beq.n	8006852 <TIM_Base_SetConfig+0x9a>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a2a      	ldr	r2, [pc, #168]	; (80068d8 <TIM_Base_SetConfig+0x120>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d00f      	beq.n	8006852 <TIM_Base_SetConfig+0x9a>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a29      	ldr	r2, [pc, #164]	; (80068dc <TIM_Base_SetConfig+0x124>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d00b      	beq.n	8006852 <TIM_Base_SetConfig+0x9a>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a28      	ldr	r2, [pc, #160]	; (80068e0 <TIM_Base_SetConfig+0x128>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d007      	beq.n	8006852 <TIM_Base_SetConfig+0x9a>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a27      	ldr	r2, [pc, #156]	; (80068e4 <TIM_Base_SetConfig+0x12c>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d003      	beq.n	8006852 <TIM_Base_SetConfig+0x9a>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a26      	ldr	r2, [pc, #152]	; (80068e8 <TIM_Base_SetConfig+0x130>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d108      	bne.n	8006864 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006858:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	4313      	orrs	r3, r2
 8006862:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	4313      	orrs	r3, r2
 8006870:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	689a      	ldr	r2, [r3, #8]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a10      	ldr	r2, [pc, #64]	; (80068cc <TIM_Base_SetConfig+0x114>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d00f      	beq.n	80068b0 <TIM_Base_SetConfig+0xf8>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a12      	ldr	r2, [pc, #72]	; (80068dc <TIM_Base_SetConfig+0x124>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d00b      	beq.n	80068b0 <TIM_Base_SetConfig+0xf8>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a11      	ldr	r2, [pc, #68]	; (80068e0 <TIM_Base_SetConfig+0x128>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d007      	beq.n	80068b0 <TIM_Base_SetConfig+0xf8>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a10      	ldr	r2, [pc, #64]	; (80068e4 <TIM_Base_SetConfig+0x12c>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d003      	beq.n	80068b0 <TIM_Base_SetConfig+0xf8>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a0f      	ldr	r2, [pc, #60]	; (80068e8 <TIM_Base_SetConfig+0x130>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d103      	bne.n	80068b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	691a      	ldr	r2, [r3, #16]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	615a      	str	r2, [r3, #20]
}
 80068be:	bf00      	nop
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	40012c00 	.word	0x40012c00
 80068d0:	40000400 	.word	0x40000400
 80068d4:	40000800 	.word	0x40000800
 80068d8:	40000c00 	.word	0x40000c00
 80068dc:	40013400 	.word	0x40013400
 80068e0:	40014000 	.word	0x40014000
 80068e4:	40014400 	.word	0x40014400
 80068e8:	40014800 	.word	0x40014800

080068ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b087      	sub	sp, #28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	f023 0201 	bic.w	r2, r3, #1
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800691a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800691e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f023 0303 	bic.w	r3, r3, #3
 8006926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	4313      	orrs	r3, r2
 8006930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	f023 0302 	bic.w	r3, r3, #2
 8006938:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	4313      	orrs	r3, r2
 8006942:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a2c      	ldr	r2, [pc, #176]	; (80069f8 <TIM_OC1_SetConfig+0x10c>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d00f      	beq.n	800696c <TIM_OC1_SetConfig+0x80>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a2b      	ldr	r2, [pc, #172]	; (80069fc <TIM_OC1_SetConfig+0x110>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d00b      	beq.n	800696c <TIM_OC1_SetConfig+0x80>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a2a      	ldr	r2, [pc, #168]	; (8006a00 <TIM_OC1_SetConfig+0x114>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d007      	beq.n	800696c <TIM_OC1_SetConfig+0x80>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a29      	ldr	r2, [pc, #164]	; (8006a04 <TIM_OC1_SetConfig+0x118>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d003      	beq.n	800696c <TIM_OC1_SetConfig+0x80>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a28      	ldr	r2, [pc, #160]	; (8006a08 <TIM_OC1_SetConfig+0x11c>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d10c      	bne.n	8006986 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	f023 0308 	bic.w	r3, r3, #8
 8006972:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	697a      	ldr	r2, [r7, #20]
 800697a:	4313      	orrs	r3, r2
 800697c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	f023 0304 	bic.w	r3, r3, #4
 8006984:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a1b      	ldr	r2, [pc, #108]	; (80069f8 <TIM_OC1_SetConfig+0x10c>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d00f      	beq.n	80069ae <TIM_OC1_SetConfig+0xc2>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a1a      	ldr	r2, [pc, #104]	; (80069fc <TIM_OC1_SetConfig+0x110>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d00b      	beq.n	80069ae <TIM_OC1_SetConfig+0xc2>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a19      	ldr	r2, [pc, #100]	; (8006a00 <TIM_OC1_SetConfig+0x114>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d007      	beq.n	80069ae <TIM_OC1_SetConfig+0xc2>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a18      	ldr	r2, [pc, #96]	; (8006a04 <TIM_OC1_SetConfig+0x118>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d003      	beq.n	80069ae <TIM_OC1_SetConfig+0xc2>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a17      	ldr	r2, [pc, #92]	; (8006a08 <TIM_OC1_SetConfig+0x11c>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d111      	bne.n	80069d2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	693a      	ldr	r2, [r7, #16]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	685a      	ldr	r2, [r3, #4]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	697a      	ldr	r2, [r7, #20]
 80069ea:	621a      	str	r2, [r3, #32]
}
 80069ec:	bf00      	nop
 80069ee:	371c      	adds	r7, #28
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr
 80069f8:	40012c00 	.word	0x40012c00
 80069fc:	40013400 	.word	0x40013400
 8006a00:	40014000 	.word	0x40014000
 8006a04:	40014400 	.word	0x40014400
 8006a08:	40014800 	.word	0x40014800

08006a0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b087      	sub	sp, #28
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	f023 0210 	bic.w	r2, r3, #16
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	021b      	lsls	r3, r3, #8
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	f023 0320 	bic.w	r3, r3, #32
 8006a5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	011b      	lsls	r3, r3, #4
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a28      	ldr	r2, [pc, #160]	; (8006b0c <TIM_OC2_SetConfig+0x100>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d003      	beq.n	8006a78 <TIM_OC2_SetConfig+0x6c>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a27      	ldr	r2, [pc, #156]	; (8006b10 <TIM_OC2_SetConfig+0x104>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d10d      	bne.n	8006a94 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	011b      	lsls	r3, r3, #4
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a1d      	ldr	r2, [pc, #116]	; (8006b0c <TIM_OC2_SetConfig+0x100>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d00f      	beq.n	8006abc <TIM_OC2_SetConfig+0xb0>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a1c      	ldr	r2, [pc, #112]	; (8006b10 <TIM_OC2_SetConfig+0x104>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d00b      	beq.n	8006abc <TIM_OC2_SetConfig+0xb0>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a1b      	ldr	r2, [pc, #108]	; (8006b14 <TIM_OC2_SetConfig+0x108>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d007      	beq.n	8006abc <TIM_OC2_SetConfig+0xb0>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a1a      	ldr	r2, [pc, #104]	; (8006b18 <TIM_OC2_SetConfig+0x10c>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d003      	beq.n	8006abc <TIM_OC2_SetConfig+0xb0>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a19      	ldr	r2, [pc, #100]	; (8006b1c <TIM_OC2_SetConfig+0x110>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d113      	bne.n	8006ae4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ac2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006aca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	695b      	ldr	r3, [r3, #20]
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	693a      	ldr	r2, [r7, #16]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	699b      	ldr	r3, [r3, #24]
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	693a      	ldr	r2, [r7, #16]
 8006ae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	685a      	ldr	r2, [r3, #4]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	621a      	str	r2, [r3, #32]
}
 8006afe:	bf00      	nop
 8006b00:	371c      	adds	r7, #28
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	40012c00 	.word	0x40012c00
 8006b10:	40013400 	.word	0x40013400
 8006b14:	40014000 	.word	0x40014000
 8006b18:	40014400 	.word	0x40014400
 8006b1c:	40014800 	.word	0x40014800

08006b20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b087      	sub	sp, #28
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a1b      	ldr	r3, [r3, #32]
 8006b2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	69db      	ldr	r3, [r3, #28]
 8006b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f023 0303 	bic.w	r3, r3, #3
 8006b5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	021b      	lsls	r3, r3, #8
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a27      	ldr	r2, [pc, #156]	; (8006c1c <TIM_OC3_SetConfig+0xfc>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d003      	beq.n	8006b8a <TIM_OC3_SetConfig+0x6a>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a26      	ldr	r2, [pc, #152]	; (8006c20 <TIM_OC3_SetConfig+0x100>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d10d      	bne.n	8006ba6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	021b      	lsls	r3, r3, #8
 8006b98:	697a      	ldr	r2, [r7, #20]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ba4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a1c      	ldr	r2, [pc, #112]	; (8006c1c <TIM_OC3_SetConfig+0xfc>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d00f      	beq.n	8006bce <TIM_OC3_SetConfig+0xae>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a1b      	ldr	r2, [pc, #108]	; (8006c20 <TIM_OC3_SetConfig+0x100>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d00b      	beq.n	8006bce <TIM_OC3_SetConfig+0xae>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a1a      	ldr	r2, [pc, #104]	; (8006c24 <TIM_OC3_SetConfig+0x104>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d007      	beq.n	8006bce <TIM_OC3_SetConfig+0xae>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a19      	ldr	r2, [pc, #100]	; (8006c28 <TIM_OC3_SetConfig+0x108>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d003      	beq.n	8006bce <TIM_OC3_SetConfig+0xae>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a18      	ldr	r2, [pc, #96]	; (8006c2c <TIM_OC3_SetConfig+0x10c>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d113      	bne.n	8006bf6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	011b      	lsls	r3, r3, #4
 8006be4:	693a      	ldr	r2, [r7, #16]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	699b      	ldr	r3, [r3, #24]
 8006bee:	011b      	lsls	r3, r3, #4
 8006bf0:	693a      	ldr	r2, [r7, #16]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	621a      	str	r2, [r3, #32]
}
 8006c10:	bf00      	nop
 8006c12:	371c      	adds	r7, #28
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr
 8006c1c:	40012c00 	.word	0x40012c00
 8006c20:	40013400 	.word	0x40013400
 8006c24:	40014000 	.word	0x40014000
 8006c28:	40014400 	.word	0x40014400
 8006c2c:	40014800 	.word	0x40014800

08006c30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b087      	sub	sp, #28
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a1b      	ldr	r3, [r3, #32]
 8006c4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	69db      	ldr	r3, [r3, #28]
 8006c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	021b      	lsls	r3, r3, #8
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	031b      	lsls	r3, r3, #12
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a18      	ldr	r2, [pc, #96]	; (8006cf0 <TIM_OC4_SetConfig+0xc0>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d00f      	beq.n	8006cb4 <TIM_OC4_SetConfig+0x84>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a17      	ldr	r2, [pc, #92]	; (8006cf4 <TIM_OC4_SetConfig+0xc4>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d00b      	beq.n	8006cb4 <TIM_OC4_SetConfig+0x84>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a16      	ldr	r2, [pc, #88]	; (8006cf8 <TIM_OC4_SetConfig+0xc8>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d007      	beq.n	8006cb4 <TIM_OC4_SetConfig+0x84>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a15      	ldr	r2, [pc, #84]	; (8006cfc <TIM_OC4_SetConfig+0xcc>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d003      	beq.n	8006cb4 <TIM_OC4_SetConfig+0x84>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a14      	ldr	r2, [pc, #80]	; (8006d00 <TIM_OC4_SetConfig+0xd0>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d109      	bne.n	8006cc8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	695b      	ldr	r3, [r3, #20]
 8006cc0:	019b      	lsls	r3, r3, #6
 8006cc2:	697a      	ldr	r2, [r7, #20]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	685a      	ldr	r2, [r3, #4]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	693a      	ldr	r2, [r7, #16]
 8006ce0:	621a      	str	r2, [r3, #32]
}
 8006ce2:	bf00      	nop
 8006ce4:	371c      	adds	r7, #28
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	40012c00 	.word	0x40012c00
 8006cf4:	40013400 	.word	0x40013400
 8006cf8:	40014000 	.word	0x40014000
 8006cfc:	40014400 	.word	0x40014400
 8006d00:	40014800 	.word	0x40014800

08006d04 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b087      	sub	sp, #28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006d48:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	041b      	lsls	r3, r3, #16
 8006d50:	693a      	ldr	r2, [r7, #16]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a17      	ldr	r2, [pc, #92]	; (8006db8 <TIM_OC5_SetConfig+0xb4>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d00f      	beq.n	8006d7e <TIM_OC5_SetConfig+0x7a>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a16      	ldr	r2, [pc, #88]	; (8006dbc <TIM_OC5_SetConfig+0xb8>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d00b      	beq.n	8006d7e <TIM_OC5_SetConfig+0x7a>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a15      	ldr	r2, [pc, #84]	; (8006dc0 <TIM_OC5_SetConfig+0xbc>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d007      	beq.n	8006d7e <TIM_OC5_SetConfig+0x7a>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a14      	ldr	r2, [pc, #80]	; (8006dc4 <TIM_OC5_SetConfig+0xc0>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d003      	beq.n	8006d7e <TIM_OC5_SetConfig+0x7a>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a13      	ldr	r2, [pc, #76]	; (8006dc8 <TIM_OC5_SetConfig+0xc4>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d109      	bne.n	8006d92 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d84:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	695b      	ldr	r3, [r3, #20]
 8006d8a:	021b      	lsls	r3, r3, #8
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	697a      	ldr	r2, [r7, #20]
 8006d96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	685a      	ldr	r2, [r3, #4]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	693a      	ldr	r2, [r7, #16]
 8006daa:	621a      	str	r2, [r3, #32]
}
 8006dac:	bf00      	nop
 8006dae:	371c      	adds	r7, #28
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr
 8006db8:	40012c00 	.word	0x40012c00
 8006dbc:	40013400 	.word	0x40013400
 8006dc0:	40014000 	.word	0x40014000
 8006dc4:	40014400 	.word	0x40014400
 8006dc8:	40014800 	.word	0x40014800

08006dcc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b087      	sub	sp, #28
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a1b      	ldr	r3, [r3, #32]
 8006dda:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a1b      	ldr	r3, [r3, #32]
 8006de6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	021b      	lsls	r3, r3, #8
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	051b      	lsls	r3, r3, #20
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a18      	ldr	r2, [pc, #96]	; (8006e84 <TIM_OC6_SetConfig+0xb8>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d00f      	beq.n	8006e48 <TIM_OC6_SetConfig+0x7c>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a17      	ldr	r2, [pc, #92]	; (8006e88 <TIM_OC6_SetConfig+0xbc>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d00b      	beq.n	8006e48 <TIM_OC6_SetConfig+0x7c>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a16      	ldr	r2, [pc, #88]	; (8006e8c <TIM_OC6_SetConfig+0xc0>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d007      	beq.n	8006e48 <TIM_OC6_SetConfig+0x7c>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a15      	ldr	r2, [pc, #84]	; (8006e90 <TIM_OC6_SetConfig+0xc4>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d003      	beq.n	8006e48 <TIM_OC6_SetConfig+0x7c>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a14      	ldr	r2, [pc, #80]	; (8006e94 <TIM_OC6_SetConfig+0xc8>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d109      	bne.n	8006e5c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e4e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	029b      	lsls	r3, r3, #10
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	685a      	ldr	r2, [r3, #4]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	693a      	ldr	r2, [r7, #16]
 8006e74:	621a      	str	r2, [r3, #32]
}
 8006e76:	bf00      	nop
 8006e78:	371c      	adds	r7, #28
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop
 8006e84:	40012c00 	.word	0x40012c00
 8006e88:	40013400 	.word	0x40013400
 8006e8c:	40014000 	.word	0x40014000
 8006e90:	40014400 	.word	0x40014400
 8006e94:	40014800 	.word	0x40014800

08006e98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b087      	sub	sp, #28
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6a1b      	ldr	r3, [r3, #32]
 8006ea8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	f023 0201 	bic.w	r2, r3, #1
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ec2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	011b      	lsls	r3, r3, #4
 8006ec8:	693a      	ldr	r2, [r7, #16]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	f023 030a 	bic.w	r3, r3, #10
 8006ed4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ed6:	697a      	ldr	r2, [r7, #20]
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	693a      	ldr	r2, [r7, #16]
 8006ee2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	697a      	ldr	r2, [r7, #20]
 8006ee8:	621a      	str	r2, [r3, #32]
}
 8006eea:	bf00      	nop
 8006eec:	371c      	adds	r7, #28
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr

08006ef6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	b087      	sub	sp, #28
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	60f8      	str	r0, [r7, #12]
 8006efe:	60b9      	str	r1, [r7, #8]
 8006f00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	f023 0210 	bic.w	r2, r3, #16
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6a1b      	ldr	r3, [r3, #32]
 8006f18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	031b      	lsls	r3, r3, #12
 8006f26:	697a      	ldr	r2, [r7, #20]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	011b      	lsls	r3, r3, #4
 8006f38:	693a      	ldr	r2, [r7, #16]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	697a      	ldr	r2, [r7, #20]
 8006f42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	693a      	ldr	r2, [r7, #16]
 8006f48:	621a      	str	r2, [r3, #32]
}
 8006f4a:	bf00      	nop
 8006f4c:	371c      	adds	r7, #28
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr

08006f56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f56:	b480      	push	{r7}
 8006f58:	b085      	sub	sp, #20
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
 8006f5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f6e:	683a      	ldr	r2, [r7, #0]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	f043 0307 	orr.w	r3, r3, #7
 8006f78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	609a      	str	r2, [r3, #8]
}
 8006f80:	bf00      	nop
 8006f82:	3714      	adds	r7, #20
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b087      	sub	sp, #28
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	607a      	str	r2, [r7, #4]
 8006f98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fa6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	021a      	lsls	r2, r3, #8
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	431a      	orrs	r2, r3
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	697a      	ldr	r2, [r7, #20]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	697a      	ldr	r2, [r7, #20]
 8006fbe:	609a      	str	r2, [r3, #8]
}
 8006fc0:	bf00      	nop
 8006fc2:	371c      	adds	r7, #28
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b087      	sub	sp, #28
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	f003 031f 	and.w	r3, r3, #31
 8006fde:	2201      	movs	r2, #1
 8006fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6a1a      	ldr	r2, [r3, #32]
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	43db      	mvns	r3, r3
 8006fee:	401a      	ands	r2, r3
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6a1a      	ldr	r2, [r3, #32]
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	f003 031f 	and.w	r3, r3, #31
 8006ffe:	6879      	ldr	r1, [r7, #4]
 8007000:	fa01 f303 	lsl.w	r3, r1, r3
 8007004:	431a      	orrs	r2, r3
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	621a      	str	r2, [r3, #32]
}
 800700a:	bf00      	nop
 800700c:	371c      	adds	r7, #28
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr
	...

08007018 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007028:	2b01      	cmp	r3, #1
 800702a:	d101      	bne.n	8007030 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800702c:	2302      	movs	r3, #2
 800702e:	e068      	b.n	8007102 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2202      	movs	r2, #2
 800703c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a2e      	ldr	r2, [pc, #184]	; (8007110 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d004      	beq.n	8007064 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a2d      	ldr	r2, [pc, #180]	; (8007114 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d108      	bne.n	8007076 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800706a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	4313      	orrs	r3, r2
 8007074:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800707c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	4313      	orrs	r3, r2
 8007086:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a1e      	ldr	r2, [pc, #120]	; (8007110 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d01d      	beq.n	80070d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070a2:	d018      	beq.n	80070d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a1b      	ldr	r2, [pc, #108]	; (8007118 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d013      	beq.n	80070d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a1a      	ldr	r2, [pc, #104]	; (800711c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d00e      	beq.n	80070d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a18      	ldr	r2, [pc, #96]	; (8007120 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d009      	beq.n	80070d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a13      	ldr	r2, [pc, #76]	; (8007114 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d004      	beq.n	80070d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a14      	ldr	r2, [pc, #80]	; (8007124 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d10c      	bne.n	80070f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	68ba      	ldr	r2, [r7, #8]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3714      	adds	r7, #20
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	40012c00 	.word	0x40012c00
 8007114:	40013400 	.word	0x40013400
 8007118:	40000400 	.word	0x40000400
 800711c:	40000800 	.word	0x40000800
 8007120:	40000c00 	.word	0x40000c00
 8007124:	40014000 	.word	0x40014000

08007128 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d101      	bne.n	800713a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e042      	b.n	80071c0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007140:	2b00      	cmp	r3, #0
 8007142:	d106      	bne.n	8007152 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f7fb f823 	bl	8002198 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2224      	movs	r2, #36	; 0x24
 8007156:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f022 0201 	bic.w	r2, r2, #1
 8007168:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 f8c4 	bl	80072f8 <UART_SetConfig>
 8007170:	4603      	mov	r3, r0
 8007172:	2b01      	cmp	r3, #1
 8007174:	d101      	bne.n	800717a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e022      	b.n	80071c0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800717e:	2b00      	cmp	r3, #0
 8007180:	d002      	beq.n	8007188 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fbb4 	bl	80078f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	685a      	ldr	r2, [r3, #4]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007196:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	689a      	ldr	r2, [r3, #8]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f042 0201 	orr.w	r2, r2, #1
 80071b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 fc3b 	bl	8007a34 <UART_CheckIdleState>
 80071be:	4603      	mov	r3, r0
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3708      	adds	r7, #8
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b08a      	sub	sp, #40	; 0x28
 80071cc:	af02      	add	r7, sp, #8
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	603b      	str	r3, [r7, #0]
 80071d4:	4613      	mov	r3, r2
 80071d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071de:	2b20      	cmp	r3, #32
 80071e0:	f040 8084 	bne.w	80072ec <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d002      	beq.n	80071f0 <HAL_UART_Transmit+0x28>
 80071ea:	88fb      	ldrh	r3, [r7, #6]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d101      	bne.n	80071f4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	e07c      	b.n	80072ee <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d101      	bne.n	8007202 <HAL_UART_Transmit+0x3a>
 80071fe:	2302      	movs	r3, #2
 8007200:	e075      	b.n	80072ee <HAL_UART_Transmit+0x126>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2201      	movs	r2, #1
 8007206:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2200      	movs	r2, #0
 800720e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2221      	movs	r2, #33	; 0x21
 8007216:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800721a:	f7fb fb01 	bl	8002820 <HAL_GetTick>
 800721e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	88fa      	ldrh	r2, [r7, #6]
 8007224:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	88fa      	ldrh	r2, [r7, #6]
 800722c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007238:	d108      	bne.n	800724c <HAL_UART_Transmit+0x84>
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d104      	bne.n	800724c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007242:	2300      	movs	r3, #0
 8007244:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	61bb      	str	r3, [r7, #24]
 800724a:	e003      	b.n	8007254 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007250:	2300      	movs	r3, #0
 8007252:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2200      	movs	r2, #0
 8007258:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800725c:	e02d      	b.n	80072ba <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	9300      	str	r3, [sp, #0]
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	2200      	movs	r2, #0
 8007266:	2180      	movs	r1, #128	; 0x80
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	f000 fc2e 	bl	8007aca <UART_WaitOnFlagUntilTimeout>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d001      	beq.n	8007278 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007274:	2303      	movs	r3, #3
 8007276:	e03a      	b.n	80072ee <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d10b      	bne.n	8007296 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	881a      	ldrh	r2, [r3, #0]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800728a:	b292      	uxth	r2, r2
 800728c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	3302      	adds	r3, #2
 8007292:	61bb      	str	r3, [r7, #24]
 8007294:	e008      	b.n	80072a8 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	781a      	ldrb	r2, [r3, #0]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	b292      	uxth	r2, r2
 80072a0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	3301      	adds	r3, #1
 80072a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	3b01      	subs	r3, #1
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1cb      	bne.n	800725e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	9300      	str	r3, [sp, #0]
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	2200      	movs	r2, #0
 80072ce:	2140      	movs	r1, #64	; 0x40
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f000 fbfa 	bl	8007aca <UART_WaitOnFlagUntilTimeout>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d001      	beq.n	80072e0 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 80072dc:	2303      	movs	r3, #3
 80072de:	e006      	b.n	80072ee <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2220      	movs	r2, #32
 80072e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80072e8:	2300      	movs	r3, #0
 80072ea:	e000      	b.n	80072ee <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80072ec:	2302      	movs	r3, #2
  }
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3720      	adds	r7, #32
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
	...

080072f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072fc:	b08c      	sub	sp, #48	; 0x30
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007302:	2300      	movs	r3, #0
 8007304:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	689a      	ldr	r2, [r3, #8]
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	431a      	orrs	r2, r3
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	431a      	orrs	r2, r3
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	69db      	ldr	r3, [r3, #28]
 800731c:	4313      	orrs	r3, r2
 800731e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	4baa      	ldr	r3, [pc, #680]	; (80075d0 <UART_SetConfig+0x2d8>)
 8007328:	4013      	ands	r3, r2
 800732a:	697a      	ldr	r2, [r7, #20]
 800732c:	6812      	ldr	r2, [r2, #0]
 800732e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007330:	430b      	orrs	r3, r1
 8007332:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	68da      	ldr	r2, [r3, #12]
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	430a      	orrs	r2, r1
 8007348:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a9f      	ldr	r2, [pc, #636]	; (80075d4 <UART_SetConfig+0x2dc>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d004      	beq.n	8007364 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	6a1b      	ldr	r3, [r3, #32]
 800735e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007360:	4313      	orrs	r3, r2
 8007362:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800736e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	6812      	ldr	r2, [r2, #0]
 8007376:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007378:	430b      	orrs	r3, r1
 800737a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007382:	f023 010f 	bic.w	r1, r3, #15
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	430a      	orrs	r2, r1
 8007390:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a90      	ldr	r2, [pc, #576]	; (80075d8 <UART_SetConfig+0x2e0>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d125      	bne.n	80073e8 <UART_SetConfig+0xf0>
 800739c:	4b8f      	ldr	r3, [pc, #572]	; (80075dc <UART_SetConfig+0x2e4>)
 800739e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073a2:	f003 0303 	and.w	r3, r3, #3
 80073a6:	2b03      	cmp	r3, #3
 80073a8:	d81a      	bhi.n	80073e0 <UART_SetConfig+0xe8>
 80073aa:	a201      	add	r2, pc, #4	; (adr r2, 80073b0 <UART_SetConfig+0xb8>)
 80073ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b0:	080073c1 	.word	0x080073c1
 80073b4:	080073d1 	.word	0x080073d1
 80073b8:	080073c9 	.word	0x080073c9
 80073bc:	080073d9 	.word	0x080073d9
 80073c0:	2301      	movs	r3, #1
 80073c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073c6:	e116      	b.n	80075f6 <UART_SetConfig+0x2fe>
 80073c8:	2302      	movs	r3, #2
 80073ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073ce:	e112      	b.n	80075f6 <UART_SetConfig+0x2fe>
 80073d0:	2304      	movs	r3, #4
 80073d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073d6:	e10e      	b.n	80075f6 <UART_SetConfig+0x2fe>
 80073d8:	2308      	movs	r3, #8
 80073da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073de:	e10a      	b.n	80075f6 <UART_SetConfig+0x2fe>
 80073e0:	2310      	movs	r3, #16
 80073e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073e6:	e106      	b.n	80075f6 <UART_SetConfig+0x2fe>
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a7c      	ldr	r2, [pc, #496]	; (80075e0 <UART_SetConfig+0x2e8>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d138      	bne.n	8007464 <UART_SetConfig+0x16c>
 80073f2:	4b7a      	ldr	r3, [pc, #488]	; (80075dc <UART_SetConfig+0x2e4>)
 80073f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073f8:	f003 030c 	and.w	r3, r3, #12
 80073fc:	2b0c      	cmp	r3, #12
 80073fe:	d82d      	bhi.n	800745c <UART_SetConfig+0x164>
 8007400:	a201      	add	r2, pc, #4	; (adr r2, 8007408 <UART_SetConfig+0x110>)
 8007402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007406:	bf00      	nop
 8007408:	0800743d 	.word	0x0800743d
 800740c:	0800745d 	.word	0x0800745d
 8007410:	0800745d 	.word	0x0800745d
 8007414:	0800745d 	.word	0x0800745d
 8007418:	0800744d 	.word	0x0800744d
 800741c:	0800745d 	.word	0x0800745d
 8007420:	0800745d 	.word	0x0800745d
 8007424:	0800745d 	.word	0x0800745d
 8007428:	08007445 	.word	0x08007445
 800742c:	0800745d 	.word	0x0800745d
 8007430:	0800745d 	.word	0x0800745d
 8007434:	0800745d 	.word	0x0800745d
 8007438:	08007455 	.word	0x08007455
 800743c:	2300      	movs	r3, #0
 800743e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007442:	e0d8      	b.n	80075f6 <UART_SetConfig+0x2fe>
 8007444:	2302      	movs	r3, #2
 8007446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800744a:	e0d4      	b.n	80075f6 <UART_SetConfig+0x2fe>
 800744c:	2304      	movs	r3, #4
 800744e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007452:	e0d0      	b.n	80075f6 <UART_SetConfig+0x2fe>
 8007454:	2308      	movs	r3, #8
 8007456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800745a:	e0cc      	b.n	80075f6 <UART_SetConfig+0x2fe>
 800745c:	2310      	movs	r3, #16
 800745e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007462:	e0c8      	b.n	80075f6 <UART_SetConfig+0x2fe>
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a5e      	ldr	r2, [pc, #376]	; (80075e4 <UART_SetConfig+0x2ec>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d125      	bne.n	80074ba <UART_SetConfig+0x1c2>
 800746e:	4b5b      	ldr	r3, [pc, #364]	; (80075dc <UART_SetConfig+0x2e4>)
 8007470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007474:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007478:	2b30      	cmp	r3, #48	; 0x30
 800747a:	d016      	beq.n	80074aa <UART_SetConfig+0x1b2>
 800747c:	2b30      	cmp	r3, #48	; 0x30
 800747e:	d818      	bhi.n	80074b2 <UART_SetConfig+0x1ba>
 8007480:	2b20      	cmp	r3, #32
 8007482:	d00a      	beq.n	800749a <UART_SetConfig+0x1a2>
 8007484:	2b20      	cmp	r3, #32
 8007486:	d814      	bhi.n	80074b2 <UART_SetConfig+0x1ba>
 8007488:	2b00      	cmp	r3, #0
 800748a:	d002      	beq.n	8007492 <UART_SetConfig+0x19a>
 800748c:	2b10      	cmp	r3, #16
 800748e:	d008      	beq.n	80074a2 <UART_SetConfig+0x1aa>
 8007490:	e00f      	b.n	80074b2 <UART_SetConfig+0x1ba>
 8007492:	2300      	movs	r3, #0
 8007494:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007498:	e0ad      	b.n	80075f6 <UART_SetConfig+0x2fe>
 800749a:	2302      	movs	r3, #2
 800749c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074a0:	e0a9      	b.n	80075f6 <UART_SetConfig+0x2fe>
 80074a2:	2304      	movs	r3, #4
 80074a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074a8:	e0a5      	b.n	80075f6 <UART_SetConfig+0x2fe>
 80074aa:	2308      	movs	r3, #8
 80074ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074b0:	e0a1      	b.n	80075f6 <UART_SetConfig+0x2fe>
 80074b2:	2310      	movs	r3, #16
 80074b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074b8:	e09d      	b.n	80075f6 <UART_SetConfig+0x2fe>
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a4a      	ldr	r2, [pc, #296]	; (80075e8 <UART_SetConfig+0x2f0>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d125      	bne.n	8007510 <UART_SetConfig+0x218>
 80074c4:	4b45      	ldr	r3, [pc, #276]	; (80075dc <UART_SetConfig+0x2e4>)
 80074c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80074ce:	2bc0      	cmp	r3, #192	; 0xc0
 80074d0:	d016      	beq.n	8007500 <UART_SetConfig+0x208>
 80074d2:	2bc0      	cmp	r3, #192	; 0xc0
 80074d4:	d818      	bhi.n	8007508 <UART_SetConfig+0x210>
 80074d6:	2b80      	cmp	r3, #128	; 0x80
 80074d8:	d00a      	beq.n	80074f0 <UART_SetConfig+0x1f8>
 80074da:	2b80      	cmp	r3, #128	; 0x80
 80074dc:	d814      	bhi.n	8007508 <UART_SetConfig+0x210>
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d002      	beq.n	80074e8 <UART_SetConfig+0x1f0>
 80074e2:	2b40      	cmp	r3, #64	; 0x40
 80074e4:	d008      	beq.n	80074f8 <UART_SetConfig+0x200>
 80074e6:	e00f      	b.n	8007508 <UART_SetConfig+0x210>
 80074e8:	2300      	movs	r3, #0
 80074ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074ee:	e082      	b.n	80075f6 <UART_SetConfig+0x2fe>
 80074f0:	2302      	movs	r3, #2
 80074f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074f6:	e07e      	b.n	80075f6 <UART_SetConfig+0x2fe>
 80074f8:	2304      	movs	r3, #4
 80074fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074fe:	e07a      	b.n	80075f6 <UART_SetConfig+0x2fe>
 8007500:	2308      	movs	r3, #8
 8007502:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007506:	e076      	b.n	80075f6 <UART_SetConfig+0x2fe>
 8007508:	2310      	movs	r3, #16
 800750a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800750e:	e072      	b.n	80075f6 <UART_SetConfig+0x2fe>
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a35      	ldr	r2, [pc, #212]	; (80075ec <UART_SetConfig+0x2f4>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d12a      	bne.n	8007570 <UART_SetConfig+0x278>
 800751a:	4b30      	ldr	r3, [pc, #192]	; (80075dc <UART_SetConfig+0x2e4>)
 800751c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007520:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007524:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007528:	d01a      	beq.n	8007560 <UART_SetConfig+0x268>
 800752a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800752e:	d81b      	bhi.n	8007568 <UART_SetConfig+0x270>
 8007530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007534:	d00c      	beq.n	8007550 <UART_SetConfig+0x258>
 8007536:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800753a:	d815      	bhi.n	8007568 <UART_SetConfig+0x270>
 800753c:	2b00      	cmp	r3, #0
 800753e:	d003      	beq.n	8007548 <UART_SetConfig+0x250>
 8007540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007544:	d008      	beq.n	8007558 <UART_SetConfig+0x260>
 8007546:	e00f      	b.n	8007568 <UART_SetConfig+0x270>
 8007548:	2300      	movs	r3, #0
 800754a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800754e:	e052      	b.n	80075f6 <UART_SetConfig+0x2fe>
 8007550:	2302      	movs	r3, #2
 8007552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007556:	e04e      	b.n	80075f6 <UART_SetConfig+0x2fe>
 8007558:	2304      	movs	r3, #4
 800755a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800755e:	e04a      	b.n	80075f6 <UART_SetConfig+0x2fe>
 8007560:	2308      	movs	r3, #8
 8007562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007566:	e046      	b.n	80075f6 <UART_SetConfig+0x2fe>
 8007568:	2310      	movs	r3, #16
 800756a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800756e:	e042      	b.n	80075f6 <UART_SetConfig+0x2fe>
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a17      	ldr	r2, [pc, #92]	; (80075d4 <UART_SetConfig+0x2dc>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d13a      	bne.n	80075f0 <UART_SetConfig+0x2f8>
 800757a:	4b18      	ldr	r3, [pc, #96]	; (80075dc <UART_SetConfig+0x2e4>)
 800757c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007580:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007584:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007588:	d01a      	beq.n	80075c0 <UART_SetConfig+0x2c8>
 800758a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800758e:	d81b      	bhi.n	80075c8 <UART_SetConfig+0x2d0>
 8007590:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007594:	d00c      	beq.n	80075b0 <UART_SetConfig+0x2b8>
 8007596:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800759a:	d815      	bhi.n	80075c8 <UART_SetConfig+0x2d0>
 800759c:	2b00      	cmp	r3, #0
 800759e:	d003      	beq.n	80075a8 <UART_SetConfig+0x2b0>
 80075a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075a4:	d008      	beq.n	80075b8 <UART_SetConfig+0x2c0>
 80075a6:	e00f      	b.n	80075c8 <UART_SetConfig+0x2d0>
 80075a8:	2300      	movs	r3, #0
 80075aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075ae:	e022      	b.n	80075f6 <UART_SetConfig+0x2fe>
 80075b0:	2302      	movs	r3, #2
 80075b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075b6:	e01e      	b.n	80075f6 <UART_SetConfig+0x2fe>
 80075b8:	2304      	movs	r3, #4
 80075ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075be:	e01a      	b.n	80075f6 <UART_SetConfig+0x2fe>
 80075c0:	2308      	movs	r3, #8
 80075c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075c6:	e016      	b.n	80075f6 <UART_SetConfig+0x2fe>
 80075c8:	2310      	movs	r3, #16
 80075ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075ce:	e012      	b.n	80075f6 <UART_SetConfig+0x2fe>
 80075d0:	cfff69f3 	.word	0xcfff69f3
 80075d4:	40008000 	.word	0x40008000
 80075d8:	40013800 	.word	0x40013800
 80075dc:	40021000 	.word	0x40021000
 80075e0:	40004400 	.word	0x40004400
 80075e4:	40004800 	.word	0x40004800
 80075e8:	40004c00 	.word	0x40004c00
 80075ec:	40005000 	.word	0x40005000
 80075f0:	2310      	movs	r3, #16
 80075f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4aae      	ldr	r2, [pc, #696]	; (80078b4 <UART_SetConfig+0x5bc>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	f040 8097 	bne.w	8007730 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007602:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007606:	2b08      	cmp	r3, #8
 8007608:	d823      	bhi.n	8007652 <UART_SetConfig+0x35a>
 800760a:	a201      	add	r2, pc, #4	; (adr r2, 8007610 <UART_SetConfig+0x318>)
 800760c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007610:	08007635 	.word	0x08007635
 8007614:	08007653 	.word	0x08007653
 8007618:	0800763d 	.word	0x0800763d
 800761c:	08007653 	.word	0x08007653
 8007620:	08007643 	.word	0x08007643
 8007624:	08007653 	.word	0x08007653
 8007628:	08007653 	.word	0x08007653
 800762c:	08007653 	.word	0x08007653
 8007630:	0800764b 	.word	0x0800764b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007634:	f7fd fb10 	bl	8004c58 <HAL_RCC_GetPCLK1Freq>
 8007638:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800763a:	e010      	b.n	800765e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800763c:	4b9e      	ldr	r3, [pc, #632]	; (80078b8 <UART_SetConfig+0x5c0>)
 800763e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007640:	e00d      	b.n	800765e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007642:	f7fd fa71 	bl	8004b28 <HAL_RCC_GetSysClockFreq>
 8007646:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007648:	e009      	b.n	800765e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800764a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800764e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007650:	e005      	b.n	800765e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007652:	2300      	movs	r3, #0
 8007654:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800765c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800765e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007660:	2b00      	cmp	r3, #0
 8007662:	f000 8130 	beq.w	80078c6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766a:	4a94      	ldr	r2, [pc, #592]	; (80078bc <UART_SetConfig+0x5c4>)
 800766c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007670:	461a      	mov	r2, r3
 8007672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007674:	fbb3 f3f2 	udiv	r3, r3, r2
 8007678:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	685a      	ldr	r2, [r3, #4]
 800767e:	4613      	mov	r3, r2
 8007680:	005b      	lsls	r3, r3, #1
 8007682:	4413      	add	r3, r2
 8007684:	69ba      	ldr	r2, [r7, #24]
 8007686:	429a      	cmp	r2, r3
 8007688:	d305      	bcc.n	8007696 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007690:	69ba      	ldr	r2, [r7, #24]
 8007692:	429a      	cmp	r2, r3
 8007694:	d903      	bls.n	800769e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800769c:	e113      	b.n	80078c6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800769e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a0:	2200      	movs	r2, #0
 80076a2:	60bb      	str	r3, [r7, #8]
 80076a4:	60fa      	str	r2, [r7, #12]
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076aa:	4a84      	ldr	r2, [pc, #528]	; (80078bc <UART_SetConfig+0x5c4>)
 80076ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	2200      	movs	r2, #0
 80076b4:	603b      	str	r3, [r7, #0]
 80076b6:	607a      	str	r2, [r7, #4]
 80076b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80076c0:	f7f9 fada 	bl	8000c78 <__aeabi_uldivmod>
 80076c4:	4602      	mov	r2, r0
 80076c6:	460b      	mov	r3, r1
 80076c8:	4610      	mov	r0, r2
 80076ca:	4619      	mov	r1, r3
 80076cc:	f04f 0200 	mov.w	r2, #0
 80076d0:	f04f 0300 	mov.w	r3, #0
 80076d4:	020b      	lsls	r3, r1, #8
 80076d6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80076da:	0202      	lsls	r2, r0, #8
 80076dc:	6979      	ldr	r1, [r7, #20]
 80076de:	6849      	ldr	r1, [r1, #4]
 80076e0:	0849      	lsrs	r1, r1, #1
 80076e2:	2000      	movs	r0, #0
 80076e4:	460c      	mov	r4, r1
 80076e6:	4605      	mov	r5, r0
 80076e8:	eb12 0804 	adds.w	r8, r2, r4
 80076ec:	eb43 0905 	adc.w	r9, r3, r5
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	469a      	mov	sl, r3
 80076f8:	4693      	mov	fp, r2
 80076fa:	4652      	mov	r2, sl
 80076fc:	465b      	mov	r3, fp
 80076fe:	4640      	mov	r0, r8
 8007700:	4649      	mov	r1, r9
 8007702:	f7f9 fab9 	bl	8000c78 <__aeabi_uldivmod>
 8007706:	4602      	mov	r2, r0
 8007708:	460b      	mov	r3, r1
 800770a:	4613      	mov	r3, r2
 800770c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800770e:	6a3b      	ldr	r3, [r7, #32]
 8007710:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007714:	d308      	bcc.n	8007728 <UART_SetConfig+0x430>
 8007716:	6a3b      	ldr	r3, [r7, #32]
 8007718:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800771c:	d204      	bcs.n	8007728 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	6a3a      	ldr	r2, [r7, #32]
 8007724:	60da      	str	r2, [r3, #12]
 8007726:	e0ce      	b.n	80078c6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800772e:	e0ca      	b.n	80078c6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	69db      	ldr	r3, [r3, #28]
 8007734:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007738:	d166      	bne.n	8007808 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800773a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800773e:	2b08      	cmp	r3, #8
 8007740:	d827      	bhi.n	8007792 <UART_SetConfig+0x49a>
 8007742:	a201      	add	r2, pc, #4	; (adr r2, 8007748 <UART_SetConfig+0x450>)
 8007744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007748:	0800776d 	.word	0x0800776d
 800774c:	08007775 	.word	0x08007775
 8007750:	0800777d 	.word	0x0800777d
 8007754:	08007793 	.word	0x08007793
 8007758:	08007783 	.word	0x08007783
 800775c:	08007793 	.word	0x08007793
 8007760:	08007793 	.word	0x08007793
 8007764:	08007793 	.word	0x08007793
 8007768:	0800778b 	.word	0x0800778b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800776c:	f7fd fa74 	bl	8004c58 <HAL_RCC_GetPCLK1Freq>
 8007770:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007772:	e014      	b.n	800779e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007774:	f7fd fa86 	bl	8004c84 <HAL_RCC_GetPCLK2Freq>
 8007778:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800777a:	e010      	b.n	800779e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800777c:	4b4e      	ldr	r3, [pc, #312]	; (80078b8 <UART_SetConfig+0x5c0>)
 800777e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007780:	e00d      	b.n	800779e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007782:	f7fd f9d1 	bl	8004b28 <HAL_RCC_GetSysClockFreq>
 8007786:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007788:	e009      	b.n	800779e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800778a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800778e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007790:	e005      	b.n	800779e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007792:	2300      	movs	r3, #0
 8007794:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800779c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800779e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	f000 8090 	beq.w	80078c6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077aa:	4a44      	ldr	r2, [pc, #272]	; (80078bc <UART_SetConfig+0x5c4>)
 80077ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077b0:	461a      	mov	r2, r3
 80077b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80077b8:	005a      	lsls	r2, r3, #1
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	085b      	lsrs	r3, r3, #1
 80077c0:	441a      	add	r2, r3
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ca:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077cc:	6a3b      	ldr	r3, [r7, #32]
 80077ce:	2b0f      	cmp	r3, #15
 80077d0:	d916      	bls.n	8007800 <UART_SetConfig+0x508>
 80077d2:	6a3b      	ldr	r3, [r7, #32]
 80077d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077d8:	d212      	bcs.n	8007800 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077da:	6a3b      	ldr	r3, [r7, #32]
 80077dc:	b29b      	uxth	r3, r3
 80077de:	f023 030f 	bic.w	r3, r3, #15
 80077e2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077e4:	6a3b      	ldr	r3, [r7, #32]
 80077e6:	085b      	lsrs	r3, r3, #1
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	f003 0307 	and.w	r3, r3, #7
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	8bfb      	ldrh	r3, [r7, #30]
 80077f2:	4313      	orrs	r3, r2
 80077f4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	8bfa      	ldrh	r2, [r7, #30]
 80077fc:	60da      	str	r2, [r3, #12]
 80077fe:	e062      	b.n	80078c6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007806:	e05e      	b.n	80078c6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007808:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800780c:	2b08      	cmp	r3, #8
 800780e:	d828      	bhi.n	8007862 <UART_SetConfig+0x56a>
 8007810:	a201      	add	r2, pc, #4	; (adr r2, 8007818 <UART_SetConfig+0x520>)
 8007812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007816:	bf00      	nop
 8007818:	0800783d 	.word	0x0800783d
 800781c:	08007845 	.word	0x08007845
 8007820:	0800784d 	.word	0x0800784d
 8007824:	08007863 	.word	0x08007863
 8007828:	08007853 	.word	0x08007853
 800782c:	08007863 	.word	0x08007863
 8007830:	08007863 	.word	0x08007863
 8007834:	08007863 	.word	0x08007863
 8007838:	0800785b 	.word	0x0800785b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800783c:	f7fd fa0c 	bl	8004c58 <HAL_RCC_GetPCLK1Freq>
 8007840:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007842:	e014      	b.n	800786e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007844:	f7fd fa1e 	bl	8004c84 <HAL_RCC_GetPCLK2Freq>
 8007848:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800784a:	e010      	b.n	800786e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800784c:	4b1a      	ldr	r3, [pc, #104]	; (80078b8 <UART_SetConfig+0x5c0>)
 800784e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007850:	e00d      	b.n	800786e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007852:	f7fd f969 	bl	8004b28 <HAL_RCC_GetSysClockFreq>
 8007856:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007858:	e009      	b.n	800786e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800785a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800785e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007860:	e005      	b.n	800786e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007862:	2300      	movs	r3, #0
 8007864:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800786c:	bf00      	nop
    }

    if (pclk != 0U)
 800786e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007870:	2b00      	cmp	r3, #0
 8007872:	d028      	beq.n	80078c6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007878:	4a10      	ldr	r2, [pc, #64]	; (80078bc <UART_SetConfig+0x5c4>)
 800787a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800787e:	461a      	mov	r2, r3
 8007880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007882:	fbb3 f2f2 	udiv	r2, r3, r2
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	085b      	lsrs	r3, r3, #1
 800788c:	441a      	add	r2, r3
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	fbb2 f3f3 	udiv	r3, r2, r3
 8007896:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007898:	6a3b      	ldr	r3, [r7, #32]
 800789a:	2b0f      	cmp	r3, #15
 800789c:	d910      	bls.n	80078c0 <UART_SetConfig+0x5c8>
 800789e:	6a3b      	ldr	r3, [r7, #32]
 80078a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078a4:	d20c      	bcs.n	80078c0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80078a6:	6a3b      	ldr	r3, [r7, #32]
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	60da      	str	r2, [r3, #12]
 80078b0:	e009      	b.n	80078c6 <UART_SetConfig+0x5ce>
 80078b2:	bf00      	nop
 80078b4:	40008000 	.word	0x40008000
 80078b8:	00f42400 	.word	0x00f42400
 80078bc:	0800b2ac 	.word	0x0800b2ac
      }
      else
      {
        ret = HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	2201      	movs	r2, #1
 80078ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	2201      	movs	r2, #1
 80078d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	2200      	movs	r2, #0
 80078da:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	2200      	movs	r2, #0
 80078e0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80078e2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3730      	adds	r7, #48	; 0x30
 80078ea:	46bd      	mov	sp, r7
 80078ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080078f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078fc:	f003 0301 	and.w	r3, r3, #1
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00a      	beq.n	800791a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	430a      	orrs	r2, r1
 8007918:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800791e:	f003 0302 	and.w	r3, r3, #2
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00a      	beq.n	800793c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	430a      	orrs	r2, r1
 800793a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007940:	f003 0304 	and.w	r3, r3, #4
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00a      	beq.n	800795e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	430a      	orrs	r2, r1
 800795c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007962:	f003 0308 	and.w	r3, r3, #8
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00a      	beq.n	8007980 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	430a      	orrs	r2, r1
 800797e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007984:	f003 0310 	and.w	r3, r3, #16
 8007988:	2b00      	cmp	r3, #0
 800798a:	d00a      	beq.n	80079a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	430a      	orrs	r2, r1
 80079a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a6:	f003 0320 	and.w	r3, r3, #32
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d00a      	beq.n	80079c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	430a      	orrs	r2, r1
 80079c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d01a      	beq.n	8007a06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	430a      	orrs	r2, r1
 80079e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079ee:	d10a      	bne.n	8007a06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	430a      	orrs	r2, r1
 8007a04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00a      	beq.n	8007a28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	430a      	orrs	r2, r1
 8007a26:	605a      	str	r2, [r3, #4]
  }
}
 8007a28:	bf00      	nop
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b086      	sub	sp, #24
 8007a38:	af02      	add	r7, sp, #8
 8007a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a44:	f7fa feec 	bl	8002820 <HAL_GetTick>
 8007a48:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 0308 	and.w	r3, r3, #8
 8007a54:	2b08      	cmp	r3, #8
 8007a56:	d10e      	bne.n	8007a76 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a5c:	9300      	str	r3, [sp, #0]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f82f 	bl	8007aca <UART_WaitOnFlagUntilTimeout>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d001      	beq.n	8007a76 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a72:	2303      	movs	r3, #3
 8007a74:	e025      	b.n	8007ac2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 0304 	and.w	r3, r3, #4
 8007a80:	2b04      	cmp	r3, #4
 8007a82:	d10e      	bne.n	8007aa2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a88:	9300      	str	r3, [sp, #0]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 f819 	bl	8007aca <UART_WaitOnFlagUntilTimeout>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d001      	beq.n	8007aa2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	e00f      	b.n	8007ac2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2220      	movs	r2, #32
 8007aa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2220      	movs	r2, #32
 8007aae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b09c      	sub	sp, #112	; 0x70
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	60f8      	str	r0, [r7, #12]
 8007ad2:	60b9      	str	r1, [r7, #8]
 8007ad4:	603b      	str	r3, [r7, #0]
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ada:	e0a9      	b.n	8007c30 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007adc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ae2:	f000 80a5 	beq.w	8007c30 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ae6:	f7fa fe9b 	bl	8002820 <HAL_GetTick>
 8007aea:	4602      	mov	r2, r0
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	1ad3      	subs	r3, r2, r3
 8007af0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d302      	bcc.n	8007afc <UART_WaitOnFlagUntilTimeout+0x32>
 8007af6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d140      	bne.n	8007b7e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b04:	e853 3f00 	ldrex	r3, [r3]
 8007b08:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b10:	667b      	str	r3, [r7, #100]	; 0x64
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	461a      	mov	r2, r3
 8007b18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b1c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007b22:	e841 2300 	strex	r3, r2, [r1]
 8007b26:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007b28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1e6      	bne.n	8007afc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	3308      	adds	r3, #8
 8007b34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b38:	e853 3f00 	ldrex	r3, [r3]
 8007b3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b40:	f023 0301 	bic.w	r3, r3, #1
 8007b44:	663b      	str	r3, [r7, #96]	; 0x60
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	3308      	adds	r3, #8
 8007b4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007b4e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007b50:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b56:	e841 2300 	strex	r3, r2, [r1]
 8007b5a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007b5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d1e5      	bne.n	8007b2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2220      	movs	r2, #32
 8007b66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2220      	movs	r2, #32
 8007b6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	e069      	b.n	8007c52 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0304 	and.w	r3, r3, #4
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d051      	beq.n	8007c30 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	69db      	ldr	r3, [r3, #28]
 8007b92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b9a:	d149      	bne.n	8007c30 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ba4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bae:	e853 3f00 	ldrex	r3, [r3]
 8007bb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007bba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bc4:	637b      	str	r3, [r7, #52]	; 0x34
 8007bc6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007bca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bcc:	e841 2300 	strex	r3, r2, [r1]
 8007bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d1e6      	bne.n	8007ba6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	3308      	adds	r3, #8
 8007bde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	e853 3f00 	ldrex	r3, [r3]
 8007be6:	613b      	str	r3, [r7, #16]
   return(result);
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	f023 0301 	bic.w	r3, r3, #1
 8007bee:	66bb      	str	r3, [r7, #104]	; 0x68
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	3308      	adds	r3, #8
 8007bf6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007bf8:	623a      	str	r2, [r7, #32]
 8007bfa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfc:	69f9      	ldr	r1, [r7, #28]
 8007bfe:	6a3a      	ldr	r2, [r7, #32]
 8007c00:	e841 2300 	strex	r3, r2, [r1]
 8007c04:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d1e5      	bne.n	8007bd8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2220      	movs	r2, #32
 8007c10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2220      	movs	r2, #32
 8007c18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2220      	movs	r2, #32
 8007c20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	e010      	b.n	8007c52 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	69da      	ldr	r2, [r3, #28]
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	4013      	ands	r3, r2
 8007c3a:	68ba      	ldr	r2, [r7, #8]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	bf0c      	ite	eq
 8007c40:	2301      	moveq	r3, #1
 8007c42:	2300      	movne	r3, #0
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	461a      	mov	r2, r3
 8007c48:	79fb      	ldrb	r3, [r7, #7]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	f43f af46 	beq.w	8007adc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3770      	adds	r7, #112	; 0x70
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	b085      	sub	sp, #20
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d101      	bne.n	8007c70 <HAL_UARTEx_DisableFifoMode+0x16>
 8007c6c:	2302      	movs	r3, #2
 8007c6e:	e027      	b.n	8007cc0 <HAL_UARTEx_DisableFifoMode+0x66>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2224      	movs	r2, #36	; 0x24
 8007c7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f022 0201 	bic.w	r2, r2, #1
 8007c96:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007c9e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	68fa      	ldr	r2, [r7, #12]
 8007cac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2220      	movs	r2, #32
 8007cb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3714      	adds	r7, #20
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d101      	bne.n	8007ce4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007ce0:	2302      	movs	r3, #2
 8007ce2:	e02d      	b.n	8007d40 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2224      	movs	r2, #36	; 0x24
 8007cf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f022 0201 	bic.w	r2, r2, #1
 8007d0a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	683a      	ldr	r2, [r7, #0]
 8007d1c:	430a      	orrs	r2, r1
 8007d1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 f84f 	bl	8007dc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	68fa      	ldr	r2, [r7, #12]
 8007d2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2220      	movs	r2, #32
 8007d32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3710      	adds	r7, #16
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d101      	bne.n	8007d60 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007d5c:	2302      	movs	r3, #2
 8007d5e:	e02d      	b.n	8007dbc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2224      	movs	r2, #36	; 0x24
 8007d6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f022 0201 	bic.w	r2, r2, #1
 8007d86:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	683a      	ldr	r2, [r7, #0]
 8007d98:	430a      	orrs	r2, r1
 8007d9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 f811 	bl	8007dc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2220      	movs	r2, #32
 8007dae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d108      	bne.n	8007de6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007de4:	e031      	b.n	8007e4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007de6:	2308      	movs	r3, #8
 8007de8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007dea:	2308      	movs	r3, #8
 8007dec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	0e5b      	lsrs	r3, r3, #25
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	f003 0307 	and.w	r3, r3, #7
 8007dfc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	0f5b      	lsrs	r3, r3, #29
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	f003 0307 	and.w	r3, r3, #7
 8007e0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e0e:	7bbb      	ldrb	r3, [r7, #14]
 8007e10:	7b3a      	ldrb	r2, [r7, #12]
 8007e12:	4911      	ldr	r1, [pc, #68]	; (8007e58 <UARTEx_SetNbDataToProcess+0x94>)
 8007e14:	5c8a      	ldrb	r2, [r1, r2]
 8007e16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007e1a:	7b3a      	ldrb	r2, [r7, #12]
 8007e1c:	490f      	ldr	r1, [pc, #60]	; (8007e5c <UARTEx_SetNbDataToProcess+0x98>)
 8007e1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e20:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e24:	b29a      	uxth	r2, r3
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e2c:	7bfb      	ldrb	r3, [r7, #15]
 8007e2e:	7b7a      	ldrb	r2, [r7, #13]
 8007e30:	4909      	ldr	r1, [pc, #36]	; (8007e58 <UARTEx_SetNbDataToProcess+0x94>)
 8007e32:	5c8a      	ldrb	r2, [r1, r2]
 8007e34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007e38:	7b7a      	ldrb	r2, [r7, #13]
 8007e3a:	4908      	ldr	r1, [pc, #32]	; (8007e5c <UARTEx_SetNbDataToProcess+0x98>)
 8007e3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e3e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e42:	b29a      	uxth	r2, r3
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007e4a:	bf00      	nop
 8007e4c:	3714      	adds	r7, #20
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop
 8007e58:	0800b2c4 	.word	0x0800b2c4
 8007e5c:	0800b2cc 	.word	0x0800b2cc

08007e60 <__errno>:
 8007e60:	4b01      	ldr	r3, [pc, #4]	; (8007e68 <__errno+0x8>)
 8007e62:	6818      	ldr	r0, [r3, #0]
 8007e64:	4770      	bx	lr
 8007e66:	bf00      	nop
 8007e68:	20000014 	.word	0x20000014

08007e6c <__libc_init_array>:
 8007e6c:	b570      	push	{r4, r5, r6, lr}
 8007e6e:	4d0d      	ldr	r5, [pc, #52]	; (8007ea4 <__libc_init_array+0x38>)
 8007e70:	4c0d      	ldr	r4, [pc, #52]	; (8007ea8 <__libc_init_array+0x3c>)
 8007e72:	1b64      	subs	r4, r4, r5
 8007e74:	10a4      	asrs	r4, r4, #2
 8007e76:	2600      	movs	r6, #0
 8007e78:	42a6      	cmp	r6, r4
 8007e7a:	d109      	bne.n	8007e90 <__libc_init_array+0x24>
 8007e7c:	4d0b      	ldr	r5, [pc, #44]	; (8007eac <__libc_init_array+0x40>)
 8007e7e:	4c0c      	ldr	r4, [pc, #48]	; (8007eb0 <__libc_init_array+0x44>)
 8007e80:	f003 f9d2 	bl	800b228 <_init>
 8007e84:	1b64      	subs	r4, r4, r5
 8007e86:	10a4      	asrs	r4, r4, #2
 8007e88:	2600      	movs	r6, #0
 8007e8a:	42a6      	cmp	r6, r4
 8007e8c:	d105      	bne.n	8007e9a <__libc_init_array+0x2e>
 8007e8e:	bd70      	pop	{r4, r5, r6, pc}
 8007e90:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e94:	4798      	blx	r3
 8007e96:	3601      	adds	r6, #1
 8007e98:	e7ee      	b.n	8007e78 <__libc_init_array+0xc>
 8007e9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e9e:	4798      	blx	r3
 8007ea0:	3601      	adds	r6, #1
 8007ea2:	e7f2      	b.n	8007e8a <__libc_init_array+0x1e>
 8007ea4:	0800b6e8 	.word	0x0800b6e8
 8007ea8:	0800b6e8 	.word	0x0800b6e8
 8007eac:	0800b6e8 	.word	0x0800b6e8
 8007eb0:	0800b6ec 	.word	0x0800b6ec

08007eb4 <malloc>:
 8007eb4:	4b02      	ldr	r3, [pc, #8]	; (8007ec0 <malloc+0xc>)
 8007eb6:	4601      	mov	r1, r0
 8007eb8:	6818      	ldr	r0, [r3, #0]
 8007eba:	f000 b877 	b.w	8007fac <_malloc_r>
 8007ebe:	bf00      	nop
 8007ec0:	20000014 	.word	0x20000014

08007ec4 <memset>:
 8007ec4:	4402      	add	r2, r0
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d100      	bne.n	8007ece <memset+0xa>
 8007ecc:	4770      	bx	lr
 8007ece:	f803 1b01 	strb.w	r1, [r3], #1
 8007ed2:	e7f9      	b.n	8007ec8 <memset+0x4>

08007ed4 <_free_r>:
 8007ed4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ed6:	2900      	cmp	r1, #0
 8007ed8:	d044      	beq.n	8007f64 <_free_r+0x90>
 8007eda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ede:	9001      	str	r0, [sp, #4]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f1a1 0404 	sub.w	r4, r1, #4
 8007ee6:	bfb8      	it	lt
 8007ee8:	18e4      	addlt	r4, r4, r3
 8007eea:	f001 ff49 	bl	8009d80 <__malloc_lock>
 8007eee:	4a1e      	ldr	r2, [pc, #120]	; (8007f68 <_free_r+0x94>)
 8007ef0:	9801      	ldr	r0, [sp, #4]
 8007ef2:	6813      	ldr	r3, [r2, #0]
 8007ef4:	b933      	cbnz	r3, 8007f04 <_free_r+0x30>
 8007ef6:	6063      	str	r3, [r4, #4]
 8007ef8:	6014      	str	r4, [r2, #0]
 8007efa:	b003      	add	sp, #12
 8007efc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f00:	f001 bf44 	b.w	8009d8c <__malloc_unlock>
 8007f04:	42a3      	cmp	r3, r4
 8007f06:	d908      	bls.n	8007f1a <_free_r+0x46>
 8007f08:	6825      	ldr	r5, [r4, #0]
 8007f0a:	1961      	adds	r1, r4, r5
 8007f0c:	428b      	cmp	r3, r1
 8007f0e:	bf01      	itttt	eq
 8007f10:	6819      	ldreq	r1, [r3, #0]
 8007f12:	685b      	ldreq	r3, [r3, #4]
 8007f14:	1949      	addeq	r1, r1, r5
 8007f16:	6021      	streq	r1, [r4, #0]
 8007f18:	e7ed      	b.n	8007ef6 <_free_r+0x22>
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	b10b      	cbz	r3, 8007f24 <_free_r+0x50>
 8007f20:	42a3      	cmp	r3, r4
 8007f22:	d9fa      	bls.n	8007f1a <_free_r+0x46>
 8007f24:	6811      	ldr	r1, [r2, #0]
 8007f26:	1855      	adds	r5, r2, r1
 8007f28:	42a5      	cmp	r5, r4
 8007f2a:	d10b      	bne.n	8007f44 <_free_r+0x70>
 8007f2c:	6824      	ldr	r4, [r4, #0]
 8007f2e:	4421      	add	r1, r4
 8007f30:	1854      	adds	r4, r2, r1
 8007f32:	42a3      	cmp	r3, r4
 8007f34:	6011      	str	r1, [r2, #0]
 8007f36:	d1e0      	bne.n	8007efa <_free_r+0x26>
 8007f38:	681c      	ldr	r4, [r3, #0]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	6053      	str	r3, [r2, #4]
 8007f3e:	4421      	add	r1, r4
 8007f40:	6011      	str	r1, [r2, #0]
 8007f42:	e7da      	b.n	8007efa <_free_r+0x26>
 8007f44:	d902      	bls.n	8007f4c <_free_r+0x78>
 8007f46:	230c      	movs	r3, #12
 8007f48:	6003      	str	r3, [r0, #0]
 8007f4a:	e7d6      	b.n	8007efa <_free_r+0x26>
 8007f4c:	6825      	ldr	r5, [r4, #0]
 8007f4e:	1961      	adds	r1, r4, r5
 8007f50:	428b      	cmp	r3, r1
 8007f52:	bf04      	itt	eq
 8007f54:	6819      	ldreq	r1, [r3, #0]
 8007f56:	685b      	ldreq	r3, [r3, #4]
 8007f58:	6063      	str	r3, [r4, #4]
 8007f5a:	bf04      	itt	eq
 8007f5c:	1949      	addeq	r1, r1, r5
 8007f5e:	6021      	streq	r1, [r4, #0]
 8007f60:	6054      	str	r4, [r2, #4]
 8007f62:	e7ca      	b.n	8007efa <_free_r+0x26>
 8007f64:	b003      	add	sp, #12
 8007f66:	bd30      	pop	{r4, r5, pc}
 8007f68:	200004bc 	.word	0x200004bc

08007f6c <sbrk_aligned>:
 8007f6c:	b570      	push	{r4, r5, r6, lr}
 8007f6e:	4e0e      	ldr	r6, [pc, #56]	; (8007fa8 <sbrk_aligned+0x3c>)
 8007f70:	460c      	mov	r4, r1
 8007f72:	6831      	ldr	r1, [r6, #0]
 8007f74:	4605      	mov	r5, r0
 8007f76:	b911      	cbnz	r1, 8007f7e <sbrk_aligned+0x12>
 8007f78:	f000 fd84 	bl	8008a84 <_sbrk_r>
 8007f7c:	6030      	str	r0, [r6, #0]
 8007f7e:	4621      	mov	r1, r4
 8007f80:	4628      	mov	r0, r5
 8007f82:	f000 fd7f 	bl	8008a84 <_sbrk_r>
 8007f86:	1c43      	adds	r3, r0, #1
 8007f88:	d00a      	beq.n	8007fa0 <sbrk_aligned+0x34>
 8007f8a:	1cc4      	adds	r4, r0, #3
 8007f8c:	f024 0403 	bic.w	r4, r4, #3
 8007f90:	42a0      	cmp	r0, r4
 8007f92:	d007      	beq.n	8007fa4 <sbrk_aligned+0x38>
 8007f94:	1a21      	subs	r1, r4, r0
 8007f96:	4628      	mov	r0, r5
 8007f98:	f000 fd74 	bl	8008a84 <_sbrk_r>
 8007f9c:	3001      	adds	r0, #1
 8007f9e:	d101      	bne.n	8007fa4 <sbrk_aligned+0x38>
 8007fa0:	f04f 34ff 	mov.w	r4, #4294967295
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	bd70      	pop	{r4, r5, r6, pc}
 8007fa8:	200004c0 	.word	0x200004c0

08007fac <_malloc_r>:
 8007fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fb0:	1ccd      	adds	r5, r1, #3
 8007fb2:	f025 0503 	bic.w	r5, r5, #3
 8007fb6:	3508      	adds	r5, #8
 8007fb8:	2d0c      	cmp	r5, #12
 8007fba:	bf38      	it	cc
 8007fbc:	250c      	movcc	r5, #12
 8007fbe:	2d00      	cmp	r5, #0
 8007fc0:	4607      	mov	r7, r0
 8007fc2:	db01      	blt.n	8007fc8 <_malloc_r+0x1c>
 8007fc4:	42a9      	cmp	r1, r5
 8007fc6:	d905      	bls.n	8007fd4 <_malloc_r+0x28>
 8007fc8:	230c      	movs	r3, #12
 8007fca:	603b      	str	r3, [r7, #0]
 8007fcc:	2600      	movs	r6, #0
 8007fce:	4630      	mov	r0, r6
 8007fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fd4:	4e2e      	ldr	r6, [pc, #184]	; (8008090 <_malloc_r+0xe4>)
 8007fd6:	f001 fed3 	bl	8009d80 <__malloc_lock>
 8007fda:	6833      	ldr	r3, [r6, #0]
 8007fdc:	461c      	mov	r4, r3
 8007fde:	bb34      	cbnz	r4, 800802e <_malloc_r+0x82>
 8007fe0:	4629      	mov	r1, r5
 8007fe2:	4638      	mov	r0, r7
 8007fe4:	f7ff ffc2 	bl	8007f6c <sbrk_aligned>
 8007fe8:	1c43      	adds	r3, r0, #1
 8007fea:	4604      	mov	r4, r0
 8007fec:	d14d      	bne.n	800808a <_malloc_r+0xde>
 8007fee:	6834      	ldr	r4, [r6, #0]
 8007ff0:	4626      	mov	r6, r4
 8007ff2:	2e00      	cmp	r6, #0
 8007ff4:	d140      	bne.n	8008078 <_malloc_r+0xcc>
 8007ff6:	6823      	ldr	r3, [r4, #0]
 8007ff8:	4631      	mov	r1, r6
 8007ffa:	4638      	mov	r0, r7
 8007ffc:	eb04 0803 	add.w	r8, r4, r3
 8008000:	f000 fd40 	bl	8008a84 <_sbrk_r>
 8008004:	4580      	cmp	r8, r0
 8008006:	d13a      	bne.n	800807e <_malloc_r+0xd2>
 8008008:	6821      	ldr	r1, [r4, #0]
 800800a:	3503      	adds	r5, #3
 800800c:	1a6d      	subs	r5, r5, r1
 800800e:	f025 0503 	bic.w	r5, r5, #3
 8008012:	3508      	adds	r5, #8
 8008014:	2d0c      	cmp	r5, #12
 8008016:	bf38      	it	cc
 8008018:	250c      	movcc	r5, #12
 800801a:	4629      	mov	r1, r5
 800801c:	4638      	mov	r0, r7
 800801e:	f7ff ffa5 	bl	8007f6c <sbrk_aligned>
 8008022:	3001      	adds	r0, #1
 8008024:	d02b      	beq.n	800807e <_malloc_r+0xd2>
 8008026:	6823      	ldr	r3, [r4, #0]
 8008028:	442b      	add	r3, r5
 800802a:	6023      	str	r3, [r4, #0]
 800802c:	e00e      	b.n	800804c <_malloc_r+0xa0>
 800802e:	6822      	ldr	r2, [r4, #0]
 8008030:	1b52      	subs	r2, r2, r5
 8008032:	d41e      	bmi.n	8008072 <_malloc_r+0xc6>
 8008034:	2a0b      	cmp	r2, #11
 8008036:	d916      	bls.n	8008066 <_malloc_r+0xba>
 8008038:	1961      	adds	r1, r4, r5
 800803a:	42a3      	cmp	r3, r4
 800803c:	6025      	str	r5, [r4, #0]
 800803e:	bf18      	it	ne
 8008040:	6059      	strne	r1, [r3, #4]
 8008042:	6863      	ldr	r3, [r4, #4]
 8008044:	bf08      	it	eq
 8008046:	6031      	streq	r1, [r6, #0]
 8008048:	5162      	str	r2, [r4, r5]
 800804a:	604b      	str	r3, [r1, #4]
 800804c:	4638      	mov	r0, r7
 800804e:	f104 060b 	add.w	r6, r4, #11
 8008052:	f001 fe9b 	bl	8009d8c <__malloc_unlock>
 8008056:	f026 0607 	bic.w	r6, r6, #7
 800805a:	1d23      	adds	r3, r4, #4
 800805c:	1af2      	subs	r2, r6, r3
 800805e:	d0b6      	beq.n	8007fce <_malloc_r+0x22>
 8008060:	1b9b      	subs	r3, r3, r6
 8008062:	50a3      	str	r3, [r4, r2]
 8008064:	e7b3      	b.n	8007fce <_malloc_r+0x22>
 8008066:	6862      	ldr	r2, [r4, #4]
 8008068:	42a3      	cmp	r3, r4
 800806a:	bf0c      	ite	eq
 800806c:	6032      	streq	r2, [r6, #0]
 800806e:	605a      	strne	r2, [r3, #4]
 8008070:	e7ec      	b.n	800804c <_malloc_r+0xa0>
 8008072:	4623      	mov	r3, r4
 8008074:	6864      	ldr	r4, [r4, #4]
 8008076:	e7b2      	b.n	8007fde <_malloc_r+0x32>
 8008078:	4634      	mov	r4, r6
 800807a:	6876      	ldr	r6, [r6, #4]
 800807c:	e7b9      	b.n	8007ff2 <_malloc_r+0x46>
 800807e:	230c      	movs	r3, #12
 8008080:	603b      	str	r3, [r7, #0]
 8008082:	4638      	mov	r0, r7
 8008084:	f001 fe82 	bl	8009d8c <__malloc_unlock>
 8008088:	e7a1      	b.n	8007fce <_malloc_r+0x22>
 800808a:	6025      	str	r5, [r4, #0]
 800808c:	e7de      	b.n	800804c <_malloc_r+0xa0>
 800808e:	bf00      	nop
 8008090:	200004bc 	.word	0x200004bc

08008094 <__cvt>:
 8008094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008098:	ec55 4b10 	vmov	r4, r5, d0
 800809c:	2d00      	cmp	r5, #0
 800809e:	460e      	mov	r6, r1
 80080a0:	4619      	mov	r1, r3
 80080a2:	462b      	mov	r3, r5
 80080a4:	bfbb      	ittet	lt
 80080a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80080aa:	461d      	movlt	r5, r3
 80080ac:	2300      	movge	r3, #0
 80080ae:	232d      	movlt	r3, #45	; 0x2d
 80080b0:	700b      	strb	r3, [r1, #0]
 80080b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80080b8:	4691      	mov	r9, r2
 80080ba:	f023 0820 	bic.w	r8, r3, #32
 80080be:	bfbc      	itt	lt
 80080c0:	4622      	movlt	r2, r4
 80080c2:	4614      	movlt	r4, r2
 80080c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80080c8:	d005      	beq.n	80080d6 <__cvt+0x42>
 80080ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80080ce:	d100      	bne.n	80080d2 <__cvt+0x3e>
 80080d0:	3601      	adds	r6, #1
 80080d2:	2102      	movs	r1, #2
 80080d4:	e000      	b.n	80080d8 <__cvt+0x44>
 80080d6:	2103      	movs	r1, #3
 80080d8:	ab03      	add	r3, sp, #12
 80080da:	9301      	str	r3, [sp, #4]
 80080dc:	ab02      	add	r3, sp, #8
 80080de:	9300      	str	r3, [sp, #0]
 80080e0:	ec45 4b10 	vmov	d0, r4, r5
 80080e4:	4653      	mov	r3, sl
 80080e6:	4632      	mov	r2, r6
 80080e8:	f000 fe2a 	bl	8008d40 <_dtoa_r>
 80080ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80080f0:	4607      	mov	r7, r0
 80080f2:	d102      	bne.n	80080fa <__cvt+0x66>
 80080f4:	f019 0f01 	tst.w	r9, #1
 80080f8:	d022      	beq.n	8008140 <__cvt+0xac>
 80080fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80080fe:	eb07 0906 	add.w	r9, r7, r6
 8008102:	d110      	bne.n	8008126 <__cvt+0x92>
 8008104:	783b      	ldrb	r3, [r7, #0]
 8008106:	2b30      	cmp	r3, #48	; 0x30
 8008108:	d10a      	bne.n	8008120 <__cvt+0x8c>
 800810a:	2200      	movs	r2, #0
 800810c:	2300      	movs	r3, #0
 800810e:	4620      	mov	r0, r4
 8008110:	4629      	mov	r1, r5
 8008112:	f7f8 fcf1 	bl	8000af8 <__aeabi_dcmpeq>
 8008116:	b918      	cbnz	r0, 8008120 <__cvt+0x8c>
 8008118:	f1c6 0601 	rsb	r6, r6, #1
 800811c:	f8ca 6000 	str.w	r6, [sl]
 8008120:	f8da 3000 	ldr.w	r3, [sl]
 8008124:	4499      	add	r9, r3
 8008126:	2200      	movs	r2, #0
 8008128:	2300      	movs	r3, #0
 800812a:	4620      	mov	r0, r4
 800812c:	4629      	mov	r1, r5
 800812e:	f7f8 fce3 	bl	8000af8 <__aeabi_dcmpeq>
 8008132:	b108      	cbz	r0, 8008138 <__cvt+0xa4>
 8008134:	f8cd 900c 	str.w	r9, [sp, #12]
 8008138:	2230      	movs	r2, #48	; 0x30
 800813a:	9b03      	ldr	r3, [sp, #12]
 800813c:	454b      	cmp	r3, r9
 800813e:	d307      	bcc.n	8008150 <__cvt+0xbc>
 8008140:	9b03      	ldr	r3, [sp, #12]
 8008142:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008144:	1bdb      	subs	r3, r3, r7
 8008146:	4638      	mov	r0, r7
 8008148:	6013      	str	r3, [r2, #0]
 800814a:	b004      	add	sp, #16
 800814c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008150:	1c59      	adds	r1, r3, #1
 8008152:	9103      	str	r1, [sp, #12]
 8008154:	701a      	strb	r2, [r3, #0]
 8008156:	e7f0      	b.n	800813a <__cvt+0xa6>

08008158 <__exponent>:
 8008158:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800815a:	4603      	mov	r3, r0
 800815c:	2900      	cmp	r1, #0
 800815e:	bfb8      	it	lt
 8008160:	4249      	neglt	r1, r1
 8008162:	f803 2b02 	strb.w	r2, [r3], #2
 8008166:	bfb4      	ite	lt
 8008168:	222d      	movlt	r2, #45	; 0x2d
 800816a:	222b      	movge	r2, #43	; 0x2b
 800816c:	2909      	cmp	r1, #9
 800816e:	7042      	strb	r2, [r0, #1]
 8008170:	dd2a      	ble.n	80081c8 <__exponent+0x70>
 8008172:	f10d 0407 	add.w	r4, sp, #7
 8008176:	46a4      	mov	ip, r4
 8008178:	270a      	movs	r7, #10
 800817a:	46a6      	mov	lr, r4
 800817c:	460a      	mov	r2, r1
 800817e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008182:	fb07 1516 	mls	r5, r7, r6, r1
 8008186:	3530      	adds	r5, #48	; 0x30
 8008188:	2a63      	cmp	r2, #99	; 0x63
 800818a:	f104 34ff 	add.w	r4, r4, #4294967295
 800818e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008192:	4631      	mov	r1, r6
 8008194:	dcf1      	bgt.n	800817a <__exponent+0x22>
 8008196:	3130      	adds	r1, #48	; 0x30
 8008198:	f1ae 0502 	sub.w	r5, lr, #2
 800819c:	f804 1c01 	strb.w	r1, [r4, #-1]
 80081a0:	1c44      	adds	r4, r0, #1
 80081a2:	4629      	mov	r1, r5
 80081a4:	4561      	cmp	r1, ip
 80081a6:	d30a      	bcc.n	80081be <__exponent+0x66>
 80081a8:	f10d 0209 	add.w	r2, sp, #9
 80081ac:	eba2 020e 	sub.w	r2, r2, lr
 80081b0:	4565      	cmp	r5, ip
 80081b2:	bf88      	it	hi
 80081b4:	2200      	movhi	r2, #0
 80081b6:	4413      	add	r3, r2
 80081b8:	1a18      	subs	r0, r3, r0
 80081ba:	b003      	add	sp, #12
 80081bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80081c6:	e7ed      	b.n	80081a4 <__exponent+0x4c>
 80081c8:	2330      	movs	r3, #48	; 0x30
 80081ca:	3130      	adds	r1, #48	; 0x30
 80081cc:	7083      	strb	r3, [r0, #2]
 80081ce:	70c1      	strb	r1, [r0, #3]
 80081d0:	1d03      	adds	r3, r0, #4
 80081d2:	e7f1      	b.n	80081b8 <__exponent+0x60>

080081d4 <_printf_float>:
 80081d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d8:	ed2d 8b02 	vpush	{d8}
 80081dc:	b08d      	sub	sp, #52	; 0x34
 80081de:	460c      	mov	r4, r1
 80081e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80081e4:	4616      	mov	r6, r2
 80081e6:	461f      	mov	r7, r3
 80081e8:	4605      	mov	r5, r0
 80081ea:	f001 fd4f 	bl	8009c8c <_localeconv_r>
 80081ee:	f8d0 a000 	ldr.w	sl, [r0]
 80081f2:	4650      	mov	r0, sl
 80081f4:	f7f8 f804 	bl	8000200 <strlen>
 80081f8:	2300      	movs	r3, #0
 80081fa:	930a      	str	r3, [sp, #40]	; 0x28
 80081fc:	6823      	ldr	r3, [r4, #0]
 80081fe:	9305      	str	r3, [sp, #20]
 8008200:	f8d8 3000 	ldr.w	r3, [r8]
 8008204:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008208:	3307      	adds	r3, #7
 800820a:	f023 0307 	bic.w	r3, r3, #7
 800820e:	f103 0208 	add.w	r2, r3, #8
 8008212:	f8c8 2000 	str.w	r2, [r8]
 8008216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800821e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008222:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008226:	9307      	str	r3, [sp, #28]
 8008228:	f8cd 8018 	str.w	r8, [sp, #24]
 800822c:	ee08 0a10 	vmov	s16, r0
 8008230:	4b9f      	ldr	r3, [pc, #636]	; (80084b0 <_printf_float+0x2dc>)
 8008232:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008236:	f04f 32ff 	mov.w	r2, #4294967295
 800823a:	f7f8 fc8f 	bl	8000b5c <__aeabi_dcmpun>
 800823e:	bb88      	cbnz	r0, 80082a4 <_printf_float+0xd0>
 8008240:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008244:	4b9a      	ldr	r3, [pc, #616]	; (80084b0 <_printf_float+0x2dc>)
 8008246:	f04f 32ff 	mov.w	r2, #4294967295
 800824a:	f7f8 fc69 	bl	8000b20 <__aeabi_dcmple>
 800824e:	bb48      	cbnz	r0, 80082a4 <_printf_float+0xd0>
 8008250:	2200      	movs	r2, #0
 8008252:	2300      	movs	r3, #0
 8008254:	4640      	mov	r0, r8
 8008256:	4649      	mov	r1, r9
 8008258:	f7f8 fc58 	bl	8000b0c <__aeabi_dcmplt>
 800825c:	b110      	cbz	r0, 8008264 <_printf_float+0x90>
 800825e:	232d      	movs	r3, #45	; 0x2d
 8008260:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008264:	4b93      	ldr	r3, [pc, #588]	; (80084b4 <_printf_float+0x2e0>)
 8008266:	4894      	ldr	r0, [pc, #592]	; (80084b8 <_printf_float+0x2e4>)
 8008268:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800826c:	bf94      	ite	ls
 800826e:	4698      	movls	r8, r3
 8008270:	4680      	movhi	r8, r0
 8008272:	2303      	movs	r3, #3
 8008274:	6123      	str	r3, [r4, #16]
 8008276:	9b05      	ldr	r3, [sp, #20]
 8008278:	f023 0204 	bic.w	r2, r3, #4
 800827c:	6022      	str	r2, [r4, #0]
 800827e:	f04f 0900 	mov.w	r9, #0
 8008282:	9700      	str	r7, [sp, #0]
 8008284:	4633      	mov	r3, r6
 8008286:	aa0b      	add	r2, sp, #44	; 0x2c
 8008288:	4621      	mov	r1, r4
 800828a:	4628      	mov	r0, r5
 800828c:	f000 f9d8 	bl	8008640 <_printf_common>
 8008290:	3001      	adds	r0, #1
 8008292:	f040 8090 	bne.w	80083b6 <_printf_float+0x1e2>
 8008296:	f04f 30ff 	mov.w	r0, #4294967295
 800829a:	b00d      	add	sp, #52	; 0x34
 800829c:	ecbd 8b02 	vpop	{d8}
 80082a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082a4:	4642      	mov	r2, r8
 80082a6:	464b      	mov	r3, r9
 80082a8:	4640      	mov	r0, r8
 80082aa:	4649      	mov	r1, r9
 80082ac:	f7f8 fc56 	bl	8000b5c <__aeabi_dcmpun>
 80082b0:	b140      	cbz	r0, 80082c4 <_printf_float+0xf0>
 80082b2:	464b      	mov	r3, r9
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	bfbc      	itt	lt
 80082b8:	232d      	movlt	r3, #45	; 0x2d
 80082ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80082be:	487f      	ldr	r0, [pc, #508]	; (80084bc <_printf_float+0x2e8>)
 80082c0:	4b7f      	ldr	r3, [pc, #508]	; (80084c0 <_printf_float+0x2ec>)
 80082c2:	e7d1      	b.n	8008268 <_printf_float+0x94>
 80082c4:	6863      	ldr	r3, [r4, #4]
 80082c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80082ca:	9206      	str	r2, [sp, #24]
 80082cc:	1c5a      	adds	r2, r3, #1
 80082ce:	d13f      	bne.n	8008350 <_printf_float+0x17c>
 80082d0:	2306      	movs	r3, #6
 80082d2:	6063      	str	r3, [r4, #4]
 80082d4:	9b05      	ldr	r3, [sp, #20]
 80082d6:	6861      	ldr	r1, [r4, #4]
 80082d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80082dc:	2300      	movs	r3, #0
 80082de:	9303      	str	r3, [sp, #12]
 80082e0:	ab0a      	add	r3, sp, #40	; 0x28
 80082e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80082e6:	ab09      	add	r3, sp, #36	; 0x24
 80082e8:	ec49 8b10 	vmov	d0, r8, r9
 80082ec:	9300      	str	r3, [sp, #0]
 80082ee:	6022      	str	r2, [r4, #0]
 80082f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80082f4:	4628      	mov	r0, r5
 80082f6:	f7ff fecd 	bl	8008094 <__cvt>
 80082fa:	9b06      	ldr	r3, [sp, #24]
 80082fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082fe:	2b47      	cmp	r3, #71	; 0x47
 8008300:	4680      	mov	r8, r0
 8008302:	d108      	bne.n	8008316 <_printf_float+0x142>
 8008304:	1cc8      	adds	r0, r1, #3
 8008306:	db02      	blt.n	800830e <_printf_float+0x13a>
 8008308:	6863      	ldr	r3, [r4, #4]
 800830a:	4299      	cmp	r1, r3
 800830c:	dd41      	ble.n	8008392 <_printf_float+0x1be>
 800830e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008312:	fa5f fb8b 	uxtb.w	fp, fp
 8008316:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800831a:	d820      	bhi.n	800835e <_printf_float+0x18a>
 800831c:	3901      	subs	r1, #1
 800831e:	465a      	mov	r2, fp
 8008320:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008324:	9109      	str	r1, [sp, #36]	; 0x24
 8008326:	f7ff ff17 	bl	8008158 <__exponent>
 800832a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800832c:	1813      	adds	r3, r2, r0
 800832e:	2a01      	cmp	r2, #1
 8008330:	4681      	mov	r9, r0
 8008332:	6123      	str	r3, [r4, #16]
 8008334:	dc02      	bgt.n	800833c <_printf_float+0x168>
 8008336:	6822      	ldr	r2, [r4, #0]
 8008338:	07d2      	lsls	r2, r2, #31
 800833a:	d501      	bpl.n	8008340 <_printf_float+0x16c>
 800833c:	3301      	adds	r3, #1
 800833e:	6123      	str	r3, [r4, #16]
 8008340:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008344:	2b00      	cmp	r3, #0
 8008346:	d09c      	beq.n	8008282 <_printf_float+0xae>
 8008348:	232d      	movs	r3, #45	; 0x2d
 800834a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800834e:	e798      	b.n	8008282 <_printf_float+0xae>
 8008350:	9a06      	ldr	r2, [sp, #24]
 8008352:	2a47      	cmp	r2, #71	; 0x47
 8008354:	d1be      	bne.n	80082d4 <_printf_float+0x100>
 8008356:	2b00      	cmp	r3, #0
 8008358:	d1bc      	bne.n	80082d4 <_printf_float+0x100>
 800835a:	2301      	movs	r3, #1
 800835c:	e7b9      	b.n	80082d2 <_printf_float+0xfe>
 800835e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008362:	d118      	bne.n	8008396 <_printf_float+0x1c2>
 8008364:	2900      	cmp	r1, #0
 8008366:	6863      	ldr	r3, [r4, #4]
 8008368:	dd0b      	ble.n	8008382 <_printf_float+0x1ae>
 800836a:	6121      	str	r1, [r4, #16]
 800836c:	b913      	cbnz	r3, 8008374 <_printf_float+0x1a0>
 800836e:	6822      	ldr	r2, [r4, #0]
 8008370:	07d0      	lsls	r0, r2, #31
 8008372:	d502      	bpl.n	800837a <_printf_float+0x1a6>
 8008374:	3301      	adds	r3, #1
 8008376:	440b      	add	r3, r1
 8008378:	6123      	str	r3, [r4, #16]
 800837a:	65a1      	str	r1, [r4, #88]	; 0x58
 800837c:	f04f 0900 	mov.w	r9, #0
 8008380:	e7de      	b.n	8008340 <_printf_float+0x16c>
 8008382:	b913      	cbnz	r3, 800838a <_printf_float+0x1b6>
 8008384:	6822      	ldr	r2, [r4, #0]
 8008386:	07d2      	lsls	r2, r2, #31
 8008388:	d501      	bpl.n	800838e <_printf_float+0x1ba>
 800838a:	3302      	adds	r3, #2
 800838c:	e7f4      	b.n	8008378 <_printf_float+0x1a4>
 800838e:	2301      	movs	r3, #1
 8008390:	e7f2      	b.n	8008378 <_printf_float+0x1a4>
 8008392:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008398:	4299      	cmp	r1, r3
 800839a:	db05      	blt.n	80083a8 <_printf_float+0x1d4>
 800839c:	6823      	ldr	r3, [r4, #0]
 800839e:	6121      	str	r1, [r4, #16]
 80083a0:	07d8      	lsls	r0, r3, #31
 80083a2:	d5ea      	bpl.n	800837a <_printf_float+0x1a6>
 80083a4:	1c4b      	adds	r3, r1, #1
 80083a6:	e7e7      	b.n	8008378 <_printf_float+0x1a4>
 80083a8:	2900      	cmp	r1, #0
 80083aa:	bfd4      	ite	le
 80083ac:	f1c1 0202 	rsble	r2, r1, #2
 80083b0:	2201      	movgt	r2, #1
 80083b2:	4413      	add	r3, r2
 80083b4:	e7e0      	b.n	8008378 <_printf_float+0x1a4>
 80083b6:	6823      	ldr	r3, [r4, #0]
 80083b8:	055a      	lsls	r2, r3, #21
 80083ba:	d407      	bmi.n	80083cc <_printf_float+0x1f8>
 80083bc:	6923      	ldr	r3, [r4, #16]
 80083be:	4642      	mov	r2, r8
 80083c0:	4631      	mov	r1, r6
 80083c2:	4628      	mov	r0, r5
 80083c4:	47b8      	blx	r7
 80083c6:	3001      	adds	r0, #1
 80083c8:	d12c      	bne.n	8008424 <_printf_float+0x250>
 80083ca:	e764      	b.n	8008296 <_printf_float+0xc2>
 80083cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80083d0:	f240 80e0 	bls.w	8008594 <_printf_float+0x3c0>
 80083d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80083d8:	2200      	movs	r2, #0
 80083da:	2300      	movs	r3, #0
 80083dc:	f7f8 fb8c 	bl	8000af8 <__aeabi_dcmpeq>
 80083e0:	2800      	cmp	r0, #0
 80083e2:	d034      	beq.n	800844e <_printf_float+0x27a>
 80083e4:	4a37      	ldr	r2, [pc, #220]	; (80084c4 <_printf_float+0x2f0>)
 80083e6:	2301      	movs	r3, #1
 80083e8:	4631      	mov	r1, r6
 80083ea:	4628      	mov	r0, r5
 80083ec:	47b8      	blx	r7
 80083ee:	3001      	adds	r0, #1
 80083f0:	f43f af51 	beq.w	8008296 <_printf_float+0xc2>
 80083f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083f8:	429a      	cmp	r2, r3
 80083fa:	db02      	blt.n	8008402 <_printf_float+0x22e>
 80083fc:	6823      	ldr	r3, [r4, #0]
 80083fe:	07d8      	lsls	r0, r3, #31
 8008400:	d510      	bpl.n	8008424 <_printf_float+0x250>
 8008402:	ee18 3a10 	vmov	r3, s16
 8008406:	4652      	mov	r2, sl
 8008408:	4631      	mov	r1, r6
 800840a:	4628      	mov	r0, r5
 800840c:	47b8      	blx	r7
 800840e:	3001      	adds	r0, #1
 8008410:	f43f af41 	beq.w	8008296 <_printf_float+0xc2>
 8008414:	f04f 0800 	mov.w	r8, #0
 8008418:	f104 091a 	add.w	r9, r4, #26
 800841c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800841e:	3b01      	subs	r3, #1
 8008420:	4543      	cmp	r3, r8
 8008422:	dc09      	bgt.n	8008438 <_printf_float+0x264>
 8008424:	6823      	ldr	r3, [r4, #0]
 8008426:	079b      	lsls	r3, r3, #30
 8008428:	f100 8105 	bmi.w	8008636 <_printf_float+0x462>
 800842c:	68e0      	ldr	r0, [r4, #12]
 800842e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008430:	4298      	cmp	r0, r3
 8008432:	bfb8      	it	lt
 8008434:	4618      	movlt	r0, r3
 8008436:	e730      	b.n	800829a <_printf_float+0xc6>
 8008438:	2301      	movs	r3, #1
 800843a:	464a      	mov	r2, r9
 800843c:	4631      	mov	r1, r6
 800843e:	4628      	mov	r0, r5
 8008440:	47b8      	blx	r7
 8008442:	3001      	adds	r0, #1
 8008444:	f43f af27 	beq.w	8008296 <_printf_float+0xc2>
 8008448:	f108 0801 	add.w	r8, r8, #1
 800844c:	e7e6      	b.n	800841c <_printf_float+0x248>
 800844e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008450:	2b00      	cmp	r3, #0
 8008452:	dc39      	bgt.n	80084c8 <_printf_float+0x2f4>
 8008454:	4a1b      	ldr	r2, [pc, #108]	; (80084c4 <_printf_float+0x2f0>)
 8008456:	2301      	movs	r3, #1
 8008458:	4631      	mov	r1, r6
 800845a:	4628      	mov	r0, r5
 800845c:	47b8      	blx	r7
 800845e:	3001      	adds	r0, #1
 8008460:	f43f af19 	beq.w	8008296 <_printf_float+0xc2>
 8008464:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008468:	4313      	orrs	r3, r2
 800846a:	d102      	bne.n	8008472 <_printf_float+0x29e>
 800846c:	6823      	ldr	r3, [r4, #0]
 800846e:	07d9      	lsls	r1, r3, #31
 8008470:	d5d8      	bpl.n	8008424 <_printf_float+0x250>
 8008472:	ee18 3a10 	vmov	r3, s16
 8008476:	4652      	mov	r2, sl
 8008478:	4631      	mov	r1, r6
 800847a:	4628      	mov	r0, r5
 800847c:	47b8      	blx	r7
 800847e:	3001      	adds	r0, #1
 8008480:	f43f af09 	beq.w	8008296 <_printf_float+0xc2>
 8008484:	f04f 0900 	mov.w	r9, #0
 8008488:	f104 0a1a 	add.w	sl, r4, #26
 800848c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800848e:	425b      	negs	r3, r3
 8008490:	454b      	cmp	r3, r9
 8008492:	dc01      	bgt.n	8008498 <_printf_float+0x2c4>
 8008494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008496:	e792      	b.n	80083be <_printf_float+0x1ea>
 8008498:	2301      	movs	r3, #1
 800849a:	4652      	mov	r2, sl
 800849c:	4631      	mov	r1, r6
 800849e:	4628      	mov	r0, r5
 80084a0:	47b8      	blx	r7
 80084a2:	3001      	adds	r0, #1
 80084a4:	f43f aef7 	beq.w	8008296 <_printf_float+0xc2>
 80084a8:	f109 0901 	add.w	r9, r9, #1
 80084ac:	e7ee      	b.n	800848c <_printf_float+0x2b8>
 80084ae:	bf00      	nop
 80084b0:	7fefffff 	.word	0x7fefffff
 80084b4:	0800b2d8 	.word	0x0800b2d8
 80084b8:	0800b2dc 	.word	0x0800b2dc
 80084bc:	0800b2e4 	.word	0x0800b2e4
 80084c0:	0800b2e0 	.word	0x0800b2e0
 80084c4:	0800b2e8 	.word	0x0800b2e8
 80084c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084cc:	429a      	cmp	r2, r3
 80084ce:	bfa8      	it	ge
 80084d0:	461a      	movge	r2, r3
 80084d2:	2a00      	cmp	r2, #0
 80084d4:	4691      	mov	r9, r2
 80084d6:	dc37      	bgt.n	8008548 <_printf_float+0x374>
 80084d8:	f04f 0b00 	mov.w	fp, #0
 80084dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084e0:	f104 021a 	add.w	r2, r4, #26
 80084e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084e6:	9305      	str	r3, [sp, #20]
 80084e8:	eba3 0309 	sub.w	r3, r3, r9
 80084ec:	455b      	cmp	r3, fp
 80084ee:	dc33      	bgt.n	8008558 <_printf_float+0x384>
 80084f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084f4:	429a      	cmp	r2, r3
 80084f6:	db3b      	blt.n	8008570 <_printf_float+0x39c>
 80084f8:	6823      	ldr	r3, [r4, #0]
 80084fa:	07da      	lsls	r2, r3, #31
 80084fc:	d438      	bmi.n	8008570 <_printf_float+0x39c>
 80084fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008500:	9a05      	ldr	r2, [sp, #20]
 8008502:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008504:	1a9a      	subs	r2, r3, r2
 8008506:	eba3 0901 	sub.w	r9, r3, r1
 800850a:	4591      	cmp	r9, r2
 800850c:	bfa8      	it	ge
 800850e:	4691      	movge	r9, r2
 8008510:	f1b9 0f00 	cmp.w	r9, #0
 8008514:	dc35      	bgt.n	8008582 <_printf_float+0x3ae>
 8008516:	f04f 0800 	mov.w	r8, #0
 800851a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800851e:	f104 0a1a 	add.w	sl, r4, #26
 8008522:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008526:	1a9b      	subs	r3, r3, r2
 8008528:	eba3 0309 	sub.w	r3, r3, r9
 800852c:	4543      	cmp	r3, r8
 800852e:	f77f af79 	ble.w	8008424 <_printf_float+0x250>
 8008532:	2301      	movs	r3, #1
 8008534:	4652      	mov	r2, sl
 8008536:	4631      	mov	r1, r6
 8008538:	4628      	mov	r0, r5
 800853a:	47b8      	blx	r7
 800853c:	3001      	adds	r0, #1
 800853e:	f43f aeaa 	beq.w	8008296 <_printf_float+0xc2>
 8008542:	f108 0801 	add.w	r8, r8, #1
 8008546:	e7ec      	b.n	8008522 <_printf_float+0x34e>
 8008548:	4613      	mov	r3, r2
 800854a:	4631      	mov	r1, r6
 800854c:	4642      	mov	r2, r8
 800854e:	4628      	mov	r0, r5
 8008550:	47b8      	blx	r7
 8008552:	3001      	adds	r0, #1
 8008554:	d1c0      	bne.n	80084d8 <_printf_float+0x304>
 8008556:	e69e      	b.n	8008296 <_printf_float+0xc2>
 8008558:	2301      	movs	r3, #1
 800855a:	4631      	mov	r1, r6
 800855c:	4628      	mov	r0, r5
 800855e:	9205      	str	r2, [sp, #20]
 8008560:	47b8      	blx	r7
 8008562:	3001      	adds	r0, #1
 8008564:	f43f ae97 	beq.w	8008296 <_printf_float+0xc2>
 8008568:	9a05      	ldr	r2, [sp, #20]
 800856a:	f10b 0b01 	add.w	fp, fp, #1
 800856e:	e7b9      	b.n	80084e4 <_printf_float+0x310>
 8008570:	ee18 3a10 	vmov	r3, s16
 8008574:	4652      	mov	r2, sl
 8008576:	4631      	mov	r1, r6
 8008578:	4628      	mov	r0, r5
 800857a:	47b8      	blx	r7
 800857c:	3001      	adds	r0, #1
 800857e:	d1be      	bne.n	80084fe <_printf_float+0x32a>
 8008580:	e689      	b.n	8008296 <_printf_float+0xc2>
 8008582:	9a05      	ldr	r2, [sp, #20]
 8008584:	464b      	mov	r3, r9
 8008586:	4442      	add	r2, r8
 8008588:	4631      	mov	r1, r6
 800858a:	4628      	mov	r0, r5
 800858c:	47b8      	blx	r7
 800858e:	3001      	adds	r0, #1
 8008590:	d1c1      	bne.n	8008516 <_printf_float+0x342>
 8008592:	e680      	b.n	8008296 <_printf_float+0xc2>
 8008594:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008596:	2a01      	cmp	r2, #1
 8008598:	dc01      	bgt.n	800859e <_printf_float+0x3ca>
 800859a:	07db      	lsls	r3, r3, #31
 800859c:	d538      	bpl.n	8008610 <_printf_float+0x43c>
 800859e:	2301      	movs	r3, #1
 80085a0:	4642      	mov	r2, r8
 80085a2:	4631      	mov	r1, r6
 80085a4:	4628      	mov	r0, r5
 80085a6:	47b8      	blx	r7
 80085a8:	3001      	adds	r0, #1
 80085aa:	f43f ae74 	beq.w	8008296 <_printf_float+0xc2>
 80085ae:	ee18 3a10 	vmov	r3, s16
 80085b2:	4652      	mov	r2, sl
 80085b4:	4631      	mov	r1, r6
 80085b6:	4628      	mov	r0, r5
 80085b8:	47b8      	blx	r7
 80085ba:	3001      	adds	r0, #1
 80085bc:	f43f ae6b 	beq.w	8008296 <_printf_float+0xc2>
 80085c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80085c4:	2200      	movs	r2, #0
 80085c6:	2300      	movs	r3, #0
 80085c8:	f7f8 fa96 	bl	8000af8 <__aeabi_dcmpeq>
 80085cc:	b9d8      	cbnz	r0, 8008606 <_printf_float+0x432>
 80085ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085d0:	f108 0201 	add.w	r2, r8, #1
 80085d4:	3b01      	subs	r3, #1
 80085d6:	4631      	mov	r1, r6
 80085d8:	4628      	mov	r0, r5
 80085da:	47b8      	blx	r7
 80085dc:	3001      	adds	r0, #1
 80085de:	d10e      	bne.n	80085fe <_printf_float+0x42a>
 80085e0:	e659      	b.n	8008296 <_printf_float+0xc2>
 80085e2:	2301      	movs	r3, #1
 80085e4:	4652      	mov	r2, sl
 80085e6:	4631      	mov	r1, r6
 80085e8:	4628      	mov	r0, r5
 80085ea:	47b8      	blx	r7
 80085ec:	3001      	adds	r0, #1
 80085ee:	f43f ae52 	beq.w	8008296 <_printf_float+0xc2>
 80085f2:	f108 0801 	add.w	r8, r8, #1
 80085f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085f8:	3b01      	subs	r3, #1
 80085fa:	4543      	cmp	r3, r8
 80085fc:	dcf1      	bgt.n	80085e2 <_printf_float+0x40e>
 80085fe:	464b      	mov	r3, r9
 8008600:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008604:	e6dc      	b.n	80083c0 <_printf_float+0x1ec>
 8008606:	f04f 0800 	mov.w	r8, #0
 800860a:	f104 0a1a 	add.w	sl, r4, #26
 800860e:	e7f2      	b.n	80085f6 <_printf_float+0x422>
 8008610:	2301      	movs	r3, #1
 8008612:	4642      	mov	r2, r8
 8008614:	e7df      	b.n	80085d6 <_printf_float+0x402>
 8008616:	2301      	movs	r3, #1
 8008618:	464a      	mov	r2, r9
 800861a:	4631      	mov	r1, r6
 800861c:	4628      	mov	r0, r5
 800861e:	47b8      	blx	r7
 8008620:	3001      	adds	r0, #1
 8008622:	f43f ae38 	beq.w	8008296 <_printf_float+0xc2>
 8008626:	f108 0801 	add.w	r8, r8, #1
 800862a:	68e3      	ldr	r3, [r4, #12]
 800862c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800862e:	1a5b      	subs	r3, r3, r1
 8008630:	4543      	cmp	r3, r8
 8008632:	dcf0      	bgt.n	8008616 <_printf_float+0x442>
 8008634:	e6fa      	b.n	800842c <_printf_float+0x258>
 8008636:	f04f 0800 	mov.w	r8, #0
 800863a:	f104 0919 	add.w	r9, r4, #25
 800863e:	e7f4      	b.n	800862a <_printf_float+0x456>

08008640 <_printf_common>:
 8008640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008644:	4616      	mov	r6, r2
 8008646:	4699      	mov	r9, r3
 8008648:	688a      	ldr	r2, [r1, #8]
 800864a:	690b      	ldr	r3, [r1, #16]
 800864c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008650:	4293      	cmp	r3, r2
 8008652:	bfb8      	it	lt
 8008654:	4613      	movlt	r3, r2
 8008656:	6033      	str	r3, [r6, #0]
 8008658:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800865c:	4607      	mov	r7, r0
 800865e:	460c      	mov	r4, r1
 8008660:	b10a      	cbz	r2, 8008666 <_printf_common+0x26>
 8008662:	3301      	adds	r3, #1
 8008664:	6033      	str	r3, [r6, #0]
 8008666:	6823      	ldr	r3, [r4, #0]
 8008668:	0699      	lsls	r1, r3, #26
 800866a:	bf42      	ittt	mi
 800866c:	6833      	ldrmi	r3, [r6, #0]
 800866e:	3302      	addmi	r3, #2
 8008670:	6033      	strmi	r3, [r6, #0]
 8008672:	6825      	ldr	r5, [r4, #0]
 8008674:	f015 0506 	ands.w	r5, r5, #6
 8008678:	d106      	bne.n	8008688 <_printf_common+0x48>
 800867a:	f104 0a19 	add.w	sl, r4, #25
 800867e:	68e3      	ldr	r3, [r4, #12]
 8008680:	6832      	ldr	r2, [r6, #0]
 8008682:	1a9b      	subs	r3, r3, r2
 8008684:	42ab      	cmp	r3, r5
 8008686:	dc26      	bgt.n	80086d6 <_printf_common+0x96>
 8008688:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800868c:	1e13      	subs	r3, r2, #0
 800868e:	6822      	ldr	r2, [r4, #0]
 8008690:	bf18      	it	ne
 8008692:	2301      	movne	r3, #1
 8008694:	0692      	lsls	r2, r2, #26
 8008696:	d42b      	bmi.n	80086f0 <_printf_common+0xb0>
 8008698:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800869c:	4649      	mov	r1, r9
 800869e:	4638      	mov	r0, r7
 80086a0:	47c0      	blx	r8
 80086a2:	3001      	adds	r0, #1
 80086a4:	d01e      	beq.n	80086e4 <_printf_common+0xa4>
 80086a6:	6823      	ldr	r3, [r4, #0]
 80086a8:	68e5      	ldr	r5, [r4, #12]
 80086aa:	6832      	ldr	r2, [r6, #0]
 80086ac:	f003 0306 	and.w	r3, r3, #6
 80086b0:	2b04      	cmp	r3, #4
 80086b2:	bf08      	it	eq
 80086b4:	1aad      	subeq	r5, r5, r2
 80086b6:	68a3      	ldr	r3, [r4, #8]
 80086b8:	6922      	ldr	r2, [r4, #16]
 80086ba:	bf0c      	ite	eq
 80086bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086c0:	2500      	movne	r5, #0
 80086c2:	4293      	cmp	r3, r2
 80086c4:	bfc4      	itt	gt
 80086c6:	1a9b      	subgt	r3, r3, r2
 80086c8:	18ed      	addgt	r5, r5, r3
 80086ca:	2600      	movs	r6, #0
 80086cc:	341a      	adds	r4, #26
 80086ce:	42b5      	cmp	r5, r6
 80086d0:	d11a      	bne.n	8008708 <_printf_common+0xc8>
 80086d2:	2000      	movs	r0, #0
 80086d4:	e008      	b.n	80086e8 <_printf_common+0xa8>
 80086d6:	2301      	movs	r3, #1
 80086d8:	4652      	mov	r2, sl
 80086da:	4649      	mov	r1, r9
 80086dc:	4638      	mov	r0, r7
 80086de:	47c0      	blx	r8
 80086e0:	3001      	adds	r0, #1
 80086e2:	d103      	bne.n	80086ec <_printf_common+0xac>
 80086e4:	f04f 30ff 	mov.w	r0, #4294967295
 80086e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086ec:	3501      	adds	r5, #1
 80086ee:	e7c6      	b.n	800867e <_printf_common+0x3e>
 80086f0:	18e1      	adds	r1, r4, r3
 80086f2:	1c5a      	adds	r2, r3, #1
 80086f4:	2030      	movs	r0, #48	; 0x30
 80086f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086fa:	4422      	add	r2, r4
 80086fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008700:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008704:	3302      	adds	r3, #2
 8008706:	e7c7      	b.n	8008698 <_printf_common+0x58>
 8008708:	2301      	movs	r3, #1
 800870a:	4622      	mov	r2, r4
 800870c:	4649      	mov	r1, r9
 800870e:	4638      	mov	r0, r7
 8008710:	47c0      	blx	r8
 8008712:	3001      	adds	r0, #1
 8008714:	d0e6      	beq.n	80086e4 <_printf_common+0xa4>
 8008716:	3601      	adds	r6, #1
 8008718:	e7d9      	b.n	80086ce <_printf_common+0x8e>
	...

0800871c <_printf_i>:
 800871c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008720:	7e0f      	ldrb	r7, [r1, #24]
 8008722:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008724:	2f78      	cmp	r7, #120	; 0x78
 8008726:	4691      	mov	r9, r2
 8008728:	4680      	mov	r8, r0
 800872a:	460c      	mov	r4, r1
 800872c:	469a      	mov	sl, r3
 800872e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008732:	d807      	bhi.n	8008744 <_printf_i+0x28>
 8008734:	2f62      	cmp	r7, #98	; 0x62
 8008736:	d80a      	bhi.n	800874e <_printf_i+0x32>
 8008738:	2f00      	cmp	r7, #0
 800873a:	f000 80d8 	beq.w	80088ee <_printf_i+0x1d2>
 800873e:	2f58      	cmp	r7, #88	; 0x58
 8008740:	f000 80a3 	beq.w	800888a <_printf_i+0x16e>
 8008744:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008748:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800874c:	e03a      	b.n	80087c4 <_printf_i+0xa8>
 800874e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008752:	2b15      	cmp	r3, #21
 8008754:	d8f6      	bhi.n	8008744 <_printf_i+0x28>
 8008756:	a101      	add	r1, pc, #4	; (adr r1, 800875c <_printf_i+0x40>)
 8008758:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800875c:	080087b5 	.word	0x080087b5
 8008760:	080087c9 	.word	0x080087c9
 8008764:	08008745 	.word	0x08008745
 8008768:	08008745 	.word	0x08008745
 800876c:	08008745 	.word	0x08008745
 8008770:	08008745 	.word	0x08008745
 8008774:	080087c9 	.word	0x080087c9
 8008778:	08008745 	.word	0x08008745
 800877c:	08008745 	.word	0x08008745
 8008780:	08008745 	.word	0x08008745
 8008784:	08008745 	.word	0x08008745
 8008788:	080088d5 	.word	0x080088d5
 800878c:	080087f9 	.word	0x080087f9
 8008790:	080088b7 	.word	0x080088b7
 8008794:	08008745 	.word	0x08008745
 8008798:	08008745 	.word	0x08008745
 800879c:	080088f7 	.word	0x080088f7
 80087a0:	08008745 	.word	0x08008745
 80087a4:	080087f9 	.word	0x080087f9
 80087a8:	08008745 	.word	0x08008745
 80087ac:	08008745 	.word	0x08008745
 80087b0:	080088bf 	.word	0x080088bf
 80087b4:	682b      	ldr	r3, [r5, #0]
 80087b6:	1d1a      	adds	r2, r3, #4
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	602a      	str	r2, [r5, #0]
 80087bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087c4:	2301      	movs	r3, #1
 80087c6:	e0a3      	b.n	8008910 <_printf_i+0x1f4>
 80087c8:	6820      	ldr	r0, [r4, #0]
 80087ca:	6829      	ldr	r1, [r5, #0]
 80087cc:	0606      	lsls	r6, r0, #24
 80087ce:	f101 0304 	add.w	r3, r1, #4
 80087d2:	d50a      	bpl.n	80087ea <_printf_i+0xce>
 80087d4:	680e      	ldr	r6, [r1, #0]
 80087d6:	602b      	str	r3, [r5, #0]
 80087d8:	2e00      	cmp	r6, #0
 80087da:	da03      	bge.n	80087e4 <_printf_i+0xc8>
 80087dc:	232d      	movs	r3, #45	; 0x2d
 80087de:	4276      	negs	r6, r6
 80087e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087e4:	485e      	ldr	r0, [pc, #376]	; (8008960 <_printf_i+0x244>)
 80087e6:	230a      	movs	r3, #10
 80087e8:	e019      	b.n	800881e <_printf_i+0x102>
 80087ea:	680e      	ldr	r6, [r1, #0]
 80087ec:	602b      	str	r3, [r5, #0]
 80087ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80087f2:	bf18      	it	ne
 80087f4:	b236      	sxthne	r6, r6
 80087f6:	e7ef      	b.n	80087d8 <_printf_i+0xbc>
 80087f8:	682b      	ldr	r3, [r5, #0]
 80087fa:	6820      	ldr	r0, [r4, #0]
 80087fc:	1d19      	adds	r1, r3, #4
 80087fe:	6029      	str	r1, [r5, #0]
 8008800:	0601      	lsls	r1, r0, #24
 8008802:	d501      	bpl.n	8008808 <_printf_i+0xec>
 8008804:	681e      	ldr	r6, [r3, #0]
 8008806:	e002      	b.n	800880e <_printf_i+0xf2>
 8008808:	0646      	lsls	r6, r0, #25
 800880a:	d5fb      	bpl.n	8008804 <_printf_i+0xe8>
 800880c:	881e      	ldrh	r6, [r3, #0]
 800880e:	4854      	ldr	r0, [pc, #336]	; (8008960 <_printf_i+0x244>)
 8008810:	2f6f      	cmp	r7, #111	; 0x6f
 8008812:	bf0c      	ite	eq
 8008814:	2308      	moveq	r3, #8
 8008816:	230a      	movne	r3, #10
 8008818:	2100      	movs	r1, #0
 800881a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800881e:	6865      	ldr	r5, [r4, #4]
 8008820:	60a5      	str	r5, [r4, #8]
 8008822:	2d00      	cmp	r5, #0
 8008824:	bfa2      	ittt	ge
 8008826:	6821      	ldrge	r1, [r4, #0]
 8008828:	f021 0104 	bicge.w	r1, r1, #4
 800882c:	6021      	strge	r1, [r4, #0]
 800882e:	b90e      	cbnz	r6, 8008834 <_printf_i+0x118>
 8008830:	2d00      	cmp	r5, #0
 8008832:	d04d      	beq.n	80088d0 <_printf_i+0x1b4>
 8008834:	4615      	mov	r5, r2
 8008836:	fbb6 f1f3 	udiv	r1, r6, r3
 800883a:	fb03 6711 	mls	r7, r3, r1, r6
 800883e:	5dc7      	ldrb	r7, [r0, r7]
 8008840:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008844:	4637      	mov	r7, r6
 8008846:	42bb      	cmp	r3, r7
 8008848:	460e      	mov	r6, r1
 800884a:	d9f4      	bls.n	8008836 <_printf_i+0x11a>
 800884c:	2b08      	cmp	r3, #8
 800884e:	d10b      	bne.n	8008868 <_printf_i+0x14c>
 8008850:	6823      	ldr	r3, [r4, #0]
 8008852:	07de      	lsls	r6, r3, #31
 8008854:	d508      	bpl.n	8008868 <_printf_i+0x14c>
 8008856:	6923      	ldr	r3, [r4, #16]
 8008858:	6861      	ldr	r1, [r4, #4]
 800885a:	4299      	cmp	r1, r3
 800885c:	bfde      	ittt	le
 800885e:	2330      	movle	r3, #48	; 0x30
 8008860:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008864:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008868:	1b52      	subs	r2, r2, r5
 800886a:	6122      	str	r2, [r4, #16]
 800886c:	f8cd a000 	str.w	sl, [sp]
 8008870:	464b      	mov	r3, r9
 8008872:	aa03      	add	r2, sp, #12
 8008874:	4621      	mov	r1, r4
 8008876:	4640      	mov	r0, r8
 8008878:	f7ff fee2 	bl	8008640 <_printf_common>
 800887c:	3001      	adds	r0, #1
 800887e:	d14c      	bne.n	800891a <_printf_i+0x1fe>
 8008880:	f04f 30ff 	mov.w	r0, #4294967295
 8008884:	b004      	add	sp, #16
 8008886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800888a:	4835      	ldr	r0, [pc, #212]	; (8008960 <_printf_i+0x244>)
 800888c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008890:	6829      	ldr	r1, [r5, #0]
 8008892:	6823      	ldr	r3, [r4, #0]
 8008894:	f851 6b04 	ldr.w	r6, [r1], #4
 8008898:	6029      	str	r1, [r5, #0]
 800889a:	061d      	lsls	r5, r3, #24
 800889c:	d514      	bpl.n	80088c8 <_printf_i+0x1ac>
 800889e:	07df      	lsls	r7, r3, #31
 80088a0:	bf44      	itt	mi
 80088a2:	f043 0320 	orrmi.w	r3, r3, #32
 80088a6:	6023      	strmi	r3, [r4, #0]
 80088a8:	b91e      	cbnz	r6, 80088b2 <_printf_i+0x196>
 80088aa:	6823      	ldr	r3, [r4, #0]
 80088ac:	f023 0320 	bic.w	r3, r3, #32
 80088b0:	6023      	str	r3, [r4, #0]
 80088b2:	2310      	movs	r3, #16
 80088b4:	e7b0      	b.n	8008818 <_printf_i+0xfc>
 80088b6:	6823      	ldr	r3, [r4, #0]
 80088b8:	f043 0320 	orr.w	r3, r3, #32
 80088bc:	6023      	str	r3, [r4, #0]
 80088be:	2378      	movs	r3, #120	; 0x78
 80088c0:	4828      	ldr	r0, [pc, #160]	; (8008964 <_printf_i+0x248>)
 80088c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088c6:	e7e3      	b.n	8008890 <_printf_i+0x174>
 80088c8:	0659      	lsls	r1, r3, #25
 80088ca:	bf48      	it	mi
 80088cc:	b2b6      	uxthmi	r6, r6
 80088ce:	e7e6      	b.n	800889e <_printf_i+0x182>
 80088d0:	4615      	mov	r5, r2
 80088d2:	e7bb      	b.n	800884c <_printf_i+0x130>
 80088d4:	682b      	ldr	r3, [r5, #0]
 80088d6:	6826      	ldr	r6, [r4, #0]
 80088d8:	6961      	ldr	r1, [r4, #20]
 80088da:	1d18      	adds	r0, r3, #4
 80088dc:	6028      	str	r0, [r5, #0]
 80088de:	0635      	lsls	r5, r6, #24
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	d501      	bpl.n	80088e8 <_printf_i+0x1cc>
 80088e4:	6019      	str	r1, [r3, #0]
 80088e6:	e002      	b.n	80088ee <_printf_i+0x1d2>
 80088e8:	0670      	lsls	r0, r6, #25
 80088ea:	d5fb      	bpl.n	80088e4 <_printf_i+0x1c8>
 80088ec:	8019      	strh	r1, [r3, #0]
 80088ee:	2300      	movs	r3, #0
 80088f0:	6123      	str	r3, [r4, #16]
 80088f2:	4615      	mov	r5, r2
 80088f4:	e7ba      	b.n	800886c <_printf_i+0x150>
 80088f6:	682b      	ldr	r3, [r5, #0]
 80088f8:	1d1a      	adds	r2, r3, #4
 80088fa:	602a      	str	r2, [r5, #0]
 80088fc:	681d      	ldr	r5, [r3, #0]
 80088fe:	6862      	ldr	r2, [r4, #4]
 8008900:	2100      	movs	r1, #0
 8008902:	4628      	mov	r0, r5
 8008904:	f7f7 fc84 	bl	8000210 <memchr>
 8008908:	b108      	cbz	r0, 800890e <_printf_i+0x1f2>
 800890a:	1b40      	subs	r0, r0, r5
 800890c:	6060      	str	r0, [r4, #4]
 800890e:	6863      	ldr	r3, [r4, #4]
 8008910:	6123      	str	r3, [r4, #16]
 8008912:	2300      	movs	r3, #0
 8008914:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008918:	e7a8      	b.n	800886c <_printf_i+0x150>
 800891a:	6923      	ldr	r3, [r4, #16]
 800891c:	462a      	mov	r2, r5
 800891e:	4649      	mov	r1, r9
 8008920:	4640      	mov	r0, r8
 8008922:	47d0      	blx	sl
 8008924:	3001      	adds	r0, #1
 8008926:	d0ab      	beq.n	8008880 <_printf_i+0x164>
 8008928:	6823      	ldr	r3, [r4, #0]
 800892a:	079b      	lsls	r3, r3, #30
 800892c:	d413      	bmi.n	8008956 <_printf_i+0x23a>
 800892e:	68e0      	ldr	r0, [r4, #12]
 8008930:	9b03      	ldr	r3, [sp, #12]
 8008932:	4298      	cmp	r0, r3
 8008934:	bfb8      	it	lt
 8008936:	4618      	movlt	r0, r3
 8008938:	e7a4      	b.n	8008884 <_printf_i+0x168>
 800893a:	2301      	movs	r3, #1
 800893c:	4632      	mov	r2, r6
 800893e:	4649      	mov	r1, r9
 8008940:	4640      	mov	r0, r8
 8008942:	47d0      	blx	sl
 8008944:	3001      	adds	r0, #1
 8008946:	d09b      	beq.n	8008880 <_printf_i+0x164>
 8008948:	3501      	adds	r5, #1
 800894a:	68e3      	ldr	r3, [r4, #12]
 800894c:	9903      	ldr	r1, [sp, #12]
 800894e:	1a5b      	subs	r3, r3, r1
 8008950:	42ab      	cmp	r3, r5
 8008952:	dcf2      	bgt.n	800893a <_printf_i+0x21e>
 8008954:	e7eb      	b.n	800892e <_printf_i+0x212>
 8008956:	2500      	movs	r5, #0
 8008958:	f104 0619 	add.w	r6, r4, #25
 800895c:	e7f5      	b.n	800894a <_printf_i+0x22e>
 800895e:	bf00      	nop
 8008960:	0800b2ea 	.word	0x0800b2ea
 8008964:	0800b2fb 	.word	0x0800b2fb

08008968 <iprintf>:
 8008968:	b40f      	push	{r0, r1, r2, r3}
 800896a:	4b0a      	ldr	r3, [pc, #40]	; (8008994 <iprintf+0x2c>)
 800896c:	b513      	push	{r0, r1, r4, lr}
 800896e:	681c      	ldr	r4, [r3, #0]
 8008970:	b124      	cbz	r4, 800897c <iprintf+0x14>
 8008972:	69a3      	ldr	r3, [r4, #24]
 8008974:	b913      	cbnz	r3, 800897c <iprintf+0x14>
 8008976:	4620      	mov	r0, r4
 8008978:	f001 f8ea 	bl	8009b50 <__sinit>
 800897c:	ab05      	add	r3, sp, #20
 800897e:	9a04      	ldr	r2, [sp, #16]
 8008980:	68a1      	ldr	r1, [r4, #8]
 8008982:	9301      	str	r3, [sp, #4]
 8008984:	4620      	mov	r0, r4
 8008986:	f001 fdcb 	bl	800a520 <_vfiprintf_r>
 800898a:	b002      	add	sp, #8
 800898c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008990:	b004      	add	sp, #16
 8008992:	4770      	bx	lr
 8008994:	20000014 	.word	0x20000014

08008998 <_puts_r>:
 8008998:	b570      	push	{r4, r5, r6, lr}
 800899a:	460e      	mov	r6, r1
 800899c:	4605      	mov	r5, r0
 800899e:	b118      	cbz	r0, 80089a8 <_puts_r+0x10>
 80089a0:	6983      	ldr	r3, [r0, #24]
 80089a2:	b90b      	cbnz	r3, 80089a8 <_puts_r+0x10>
 80089a4:	f001 f8d4 	bl	8009b50 <__sinit>
 80089a8:	69ab      	ldr	r3, [r5, #24]
 80089aa:	68ac      	ldr	r4, [r5, #8]
 80089ac:	b913      	cbnz	r3, 80089b4 <_puts_r+0x1c>
 80089ae:	4628      	mov	r0, r5
 80089b0:	f001 f8ce 	bl	8009b50 <__sinit>
 80089b4:	4b2c      	ldr	r3, [pc, #176]	; (8008a68 <_puts_r+0xd0>)
 80089b6:	429c      	cmp	r4, r3
 80089b8:	d120      	bne.n	80089fc <_puts_r+0x64>
 80089ba:	686c      	ldr	r4, [r5, #4]
 80089bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089be:	07db      	lsls	r3, r3, #31
 80089c0:	d405      	bmi.n	80089ce <_puts_r+0x36>
 80089c2:	89a3      	ldrh	r3, [r4, #12]
 80089c4:	0598      	lsls	r0, r3, #22
 80089c6:	d402      	bmi.n	80089ce <_puts_r+0x36>
 80089c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089ca:	f001 f964 	bl	8009c96 <__retarget_lock_acquire_recursive>
 80089ce:	89a3      	ldrh	r3, [r4, #12]
 80089d0:	0719      	lsls	r1, r3, #28
 80089d2:	d51d      	bpl.n	8008a10 <_puts_r+0x78>
 80089d4:	6923      	ldr	r3, [r4, #16]
 80089d6:	b1db      	cbz	r3, 8008a10 <_puts_r+0x78>
 80089d8:	3e01      	subs	r6, #1
 80089da:	68a3      	ldr	r3, [r4, #8]
 80089dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80089e0:	3b01      	subs	r3, #1
 80089e2:	60a3      	str	r3, [r4, #8]
 80089e4:	bb39      	cbnz	r1, 8008a36 <_puts_r+0x9e>
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	da38      	bge.n	8008a5c <_puts_r+0xc4>
 80089ea:	4622      	mov	r2, r4
 80089ec:	210a      	movs	r1, #10
 80089ee:	4628      	mov	r0, r5
 80089f0:	f000 f858 	bl	8008aa4 <__swbuf_r>
 80089f4:	3001      	adds	r0, #1
 80089f6:	d011      	beq.n	8008a1c <_puts_r+0x84>
 80089f8:	250a      	movs	r5, #10
 80089fa:	e011      	b.n	8008a20 <_puts_r+0x88>
 80089fc:	4b1b      	ldr	r3, [pc, #108]	; (8008a6c <_puts_r+0xd4>)
 80089fe:	429c      	cmp	r4, r3
 8008a00:	d101      	bne.n	8008a06 <_puts_r+0x6e>
 8008a02:	68ac      	ldr	r4, [r5, #8]
 8008a04:	e7da      	b.n	80089bc <_puts_r+0x24>
 8008a06:	4b1a      	ldr	r3, [pc, #104]	; (8008a70 <_puts_r+0xd8>)
 8008a08:	429c      	cmp	r4, r3
 8008a0a:	bf08      	it	eq
 8008a0c:	68ec      	ldreq	r4, [r5, #12]
 8008a0e:	e7d5      	b.n	80089bc <_puts_r+0x24>
 8008a10:	4621      	mov	r1, r4
 8008a12:	4628      	mov	r0, r5
 8008a14:	f000 f898 	bl	8008b48 <__swsetup_r>
 8008a18:	2800      	cmp	r0, #0
 8008a1a:	d0dd      	beq.n	80089d8 <_puts_r+0x40>
 8008a1c:	f04f 35ff 	mov.w	r5, #4294967295
 8008a20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a22:	07da      	lsls	r2, r3, #31
 8008a24:	d405      	bmi.n	8008a32 <_puts_r+0x9a>
 8008a26:	89a3      	ldrh	r3, [r4, #12]
 8008a28:	059b      	lsls	r3, r3, #22
 8008a2a:	d402      	bmi.n	8008a32 <_puts_r+0x9a>
 8008a2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a2e:	f001 f933 	bl	8009c98 <__retarget_lock_release_recursive>
 8008a32:	4628      	mov	r0, r5
 8008a34:	bd70      	pop	{r4, r5, r6, pc}
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	da04      	bge.n	8008a44 <_puts_r+0xac>
 8008a3a:	69a2      	ldr	r2, [r4, #24]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	dc06      	bgt.n	8008a4e <_puts_r+0xb6>
 8008a40:	290a      	cmp	r1, #10
 8008a42:	d004      	beq.n	8008a4e <_puts_r+0xb6>
 8008a44:	6823      	ldr	r3, [r4, #0]
 8008a46:	1c5a      	adds	r2, r3, #1
 8008a48:	6022      	str	r2, [r4, #0]
 8008a4a:	7019      	strb	r1, [r3, #0]
 8008a4c:	e7c5      	b.n	80089da <_puts_r+0x42>
 8008a4e:	4622      	mov	r2, r4
 8008a50:	4628      	mov	r0, r5
 8008a52:	f000 f827 	bl	8008aa4 <__swbuf_r>
 8008a56:	3001      	adds	r0, #1
 8008a58:	d1bf      	bne.n	80089da <_puts_r+0x42>
 8008a5a:	e7df      	b.n	8008a1c <_puts_r+0x84>
 8008a5c:	6823      	ldr	r3, [r4, #0]
 8008a5e:	250a      	movs	r5, #10
 8008a60:	1c5a      	adds	r2, r3, #1
 8008a62:	6022      	str	r2, [r4, #0]
 8008a64:	701d      	strb	r5, [r3, #0]
 8008a66:	e7db      	b.n	8008a20 <_puts_r+0x88>
 8008a68:	0800b3bc 	.word	0x0800b3bc
 8008a6c:	0800b3dc 	.word	0x0800b3dc
 8008a70:	0800b39c 	.word	0x0800b39c

08008a74 <puts>:
 8008a74:	4b02      	ldr	r3, [pc, #8]	; (8008a80 <puts+0xc>)
 8008a76:	4601      	mov	r1, r0
 8008a78:	6818      	ldr	r0, [r3, #0]
 8008a7a:	f7ff bf8d 	b.w	8008998 <_puts_r>
 8008a7e:	bf00      	nop
 8008a80:	20000014 	.word	0x20000014

08008a84 <_sbrk_r>:
 8008a84:	b538      	push	{r3, r4, r5, lr}
 8008a86:	4d06      	ldr	r5, [pc, #24]	; (8008aa0 <_sbrk_r+0x1c>)
 8008a88:	2300      	movs	r3, #0
 8008a8a:	4604      	mov	r4, r0
 8008a8c:	4608      	mov	r0, r1
 8008a8e:	602b      	str	r3, [r5, #0]
 8008a90:	f7f9 fdec 	bl	800266c <_sbrk>
 8008a94:	1c43      	adds	r3, r0, #1
 8008a96:	d102      	bne.n	8008a9e <_sbrk_r+0x1a>
 8008a98:	682b      	ldr	r3, [r5, #0]
 8008a9a:	b103      	cbz	r3, 8008a9e <_sbrk_r+0x1a>
 8008a9c:	6023      	str	r3, [r4, #0]
 8008a9e:	bd38      	pop	{r3, r4, r5, pc}
 8008aa0:	200004c8 	.word	0x200004c8

08008aa4 <__swbuf_r>:
 8008aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aa6:	460e      	mov	r6, r1
 8008aa8:	4614      	mov	r4, r2
 8008aaa:	4605      	mov	r5, r0
 8008aac:	b118      	cbz	r0, 8008ab6 <__swbuf_r+0x12>
 8008aae:	6983      	ldr	r3, [r0, #24]
 8008ab0:	b90b      	cbnz	r3, 8008ab6 <__swbuf_r+0x12>
 8008ab2:	f001 f84d 	bl	8009b50 <__sinit>
 8008ab6:	4b21      	ldr	r3, [pc, #132]	; (8008b3c <__swbuf_r+0x98>)
 8008ab8:	429c      	cmp	r4, r3
 8008aba:	d12b      	bne.n	8008b14 <__swbuf_r+0x70>
 8008abc:	686c      	ldr	r4, [r5, #4]
 8008abe:	69a3      	ldr	r3, [r4, #24]
 8008ac0:	60a3      	str	r3, [r4, #8]
 8008ac2:	89a3      	ldrh	r3, [r4, #12]
 8008ac4:	071a      	lsls	r2, r3, #28
 8008ac6:	d52f      	bpl.n	8008b28 <__swbuf_r+0x84>
 8008ac8:	6923      	ldr	r3, [r4, #16]
 8008aca:	b36b      	cbz	r3, 8008b28 <__swbuf_r+0x84>
 8008acc:	6923      	ldr	r3, [r4, #16]
 8008ace:	6820      	ldr	r0, [r4, #0]
 8008ad0:	1ac0      	subs	r0, r0, r3
 8008ad2:	6963      	ldr	r3, [r4, #20]
 8008ad4:	b2f6      	uxtb	r6, r6
 8008ad6:	4283      	cmp	r3, r0
 8008ad8:	4637      	mov	r7, r6
 8008ada:	dc04      	bgt.n	8008ae6 <__swbuf_r+0x42>
 8008adc:	4621      	mov	r1, r4
 8008ade:	4628      	mov	r0, r5
 8008ae0:	f000 ffa2 	bl	8009a28 <_fflush_r>
 8008ae4:	bb30      	cbnz	r0, 8008b34 <__swbuf_r+0x90>
 8008ae6:	68a3      	ldr	r3, [r4, #8]
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	60a3      	str	r3, [r4, #8]
 8008aec:	6823      	ldr	r3, [r4, #0]
 8008aee:	1c5a      	adds	r2, r3, #1
 8008af0:	6022      	str	r2, [r4, #0]
 8008af2:	701e      	strb	r6, [r3, #0]
 8008af4:	6963      	ldr	r3, [r4, #20]
 8008af6:	3001      	adds	r0, #1
 8008af8:	4283      	cmp	r3, r0
 8008afa:	d004      	beq.n	8008b06 <__swbuf_r+0x62>
 8008afc:	89a3      	ldrh	r3, [r4, #12]
 8008afe:	07db      	lsls	r3, r3, #31
 8008b00:	d506      	bpl.n	8008b10 <__swbuf_r+0x6c>
 8008b02:	2e0a      	cmp	r6, #10
 8008b04:	d104      	bne.n	8008b10 <__swbuf_r+0x6c>
 8008b06:	4621      	mov	r1, r4
 8008b08:	4628      	mov	r0, r5
 8008b0a:	f000 ff8d 	bl	8009a28 <_fflush_r>
 8008b0e:	b988      	cbnz	r0, 8008b34 <__swbuf_r+0x90>
 8008b10:	4638      	mov	r0, r7
 8008b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b14:	4b0a      	ldr	r3, [pc, #40]	; (8008b40 <__swbuf_r+0x9c>)
 8008b16:	429c      	cmp	r4, r3
 8008b18:	d101      	bne.n	8008b1e <__swbuf_r+0x7a>
 8008b1a:	68ac      	ldr	r4, [r5, #8]
 8008b1c:	e7cf      	b.n	8008abe <__swbuf_r+0x1a>
 8008b1e:	4b09      	ldr	r3, [pc, #36]	; (8008b44 <__swbuf_r+0xa0>)
 8008b20:	429c      	cmp	r4, r3
 8008b22:	bf08      	it	eq
 8008b24:	68ec      	ldreq	r4, [r5, #12]
 8008b26:	e7ca      	b.n	8008abe <__swbuf_r+0x1a>
 8008b28:	4621      	mov	r1, r4
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	f000 f80c 	bl	8008b48 <__swsetup_r>
 8008b30:	2800      	cmp	r0, #0
 8008b32:	d0cb      	beq.n	8008acc <__swbuf_r+0x28>
 8008b34:	f04f 37ff 	mov.w	r7, #4294967295
 8008b38:	e7ea      	b.n	8008b10 <__swbuf_r+0x6c>
 8008b3a:	bf00      	nop
 8008b3c:	0800b3bc 	.word	0x0800b3bc
 8008b40:	0800b3dc 	.word	0x0800b3dc
 8008b44:	0800b39c 	.word	0x0800b39c

08008b48 <__swsetup_r>:
 8008b48:	4b32      	ldr	r3, [pc, #200]	; (8008c14 <__swsetup_r+0xcc>)
 8008b4a:	b570      	push	{r4, r5, r6, lr}
 8008b4c:	681d      	ldr	r5, [r3, #0]
 8008b4e:	4606      	mov	r6, r0
 8008b50:	460c      	mov	r4, r1
 8008b52:	b125      	cbz	r5, 8008b5e <__swsetup_r+0x16>
 8008b54:	69ab      	ldr	r3, [r5, #24]
 8008b56:	b913      	cbnz	r3, 8008b5e <__swsetup_r+0x16>
 8008b58:	4628      	mov	r0, r5
 8008b5a:	f000 fff9 	bl	8009b50 <__sinit>
 8008b5e:	4b2e      	ldr	r3, [pc, #184]	; (8008c18 <__swsetup_r+0xd0>)
 8008b60:	429c      	cmp	r4, r3
 8008b62:	d10f      	bne.n	8008b84 <__swsetup_r+0x3c>
 8008b64:	686c      	ldr	r4, [r5, #4]
 8008b66:	89a3      	ldrh	r3, [r4, #12]
 8008b68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b6c:	0719      	lsls	r1, r3, #28
 8008b6e:	d42c      	bmi.n	8008bca <__swsetup_r+0x82>
 8008b70:	06dd      	lsls	r5, r3, #27
 8008b72:	d411      	bmi.n	8008b98 <__swsetup_r+0x50>
 8008b74:	2309      	movs	r3, #9
 8008b76:	6033      	str	r3, [r6, #0]
 8008b78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b7c:	81a3      	strh	r3, [r4, #12]
 8008b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b82:	e03e      	b.n	8008c02 <__swsetup_r+0xba>
 8008b84:	4b25      	ldr	r3, [pc, #148]	; (8008c1c <__swsetup_r+0xd4>)
 8008b86:	429c      	cmp	r4, r3
 8008b88:	d101      	bne.n	8008b8e <__swsetup_r+0x46>
 8008b8a:	68ac      	ldr	r4, [r5, #8]
 8008b8c:	e7eb      	b.n	8008b66 <__swsetup_r+0x1e>
 8008b8e:	4b24      	ldr	r3, [pc, #144]	; (8008c20 <__swsetup_r+0xd8>)
 8008b90:	429c      	cmp	r4, r3
 8008b92:	bf08      	it	eq
 8008b94:	68ec      	ldreq	r4, [r5, #12]
 8008b96:	e7e6      	b.n	8008b66 <__swsetup_r+0x1e>
 8008b98:	0758      	lsls	r0, r3, #29
 8008b9a:	d512      	bpl.n	8008bc2 <__swsetup_r+0x7a>
 8008b9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b9e:	b141      	cbz	r1, 8008bb2 <__swsetup_r+0x6a>
 8008ba0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ba4:	4299      	cmp	r1, r3
 8008ba6:	d002      	beq.n	8008bae <__swsetup_r+0x66>
 8008ba8:	4630      	mov	r0, r6
 8008baa:	f7ff f993 	bl	8007ed4 <_free_r>
 8008bae:	2300      	movs	r3, #0
 8008bb0:	6363      	str	r3, [r4, #52]	; 0x34
 8008bb2:	89a3      	ldrh	r3, [r4, #12]
 8008bb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008bb8:	81a3      	strh	r3, [r4, #12]
 8008bba:	2300      	movs	r3, #0
 8008bbc:	6063      	str	r3, [r4, #4]
 8008bbe:	6923      	ldr	r3, [r4, #16]
 8008bc0:	6023      	str	r3, [r4, #0]
 8008bc2:	89a3      	ldrh	r3, [r4, #12]
 8008bc4:	f043 0308 	orr.w	r3, r3, #8
 8008bc8:	81a3      	strh	r3, [r4, #12]
 8008bca:	6923      	ldr	r3, [r4, #16]
 8008bcc:	b94b      	cbnz	r3, 8008be2 <__swsetup_r+0x9a>
 8008bce:	89a3      	ldrh	r3, [r4, #12]
 8008bd0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bd8:	d003      	beq.n	8008be2 <__swsetup_r+0x9a>
 8008bda:	4621      	mov	r1, r4
 8008bdc:	4630      	mov	r0, r6
 8008bde:	f001 f881 	bl	8009ce4 <__smakebuf_r>
 8008be2:	89a0      	ldrh	r0, [r4, #12]
 8008be4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008be8:	f010 0301 	ands.w	r3, r0, #1
 8008bec:	d00a      	beq.n	8008c04 <__swsetup_r+0xbc>
 8008bee:	2300      	movs	r3, #0
 8008bf0:	60a3      	str	r3, [r4, #8]
 8008bf2:	6963      	ldr	r3, [r4, #20]
 8008bf4:	425b      	negs	r3, r3
 8008bf6:	61a3      	str	r3, [r4, #24]
 8008bf8:	6923      	ldr	r3, [r4, #16]
 8008bfa:	b943      	cbnz	r3, 8008c0e <__swsetup_r+0xc6>
 8008bfc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008c00:	d1ba      	bne.n	8008b78 <__swsetup_r+0x30>
 8008c02:	bd70      	pop	{r4, r5, r6, pc}
 8008c04:	0781      	lsls	r1, r0, #30
 8008c06:	bf58      	it	pl
 8008c08:	6963      	ldrpl	r3, [r4, #20]
 8008c0a:	60a3      	str	r3, [r4, #8]
 8008c0c:	e7f4      	b.n	8008bf8 <__swsetup_r+0xb0>
 8008c0e:	2000      	movs	r0, #0
 8008c10:	e7f7      	b.n	8008c02 <__swsetup_r+0xba>
 8008c12:	bf00      	nop
 8008c14:	20000014 	.word	0x20000014
 8008c18:	0800b3bc 	.word	0x0800b3bc
 8008c1c:	0800b3dc 	.word	0x0800b3dc
 8008c20:	0800b39c 	.word	0x0800b39c

08008c24 <quorem>:
 8008c24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c28:	6903      	ldr	r3, [r0, #16]
 8008c2a:	690c      	ldr	r4, [r1, #16]
 8008c2c:	42a3      	cmp	r3, r4
 8008c2e:	4607      	mov	r7, r0
 8008c30:	f2c0 8081 	blt.w	8008d36 <quorem+0x112>
 8008c34:	3c01      	subs	r4, #1
 8008c36:	f101 0814 	add.w	r8, r1, #20
 8008c3a:	f100 0514 	add.w	r5, r0, #20
 8008c3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c42:	9301      	str	r3, [sp, #4]
 8008c44:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008c48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008c54:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008c58:	fbb2 f6f3 	udiv	r6, r2, r3
 8008c5c:	d331      	bcc.n	8008cc2 <quorem+0x9e>
 8008c5e:	f04f 0e00 	mov.w	lr, #0
 8008c62:	4640      	mov	r0, r8
 8008c64:	46ac      	mov	ip, r5
 8008c66:	46f2      	mov	sl, lr
 8008c68:	f850 2b04 	ldr.w	r2, [r0], #4
 8008c6c:	b293      	uxth	r3, r2
 8008c6e:	fb06 e303 	mla	r3, r6, r3, lr
 8008c72:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	ebaa 0303 	sub.w	r3, sl, r3
 8008c7c:	f8dc a000 	ldr.w	sl, [ip]
 8008c80:	0c12      	lsrs	r2, r2, #16
 8008c82:	fa13 f38a 	uxtah	r3, r3, sl
 8008c86:	fb06 e202 	mla	r2, r6, r2, lr
 8008c8a:	9300      	str	r3, [sp, #0]
 8008c8c:	9b00      	ldr	r3, [sp, #0]
 8008c8e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008c92:	b292      	uxth	r2, r2
 8008c94:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008c98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c9c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008ca0:	4581      	cmp	r9, r0
 8008ca2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ca6:	f84c 3b04 	str.w	r3, [ip], #4
 8008caa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008cae:	d2db      	bcs.n	8008c68 <quorem+0x44>
 8008cb0:	f855 300b 	ldr.w	r3, [r5, fp]
 8008cb4:	b92b      	cbnz	r3, 8008cc2 <quorem+0x9e>
 8008cb6:	9b01      	ldr	r3, [sp, #4]
 8008cb8:	3b04      	subs	r3, #4
 8008cba:	429d      	cmp	r5, r3
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	d32e      	bcc.n	8008d1e <quorem+0xfa>
 8008cc0:	613c      	str	r4, [r7, #16]
 8008cc2:	4638      	mov	r0, r7
 8008cc4:	f001 faea 	bl	800a29c <__mcmp>
 8008cc8:	2800      	cmp	r0, #0
 8008cca:	db24      	blt.n	8008d16 <quorem+0xf2>
 8008ccc:	3601      	adds	r6, #1
 8008cce:	4628      	mov	r0, r5
 8008cd0:	f04f 0c00 	mov.w	ip, #0
 8008cd4:	f858 2b04 	ldr.w	r2, [r8], #4
 8008cd8:	f8d0 e000 	ldr.w	lr, [r0]
 8008cdc:	b293      	uxth	r3, r2
 8008cde:	ebac 0303 	sub.w	r3, ip, r3
 8008ce2:	0c12      	lsrs	r2, r2, #16
 8008ce4:	fa13 f38e 	uxtah	r3, r3, lr
 8008ce8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008cec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008cf6:	45c1      	cmp	r9, r8
 8008cf8:	f840 3b04 	str.w	r3, [r0], #4
 8008cfc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008d00:	d2e8      	bcs.n	8008cd4 <quorem+0xb0>
 8008d02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d0a:	b922      	cbnz	r2, 8008d16 <quorem+0xf2>
 8008d0c:	3b04      	subs	r3, #4
 8008d0e:	429d      	cmp	r5, r3
 8008d10:	461a      	mov	r2, r3
 8008d12:	d30a      	bcc.n	8008d2a <quorem+0x106>
 8008d14:	613c      	str	r4, [r7, #16]
 8008d16:	4630      	mov	r0, r6
 8008d18:	b003      	add	sp, #12
 8008d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d1e:	6812      	ldr	r2, [r2, #0]
 8008d20:	3b04      	subs	r3, #4
 8008d22:	2a00      	cmp	r2, #0
 8008d24:	d1cc      	bne.n	8008cc0 <quorem+0x9c>
 8008d26:	3c01      	subs	r4, #1
 8008d28:	e7c7      	b.n	8008cba <quorem+0x96>
 8008d2a:	6812      	ldr	r2, [r2, #0]
 8008d2c:	3b04      	subs	r3, #4
 8008d2e:	2a00      	cmp	r2, #0
 8008d30:	d1f0      	bne.n	8008d14 <quorem+0xf0>
 8008d32:	3c01      	subs	r4, #1
 8008d34:	e7eb      	b.n	8008d0e <quorem+0xea>
 8008d36:	2000      	movs	r0, #0
 8008d38:	e7ee      	b.n	8008d18 <quorem+0xf4>
 8008d3a:	0000      	movs	r0, r0
 8008d3c:	0000      	movs	r0, r0
	...

08008d40 <_dtoa_r>:
 8008d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d44:	ed2d 8b04 	vpush	{d8-d9}
 8008d48:	ec57 6b10 	vmov	r6, r7, d0
 8008d4c:	b093      	sub	sp, #76	; 0x4c
 8008d4e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008d50:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008d54:	9106      	str	r1, [sp, #24]
 8008d56:	ee10 aa10 	vmov	sl, s0
 8008d5a:	4604      	mov	r4, r0
 8008d5c:	9209      	str	r2, [sp, #36]	; 0x24
 8008d5e:	930c      	str	r3, [sp, #48]	; 0x30
 8008d60:	46bb      	mov	fp, r7
 8008d62:	b975      	cbnz	r5, 8008d82 <_dtoa_r+0x42>
 8008d64:	2010      	movs	r0, #16
 8008d66:	f7ff f8a5 	bl	8007eb4 <malloc>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	6260      	str	r0, [r4, #36]	; 0x24
 8008d6e:	b920      	cbnz	r0, 8008d7a <_dtoa_r+0x3a>
 8008d70:	4ba7      	ldr	r3, [pc, #668]	; (8009010 <_dtoa_r+0x2d0>)
 8008d72:	21ea      	movs	r1, #234	; 0xea
 8008d74:	48a7      	ldr	r0, [pc, #668]	; (8009014 <_dtoa_r+0x2d4>)
 8008d76:	f001 fd59 	bl	800a82c <__assert_func>
 8008d7a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008d7e:	6005      	str	r5, [r0, #0]
 8008d80:	60c5      	str	r5, [r0, #12]
 8008d82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d84:	6819      	ldr	r1, [r3, #0]
 8008d86:	b151      	cbz	r1, 8008d9e <_dtoa_r+0x5e>
 8008d88:	685a      	ldr	r2, [r3, #4]
 8008d8a:	604a      	str	r2, [r1, #4]
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	4093      	lsls	r3, r2
 8008d90:	608b      	str	r3, [r1, #8]
 8008d92:	4620      	mov	r0, r4
 8008d94:	f001 f840 	bl	8009e18 <_Bfree>
 8008d98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	601a      	str	r2, [r3, #0]
 8008d9e:	1e3b      	subs	r3, r7, #0
 8008da0:	bfaa      	itet	ge
 8008da2:	2300      	movge	r3, #0
 8008da4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008da8:	f8c8 3000 	strge.w	r3, [r8]
 8008dac:	4b9a      	ldr	r3, [pc, #616]	; (8009018 <_dtoa_r+0x2d8>)
 8008dae:	bfbc      	itt	lt
 8008db0:	2201      	movlt	r2, #1
 8008db2:	f8c8 2000 	strlt.w	r2, [r8]
 8008db6:	ea33 030b 	bics.w	r3, r3, fp
 8008dba:	d11b      	bne.n	8008df4 <_dtoa_r+0xb4>
 8008dbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008dbe:	f242 730f 	movw	r3, #9999	; 0x270f
 8008dc2:	6013      	str	r3, [r2, #0]
 8008dc4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008dc8:	4333      	orrs	r3, r6
 8008dca:	f000 8592 	beq.w	80098f2 <_dtoa_r+0xbb2>
 8008dce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008dd0:	b963      	cbnz	r3, 8008dec <_dtoa_r+0xac>
 8008dd2:	4b92      	ldr	r3, [pc, #584]	; (800901c <_dtoa_r+0x2dc>)
 8008dd4:	e022      	b.n	8008e1c <_dtoa_r+0xdc>
 8008dd6:	4b92      	ldr	r3, [pc, #584]	; (8009020 <_dtoa_r+0x2e0>)
 8008dd8:	9301      	str	r3, [sp, #4]
 8008dda:	3308      	adds	r3, #8
 8008ddc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008dde:	6013      	str	r3, [r2, #0]
 8008de0:	9801      	ldr	r0, [sp, #4]
 8008de2:	b013      	add	sp, #76	; 0x4c
 8008de4:	ecbd 8b04 	vpop	{d8-d9}
 8008de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dec:	4b8b      	ldr	r3, [pc, #556]	; (800901c <_dtoa_r+0x2dc>)
 8008dee:	9301      	str	r3, [sp, #4]
 8008df0:	3303      	adds	r3, #3
 8008df2:	e7f3      	b.n	8008ddc <_dtoa_r+0x9c>
 8008df4:	2200      	movs	r2, #0
 8008df6:	2300      	movs	r3, #0
 8008df8:	4650      	mov	r0, sl
 8008dfa:	4659      	mov	r1, fp
 8008dfc:	f7f7 fe7c 	bl	8000af8 <__aeabi_dcmpeq>
 8008e00:	ec4b ab19 	vmov	d9, sl, fp
 8008e04:	4680      	mov	r8, r0
 8008e06:	b158      	cbz	r0, 8008e20 <_dtoa_r+0xe0>
 8008e08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	6013      	str	r3, [r2, #0]
 8008e0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	f000 856b 	beq.w	80098ec <_dtoa_r+0xbac>
 8008e16:	4883      	ldr	r0, [pc, #524]	; (8009024 <_dtoa_r+0x2e4>)
 8008e18:	6018      	str	r0, [r3, #0]
 8008e1a:	1e43      	subs	r3, r0, #1
 8008e1c:	9301      	str	r3, [sp, #4]
 8008e1e:	e7df      	b.n	8008de0 <_dtoa_r+0xa0>
 8008e20:	ec4b ab10 	vmov	d0, sl, fp
 8008e24:	aa10      	add	r2, sp, #64	; 0x40
 8008e26:	a911      	add	r1, sp, #68	; 0x44
 8008e28:	4620      	mov	r0, r4
 8008e2a:	f001 fadd 	bl	800a3e8 <__d2b>
 8008e2e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008e32:	ee08 0a10 	vmov	s16, r0
 8008e36:	2d00      	cmp	r5, #0
 8008e38:	f000 8084 	beq.w	8008f44 <_dtoa_r+0x204>
 8008e3c:	ee19 3a90 	vmov	r3, s19
 8008e40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e44:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008e48:	4656      	mov	r6, sl
 8008e4a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008e4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008e52:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008e56:	4b74      	ldr	r3, [pc, #464]	; (8009028 <_dtoa_r+0x2e8>)
 8008e58:	2200      	movs	r2, #0
 8008e5a:	4630      	mov	r0, r6
 8008e5c:	4639      	mov	r1, r7
 8008e5e:	f7f7 fa2b 	bl	80002b8 <__aeabi_dsub>
 8008e62:	a365      	add	r3, pc, #404	; (adr r3, 8008ff8 <_dtoa_r+0x2b8>)
 8008e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e68:	f7f7 fbde 	bl	8000628 <__aeabi_dmul>
 8008e6c:	a364      	add	r3, pc, #400	; (adr r3, 8009000 <_dtoa_r+0x2c0>)
 8008e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e72:	f7f7 fa23 	bl	80002bc <__adddf3>
 8008e76:	4606      	mov	r6, r0
 8008e78:	4628      	mov	r0, r5
 8008e7a:	460f      	mov	r7, r1
 8008e7c:	f7f7 fb6a 	bl	8000554 <__aeabi_i2d>
 8008e80:	a361      	add	r3, pc, #388	; (adr r3, 8009008 <_dtoa_r+0x2c8>)
 8008e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e86:	f7f7 fbcf 	bl	8000628 <__aeabi_dmul>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	4630      	mov	r0, r6
 8008e90:	4639      	mov	r1, r7
 8008e92:	f7f7 fa13 	bl	80002bc <__adddf3>
 8008e96:	4606      	mov	r6, r0
 8008e98:	460f      	mov	r7, r1
 8008e9a:	f7f7 fe75 	bl	8000b88 <__aeabi_d2iz>
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	9000      	str	r0, [sp, #0]
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	4630      	mov	r0, r6
 8008ea6:	4639      	mov	r1, r7
 8008ea8:	f7f7 fe30 	bl	8000b0c <__aeabi_dcmplt>
 8008eac:	b150      	cbz	r0, 8008ec4 <_dtoa_r+0x184>
 8008eae:	9800      	ldr	r0, [sp, #0]
 8008eb0:	f7f7 fb50 	bl	8000554 <__aeabi_i2d>
 8008eb4:	4632      	mov	r2, r6
 8008eb6:	463b      	mov	r3, r7
 8008eb8:	f7f7 fe1e 	bl	8000af8 <__aeabi_dcmpeq>
 8008ebc:	b910      	cbnz	r0, 8008ec4 <_dtoa_r+0x184>
 8008ebe:	9b00      	ldr	r3, [sp, #0]
 8008ec0:	3b01      	subs	r3, #1
 8008ec2:	9300      	str	r3, [sp, #0]
 8008ec4:	9b00      	ldr	r3, [sp, #0]
 8008ec6:	2b16      	cmp	r3, #22
 8008ec8:	d85a      	bhi.n	8008f80 <_dtoa_r+0x240>
 8008eca:	9a00      	ldr	r2, [sp, #0]
 8008ecc:	4b57      	ldr	r3, [pc, #348]	; (800902c <_dtoa_r+0x2ec>)
 8008ece:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed6:	ec51 0b19 	vmov	r0, r1, d9
 8008eda:	f7f7 fe17 	bl	8000b0c <__aeabi_dcmplt>
 8008ede:	2800      	cmp	r0, #0
 8008ee0:	d050      	beq.n	8008f84 <_dtoa_r+0x244>
 8008ee2:	9b00      	ldr	r3, [sp, #0]
 8008ee4:	3b01      	subs	r3, #1
 8008ee6:	9300      	str	r3, [sp, #0]
 8008ee8:	2300      	movs	r3, #0
 8008eea:	930b      	str	r3, [sp, #44]	; 0x2c
 8008eec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008eee:	1b5d      	subs	r5, r3, r5
 8008ef0:	1e6b      	subs	r3, r5, #1
 8008ef2:	9305      	str	r3, [sp, #20]
 8008ef4:	bf45      	ittet	mi
 8008ef6:	f1c5 0301 	rsbmi	r3, r5, #1
 8008efa:	9304      	strmi	r3, [sp, #16]
 8008efc:	2300      	movpl	r3, #0
 8008efe:	2300      	movmi	r3, #0
 8008f00:	bf4c      	ite	mi
 8008f02:	9305      	strmi	r3, [sp, #20]
 8008f04:	9304      	strpl	r3, [sp, #16]
 8008f06:	9b00      	ldr	r3, [sp, #0]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	db3d      	blt.n	8008f88 <_dtoa_r+0x248>
 8008f0c:	9b05      	ldr	r3, [sp, #20]
 8008f0e:	9a00      	ldr	r2, [sp, #0]
 8008f10:	920a      	str	r2, [sp, #40]	; 0x28
 8008f12:	4413      	add	r3, r2
 8008f14:	9305      	str	r3, [sp, #20]
 8008f16:	2300      	movs	r3, #0
 8008f18:	9307      	str	r3, [sp, #28]
 8008f1a:	9b06      	ldr	r3, [sp, #24]
 8008f1c:	2b09      	cmp	r3, #9
 8008f1e:	f200 8089 	bhi.w	8009034 <_dtoa_r+0x2f4>
 8008f22:	2b05      	cmp	r3, #5
 8008f24:	bfc4      	itt	gt
 8008f26:	3b04      	subgt	r3, #4
 8008f28:	9306      	strgt	r3, [sp, #24]
 8008f2a:	9b06      	ldr	r3, [sp, #24]
 8008f2c:	f1a3 0302 	sub.w	r3, r3, #2
 8008f30:	bfcc      	ite	gt
 8008f32:	2500      	movgt	r5, #0
 8008f34:	2501      	movle	r5, #1
 8008f36:	2b03      	cmp	r3, #3
 8008f38:	f200 8087 	bhi.w	800904a <_dtoa_r+0x30a>
 8008f3c:	e8df f003 	tbb	[pc, r3]
 8008f40:	59383a2d 	.word	0x59383a2d
 8008f44:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008f48:	441d      	add	r5, r3
 8008f4a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008f4e:	2b20      	cmp	r3, #32
 8008f50:	bfc1      	itttt	gt
 8008f52:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008f56:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008f5a:	fa0b f303 	lslgt.w	r3, fp, r3
 8008f5e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008f62:	bfda      	itte	le
 8008f64:	f1c3 0320 	rsble	r3, r3, #32
 8008f68:	fa06 f003 	lslle.w	r0, r6, r3
 8008f6c:	4318      	orrgt	r0, r3
 8008f6e:	f7f7 fae1 	bl	8000534 <__aeabi_ui2d>
 8008f72:	2301      	movs	r3, #1
 8008f74:	4606      	mov	r6, r0
 8008f76:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008f7a:	3d01      	subs	r5, #1
 8008f7c:	930e      	str	r3, [sp, #56]	; 0x38
 8008f7e:	e76a      	b.n	8008e56 <_dtoa_r+0x116>
 8008f80:	2301      	movs	r3, #1
 8008f82:	e7b2      	b.n	8008eea <_dtoa_r+0x1aa>
 8008f84:	900b      	str	r0, [sp, #44]	; 0x2c
 8008f86:	e7b1      	b.n	8008eec <_dtoa_r+0x1ac>
 8008f88:	9b04      	ldr	r3, [sp, #16]
 8008f8a:	9a00      	ldr	r2, [sp, #0]
 8008f8c:	1a9b      	subs	r3, r3, r2
 8008f8e:	9304      	str	r3, [sp, #16]
 8008f90:	4253      	negs	r3, r2
 8008f92:	9307      	str	r3, [sp, #28]
 8008f94:	2300      	movs	r3, #0
 8008f96:	930a      	str	r3, [sp, #40]	; 0x28
 8008f98:	e7bf      	b.n	8008f1a <_dtoa_r+0x1da>
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	9308      	str	r3, [sp, #32]
 8008f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	dc55      	bgt.n	8009050 <_dtoa_r+0x310>
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008faa:	461a      	mov	r2, r3
 8008fac:	9209      	str	r2, [sp, #36]	; 0x24
 8008fae:	e00c      	b.n	8008fca <_dtoa_r+0x28a>
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	e7f3      	b.n	8008f9c <_dtoa_r+0x25c>
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fb8:	9308      	str	r3, [sp, #32]
 8008fba:	9b00      	ldr	r3, [sp, #0]
 8008fbc:	4413      	add	r3, r2
 8008fbe:	9302      	str	r3, [sp, #8]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	9303      	str	r3, [sp, #12]
 8008fc6:	bfb8      	it	lt
 8008fc8:	2301      	movlt	r3, #1
 8008fca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008fcc:	2200      	movs	r2, #0
 8008fce:	6042      	str	r2, [r0, #4]
 8008fd0:	2204      	movs	r2, #4
 8008fd2:	f102 0614 	add.w	r6, r2, #20
 8008fd6:	429e      	cmp	r6, r3
 8008fd8:	6841      	ldr	r1, [r0, #4]
 8008fda:	d93d      	bls.n	8009058 <_dtoa_r+0x318>
 8008fdc:	4620      	mov	r0, r4
 8008fde:	f000 fedb 	bl	8009d98 <_Balloc>
 8008fe2:	9001      	str	r0, [sp, #4]
 8008fe4:	2800      	cmp	r0, #0
 8008fe6:	d13b      	bne.n	8009060 <_dtoa_r+0x320>
 8008fe8:	4b11      	ldr	r3, [pc, #68]	; (8009030 <_dtoa_r+0x2f0>)
 8008fea:	4602      	mov	r2, r0
 8008fec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008ff0:	e6c0      	b.n	8008d74 <_dtoa_r+0x34>
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	e7df      	b.n	8008fb6 <_dtoa_r+0x276>
 8008ff6:	bf00      	nop
 8008ff8:	636f4361 	.word	0x636f4361
 8008ffc:	3fd287a7 	.word	0x3fd287a7
 8009000:	8b60c8b3 	.word	0x8b60c8b3
 8009004:	3fc68a28 	.word	0x3fc68a28
 8009008:	509f79fb 	.word	0x509f79fb
 800900c:	3fd34413 	.word	0x3fd34413
 8009010:	0800b319 	.word	0x0800b319
 8009014:	0800b330 	.word	0x0800b330
 8009018:	7ff00000 	.word	0x7ff00000
 800901c:	0800b315 	.word	0x0800b315
 8009020:	0800b30c 	.word	0x0800b30c
 8009024:	0800b2e9 	.word	0x0800b2e9
 8009028:	3ff80000 	.word	0x3ff80000
 800902c:	0800b480 	.word	0x0800b480
 8009030:	0800b38b 	.word	0x0800b38b
 8009034:	2501      	movs	r5, #1
 8009036:	2300      	movs	r3, #0
 8009038:	9306      	str	r3, [sp, #24]
 800903a:	9508      	str	r5, [sp, #32]
 800903c:	f04f 33ff 	mov.w	r3, #4294967295
 8009040:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009044:	2200      	movs	r2, #0
 8009046:	2312      	movs	r3, #18
 8009048:	e7b0      	b.n	8008fac <_dtoa_r+0x26c>
 800904a:	2301      	movs	r3, #1
 800904c:	9308      	str	r3, [sp, #32]
 800904e:	e7f5      	b.n	800903c <_dtoa_r+0x2fc>
 8009050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009052:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009056:	e7b8      	b.n	8008fca <_dtoa_r+0x28a>
 8009058:	3101      	adds	r1, #1
 800905a:	6041      	str	r1, [r0, #4]
 800905c:	0052      	lsls	r2, r2, #1
 800905e:	e7b8      	b.n	8008fd2 <_dtoa_r+0x292>
 8009060:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009062:	9a01      	ldr	r2, [sp, #4]
 8009064:	601a      	str	r2, [r3, #0]
 8009066:	9b03      	ldr	r3, [sp, #12]
 8009068:	2b0e      	cmp	r3, #14
 800906a:	f200 809d 	bhi.w	80091a8 <_dtoa_r+0x468>
 800906e:	2d00      	cmp	r5, #0
 8009070:	f000 809a 	beq.w	80091a8 <_dtoa_r+0x468>
 8009074:	9b00      	ldr	r3, [sp, #0]
 8009076:	2b00      	cmp	r3, #0
 8009078:	dd32      	ble.n	80090e0 <_dtoa_r+0x3a0>
 800907a:	4ab7      	ldr	r2, [pc, #732]	; (8009358 <_dtoa_r+0x618>)
 800907c:	f003 030f 	and.w	r3, r3, #15
 8009080:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009084:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009088:	9b00      	ldr	r3, [sp, #0]
 800908a:	05d8      	lsls	r0, r3, #23
 800908c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009090:	d516      	bpl.n	80090c0 <_dtoa_r+0x380>
 8009092:	4bb2      	ldr	r3, [pc, #712]	; (800935c <_dtoa_r+0x61c>)
 8009094:	ec51 0b19 	vmov	r0, r1, d9
 8009098:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800909c:	f7f7 fbee 	bl	800087c <__aeabi_ddiv>
 80090a0:	f007 070f 	and.w	r7, r7, #15
 80090a4:	4682      	mov	sl, r0
 80090a6:	468b      	mov	fp, r1
 80090a8:	2503      	movs	r5, #3
 80090aa:	4eac      	ldr	r6, [pc, #688]	; (800935c <_dtoa_r+0x61c>)
 80090ac:	b957      	cbnz	r7, 80090c4 <_dtoa_r+0x384>
 80090ae:	4642      	mov	r2, r8
 80090b0:	464b      	mov	r3, r9
 80090b2:	4650      	mov	r0, sl
 80090b4:	4659      	mov	r1, fp
 80090b6:	f7f7 fbe1 	bl	800087c <__aeabi_ddiv>
 80090ba:	4682      	mov	sl, r0
 80090bc:	468b      	mov	fp, r1
 80090be:	e028      	b.n	8009112 <_dtoa_r+0x3d2>
 80090c0:	2502      	movs	r5, #2
 80090c2:	e7f2      	b.n	80090aa <_dtoa_r+0x36a>
 80090c4:	07f9      	lsls	r1, r7, #31
 80090c6:	d508      	bpl.n	80090da <_dtoa_r+0x39a>
 80090c8:	4640      	mov	r0, r8
 80090ca:	4649      	mov	r1, r9
 80090cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80090d0:	f7f7 faaa 	bl	8000628 <__aeabi_dmul>
 80090d4:	3501      	adds	r5, #1
 80090d6:	4680      	mov	r8, r0
 80090d8:	4689      	mov	r9, r1
 80090da:	107f      	asrs	r7, r7, #1
 80090dc:	3608      	adds	r6, #8
 80090de:	e7e5      	b.n	80090ac <_dtoa_r+0x36c>
 80090e0:	f000 809b 	beq.w	800921a <_dtoa_r+0x4da>
 80090e4:	9b00      	ldr	r3, [sp, #0]
 80090e6:	4f9d      	ldr	r7, [pc, #628]	; (800935c <_dtoa_r+0x61c>)
 80090e8:	425e      	negs	r6, r3
 80090ea:	4b9b      	ldr	r3, [pc, #620]	; (8009358 <_dtoa_r+0x618>)
 80090ec:	f006 020f 	and.w	r2, r6, #15
 80090f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f8:	ec51 0b19 	vmov	r0, r1, d9
 80090fc:	f7f7 fa94 	bl	8000628 <__aeabi_dmul>
 8009100:	1136      	asrs	r6, r6, #4
 8009102:	4682      	mov	sl, r0
 8009104:	468b      	mov	fp, r1
 8009106:	2300      	movs	r3, #0
 8009108:	2502      	movs	r5, #2
 800910a:	2e00      	cmp	r6, #0
 800910c:	d17a      	bne.n	8009204 <_dtoa_r+0x4c4>
 800910e:	2b00      	cmp	r3, #0
 8009110:	d1d3      	bne.n	80090ba <_dtoa_r+0x37a>
 8009112:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009114:	2b00      	cmp	r3, #0
 8009116:	f000 8082 	beq.w	800921e <_dtoa_r+0x4de>
 800911a:	4b91      	ldr	r3, [pc, #580]	; (8009360 <_dtoa_r+0x620>)
 800911c:	2200      	movs	r2, #0
 800911e:	4650      	mov	r0, sl
 8009120:	4659      	mov	r1, fp
 8009122:	f7f7 fcf3 	bl	8000b0c <__aeabi_dcmplt>
 8009126:	2800      	cmp	r0, #0
 8009128:	d079      	beq.n	800921e <_dtoa_r+0x4de>
 800912a:	9b03      	ldr	r3, [sp, #12]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d076      	beq.n	800921e <_dtoa_r+0x4de>
 8009130:	9b02      	ldr	r3, [sp, #8]
 8009132:	2b00      	cmp	r3, #0
 8009134:	dd36      	ble.n	80091a4 <_dtoa_r+0x464>
 8009136:	9b00      	ldr	r3, [sp, #0]
 8009138:	4650      	mov	r0, sl
 800913a:	4659      	mov	r1, fp
 800913c:	1e5f      	subs	r7, r3, #1
 800913e:	2200      	movs	r2, #0
 8009140:	4b88      	ldr	r3, [pc, #544]	; (8009364 <_dtoa_r+0x624>)
 8009142:	f7f7 fa71 	bl	8000628 <__aeabi_dmul>
 8009146:	9e02      	ldr	r6, [sp, #8]
 8009148:	4682      	mov	sl, r0
 800914a:	468b      	mov	fp, r1
 800914c:	3501      	adds	r5, #1
 800914e:	4628      	mov	r0, r5
 8009150:	f7f7 fa00 	bl	8000554 <__aeabi_i2d>
 8009154:	4652      	mov	r2, sl
 8009156:	465b      	mov	r3, fp
 8009158:	f7f7 fa66 	bl	8000628 <__aeabi_dmul>
 800915c:	4b82      	ldr	r3, [pc, #520]	; (8009368 <_dtoa_r+0x628>)
 800915e:	2200      	movs	r2, #0
 8009160:	f7f7 f8ac 	bl	80002bc <__adddf3>
 8009164:	46d0      	mov	r8, sl
 8009166:	46d9      	mov	r9, fp
 8009168:	4682      	mov	sl, r0
 800916a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800916e:	2e00      	cmp	r6, #0
 8009170:	d158      	bne.n	8009224 <_dtoa_r+0x4e4>
 8009172:	4b7e      	ldr	r3, [pc, #504]	; (800936c <_dtoa_r+0x62c>)
 8009174:	2200      	movs	r2, #0
 8009176:	4640      	mov	r0, r8
 8009178:	4649      	mov	r1, r9
 800917a:	f7f7 f89d 	bl	80002b8 <__aeabi_dsub>
 800917e:	4652      	mov	r2, sl
 8009180:	465b      	mov	r3, fp
 8009182:	4680      	mov	r8, r0
 8009184:	4689      	mov	r9, r1
 8009186:	f7f7 fcdf 	bl	8000b48 <__aeabi_dcmpgt>
 800918a:	2800      	cmp	r0, #0
 800918c:	f040 8295 	bne.w	80096ba <_dtoa_r+0x97a>
 8009190:	4652      	mov	r2, sl
 8009192:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009196:	4640      	mov	r0, r8
 8009198:	4649      	mov	r1, r9
 800919a:	f7f7 fcb7 	bl	8000b0c <__aeabi_dcmplt>
 800919e:	2800      	cmp	r0, #0
 80091a0:	f040 8289 	bne.w	80096b6 <_dtoa_r+0x976>
 80091a4:	ec5b ab19 	vmov	sl, fp, d9
 80091a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	f2c0 8148 	blt.w	8009440 <_dtoa_r+0x700>
 80091b0:	9a00      	ldr	r2, [sp, #0]
 80091b2:	2a0e      	cmp	r2, #14
 80091b4:	f300 8144 	bgt.w	8009440 <_dtoa_r+0x700>
 80091b8:	4b67      	ldr	r3, [pc, #412]	; (8009358 <_dtoa_r+0x618>)
 80091ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091be:	e9d3 8900 	ldrd	r8, r9, [r3]
 80091c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	f280 80d5 	bge.w	8009374 <_dtoa_r+0x634>
 80091ca:	9b03      	ldr	r3, [sp, #12]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	f300 80d1 	bgt.w	8009374 <_dtoa_r+0x634>
 80091d2:	f040 826f 	bne.w	80096b4 <_dtoa_r+0x974>
 80091d6:	4b65      	ldr	r3, [pc, #404]	; (800936c <_dtoa_r+0x62c>)
 80091d8:	2200      	movs	r2, #0
 80091da:	4640      	mov	r0, r8
 80091dc:	4649      	mov	r1, r9
 80091de:	f7f7 fa23 	bl	8000628 <__aeabi_dmul>
 80091e2:	4652      	mov	r2, sl
 80091e4:	465b      	mov	r3, fp
 80091e6:	f7f7 fca5 	bl	8000b34 <__aeabi_dcmpge>
 80091ea:	9e03      	ldr	r6, [sp, #12]
 80091ec:	4637      	mov	r7, r6
 80091ee:	2800      	cmp	r0, #0
 80091f0:	f040 8245 	bne.w	800967e <_dtoa_r+0x93e>
 80091f4:	9d01      	ldr	r5, [sp, #4]
 80091f6:	2331      	movs	r3, #49	; 0x31
 80091f8:	f805 3b01 	strb.w	r3, [r5], #1
 80091fc:	9b00      	ldr	r3, [sp, #0]
 80091fe:	3301      	adds	r3, #1
 8009200:	9300      	str	r3, [sp, #0]
 8009202:	e240      	b.n	8009686 <_dtoa_r+0x946>
 8009204:	07f2      	lsls	r2, r6, #31
 8009206:	d505      	bpl.n	8009214 <_dtoa_r+0x4d4>
 8009208:	e9d7 2300 	ldrd	r2, r3, [r7]
 800920c:	f7f7 fa0c 	bl	8000628 <__aeabi_dmul>
 8009210:	3501      	adds	r5, #1
 8009212:	2301      	movs	r3, #1
 8009214:	1076      	asrs	r6, r6, #1
 8009216:	3708      	adds	r7, #8
 8009218:	e777      	b.n	800910a <_dtoa_r+0x3ca>
 800921a:	2502      	movs	r5, #2
 800921c:	e779      	b.n	8009112 <_dtoa_r+0x3d2>
 800921e:	9f00      	ldr	r7, [sp, #0]
 8009220:	9e03      	ldr	r6, [sp, #12]
 8009222:	e794      	b.n	800914e <_dtoa_r+0x40e>
 8009224:	9901      	ldr	r1, [sp, #4]
 8009226:	4b4c      	ldr	r3, [pc, #304]	; (8009358 <_dtoa_r+0x618>)
 8009228:	4431      	add	r1, r6
 800922a:	910d      	str	r1, [sp, #52]	; 0x34
 800922c:	9908      	ldr	r1, [sp, #32]
 800922e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009232:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009236:	2900      	cmp	r1, #0
 8009238:	d043      	beq.n	80092c2 <_dtoa_r+0x582>
 800923a:	494d      	ldr	r1, [pc, #308]	; (8009370 <_dtoa_r+0x630>)
 800923c:	2000      	movs	r0, #0
 800923e:	f7f7 fb1d 	bl	800087c <__aeabi_ddiv>
 8009242:	4652      	mov	r2, sl
 8009244:	465b      	mov	r3, fp
 8009246:	f7f7 f837 	bl	80002b8 <__aeabi_dsub>
 800924a:	9d01      	ldr	r5, [sp, #4]
 800924c:	4682      	mov	sl, r0
 800924e:	468b      	mov	fp, r1
 8009250:	4649      	mov	r1, r9
 8009252:	4640      	mov	r0, r8
 8009254:	f7f7 fc98 	bl	8000b88 <__aeabi_d2iz>
 8009258:	4606      	mov	r6, r0
 800925a:	f7f7 f97b 	bl	8000554 <__aeabi_i2d>
 800925e:	4602      	mov	r2, r0
 8009260:	460b      	mov	r3, r1
 8009262:	4640      	mov	r0, r8
 8009264:	4649      	mov	r1, r9
 8009266:	f7f7 f827 	bl	80002b8 <__aeabi_dsub>
 800926a:	3630      	adds	r6, #48	; 0x30
 800926c:	f805 6b01 	strb.w	r6, [r5], #1
 8009270:	4652      	mov	r2, sl
 8009272:	465b      	mov	r3, fp
 8009274:	4680      	mov	r8, r0
 8009276:	4689      	mov	r9, r1
 8009278:	f7f7 fc48 	bl	8000b0c <__aeabi_dcmplt>
 800927c:	2800      	cmp	r0, #0
 800927e:	d163      	bne.n	8009348 <_dtoa_r+0x608>
 8009280:	4642      	mov	r2, r8
 8009282:	464b      	mov	r3, r9
 8009284:	4936      	ldr	r1, [pc, #216]	; (8009360 <_dtoa_r+0x620>)
 8009286:	2000      	movs	r0, #0
 8009288:	f7f7 f816 	bl	80002b8 <__aeabi_dsub>
 800928c:	4652      	mov	r2, sl
 800928e:	465b      	mov	r3, fp
 8009290:	f7f7 fc3c 	bl	8000b0c <__aeabi_dcmplt>
 8009294:	2800      	cmp	r0, #0
 8009296:	f040 80b5 	bne.w	8009404 <_dtoa_r+0x6c4>
 800929a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800929c:	429d      	cmp	r5, r3
 800929e:	d081      	beq.n	80091a4 <_dtoa_r+0x464>
 80092a0:	4b30      	ldr	r3, [pc, #192]	; (8009364 <_dtoa_r+0x624>)
 80092a2:	2200      	movs	r2, #0
 80092a4:	4650      	mov	r0, sl
 80092a6:	4659      	mov	r1, fp
 80092a8:	f7f7 f9be 	bl	8000628 <__aeabi_dmul>
 80092ac:	4b2d      	ldr	r3, [pc, #180]	; (8009364 <_dtoa_r+0x624>)
 80092ae:	4682      	mov	sl, r0
 80092b0:	468b      	mov	fp, r1
 80092b2:	4640      	mov	r0, r8
 80092b4:	4649      	mov	r1, r9
 80092b6:	2200      	movs	r2, #0
 80092b8:	f7f7 f9b6 	bl	8000628 <__aeabi_dmul>
 80092bc:	4680      	mov	r8, r0
 80092be:	4689      	mov	r9, r1
 80092c0:	e7c6      	b.n	8009250 <_dtoa_r+0x510>
 80092c2:	4650      	mov	r0, sl
 80092c4:	4659      	mov	r1, fp
 80092c6:	f7f7 f9af 	bl	8000628 <__aeabi_dmul>
 80092ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092cc:	9d01      	ldr	r5, [sp, #4]
 80092ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80092d0:	4682      	mov	sl, r0
 80092d2:	468b      	mov	fp, r1
 80092d4:	4649      	mov	r1, r9
 80092d6:	4640      	mov	r0, r8
 80092d8:	f7f7 fc56 	bl	8000b88 <__aeabi_d2iz>
 80092dc:	4606      	mov	r6, r0
 80092de:	f7f7 f939 	bl	8000554 <__aeabi_i2d>
 80092e2:	3630      	adds	r6, #48	; 0x30
 80092e4:	4602      	mov	r2, r0
 80092e6:	460b      	mov	r3, r1
 80092e8:	4640      	mov	r0, r8
 80092ea:	4649      	mov	r1, r9
 80092ec:	f7f6 ffe4 	bl	80002b8 <__aeabi_dsub>
 80092f0:	f805 6b01 	strb.w	r6, [r5], #1
 80092f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092f6:	429d      	cmp	r5, r3
 80092f8:	4680      	mov	r8, r0
 80092fa:	4689      	mov	r9, r1
 80092fc:	f04f 0200 	mov.w	r2, #0
 8009300:	d124      	bne.n	800934c <_dtoa_r+0x60c>
 8009302:	4b1b      	ldr	r3, [pc, #108]	; (8009370 <_dtoa_r+0x630>)
 8009304:	4650      	mov	r0, sl
 8009306:	4659      	mov	r1, fp
 8009308:	f7f6 ffd8 	bl	80002bc <__adddf3>
 800930c:	4602      	mov	r2, r0
 800930e:	460b      	mov	r3, r1
 8009310:	4640      	mov	r0, r8
 8009312:	4649      	mov	r1, r9
 8009314:	f7f7 fc18 	bl	8000b48 <__aeabi_dcmpgt>
 8009318:	2800      	cmp	r0, #0
 800931a:	d173      	bne.n	8009404 <_dtoa_r+0x6c4>
 800931c:	4652      	mov	r2, sl
 800931e:	465b      	mov	r3, fp
 8009320:	4913      	ldr	r1, [pc, #76]	; (8009370 <_dtoa_r+0x630>)
 8009322:	2000      	movs	r0, #0
 8009324:	f7f6 ffc8 	bl	80002b8 <__aeabi_dsub>
 8009328:	4602      	mov	r2, r0
 800932a:	460b      	mov	r3, r1
 800932c:	4640      	mov	r0, r8
 800932e:	4649      	mov	r1, r9
 8009330:	f7f7 fbec 	bl	8000b0c <__aeabi_dcmplt>
 8009334:	2800      	cmp	r0, #0
 8009336:	f43f af35 	beq.w	80091a4 <_dtoa_r+0x464>
 800933a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800933c:	1e6b      	subs	r3, r5, #1
 800933e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009340:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009344:	2b30      	cmp	r3, #48	; 0x30
 8009346:	d0f8      	beq.n	800933a <_dtoa_r+0x5fa>
 8009348:	9700      	str	r7, [sp, #0]
 800934a:	e049      	b.n	80093e0 <_dtoa_r+0x6a0>
 800934c:	4b05      	ldr	r3, [pc, #20]	; (8009364 <_dtoa_r+0x624>)
 800934e:	f7f7 f96b 	bl	8000628 <__aeabi_dmul>
 8009352:	4680      	mov	r8, r0
 8009354:	4689      	mov	r9, r1
 8009356:	e7bd      	b.n	80092d4 <_dtoa_r+0x594>
 8009358:	0800b480 	.word	0x0800b480
 800935c:	0800b458 	.word	0x0800b458
 8009360:	3ff00000 	.word	0x3ff00000
 8009364:	40240000 	.word	0x40240000
 8009368:	401c0000 	.word	0x401c0000
 800936c:	40140000 	.word	0x40140000
 8009370:	3fe00000 	.word	0x3fe00000
 8009374:	9d01      	ldr	r5, [sp, #4]
 8009376:	4656      	mov	r6, sl
 8009378:	465f      	mov	r7, fp
 800937a:	4642      	mov	r2, r8
 800937c:	464b      	mov	r3, r9
 800937e:	4630      	mov	r0, r6
 8009380:	4639      	mov	r1, r7
 8009382:	f7f7 fa7b 	bl	800087c <__aeabi_ddiv>
 8009386:	f7f7 fbff 	bl	8000b88 <__aeabi_d2iz>
 800938a:	4682      	mov	sl, r0
 800938c:	f7f7 f8e2 	bl	8000554 <__aeabi_i2d>
 8009390:	4642      	mov	r2, r8
 8009392:	464b      	mov	r3, r9
 8009394:	f7f7 f948 	bl	8000628 <__aeabi_dmul>
 8009398:	4602      	mov	r2, r0
 800939a:	460b      	mov	r3, r1
 800939c:	4630      	mov	r0, r6
 800939e:	4639      	mov	r1, r7
 80093a0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80093a4:	f7f6 ff88 	bl	80002b8 <__aeabi_dsub>
 80093a8:	f805 6b01 	strb.w	r6, [r5], #1
 80093ac:	9e01      	ldr	r6, [sp, #4]
 80093ae:	9f03      	ldr	r7, [sp, #12]
 80093b0:	1bae      	subs	r6, r5, r6
 80093b2:	42b7      	cmp	r7, r6
 80093b4:	4602      	mov	r2, r0
 80093b6:	460b      	mov	r3, r1
 80093b8:	d135      	bne.n	8009426 <_dtoa_r+0x6e6>
 80093ba:	f7f6 ff7f 	bl	80002bc <__adddf3>
 80093be:	4642      	mov	r2, r8
 80093c0:	464b      	mov	r3, r9
 80093c2:	4606      	mov	r6, r0
 80093c4:	460f      	mov	r7, r1
 80093c6:	f7f7 fbbf 	bl	8000b48 <__aeabi_dcmpgt>
 80093ca:	b9d0      	cbnz	r0, 8009402 <_dtoa_r+0x6c2>
 80093cc:	4642      	mov	r2, r8
 80093ce:	464b      	mov	r3, r9
 80093d0:	4630      	mov	r0, r6
 80093d2:	4639      	mov	r1, r7
 80093d4:	f7f7 fb90 	bl	8000af8 <__aeabi_dcmpeq>
 80093d8:	b110      	cbz	r0, 80093e0 <_dtoa_r+0x6a0>
 80093da:	f01a 0f01 	tst.w	sl, #1
 80093de:	d110      	bne.n	8009402 <_dtoa_r+0x6c2>
 80093e0:	4620      	mov	r0, r4
 80093e2:	ee18 1a10 	vmov	r1, s16
 80093e6:	f000 fd17 	bl	8009e18 <_Bfree>
 80093ea:	2300      	movs	r3, #0
 80093ec:	9800      	ldr	r0, [sp, #0]
 80093ee:	702b      	strb	r3, [r5, #0]
 80093f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093f2:	3001      	adds	r0, #1
 80093f4:	6018      	str	r0, [r3, #0]
 80093f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	f43f acf1 	beq.w	8008de0 <_dtoa_r+0xa0>
 80093fe:	601d      	str	r5, [r3, #0]
 8009400:	e4ee      	b.n	8008de0 <_dtoa_r+0xa0>
 8009402:	9f00      	ldr	r7, [sp, #0]
 8009404:	462b      	mov	r3, r5
 8009406:	461d      	mov	r5, r3
 8009408:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800940c:	2a39      	cmp	r2, #57	; 0x39
 800940e:	d106      	bne.n	800941e <_dtoa_r+0x6de>
 8009410:	9a01      	ldr	r2, [sp, #4]
 8009412:	429a      	cmp	r2, r3
 8009414:	d1f7      	bne.n	8009406 <_dtoa_r+0x6c6>
 8009416:	9901      	ldr	r1, [sp, #4]
 8009418:	2230      	movs	r2, #48	; 0x30
 800941a:	3701      	adds	r7, #1
 800941c:	700a      	strb	r2, [r1, #0]
 800941e:	781a      	ldrb	r2, [r3, #0]
 8009420:	3201      	adds	r2, #1
 8009422:	701a      	strb	r2, [r3, #0]
 8009424:	e790      	b.n	8009348 <_dtoa_r+0x608>
 8009426:	4ba6      	ldr	r3, [pc, #664]	; (80096c0 <_dtoa_r+0x980>)
 8009428:	2200      	movs	r2, #0
 800942a:	f7f7 f8fd 	bl	8000628 <__aeabi_dmul>
 800942e:	2200      	movs	r2, #0
 8009430:	2300      	movs	r3, #0
 8009432:	4606      	mov	r6, r0
 8009434:	460f      	mov	r7, r1
 8009436:	f7f7 fb5f 	bl	8000af8 <__aeabi_dcmpeq>
 800943a:	2800      	cmp	r0, #0
 800943c:	d09d      	beq.n	800937a <_dtoa_r+0x63a>
 800943e:	e7cf      	b.n	80093e0 <_dtoa_r+0x6a0>
 8009440:	9a08      	ldr	r2, [sp, #32]
 8009442:	2a00      	cmp	r2, #0
 8009444:	f000 80d7 	beq.w	80095f6 <_dtoa_r+0x8b6>
 8009448:	9a06      	ldr	r2, [sp, #24]
 800944a:	2a01      	cmp	r2, #1
 800944c:	f300 80ba 	bgt.w	80095c4 <_dtoa_r+0x884>
 8009450:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009452:	2a00      	cmp	r2, #0
 8009454:	f000 80b2 	beq.w	80095bc <_dtoa_r+0x87c>
 8009458:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800945c:	9e07      	ldr	r6, [sp, #28]
 800945e:	9d04      	ldr	r5, [sp, #16]
 8009460:	9a04      	ldr	r2, [sp, #16]
 8009462:	441a      	add	r2, r3
 8009464:	9204      	str	r2, [sp, #16]
 8009466:	9a05      	ldr	r2, [sp, #20]
 8009468:	2101      	movs	r1, #1
 800946a:	441a      	add	r2, r3
 800946c:	4620      	mov	r0, r4
 800946e:	9205      	str	r2, [sp, #20]
 8009470:	f000 fd8a 	bl	8009f88 <__i2b>
 8009474:	4607      	mov	r7, r0
 8009476:	2d00      	cmp	r5, #0
 8009478:	dd0c      	ble.n	8009494 <_dtoa_r+0x754>
 800947a:	9b05      	ldr	r3, [sp, #20]
 800947c:	2b00      	cmp	r3, #0
 800947e:	dd09      	ble.n	8009494 <_dtoa_r+0x754>
 8009480:	42ab      	cmp	r3, r5
 8009482:	9a04      	ldr	r2, [sp, #16]
 8009484:	bfa8      	it	ge
 8009486:	462b      	movge	r3, r5
 8009488:	1ad2      	subs	r2, r2, r3
 800948a:	9204      	str	r2, [sp, #16]
 800948c:	9a05      	ldr	r2, [sp, #20]
 800948e:	1aed      	subs	r5, r5, r3
 8009490:	1ad3      	subs	r3, r2, r3
 8009492:	9305      	str	r3, [sp, #20]
 8009494:	9b07      	ldr	r3, [sp, #28]
 8009496:	b31b      	cbz	r3, 80094e0 <_dtoa_r+0x7a0>
 8009498:	9b08      	ldr	r3, [sp, #32]
 800949a:	2b00      	cmp	r3, #0
 800949c:	f000 80af 	beq.w	80095fe <_dtoa_r+0x8be>
 80094a0:	2e00      	cmp	r6, #0
 80094a2:	dd13      	ble.n	80094cc <_dtoa_r+0x78c>
 80094a4:	4639      	mov	r1, r7
 80094a6:	4632      	mov	r2, r6
 80094a8:	4620      	mov	r0, r4
 80094aa:	f000 fe2d 	bl	800a108 <__pow5mult>
 80094ae:	ee18 2a10 	vmov	r2, s16
 80094b2:	4601      	mov	r1, r0
 80094b4:	4607      	mov	r7, r0
 80094b6:	4620      	mov	r0, r4
 80094b8:	f000 fd7c 	bl	8009fb4 <__multiply>
 80094bc:	ee18 1a10 	vmov	r1, s16
 80094c0:	4680      	mov	r8, r0
 80094c2:	4620      	mov	r0, r4
 80094c4:	f000 fca8 	bl	8009e18 <_Bfree>
 80094c8:	ee08 8a10 	vmov	s16, r8
 80094cc:	9b07      	ldr	r3, [sp, #28]
 80094ce:	1b9a      	subs	r2, r3, r6
 80094d0:	d006      	beq.n	80094e0 <_dtoa_r+0x7a0>
 80094d2:	ee18 1a10 	vmov	r1, s16
 80094d6:	4620      	mov	r0, r4
 80094d8:	f000 fe16 	bl	800a108 <__pow5mult>
 80094dc:	ee08 0a10 	vmov	s16, r0
 80094e0:	2101      	movs	r1, #1
 80094e2:	4620      	mov	r0, r4
 80094e4:	f000 fd50 	bl	8009f88 <__i2b>
 80094e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	4606      	mov	r6, r0
 80094ee:	f340 8088 	ble.w	8009602 <_dtoa_r+0x8c2>
 80094f2:	461a      	mov	r2, r3
 80094f4:	4601      	mov	r1, r0
 80094f6:	4620      	mov	r0, r4
 80094f8:	f000 fe06 	bl	800a108 <__pow5mult>
 80094fc:	9b06      	ldr	r3, [sp, #24]
 80094fe:	2b01      	cmp	r3, #1
 8009500:	4606      	mov	r6, r0
 8009502:	f340 8081 	ble.w	8009608 <_dtoa_r+0x8c8>
 8009506:	f04f 0800 	mov.w	r8, #0
 800950a:	6933      	ldr	r3, [r6, #16]
 800950c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009510:	6918      	ldr	r0, [r3, #16]
 8009512:	f000 fce9 	bl	8009ee8 <__hi0bits>
 8009516:	f1c0 0020 	rsb	r0, r0, #32
 800951a:	9b05      	ldr	r3, [sp, #20]
 800951c:	4418      	add	r0, r3
 800951e:	f010 001f 	ands.w	r0, r0, #31
 8009522:	f000 8092 	beq.w	800964a <_dtoa_r+0x90a>
 8009526:	f1c0 0320 	rsb	r3, r0, #32
 800952a:	2b04      	cmp	r3, #4
 800952c:	f340 808a 	ble.w	8009644 <_dtoa_r+0x904>
 8009530:	f1c0 001c 	rsb	r0, r0, #28
 8009534:	9b04      	ldr	r3, [sp, #16]
 8009536:	4403      	add	r3, r0
 8009538:	9304      	str	r3, [sp, #16]
 800953a:	9b05      	ldr	r3, [sp, #20]
 800953c:	4403      	add	r3, r0
 800953e:	4405      	add	r5, r0
 8009540:	9305      	str	r3, [sp, #20]
 8009542:	9b04      	ldr	r3, [sp, #16]
 8009544:	2b00      	cmp	r3, #0
 8009546:	dd07      	ble.n	8009558 <_dtoa_r+0x818>
 8009548:	ee18 1a10 	vmov	r1, s16
 800954c:	461a      	mov	r2, r3
 800954e:	4620      	mov	r0, r4
 8009550:	f000 fe34 	bl	800a1bc <__lshift>
 8009554:	ee08 0a10 	vmov	s16, r0
 8009558:	9b05      	ldr	r3, [sp, #20]
 800955a:	2b00      	cmp	r3, #0
 800955c:	dd05      	ble.n	800956a <_dtoa_r+0x82a>
 800955e:	4631      	mov	r1, r6
 8009560:	461a      	mov	r2, r3
 8009562:	4620      	mov	r0, r4
 8009564:	f000 fe2a 	bl	800a1bc <__lshift>
 8009568:	4606      	mov	r6, r0
 800956a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800956c:	2b00      	cmp	r3, #0
 800956e:	d06e      	beq.n	800964e <_dtoa_r+0x90e>
 8009570:	ee18 0a10 	vmov	r0, s16
 8009574:	4631      	mov	r1, r6
 8009576:	f000 fe91 	bl	800a29c <__mcmp>
 800957a:	2800      	cmp	r0, #0
 800957c:	da67      	bge.n	800964e <_dtoa_r+0x90e>
 800957e:	9b00      	ldr	r3, [sp, #0]
 8009580:	3b01      	subs	r3, #1
 8009582:	ee18 1a10 	vmov	r1, s16
 8009586:	9300      	str	r3, [sp, #0]
 8009588:	220a      	movs	r2, #10
 800958a:	2300      	movs	r3, #0
 800958c:	4620      	mov	r0, r4
 800958e:	f000 fc65 	bl	8009e5c <__multadd>
 8009592:	9b08      	ldr	r3, [sp, #32]
 8009594:	ee08 0a10 	vmov	s16, r0
 8009598:	2b00      	cmp	r3, #0
 800959a:	f000 81b1 	beq.w	8009900 <_dtoa_r+0xbc0>
 800959e:	2300      	movs	r3, #0
 80095a0:	4639      	mov	r1, r7
 80095a2:	220a      	movs	r2, #10
 80095a4:	4620      	mov	r0, r4
 80095a6:	f000 fc59 	bl	8009e5c <__multadd>
 80095aa:	9b02      	ldr	r3, [sp, #8]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	4607      	mov	r7, r0
 80095b0:	f300 808e 	bgt.w	80096d0 <_dtoa_r+0x990>
 80095b4:	9b06      	ldr	r3, [sp, #24]
 80095b6:	2b02      	cmp	r3, #2
 80095b8:	dc51      	bgt.n	800965e <_dtoa_r+0x91e>
 80095ba:	e089      	b.n	80096d0 <_dtoa_r+0x990>
 80095bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80095be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80095c2:	e74b      	b.n	800945c <_dtoa_r+0x71c>
 80095c4:	9b03      	ldr	r3, [sp, #12]
 80095c6:	1e5e      	subs	r6, r3, #1
 80095c8:	9b07      	ldr	r3, [sp, #28]
 80095ca:	42b3      	cmp	r3, r6
 80095cc:	bfbf      	itttt	lt
 80095ce:	9b07      	ldrlt	r3, [sp, #28]
 80095d0:	9607      	strlt	r6, [sp, #28]
 80095d2:	1af2      	sublt	r2, r6, r3
 80095d4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80095d6:	bfb6      	itet	lt
 80095d8:	189b      	addlt	r3, r3, r2
 80095da:	1b9e      	subge	r6, r3, r6
 80095dc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80095de:	9b03      	ldr	r3, [sp, #12]
 80095e0:	bfb8      	it	lt
 80095e2:	2600      	movlt	r6, #0
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	bfb7      	itett	lt
 80095e8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80095ec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80095f0:	1a9d      	sublt	r5, r3, r2
 80095f2:	2300      	movlt	r3, #0
 80095f4:	e734      	b.n	8009460 <_dtoa_r+0x720>
 80095f6:	9e07      	ldr	r6, [sp, #28]
 80095f8:	9d04      	ldr	r5, [sp, #16]
 80095fa:	9f08      	ldr	r7, [sp, #32]
 80095fc:	e73b      	b.n	8009476 <_dtoa_r+0x736>
 80095fe:	9a07      	ldr	r2, [sp, #28]
 8009600:	e767      	b.n	80094d2 <_dtoa_r+0x792>
 8009602:	9b06      	ldr	r3, [sp, #24]
 8009604:	2b01      	cmp	r3, #1
 8009606:	dc18      	bgt.n	800963a <_dtoa_r+0x8fa>
 8009608:	f1ba 0f00 	cmp.w	sl, #0
 800960c:	d115      	bne.n	800963a <_dtoa_r+0x8fa>
 800960e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009612:	b993      	cbnz	r3, 800963a <_dtoa_r+0x8fa>
 8009614:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009618:	0d1b      	lsrs	r3, r3, #20
 800961a:	051b      	lsls	r3, r3, #20
 800961c:	b183      	cbz	r3, 8009640 <_dtoa_r+0x900>
 800961e:	9b04      	ldr	r3, [sp, #16]
 8009620:	3301      	adds	r3, #1
 8009622:	9304      	str	r3, [sp, #16]
 8009624:	9b05      	ldr	r3, [sp, #20]
 8009626:	3301      	adds	r3, #1
 8009628:	9305      	str	r3, [sp, #20]
 800962a:	f04f 0801 	mov.w	r8, #1
 800962e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009630:	2b00      	cmp	r3, #0
 8009632:	f47f af6a 	bne.w	800950a <_dtoa_r+0x7ca>
 8009636:	2001      	movs	r0, #1
 8009638:	e76f      	b.n	800951a <_dtoa_r+0x7da>
 800963a:	f04f 0800 	mov.w	r8, #0
 800963e:	e7f6      	b.n	800962e <_dtoa_r+0x8ee>
 8009640:	4698      	mov	r8, r3
 8009642:	e7f4      	b.n	800962e <_dtoa_r+0x8ee>
 8009644:	f43f af7d 	beq.w	8009542 <_dtoa_r+0x802>
 8009648:	4618      	mov	r0, r3
 800964a:	301c      	adds	r0, #28
 800964c:	e772      	b.n	8009534 <_dtoa_r+0x7f4>
 800964e:	9b03      	ldr	r3, [sp, #12]
 8009650:	2b00      	cmp	r3, #0
 8009652:	dc37      	bgt.n	80096c4 <_dtoa_r+0x984>
 8009654:	9b06      	ldr	r3, [sp, #24]
 8009656:	2b02      	cmp	r3, #2
 8009658:	dd34      	ble.n	80096c4 <_dtoa_r+0x984>
 800965a:	9b03      	ldr	r3, [sp, #12]
 800965c:	9302      	str	r3, [sp, #8]
 800965e:	9b02      	ldr	r3, [sp, #8]
 8009660:	b96b      	cbnz	r3, 800967e <_dtoa_r+0x93e>
 8009662:	4631      	mov	r1, r6
 8009664:	2205      	movs	r2, #5
 8009666:	4620      	mov	r0, r4
 8009668:	f000 fbf8 	bl	8009e5c <__multadd>
 800966c:	4601      	mov	r1, r0
 800966e:	4606      	mov	r6, r0
 8009670:	ee18 0a10 	vmov	r0, s16
 8009674:	f000 fe12 	bl	800a29c <__mcmp>
 8009678:	2800      	cmp	r0, #0
 800967a:	f73f adbb 	bgt.w	80091f4 <_dtoa_r+0x4b4>
 800967e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009680:	9d01      	ldr	r5, [sp, #4]
 8009682:	43db      	mvns	r3, r3
 8009684:	9300      	str	r3, [sp, #0]
 8009686:	f04f 0800 	mov.w	r8, #0
 800968a:	4631      	mov	r1, r6
 800968c:	4620      	mov	r0, r4
 800968e:	f000 fbc3 	bl	8009e18 <_Bfree>
 8009692:	2f00      	cmp	r7, #0
 8009694:	f43f aea4 	beq.w	80093e0 <_dtoa_r+0x6a0>
 8009698:	f1b8 0f00 	cmp.w	r8, #0
 800969c:	d005      	beq.n	80096aa <_dtoa_r+0x96a>
 800969e:	45b8      	cmp	r8, r7
 80096a0:	d003      	beq.n	80096aa <_dtoa_r+0x96a>
 80096a2:	4641      	mov	r1, r8
 80096a4:	4620      	mov	r0, r4
 80096a6:	f000 fbb7 	bl	8009e18 <_Bfree>
 80096aa:	4639      	mov	r1, r7
 80096ac:	4620      	mov	r0, r4
 80096ae:	f000 fbb3 	bl	8009e18 <_Bfree>
 80096b2:	e695      	b.n	80093e0 <_dtoa_r+0x6a0>
 80096b4:	2600      	movs	r6, #0
 80096b6:	4637      	mov	r7, r6
 80096b8:	e7e1      	b.n	800967e <_dtoa_r+0x93e>
 80096ba:	9700      	str	r7, [sp, #0]
 80096bc:	4637      	mov	r7, r6
 80096be:	e599      	b.n	80091f4 <_dtoa_r+0x4b4>
 80096c0:	40240000 	.word	0x40240000
 80096c4:	9b08      	ldr	r3, [sp, #32]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	f000 80ca 	beq.w	8009860 <_dtoa_r+0xb20>
 80096cc:	9b03      	ldr	r3, [sp, #12]
 80096ce:	9302      	str	r3, [sp, #8]
 80096d0:	2d00      	cmp	r5, #0
 80096d2:	dd05      	ble.n	80096e0 <_dtoa_r+0x9a0>
 80096d4:	4639      	mov	r1, r7
 80096d6:	462a      	mov	r2, r5
 80096d8:	4620      	mov	r0, r4
 80096da:	f000 fd6f 	bl	800a1bc <__lshift>
 80096de:	4607      	mov	r7, r0
 80096e0:	f1b8 0f00 	cmp.w	r8, #0
 80096e4:	d05b      	beq.n	800979e <_dtoa_r+0xa5e>
 80096e6:	6879      	ldr	r1, [r7, #4]
 80096e8:	4620      	mov	r0, r4
 80096ea:	f000 fb55 	bl	8009d98 <_Balloc>
 80096ee:	4605      	mov	r5, r0
 80096f0:	b928      	cbnz	r0, 80096fe <_dtoa_r+0x9be>
 80096f2:	4b87      	ldr	r3, [pc, #540]	; (8009910 <_dtoa_r+0xbd0>)
 80096f4:	4602      	mov	r2, r0
 80096f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80096fa:	f7ff bb3b 	b.w	8008d74 <_dtoa_r+0x34>
 80096fe:	693a      	ldr	r2, [r7, #16]
 8009700:	3202      	adds	r2, #2
 8009702:	0092      	lsls	r2, r2, #2
 8009704:	f107 010c 	add.w	r1, r7, #12
 8009708:	300c      	adds	r0, #12
 800970a:	f000 fb2b 	bl	8009d64 <memcpy>
 800970e:	2201      	movs	r2, #1
 8009710:	4629      	mov	r1, r5
 8009712:	4620      	mov	r0, r4
 8009714:	f000 fd52 	bl	800a1bc <__lshift>
 8009718:	9b01      	ldr	r3, [sp, #4]
 800971a:	f103 0901 	add.w	r9, r3, #1
 800971e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009722:	4413      	add	r3, r2
 8009724:	9305      	str	r3, [sp, #20]
 8009726:	f00a 0301 	and.w	r3, sl, #1
 800972a:	46b8      	mov	r8, r7
 800972c:	9304      	str	r3, [sp, #16]
 800972e:	4607      	mov	r7, r0
 8009730:	4631      	mov	r1, r6
 8009732:	ee18 0a10 	vmov	r0, s16
 8009736:	f7ff fa75 	bl	8008c24 <quorem>
 800973a:	4641      	mov	r1, r8
 800973c:	9002      	str	r0, [sp, #8]
 800973e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009742:	ee18 0a10 	vmov	r0, s16
 8009746:	f000 fda9 	bl	800a29c <__mcmp>
 800974a:	463a      	mov	r2, r7
 800974c:	9003      	str	r0, [sp, #12]
 800974e:	4631      	mov	r1, r6
 8009750:	4620      	mov	r0, r4
 8009752:	f000 fdbf 	bl	800a2d4 <__mdiff>
 8009756:	68c2      	ldr	r2, [r0, #12]
 8009758:	f109 3bff 	add.w	fp, r9, #4294967295
 800975c:	4605      	mov	r5, r0
 800975e:	bb02      	cbnz	r2, 80097a2 <_dtoa_r+0xa62>
 8009760:	4601      	mov	r1, r0
 8009762:	ee18 0a10 	vmov	r0, s16
 8009766:	f000 fd99 	bl	800a29c <__mcmp>
 800976a:	4602      	mov	r2, r0
 800976c:	4629      	mov	r1, r5
 800976e:	4620      	mov	r0, r4
 8009770:	9207      	str	r2, [sp, #28]
 8009772:	f000 fb51 	bl	8009e18 <_Bfree>
 8009776:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800977a:	ea43 0102 	orr.w	r1, r3, r2
 800977e:	9b04      	ldr	r3, [sp, #16]
 8009780:	430b      	orrs	r3, r1
 8009782:	464d      	mov	r5, r9
 8009784:	d10f      	bne.n	80097a6 <_dtoa_r+0xa66>
 8009786:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800978a:	d02a      	beq.n	80097e2 <_dtoa_r+0xaa2>
 800978c:	9b03      	ldr	r3, [sp, #12]
 800978e:	2b00      	cmp	r3, #0
 8009790:	dd02      	ble.n	8009798 <_dtoa_r+0xa58>
 8009792:	9b02      	ldr	r3, [sp, #8]
 8009794:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009798:	f88b a000 	strb.w	sl, [fp]
 800979c:	e775      	b.n	800968a <_dtoa_r+0x94a>
 800979e:	4638      	mov	r0, r7
 80097a0:	e7ba      	b.n	8009718 <_dtoa_r+0x9d8>
 80097a2:	2201      	movs	r2, #1
 80097a4:	e7e2      	b.n	800976c <_dtoa_r+0xa2c>
 80097a6:	9b03      	ldr	r3, [sp, #12]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	db04      	blt.n	80097b6 <_dtoa_r+0xa76>
 80097ac:	9906      	ldr	r1, [sp, #24]
 80097ae:	430b      	orrs	r3, r1
 80097b0:	9904      	ldr	r1, [sp, #16]
 80097b2:	430b      	orrs	r3, r1
 80097b4:	d122      	bne.n	80097fc <_dtoa_r+0xabc>
 80097b6:	2a00      	cmp	r2, #0
 80097b8:	ddee      	ble.n	8009798 <_dtoa_r+0xa58>
 80097ba:	ee18 1a10 	vmov	r1, s16
 80097be:	2201      	movs	r2, #1
 80097c0:	4620      	mov	r0, r4
 80097c2:	f000 fcfb 	bl	800a1bc <__lshift>
 80097c6:	4631      	mov	r1, r6
 80097c8:	ee08 0a10 	vmov	s16, r0
 80097cc:	f000 fd66 	bl	800a29c <__mcmp>
 80097d0:	2800      	cmp	r0, #0
 80097d2:	dc03      	bgt.n	80097dc <_dtoa_r+0xa9c>
 80097d4:	d1e0      	bne.n	8009798 <_dtoa_r+0xa58>
 80097d6:	f01a 0f01 	tst.w	sl, #1
 80097da:	d0dd      	beq.n	8009798 <_dtoa_r+0xa58>
 80097dc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80097e0:	d1d7      	bne.n	8009792 <_dtoa_r+0xa52>
 80097e2:	2339      	movs	r3, #57	; 0x39
 80097e4:	f88b 3000 	strb.w	r3, [fp]
 80097e8:	462b      	mov	r3, r5
 80097ea:	461d      	mov	r5, r3
 80097ec:	3b01      	subs	r3, #1
 80097ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80097f2:	2a39      	cmp	r2, #57	; 0x39
 80097f4:	d071      	beq.n	80098da <_dtoa_r+0xb9a>
 80097f6:	3201      	adds	r2, #1
 80097f8:	701a      	strb	r2, [r3, #0]
 80097fa:	e746      	b.n	800968a <_dtoa_r+0x94a>
 80097fc:	2a00      	cmp	r2, #0
 80097fe:	dd07      	ble.n	8009810 <_dtoa_r+0xad0>
 8009800:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009804:	d0ed      	beq.n	80097e2 <_dtoa_r+0xaa2>
 8009806:	f10a 0301 	add.w	r3, sl, #1
 800980a:	f88b 3000 	strb.w	r3, [fp]
 800980e:	e73c      	b.n	800968a <_dtoa_r+0x94a>
 8009810:	9b05      	ldr	r3, [sp, #20]
 8009812:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009816:	4599      	cmp	r9, r3
 8009818:	d047      	beq.n	80098aa <_dtoa_r+0xb6a>
 800981a:	ee18 1a10 	vmov	r1, s16
 800981e:	2300      	movs	r3, #0
 8009820:	220a      	movs	r2, #10
 8009822:	4620      	mov	r0, r4
 8009824:	f000 fb1a 	bl	8009e5c <__multadd>
 8009828:	45b8      	cmp	r8, r7
 800982a:	ee08 0a10 	vmov	s16, r0
 800982e:	f04f 0300 	mov.w	r3, #0
 8009832:	f04f 020a 	mov.w	r2, #10
 8009836:	4641      	mov	r1, r8
 8009838:	4620      	mov	r0, r4
 800983a:	d106      	bne.n	800984a <_dtoa_r+0xb0a>
 800983c:	f000 fb0e 	bl	8009e5c <__multadd>
 8009840:	4680      	mov	r8, r0
 8009842:	4607      	mov	r7, r0
 8009844:	f109 0901 	add.w	r9, r9, #1
 8009848:	e772      	b.n	8009730 <_dtoa_r+0x9f0>
 800984a:	f000 fb07 	bl	8009e5c <__multadd>
 800984e:	4639      	mov	r1, r7
 8009850:	4680      	mov	r8, r0
 8009852:	2300      	movs	r3, #0
 8009854:	220a      	movs	r2, #10
 8009856:	4620      	mov	r0, r4
 8009858:	f000 fb00 	bl	8009e5c <__multadd>
 800985c:	4607      	mov	r7, r0
 800985e:	e7f1      	b.n	8009844 <_dtoa_r+0xb04>
 8009860:	9b03      	ldr	r3, [sp, #12]
 8009862:	9302      	str	r3, [sp, #8]
 8009864:	9d01      	ldr	r5, [sp, #4]
 8009866:	ee18 0a10 	vmov	r0, s16
 800986a:	4631      	mov	r1, r6
 800986c:	f7ff f9da 	bl	8008c24 <quorem>
 8009870:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009874:	9b01      	ldr	r3, [sp, #4]
 8009876:	f805 ab01 	strb.w	sl, [r5], #1
 800987a:	1aea      	subs	r2, r5, r3
 800987c:	9b02      	ldr	r3, [sp, #8]
 800987e:	4293      	cmp	r3, r2
 8009880:	dd09      	ble.n	8009896 <_dtoa_r+0xb56>
 8009882:	ee18 1a10 	vmov	r1, s16
 8009886:	2300      	movs	r3, #0
 8009888:	220a      	movs	r2, #10
 800988a:	4620      	mov	r0, r4
 800988c:	f000 fae6 	bl	8009e5c <__multadd>
 8009890:	ee08 0a10 	vmov	s16, r0
 8009894:	e7e7      	b.n	8009866 <_dtoa_r+0xb26>
 8009896:	9b02      	ldr	r3, [sp, #8]
 8009898:	2b00      	cmp	r3, #0
 800989a:	bfc8      	it	gt
 800989c:	461d      	movgt	r5, r3
 800989e:	9b01      	ldr	r3, [sp, #4]
 80098a0:	bfd8      	it	le
 80098a2:	2501      	movle	r5, #1
 80098a4:	441d      	add	r5, r3
 80098a6:	f04f 0800 	mov.w	r8, #0
 80098aa:	ee18 1a10 	vmov	r1, s16
 80098ae:	2201      	movs	r2, #1
 80098b0:	4620      	mov	r0, r4
 80098b2:	f000 fc83 	bl	800a1bc <__lshift>
 80098b6:	4631      	mov	r1, r6
 80098b8:	ee08 0a10 	vmov	s16, r0
 80098bc:	f000 fcee 	bl	800a29c <__mcmp>
 80098c0:	2800      	cmp	r0, #0
 80098c2:	dc91      	bgt.n	80097e8 <_dtoa_r+0xaa8>
 80098c4:	d102      	bne.n	80098cc <_dtoa_r+0xb8c>
 80098c6:	f01a 0f01 	tst.w	sl, #1
 80098ca:	d18d      	bne.n	80097e8 <_dtoa_r+0xaa8>
 80098cc:	462b      	mov	r3, r5
 80098ce:	461d      	mov	r5, r3
 80098d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80098d4:	2a30      	cmp	r2, #48	; 0x30
 80098d6:	d0fa      	beq.n	80098ce <_dtoa_r+0xb8e>
 80098d8:	e6d7      	b.n	800968a <_dtoa_r+0x94a>
 80098da:	9a01      	ldr	r2, [sp, #4]
 80098dc:	429a      	cmp	r2, r3
 80098de:	d184      	bne.n	80097ea <_dtoa_r+0xaaa>
 80098e0:	9b00      	ldr	r3, [sp, #0]
 80098e2:	3301      	adds	r3, #1
 80098e4:	9300      	str	r3, [sp, #0]
 80098e6:	2331      	movs	r3, #49	; 0x31
 80098e8:	7013      	strb	r3, [r2, #0]
 80098ea:	e6ce      	b.n	800968a <_dtoa_r+0x94a>
 80098ec:	4b09      	ldr	r3, [pc, #36]	; (8009914 <_dtoa_r+0xbd4>)
 80098ee:	f7ff ba95 	b.w	8008e1c <_dtoa_r+0xdc>
 80098f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	f47f aa6e 	bne.w	8008dd6 <_dtoa_r+0x96>
 80098fa:	4b07      	ldr	r3, [pc, #28]	; (8009918 <_dtoa_r+0xbd8>)
 80098fc:	f7ff ba8e 	b.w	8008e1c <_dtoa_r+0xdc>
 8009900:	9b02      	ldr	r3, [sp, #8]
 8009902:	2b00      	cmp	r3, #0
 8009904:	dcae      	bgt.n	8009864 <_dtoa_r+0xb24>
 8009906:	9b06      	ldr	r3, [sp, #24]
 8009908:	2b02      	cmp	r3, #2
 800990a:	f73f aea8 	bgt.w	800965e <_dtoa_r+0x91e>
 800990e:	e7a9      	b.n	8009864 <_dtoa_r+0xb24>
 8009910:	0800b38b 	.word	0x0800b38b
 8009914:	0800b2e8 	.word	0x0800b2e8
 8009918:	0800b30c 	.word	0x0800b30c

0800991c <__sflush_r>:
 800991c:	898a      	ldrh	r2, [r1, #12]
 800991e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009922:	4605      	mov	r5, r0
 8009924:	0710      	lsls	r0, r2, #28
 8009926:	460c      	mov	r4, r1
 8009928:	d458      	bmi.n	80099dc <__sflush_r+0xc0>
 800992a:	684b      	ldr	r3, [r1, #4]
 800992c:	2b00      	cmp	r3, #0
 800992e:	dc05      	bgt.n	800993c <__sflush_r+0x20>
 8009930:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009932:	2b00      	cmp	r3, #0
 8009934:	dc02      	bgt.n	800993c <__sflush_r+0x20>
 8009936:	2000      	movs	r0, #0
 8009938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800993c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800993e:	2e00      	cmp	r6, #0
 8009940:	d0f9      	beq.n	8009936 <__sflush_r+0x1a>
 8009942:	2300      	movs	r3, #0
 8009944:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009948:	682f      	ldr	r7, [r5, #0]
 800994a:	602b      	str	r3, [r5, #0]
 800994c:	d032      	beq.n	80099b4 <__sflush_r+0x98>
 800994e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009950:	89a3      	ldrh	r3, [r4, #12]
 8009952:	075a      	lsls	r2, r3, #29
 8009954:	d505      	bpl.n	8009962 <__sflush_r+0x46>
 8009956:	6863      	ldr	r3, [r4, #4]
 8009958:	1ac0      	subs	r0, r0, r3
 800995a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800995c:	b10b      	cbz	r3, 8009962 <__sflush_r+0x46>
 800995e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009960:	1ac0      	subs	r0, r0, r3
 8009962:	2300      	movs	r3, #0
 8009964:	4602      	mov	r2, r0
 8009966:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009968:	6a21      	ldr	r1, [r4, #32]
 800996a:	4628      	mov	r0, r5
 800996c:	47b0      	blx	r6
 800996e:	1c43      	adds	r3, r0, #1
 8009970:	89a3      	ldrh	r3, [r4, #12]
 8009972:	d106      	bne.n	8009982 <__sflush_r+0x66>
 8009974:	6829      	ldr	r1, [r5, #0]
 8009976:	291d      	cmp	r1, #29
 8009978:	d82c      	bhi.n	80099d4 <__sflush_r+0xb8>
 800997a:	4a2a      	ldr	r2, [pc, #168]	; (8009a24 <__sflush_r+0x108>)
 800997c:	40ca      	lsrs	r2, r1
 800997e:	07d6      	lsls	r6, r2, #31
 8009980:	d528      	bpl.n	80099d4 <__sflush_r+0xb8>
 8009982:	2200      	movs	r2, #0
 8009984:	6062      	str	r2, [r4, #4]
 8009986:	04d9      	lsls	r1, r3, #19
 8009988:	6922      	ldr	r2, [r4, #16]
 800998a:	6022      	str	r2, [r4, #0]
 800998c:	d504      	bpl.n	8009998 <__sflush_r+0x7c>
 800998e:	1c42      	adds	r2, r0, #1
 8009990:	d101      	bne.n	8009996 <__sflush_r+0x7a>
 8009992:	682b      	ldr	r3, [r5, #0]
 8009994:	b903      	cbnz	r3, 8009998 <__sflush_r+0x7c>
 8009996:	6560      	str	r0, [r4, #84]	; 0x54
 8009998:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800999a:	602f      	str	r7, [r5, #0]
 800999c:	2900      	cmp	r1, #0
 800999e:	d0ca      	beq.n	8009936 <__sflush_r+0x1a>
 80099a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099a4:	4299      	cmp	r1, r3
 80099a6:	d002      	beq.n	80099ae <__sflush_r+0x92>
 80099a8:	4628      	mov	r0, r5
 80099aa:	f7fe fa93 	bl	8007ed4 <_free_r>
 80099ae:	2000      	movs	r0, #0
 80099b0:	6360      	str	r0, [r4, #52]	; 0x34
 80099b2:	e7c1      	b.n	8009938 <__sflush_r+0x1c>
 80099b4:	6a21      	ldr	r1, [r4, #32]
 80099b6:	2301      	movs	r3, #1
 80099b8:	4628      	mov	r0, r5
 80099ba:	47b0      	blx	r6
 80099bc:	1c41      	adds	r1, r0, #1
 80099be:	d1c7      	bne.n	8009950 <__sflush_r+0x34>
 80099c0:	682b      	ldr	r3, [r5, #0]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d0c4      	beq.n	8009950 <__sflush_r+0x34>
 80099c6:	2b1d      	cmp	r3, #29
 80099c8:	d001      	beq.n	80099ce <__sflush_r+0xb2>
 80099ca:	2b16      	cmp	r3, #22
 80099cc:	d101      	bne.n	80099d2 <__sflush_r+0xb6>
 80099ce:	602f      	str	r7, [r5, #0]
 80099d0:	e7b1      	b.n	8009936 <__sflush_r+0x1a>
 80099d2:	89a3      	ldrh	r3, [r4, #12]
 80099d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099d8:	81a3      	strh	r3, [r4, #12]
 80099da:	e7ad      	b.n	8009938 <__sflush_r+0x1c>
 80099dc:	690f      	ldr	r7, [r1, #16]
 80099de:	2f00      	cmp	r7, #0
 80099e0:	d0a9      	beq.n	8009936 <__sflush_r+0x1a>
 80099e2:	0793      	lsls	r3, r2, #30
 80099e4:	680e      	ldr	r6, [r1, #0]
 80099e6:	bf08      	it	eq
 80099e8:	694b      	ldreq	r3, [r1, #20]
 80099ea:	600f      	str	r7, [r1, #0]
 80099ec:	bf18      	it	ne
 80099ee:	2300      	movne	r3, #0
 80099f0:	eba6 0807 	sub.w	r8, r6, r7
 80099f4:	608b      	str	r3, [r1, #8]
 80099f6:	f1b8 0f00 	cmp.w	r8, #0
 80099fa:	dd9c      	ble.n	8009936 <__sflush_r+0x1a>
 80099fc:	6a21      	ldr	r1, [r4, #32]
 80099fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009a00:	4643      	mov	r3, r8
 8009a02:	463a      	mov	r2, r7
 8009a04:	4628      	mov	r0, r5
 8009a06:	47b0      	blx	r6
 8009a08:	2800      	cmp	r0, #0
 8009a0a:	dc06      	bgt.n	8009a1a <__sflush_r+0xfe>
 8009a0c:	89a3      	ldrh	r3, [r4, #12]
 8009a0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a12:	81a3      	strh	r3, [r4, #12]
 8009a14:	f04f 30ff 	mov.w	r0, #4294967295
 8009a18:	e78e      	b.n	8009938 <__sflush_r+0x1c>
 8009a1a:	4407      	add	r7, r0
 8009a1c:	eba8 0800 	sub.w	r8, r8, r0
 8009a20:	e7e9      	b.n	80099f6 <__sflush_r+0xda>
 8009a22:	bf00      	nop
 8009a24:	20400001 	.word	0x20400001

08009a28 <_fflush_r>:
 8009a28:	b538      	push	{r3, r4, r5, lr}
 8009a2a:	690b      	ldr	r3, [r1, #16]
 8009a2c:	4605      	mov	r5, r0
 8009a2e:	460c      	mov	r4, r1
 8009a30:	b913      	cbnz	r3, 8009a38 <_fflush_r+0x10>
 8009a32:	2500      	movs	r5, #0
 8009a34:	4628      	mov	r0, r5
 8009a36:	bd38      	pop	{r3, r4, r5, pc}
 8009a38:	b118      	cbz	r0, 8009a42 <_fflush_r+0x1a>
 8009a3a:	6983      	ldr	r3, [r0, #24]
 8009a3c:	b90b      	cbnz	r3, 8009a42 <_fflush_r+0x1a>
 8009a3e:	f000 f887 	bl	8009b50 <__sinit>
 8009a42:	4b14      	ldr	r3, [pc, #80]	; (8009a94 <_fflush_r+0x6c>)
 8009a44:	429c      	cmp	r4, r3
 8009a46:	d11b      	bne.n	8009a80 <_fflush_r+0x58>
 8009a48:	686c      	ldr	r4, [r5, #4]
 8009a4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d0ef      	beq.n	8009a32 <_fflush_r+0xa>
 8009a52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a54:	07d0      	lsls	r0, r2, #31
 8009a56:	d404      	bmi.n	8009a62 <_fflush_r+0x3a>
 8009a58:	0599      	lsls	r1, r3, #22
 8009a5a:	d402      	bmi.n	8009a62 <_fflush_r+0x3a>
 8009a5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a5e:	f000 f91a 	bl	8009c96 <__retarget_lock_acquire_recursive>
 8009a62:	4628      	mov	r0, r5
 8009a64:	4621      	mov	r1, r4
 8009a66:	f7ff ff59 	bl	800991c <__sflush_r>
 8009a6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a6c:	07da      	lsls	r2, r3, #31
 8009a6e:	4605      	mov	r5, r0
 8009a70:	d4e0      	bmi.n	8009a34 <_fflush_r+0xc>
 8009a72:	89a3      	ldrh	r3, [r4, #12]
 8009a74:	059b      	lsls	r3, r3, #22
 8009a76:	d4dd      	bmi.n	8009a34 <_fflush_r+0xc>
 8009a78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a7a:	f000 f90d 	bl	8009c98 <__retarget_lock_release_recursive>
 8009a7e:	e7d9      	b.n	8009a34 <_fflush_r+0xc>
 8009a80:	4b05      	ldr	r3, [pc, #20]	; (8009a98 <_fflush_r+0x70>)
 8009a82:	429c      	cmp	r4, r3
 8009a84:	d101      	bne.n	8009a8a <_fflush_r+0x62>
 8009a86:	68ac      	ldr	r4, [r5, #8]
 8009a88:	e7df      	b.n	8009a4a <_fflush_r+0x22>
 8009a8a:	4b04      	ldr	r3, [pc, #16]	; (8009a9c <_fflush_r+0x74>)
 8009a8c:	429c      	cmp	r4, r3
 8009a8e:	bf08      	it	eq
 8009a90:	68ec      	ldreq	r4, [r5, #12]
 8009a92:	e7da      	b.n	8009a4a <_fflush_r+0x22>
 8009a94:	0800b3bc 	.word	0x0800b3bc
 8009a98:	0800b3dc 	.word	0x0800b3dc
 8009a9c:	0800b39c 	.word	0x0800b39c

08009aa0 <std>:
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	b510      	push	{r4, lr}
 8009aa4:	4604      	mov	r4, r0
 8009aa6:	e9c0 3300 	strd	r3, r3, [r0]
 8009aaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009aae:	6083      	str	r3, [r0, #8]
 8009ab0:	8181      	strh	r1, [r0, #12]
 8009ab2:	6643      	str	r3, [r0, #100]	; 0x64
 8009ab4:	81c2      	strh	r2, [r0, #14]
 8009ab6:	6183      	str	r3, [r0, #24]
 8009ab8:	4619      	mov	r1, r3
 8009aba:	2208      	movs	r2, #8
 8009abc:	305c      	adds	r0, #92	; 0x5c
 8009abe:	f7fe fa01 	bl	8007ec4 <memset>
 8009ac2:	4b05      	ldr	r3, [pc, #20]	; (8009ad8 <std+0x38>)
 8009ac4:	6263      	str	r3, [r4, #36]	; 0x24
 8009ac6:	4b05      	ldr	r3, [pc, #20]	; (8009adc <std+0x3c>)
 8009ac8:	62a3      	str	r3, [r4, #40]	; 0x28
 8009aca:	4b05      	ldr	r3, [pc, #20]	; (8009ae0 <std+0x40>)
 8009acc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ace:	4b05      	ldr	r3, [pc, #20]	; (8009ae4 <std+0x44>)
 8009ad0:	6224      	str	r4, [r4, #32]
 8009ad2:	6323      	str	r3, [r4, #48]	; 0x30
 8009ad4:	bd10      	pop	{r4, pc}
 8009ad6:	bf00      	nop
 8009ad8:	0800a781 	.word	0x0800a781
 8009adc:	0800a7a3 	.word	0x0800a7a3
 8009ae0:	0800a7db 	.word	0x0800a7db
 8009ae4:	0800a7ff 	.word	0x0800a7ff

08009ae8 <_cleanup_r>:
 8009ae8:	4901      	ldr	r1, [pc, #4]	; (8009af0 <_cleanup_r+0x8>)
 8009aea:	f000 b8af 	b.w	8009c4c <_fwalk_reent>
 8009aee:	bf00      	nop
 8009af0:	08009a29 	.word	0x08009a29

08009af4 <__sfmoreglue>:
 8009af4:	b570      	push	{r4, r5, r6, lr}
 8009af6:	2268      	movs	r2, #104	; 0x68
 8009af8:	1e4d      	subs	r5, r1, #1
 8009afa:	4355      	muls	r5, r2
 8009afc:	460e      	mov	r6, r1
 8009afe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009b02:	f7fe fa53 	bl	8007fac <_malloc_r>
 8009b06:	4604      	mov	r4, r0
 8009b08:	b140      	cbz	r0, 8009b1c <__sfmoreglue+0x28>
 8009b0a:	2100      	movs	r1, #0
 8009b0c:	e9c0 1600 	strd	r1, r6, [r0]
 8009b10:	300c      	adds	r0, #12
 8009b12:	60a0      	str	r0, [r4, #8]
 8009b14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009b18:	f7fe f9d4 	bl	8007ec4 <memset>
 8009b1c:	4620      	mov	r0, r4
 8009b1e:	bd70      	pop	{r4, r5, r6, pc}

08009b20 <__sfp_lock_acquire>:
 8009b20:	4801      	ldr	r0, [pc, #4]	; (8009b28 <__sfp_lock_acquire+0x8>)
 8009b22:	f000 b8b8 	b.w	8009c96 <__retarget_lock_acquire_recursive>
 8009b26:	bf00      	nop
 8009b28:	200004c5 	.word	0x200004c5

08009b2c <__sfp_lock_release>:
 8009b2c:	4801      	ldr	r0, [pc, #4]	; (8009b34 <__sfp_lock_release+0x8>)
 8009b2e:	f000 b8b3 	b.w	8009c98 <__retarget_lock_release_recursive>
 8009b32:	bf00      	nop
 8009b34:	200004c5 	.word	0x200004c5

08009b38 <__sinit_lock_acquire>:
 8009b38:	4801      	ldr	r0, [pc, #4]	; (8009b40 <__sinit_lock_acquire+0x8>)
 8009b3a:	f000 b8ac 	b.w	8009c96 <__retarget_lock_acquire_recursive>
 8009b3e:	bf00      	nop
 8009b40:	200004c6 	.word	0x200004c6

08009b44 <__sinit_lock_release>:
 8009b44:	4801      	ldr	r0, [pc, #4]	; (8009b4c <__sinit_lock_release+0x8>)
 8009b46:	f000 b8a7 	b.w	8009c98 <__retarget_lock_release_recursive>
 8009b4a:	bf00      	nop
 8009b4c:	200004c6 	.word	0x200004c6

08009b50 <__sinit>:
 8009b50:	b510      	push	{r4, lr}
 8009b52:	4604      	mov	r4, r0
 8009b54:	f7ff fff0 	bl	8009b38 <__sinit_lock_acquire>
 8009b58:	69a3      	ldr	r3, [r4, #24]
 8009b5a:	b11b      	cbz	r3, 8009b64 <__sinit+0x14>
 8009b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b60:	f7ff bff0 	b.w	8009b44 <__sinit_lock_release>
 8009b64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009b68:	6523      	str	r3, [r4, #80]	; 0x50
 8009b6a:	4b13      	ldr	r3, [pc, #76]	; (8009bb8 <__sinit+0x68>)
 8009b6c:	4a13      	ldr	r2, [pc, #76]	; (8009bbc <__sinit+0x6c>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	62a2      	str	r2, [r4, #40]	; 0x28
 8009b72:	42a3      	cmp	r3, r4
 8009b74:	bf04      	itt	eq
 8009b76:	2301      	moveq	r3, #1
 8009b78:	61a3      	streq	r3, [r4, #24]
 8009b7a:	4620      	mov	r0, r4
 8009b7c:	f000 f820 	bl	8009bc0 <__sfp>
 8009b80:	6060      	str	r0, [r4, #4]
 8009b82:	4620      	mov	r0, r4
 8009b84:	f000 f81c 	bl	8009bc0 <__sfp>
 8009b88:	60a0      	str	r0, [r4, #8]
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	f000 f818 	bl	8009bc0 <__sfp>
 8009b90:	2200      	movs	r2, #0
 8009b92:	60e0      	str	r0, [r4, #12]
 8009b94:	2104      	movs	r1, #4
 8009b96:	6860      	ldr	r0, [r4, #4]
 8009b98:	f7ff ff82 	bl	8009aa0 <std>
 8009b9c:	68a0      	ldr	r0, [r4, #8]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	2109      	movs	r1, #9
 8009ba2:	f7ff ff7d 	bl	8009aa0 <std>
 8009ba6:	68e0      	ldr	r0, [r4, #12]
 8009ba8:	2202      	movs	r2, #2
 8009baa:	2112      	movs	r1, #18
 8009bac:	f7ff ff78 	bl	8009aa0 <std>
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	61a3      	str	r3, [r4, #24]
 8009bb4:	e7d2      	b.n	8009b5c <__sinit+0xc>
 8009bb6:	bf00      	nop
 8009bb8:	0800b2d4 	.word	0x0800b2d4
 8009bbc:	08009ae9 	.word	0x08009ae9

08009bc0 <__sfp>:
 8009bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bc2:	4607      	mov	r7, r0
 8009bc4:	f7ff ffac 	bl	8009b20 <__sfp_lock_acquire>
 8009bc8:	4b1e      	ldr	r3, [pc, #120]	; (8009c44 <__sfp+0x84>)
 8009bca:	681e      	ldr	r6, [r3, #0]
 8009bcc:	69b3      	ldr	r3, [r6, #24]
 8009bce:	b913      	cbnz	r3, 8009bd6 <__sfp+0x16>
 8009bd0:	4630      	mov	r0, r6
 8009bd2:	f7ff ffbd 	bl	8009b50 <__sinit>
 8009bd6:	3648      	adds	r6, #72	; 0x48
 8009bd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009bdc:	3b01      	subs	r3, #1
 8009bde:	d503      	bpl.n	8009be8 <__sfp+0x28>
 8009be0:	6833      	ldr	r3, [r6, #0]
 8009be2:	b30b      	cbz	r3, 8009c28 <__sfp+0x68>
 8009be4:	6836      	ldr	r6, [r6, #0]
 8009be6:	e7f7      	b.n	8009bd8 <__sfp+0x18>
 8009be8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009bec:	b9d5      	cbnz	r5, 8009c24 <__sfp+0x64>
 8009bee:	4b16      	ldr	r3, [pc, #88]	; (8009c48 <__sfp+0x88>)
 8009bf0:	60e3      	str	r3, [r4, #12]
 8009bf2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009bf6:	6665      	str	r5, [r4, #100]	; 0x64
 8009bf8:	f000 f84c 	bl	8009c94 <__retarget_lock_init_recursive>
 8009bfc:	f7ff ff96 	bl	8009b2c <__sfp_lock_release>
 8009c00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009c04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009c08:	6025      	str	r5, [r4, #0]
 8009c0a:	61a5      	str	r5, [r4, #24]
 8009c0c:	2208      	movs	r2, #8
 8009c0e:	4629      	mov	r1, r5
 8009c10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009c14:	f7fe f956 	bl	8007ec4 <memset>
 8009c18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009c1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009c20:	4620      	mov	r0, r4
 8009c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c24:	3468      	adds	r4, #104	; 0x68
 8009c26:	e7d9      	b.n	8009bdc <__sfp+0x1c>
 8009c28:	2104      	movs	r1, #4
 8009c2a:	4638      	mov	r0, r7
 8009c2c:	f7ff ff62 	bl	8009af4 <__sfmoreglue>
 8009c30:	4604      	mov	r4, r0
 8009c32:	6030      	str	r0, [r6, #0]
 8009c34:	2800      	cmp	r0, #0
 8009c36:	d1d5      	bne.n	8009be4 <__sfp+0x24>
 8009c38:	f7ff ff78 	bl	8009b2c <__sfp_lock_release>
 8009c3c:	230c      	movs	r3, #12
 8009c3e:	603b      	str	r3, [r7, #0]
 8009c40:	e7ee      	b.n	8009c20 <__sfp+0x60>
 8009c42:	bf00      	nop
 8009c44:	0800b2d4 	.word	0x0800b2d4
 8009c48:	ffff0001 	.word	0xffff0001

08009c4c <_fwalk_reent>:
 8009c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c50:	4606      	mov	r6, r0
 8009c52:	4688      	mov	r8, r1
 8009c54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009c58:	2700      	movs	r7, #0
 8009c5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c5e:	f1b9 0901 	subs.w	r9, r9, #1
 8009c62:	d505      	bpl.n	8009c70 <_fwalk_reent+0x24>
 8009c64:	6824      	ldr	r4, [r4, #0]
 8009c66:	2c00      	cmp	r4, #0
 8009c68:	d1f7      	bne.n	8009c5a <_fwalk_reent+0xe>
 8009c6a:	4638      	mov	r0, r7
 8009c6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c70:	89ab      	ldrh	r3, [r5, #12]
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	d907      	bls.n	8009c86 <_fwalk_reent+0x3a>
 8009c76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c7a:	3301      	adds	r3, #1
 8009c7c:	d003      	beq.n	8009c86 <_fwalk_reent+0x3a>
 8009c7e:	4629      	mov	r1, r5
 8009c80:	4630      	mov	r0, r6
 8009c82:	47c0      	blx	r8
 8009c84:	4307      	orrs	r7, r0
 8009c86:	3568      	adds	r5, #104	; 0x68
 8009c88:	e7e9      	b.n	8009c5e <_fwalk_reent+0x12>
	...

08009c8c <_localeconv_r>:
 8009c8c:	4800      	ldr	r0, [pc, #0]	; (8009c90 <_localeconv_r+0x4>)
 8009c8e:	4770      	bx	lr
 8009c90:	20000168 	.word	0x20000168

08009c94 <__retarget_lock_init_recursive>:
 8009c94:	4770      	bx	lr

08009c96 <__retarget_lock_acquire_recursive>:
 8009c96:	4770      	bx	lr

08009c98 <__retarget_lock_release_recursive>:
 8009c98:	4770      	bx	lr

08009c9a <__swhatbuf_r>:
 8009c9a:	b570      	push	{r4, r5, r6, lr}
 8009c9c:	460e      	mov	r6, r1
 8009c9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ca2:	2900      	cmp	r1, #0
 8009ca4:	b096      	sub	sp, #88	; 0x58
 8009ca6:	4614      	mov	r4, r2
 8009ca8:	461d      	mov	r5, r3
 8009caa:	da08      	bge.n	8009cbe <__swhatbuf_r+0x24>
 8009cac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	602a      	str	r2, [r5, #0]
 8009cb4:	061a      	lsls	r2, r3, #24
 8009cb6:	d410      	bmi.n	8009cda <__swhatbuf_r+0x40>
 8009cb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cbc:	e00e      	b.n	8009cdc <__swhatbuf_r+0x42>
 8009cbe:	466a      	mov	r2, sp
 8009cc0:	f000 fdf4 	bl	800a8ac <_fstat_r>
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	dbf1      	blt.n	8009cac <__swhatbuf_r+0x12>
 8009cc8:	9a01      	ldr	r2, [sp, #4]
 8009cca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009cce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009cd2:	425a      	negs	r2, r3
 8009cd4:	415a      	adcs	r2, r3
 8009cd6:	602a      	str	r2, [r5, #0]
 8009cd8:	e7ee      	b.n	8009cb8 <__swhatbuf_r+0x1e>
 8009cda:	2340      	movs	r3, #64	; 0x40
 8009cdc:	2000      	movs	r0, #0
 8009cde:	6023      	str	r3, [r4, #0]
 8009ce0:	b016      	add	sp, #88	; 0x58
 8009ce2:	bd70      	pop	{r4, r5, r6, pc}

08009ce4 <__smakebuf_r>:
 8009ce4:	898b      	ldrh	r3, [r1, #12]
 8009ce6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ce8:	079d      	lsls	r5, r3, #30
 8009cea:	4606      	mov	r6, r0
 8009cec:	460c      	mov	r4, r1
 8009cee:	d507      	bpl.n	8009d00 <__smakebuf_r+0x1c>
 8009cf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009cf4:	6023      	str	r3, [r4, #0]
 8009cf6:	6123      	str	r3, [r4, #16]
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	6163      	str	r3, [r4, #20]
 8009cfc:	b002      	add	sp, #8
 8009cfe:	bd70      	pop	{r4, r5, r6, pc}
 8009d00:	ab01      	add	r3, sp, #4
 8009d02:	466a      	mov	r2, sp
 8009d04:	f7ff ffc9 	bl	8009c9a <__swhatbuf_r>
 8009d08:	9900      	ldr	r1, [sp, #0]
 8009d0a:	4605      	mov	r5, r0
 8009d0c:	4630      	mov	r0, r6
 8009d0e:	f7fe f94d 	bl	8007fac <_malloc_r>
 8009d12:	b948      	cbnz	r0, 8009d28 <__smakebuf_r+0x44>
 8009d14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d18:	059a      	lsls	r2, r3, #22
 8009d1a:	d4ef      	bmi.n	8009cfc <__smakebuf_r+0x18>
 8009d1c:	f023 0303 	bic.w	r3, r3, #3
 8009d20:	f043 0302 	orr.w	r3, r3, #2
 8009d24:	81a3      	strh	r3, [r4, #12]
 8009d26:	e7e3      	b.n	8009cf0 <__smakebuf_r+0xc>
 8009d28:	4b0d      	ldr	r3, [pc, #52]	; (8009d60 <__smakebuf_r+0x7c>)
 8009d2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009d2c:	89a3      	ldrh	r3, [r4, #12]
 8009d2e:	6020      	str	r0, [r4, #0]
 8009d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d34:	81a3      	strh	r3, [r4, #12]
 8009d36:	9b00      	ldr	r3, [sp, #0]
 8009d38:	6163      	str	r3, [r4, #20]
 8009d3a:	9b01      	ldr	r3, [sp, #4]
 8009d3c:	6120      	str	r0, [r4, #16]
 8009d3e:	b15b      	cbz	r3, 8009d58 <__smakebuf_r+0x74>
 8009d40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d44:	4630      	mov	r0, r6
 8009d46:	f000 fdc3 	bl	800a8d0 <_isatty_r>
 8009d4a:	b128      	cbz	r0, 8009d58 <__smakebuf_r+0x74>
 8009d4c:	89a3      	ldrh	r3, [r4, #12]
 8009d4e:	f023 0303 	bic.w	r3, r3, #3
 8009d52:	f043 0301 	orr.w	r3, r3, #1
 8009d56:	81a3      	strh	r3, [r4, #12]
 8009d58:	89a0      	ldrh	r0, [r4, #12]
 8009d5a:	4305      	orrs	r5, r0
 8009d5c:	81a5      	strh	r5, [r4, #12]
 8009d5e:	e7cd      	b.n	8009cfc <__smakebuf_r+0x18>
 8009d60:	08009ae9 	.word	0x08009ae9

08009d64 <memcpy>:
 8009d64:	440a      	add	r2, r1
 8009d66:	4291      	cmp	r1, r2
 8009d68:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d6c:	d100      	bne.n	8009d70 <memcpy+0xc>
 8009d6e:	4770      	bx	lr
 8009d70:	b510      	push	{r4, lr}
 8009d72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d7a:	4291      	cmp	r1, r2
 8009d7c:	d1f9      	bne.n	8009d72 <memcpy+0xe>
 8009d7e:	bd10      	pop	{r4, pc}

08009d80 <__malloc_lock>:
 8009d80:	4801      	ldr	r0, [pc, #4]	; (8009d88 <__malloc_lock+0x8>)
 8009d82:	f7ff bf88 	b.w	8009c96 <__retarget_lock_acquire_recursive>
 8009d86:	bf00      	nop
 8009d88:	200004c4 	.word	0x200004c4

08009d8c <__malloc_unlock>:
 8009d8c:	4801      	ldr	r0, [pc, #4]	; (8009d94 <__malloc_unlock+0x8>)
 8009d8e:	f7ff bf83 	b.w	8009c98 <__retarget_lock_release_recursive>
 8009d92:	bf00      	nop
 8009d94:	200004c4 	.word	0x200004c4

08009d98 <_Balloc>:
 8009d98:	b570      	push	{r4, r5, r6, lr}
 8009d9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009d9c:	4604      	mov	r4, r0
 8009d9e:	460d      	mov	r5, r1
 8009da0:	b976      	cbnz	r6, 8009dc0 <_Balloc+0x28>
 8009da2:	2010      	movs	r0, #16
 8009da4:	f7fe f886 	bl	8007eb4 <malloc>
 8009da8:	4602      	mov	r2, r0
 8009daa:	6260      	str	r0, [r4, #36]	; 0x24
 8009dac:	b920      	cbnz	r0, 8009db8 <_Balloc+0x20>
 8009dae:	4b18      	ldr	r3, [pc, #96]	; (8009e10 <_Balloc+0x78>)
 8009db0:	4818      	ldr	r0, [pc, #96]	; (8009e14 <_Balloc+0x7c>)
 8009db2:	2166      	movs	r1, #102	; 0x66
 8009db4:	f000 fd3a 	bl	800a82c <__assert_func>
 8009db8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009dbc:	6006      	str	r6, [r0, #0]
 8009dbe:	60c6      	str	r6, [r0, #12]
 8009dc0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009dc2:	68f3      	ldr	r3, [r6, #12]
 8009dc4:	b183      	cbz	r3, 8009de8 <_Balloc+0x50>
 8009dc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009dc8:	68db      	ldr	r3, [r3, #12]
 8009dca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009dce:	b9b8      	cbnz	r0, 8009e00 <_Balloc+0x68>
 8009dd0:	2101      	movs	r1, #1
 8009dd2:	fa01 f605 	lsl.w	r6, r1, r5
 8009dd6:	1d72      	adds	r2, r6, #5
 8009dd8:	0092      	lsls	r2, r2, #2
 8009dda:	4620      	mov	r0, r4
 8009ddc:	f000 fb60 	bl	800a4a0 <_calloc_r>
 8009de0:	b160      	cbz	r0, 8009dfc <_Balloc+0x64>
 8009de2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009de6:	e00e      	b.n	8009e06 <_Balloc+0x6e>
 8009de8:	2221      	movs	r2, #33	; 0x21
 8009dea:	2104      	movs	r1, #4
 8009dec:	4620      	mov	r0, r4
 8009dee:	f000 fb57 	bl	800a4a0 <_calloc_r>
 8009df2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009df4:	60f0      	str	r0, [r6, #12]
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d1e4      	bne.n	8009dc6 <_Balloc+0x2e>
 8009dfc:	2000      	movs	r0, #0
 8009dfe:	bd70      	pop	{r4, r5, r6, pc}
 8009e00:	6802      	ldr	r2, [r0, #0]
 8009e02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009e06:	2300      	movs	r3, #0
 8009e08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009e0c:	e7f7      	b.n	8009dfe <_Balloc+0x66>
 8009e0e:	bf00      	nop
 8009e10:	0800b319 	.word	0x0800b319
 8009e14:	0800b3fc 	.word	0x0800b3fc

08009e18 <_Bfree>:
 8009e18:	b570      	push	{r4, r5, r6, lr}
 8009e1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009e1c:	4605      	mov	r5, r0
 8009e1e:	460c      	mov	r4, r1
 8009e20:	b976      	cbnz	r6, 8009e40 <_Bfree+0x28>
 8009e22:	2010      	movs	r0, #16
 8009e24:	f7fe f846 	bl	8007eb4 <malloc>
 8009e28:	4602      	mov	r2, r0
 8009e2a:	6268      	str	r0, [r5, #36]	; 0x24
 8009e2c:	b920      	cbnz	r0, 8009e38 <_Bfree+0x20>
 8009e2e:	4b09      	ldr	r3, [pc, #36]	; (8009e54 <_Bfree+0x3c>)
 8009e30:	4809      	ldr	r0, [pc, #36]	; (8009e58 <_Bfree+0x40>)
 8009e32:	218a      	movs	r1, #138	; 0x8a
 8009e34:	f000 fcfa 	bl	800a82c <__assert_func>
 8009e38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e3c:	6006      	str	r6, [r0, #0]
 8009e3e:	60c6      	str	r6, [r0, #12]
 8009e40:	b13c      	cbz	r4, 8009e52 <_Bfree+0x3a>
 8009e42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009e44:	6862      	ldr	r2, [r4, #4]
 8009e46:	68db      	ldr	r3, [r3, #12]
 8009e48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009e4c:	6021      	str	r1, [r4, #0]
 8009e4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009e52:	bd70      	pop	{r4, r5, r6, pc}
 8009e54:	0800b319 	.word	0x0800b319
 8009e58:	0800b3fc 	.word	0x0800b3fc

08009e5c <__multadd>:
 8009e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e60:	690d      	ldr	r5, [r1, #16]
 8009e62:	4607      	mov	r7, r0
 8009e64:	460c      	mov	r4, r1
 8009e66:	461e      	mov	r6, r3
 8009e68:	f101 0c14 	add.w	ip, r1, #20
 8009e6c:	2000      	movs	r0, #0
 8009e6e:	f8dc 3000 	ldr.w	r3, [ip]
 8009e72:	b299      	uxth	r1, r3
 8009e74:	fb02 6101 	mla	r1, r2, r1, r6
 8009e78:	0c1e      	lsrs	r6, r3, #16
 8009e7a:	0c0b      	lsrs	r3, r1, #16
 8009e7c:	fb02 3306 	mla	r3, r2, r6, r3
 8009e80:	b289      	uxth	r1, r1
 8009e82:	3001      	adds	r0, #1
 8009e84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009e88:	4285      	cmp	r5, r0
 8009e8a:	f84c 1b04 	str.w	r1, [ip], #4
 8009e8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009e92:	dcec      	bgt.n	8009e6e <__multadd+0x12>
 8009e94:	b30e      	cbz	r6, 8009eda <__multadd+0x7e>
 8009e96:	68a3      	ldr	r3, [r4, #8]
 8009e98:	42ab      	cmp	r3, r5
 8009e9a:	dc19      	bgt.n	8009ed0 <__multadd+0x74>
 8009e9c:	6861      	ldr	r1, [r4, #4]
 8009e9e:	4638      	mov	r0, r7
 8009ea0:	3101      	adds	r1, #1
 8009ea2:	f7ff ff79 	bl	8009d98 <_Balloc>
 8009ea6:	4680      	mov	r8, r0
 8009ea8:	b928      	cbnz	r0, 8009eb6 <__multadd+0x5a>
 8009eaa:	4602      	mov	r2, r0
 8009eac:	4b0c      	ldr	r3, [pc, #48]	; (8009ee0 <__multadd+0x84>)
 8009eae:	480d      	ldr	r0, [pc, #52]	; (8009ee4 <__multadd+0x88>)
 8009eb0:	21b5      	movs	r1, #181	; 0xb5
 8009eb2:	f000 fcbb 	bl	800a82c <__assert_func>
 8009eb6:	6922      	ldr	r2, [r4, #16]
 8009eb8:	3202      	adds	r2, #2
 8009eba:	f104 010c 	add.w	r1, r4, #12
 8009ebe:	0092      	lsls	r2, r2, #2
 8009ec0:	300c      	adds	r0, #12
 8009ec2:	f7ff ff4f 	bl	8009d64 <memcpy>
 8009ec6:	4621      	mov	r1, r4
 8009ec8:	4638      	mov	r0, r7
 8009eca:	f7ff ffa5 	bl	8009e18 <_Bfree>
 8009ece:	4644      	mov	r4, r8
 8009ed0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009ed4:	3501      	adds	r5, #1
 8009ed6:	615e      	str	r6, [r3, #20]
 8009ed8:	6125      	str	r5, [r4, #16]
 8009eda:	4620      	mov	r0, r4
 8009edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ee0:	0800b38b 	.word	0x0800b38b
 8009ee4:	0800b3fc 	.word	0x0800b3fc

08009ee8 <__hi0bits>:
 8009ee8:	0c03      	lsrs	r3, r0, #16
 8009eea:	041b      	lsls	r3, r3, #16
 8009eec:	b9d3      	cbnz	r3, 8009f24 <__hi0bits+0x3c>
 8009eee:	0400      	lsls	r0, r0, #16
 8009ef0:	2310      	movs	r3, #16
 8009ef2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009ef6:	bf04      	itt	eq
 8009ef8:	0200      	lsleq	r0, r0, #8
 8009efa:	3308      	addeq	r3, #8
 8009efc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009f00:	bf04      	itt	eq
 8009f02:	0100      	lsleq	r0, r0, #4
 8009f04:	3304      	addeq	r3, #4
 8009f06:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009f0a:	bf04      	itt	eq
 8009f0c:	0080      	lsleq	r0, r0, #2
 8009f0e:	3302      	addeq	r3, #2
 8009f10:	2800      	cmp	r0, #0
 8009f12:	db05      	blt.n	8009f20 <__hi0bits+0x38>
 8009f14:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009f18:	f103 0301 	add.w	r3, r3, #1
 8009f1c:	bf08      	it	eq
 8009f1e:	2320      	moveq	r3, #32
 8009f20:	4618      	mov	r0, r3
 8009f22:	4770      	bx	lr
 8009f24:	2300      	movs	r3, #0
 8009f26:	e7e4      	b.n	8009ef2 <__hi0bits+0xa>

08009f28 <__lo0bits>:
 8009f28:	6803      	ldr	r3, [r0, #0]
 8009f2a:	f013 0207 	ands.w	r2, r3, #7
 8009f2e:	4601      	mov	r1, r0
 8009f30:	d00b      	beq.n	8009f4a <__lo0bits+0x22>
 8009f32:	07da      	lsls	r2, r3, #31
 8009f34:	d423      	bmi.n	8009f7e <__lo0bits+0x56>
 8009f36:	0798      	lsls	r0, r3, #30
 8009f38:	bf49      	itett	mi
 8009f3a:	085b      	lsrmi	r3, r3, #1
 8009f3c:	089b      	lsrpl	r3, r3, #2
 8009f3e:	2001      	movmi	r0, #1
 8009f40:	600b      	strmi	r3, [r1, #0]
 8009f42:	bf5c      	itt	pl
 8009f44:	600b      	strpl	r3, [r1, #0]
 8009f46:	2002      	movpl	r0, #2
 8009f48:	4770      	bx	lr
 8009f4a:	b298      	uxth	r0, r3
 8009f4c:	b9a8      	cbnz	r0, 8009f7a <__lo0bits+0x52>
 8009f4e:	0c1b      	lsrs	r3, r3, #16
 8009f50:	2010      	movs	r0, #16
 8009f52:	b2da      	uxtb	r2, r3
 8009f54:	b90a      	cbnz	r2, 8009f5a <__lo0bits+0x32>
 8009f56:	3008      	adds	r0, #8
 8009f58:	0a1b      	lsrs	r3, r3, #8
 8009f5a:	071a      	lsls	r2, r3, #28
 8009f5c:	bf04      	itt	eq
 8009f5e:	091b      	lsreq	r3, r3, #4
 8009f60:	3004      	addeq	r0, #4
 8009f62:	079a      	lsls	r2, r3, #30
 8009f64:	bf04      	itt	eq
 8009f66:	089b      	lsreq	r3, r3, #2
 8009f68:	3002      	addeq	r0, #2
 8009f6a:	07da      	lsls	r2, r3, #31
 8009f6c:	d403      	bmi.n	8009f76 <__lo0bits+0x4e>
 8009f6e:	085b      	lsrs	r3, r3, #1
 8009f70:	f100 0001 	add.w	r0, r0, #1
 8009f74:	d005      	beq.n	8009f82 <__lo0bits+0x5a>
 8009f76:	600b      	str	r3, [r1, #0]
 8009f78:	4770      	bx	lr
 8009f7a:	4610      	mov	r0, r2
 8009f7c:	e7e9      	b.n	8009f52 <__lo0bits+0x2a>
 8009f7e:	2000      	movs	r0, #0
 8009f80:	4770      	bx	lr
 8009f82:	2020      	movs	r0, #32
 8009f84:	4770      	bx	lr
	...

08009f88 <__i2b>:
 8009f88:	b510      	push	{r4, lr}
 8009f8a:	460c      	mov	r4, r1
 8009f8c:	2101      	movs	r1, #1
 8009f8e:	f7ff ff03 	bl	8009d98 <_Balloc>
 8009f92:	4602      	mov	r2, r0
 8009f94:	b928      	cbnz	r0, 8009fa2 <__i2b+0x1a>
 8009f96:	4b05      	ldr	r3, [pc, #20]	; (8009fac <__i2b+0x24>)
 8009f98:	4805      	ldr	r0, [pc, #20]	; (8009fb0 <__i2b+0x28>)
 8009f9a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009f9e:	f000 fc45 	bl	800a82c <__assert_func>
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	6144      	str	r4, [r0, #20]
 8009fa6:	6103      	str	r3, [r0, #16]
 8009fa8:	bd10      	pop	{r4, pc}
 8009faa:	bf00      	nop
 8009fac:	0800b38b 	.word	0x0800b38b
 8009fb0:	0800b3fc 	.word	0x0800b3fc

08009fb4 <__multiply>:
 8009fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb8:	4691      	mov	r9, r2
 8009fba:	690a      	ldr	r2, [r1, #16]
 8009fbc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	bfb8      	it	lt
 8009fc4:	460b      	movlt	r3, r1
 8009fc6:	460c      	mov	r4, r1
 8009fc8:	bfbc      	itt	lt
 8009fca:	464c      	movlt	r4, r9
 8009fcc:	4699      	movlt	r9, r3
 8009fce:	6927      	ldr	r7, [r4, #16]
 8009fd0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009fd4:	68a3      	ldr	r3, [r4, #8]
 8009fd6:	6861      	ldr	r1, [r4, #4]
 8009fd8:	eb07 060a 	add.w	r6, r7, sl
 8009fdc:	42b3      	cmp	r3, r6
 8009fde:	b085      	sub	sp, #20
 8009fe0:	bfb8      	it	lt
 8009fe2:	3101      	addlt	r1, #1
 8009fe4:	f7ff fed8 	bl	8009d98 <_Balloc>
 8009fe8:	b930      	cbnz	r0, 8009ff8 <__multiply+0x44>
 8009fea:	4602      	mov	r2, r0
 8009fec:	4b44      	ldr	r3, [pc, #272]	; (800a100 <__multiply+0x14c>)
 8009fee:	4845      	ldr	r0, [pc, #276]	; (800a104 <__multiply+0x150>)
 8009ff0:	f240 115d 	movw	r1, #349	; 0x15d
 8009ff4:	f000 fc1a 	bl	800a82c <__assert_func>
 8009ff8:	f100 0514 	add.w	r5, r0, #20
 8009ffc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a000:	462b      	mov	r3, r5
 800a002:	2200      	movs	r2, #0
 800a004:	4543      	cmp	r3, r8
 800a006:	d321      	bcc.n	800a04c <__multiply+0x98>
 800a008:	f104 0314 	add.w	r3, r4, #20
 800a00c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a010:	f109 0314 	add.w	r3, r9, #20
 800a014:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a018:	9202      	str	r2, [sp, #8]
 800a01a:	1b3a      	subs	r2, r7, r4
 800a01c:	3a15      	subs	r2, #21
 800a01e:	f022 0203 	bic.w	r2, r2, #3
 800a022:	3204      	adds	r2, #4
 800a024:	f104 0115 	add.w	r1, r4, #21
 800a028:	428f      	cmp	r7, r1
 800a02a:	bf38      	it	cc
 800a02c:	2204      	movcc	r2, #4
 800a02e:	9201      	str	r2, [sp, #4]
 800a030:	9a02      	ldr	r2, [sp, #8]
 800a032:	9303      	str	r3, [sp, #12]
 800a034:	429a      	cmp	r2, r3
 800a036:	d80c      	bhi.n	800a052 <__multiply+0x9e>
 800a038:	2e00      	cmp	r6, #0
 800a03a:	dd03      	ble.n	800a044 <__multiply+0x90>
 800a03c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a040:	2b00      	cmp	r3, #0
 800a042:	d05a      	beq.n	800a0fa <__multiply+0x146>
 800a044:	6106      	str	r6, [r0, #16]
 800a046:	b005      	add	sp, #20
 800a048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a04c:	f843 2b04 	str.w	r2, [r3], #4
 800a050:	e7d8      	b.n	800a004 <__multiply+0x50>
 800a052:	f8b3 a000 	ldrh.w	sl, [r3]
 800a056:	f1ba 0f00 	cmp.w	sl, #0
 800a05a:	d024      	beq.n	800a0a6 <__multiply+0xf2>
 800a05c:	f104 0e14 	add.w	lr, r4, #20
 800a060:	46a9      	mov	r9, r5
 800a062:	f04f 0c00 	mov.w	ip, #0
 800a066:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a06a:	f8d9 1000 	ldr.w	r1, [r9]
 800a06e:	fa1f fb82 	uxth.w	fp, r2
 800a072:	b289      	uxth	r1, r1
 800a074:	fb0a 110b 	mla	r1, sl, fp, r1
 800a078:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a07c:	f8d9 2000 	ldr.w	r2, [r9]
 800a080:	4461      	add	r1, ip
 800a082:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a086:	fb0a c20b 	mla	r2, sl, fp, ip
 800a08a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a08e:	b289      	uxth	r1, r1
 800a090:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a094:	4577      	cmp	r7, lr
 800a096:	f849 1b04 	str.w	r1, [r9], #4
 800a09a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a09e:	d8e2      	bhi.n	800a066 <__multiply+0xb2>
 800a0a0:	9a01      	ldr	r2, [sp, #4]
 800a0a2:	f845 c002 	str.w	ip, [r5, r2]
 800a0a6:	9a03      	ldr	r2, [sp, #12]
 800a0a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a0ac:	3304      	adds	r3, #4
 800a0ae:	f1b9 0f00 	cmp.w	r9, #0
 800a0b2:	d020      	beq.n	800a0f6 <__multiply+0x142>
 800a0b4:	6829      	ldr	r1, [r5, #0]
 800a0b6:	f104 0c14 	add.w	ip, r4, #20
 800a0ba:	46ae      	mov	lr, r5
 800a0bc:	f04f 0a00 	mov.w	sl, #0
 800a0c0:	f8bc b000 	ldrh.w	fp, [ip]
 800a0c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a0c8:	fb09 220b 	mla	r2, r9, fp, r2
 800a0cc:	4492      	add	sl, r2
 800a0ce:	b289      	uxth	r1, r1
 800a0d0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a0d4:	f84e 1b04 	str.w	r1, [lr], #4
 800a0d8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a0dc:	f8be 1000 	ldrh.w	r1, [lr]
 800a0e0:	0c12      	lsrs	r2, r2, #16
 800a0e2:	fb09 1102 	mla	r1, r9, r2, r1
 800a0e6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a0ea:	4567      	cmp	r7, ip
 800a0ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a0f0:	d8e6      	bhi.n	800a0c0 <__multiply+0x10c>
 800a0f2:	9a01      	ldr	r2, [sp, #4]
 800a0f4:	50a9      	str	r1, [r5, r2]
 800a0f6:	3504      	adds	r5, #4
 800a0f8:	e79a      	b.n	800a030 <__multiply+0x7c>
 800a0fa:	3e01      	subs	r6, #1
 800a0fc:	e79c      	b.n	800a038 <__multiply+0x84>
 800a0fe:	bf00      	nop
 800a100:	0800b38b 	.word	0x0800b38b
 800a104:	0800b3fc 	.word	0x0800b3fc

0800a108 <__pow5mult>:
 800a108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a10c:	4615      	mov	r5, r2
 800a10e:	f012 0203 	ands.w	r2, r2, #3
 800a112:	4606      	mov	r6, r0
 800a114:	460f      	mov	r7, r1
 800a116:	d007      	beq.n	800a128 <__pow5mult+0x20>
 800a118:	4c25      	ldr	r4, [pc, #148]	; (800a1b0 <__pow5mult+0xa8>)
 800a11a:	3a01      	subs	r2, #1
 800a11c:	2300      	movs	r3, #0
 800a11e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a122:	f7ff fe9b 	bl	8009e5c <__multadd>
 800a126:	4607      	mov	r7, r0
 800a128:	10ad      	asrs	r5, r5, #2
 800a12a:	d03d      	beq.n	800a1a8 <__pow5mult+0xa0>
 800a12c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a12e:	b97c      	cbnz	r4, 800a150 <__pow5mult+0x48>
 800a130:	2010      	movs	r0, #16
 800a132:	f7fd febf 	bl	8007eb4 <malloc>
 800a136:	4602      	mov	r2, r0
 800a138:	6270      	str	r0, [r6, #36]	; 0x24
 800a13a:	b928      	cbnz	r0, 800a148 <__pow5mult+0x40>
 800a13c:	4b1d      	ldr	r3, [pc, #116]	; (800a1b4 <__pow5mult+0xac>)
 800a13e:	481e      	ldr	r0, [pc, #120]	; (800a1b8 <__pow5mult+0xb0>)
 800a140:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a144:	f000 fb72 	bl	800a82c <__assert_func>
 800a148:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a14c:	6004      	str	r4, [r0, #0]
 800a14e:	60c4      	str	r4, [r0, #12]
 800a150:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a154:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a158:	b94c      	cbnz	r4, 800a16e <__pow5mult+0x66>
 800a15a:	f240 2171 	movw	r1, #625	; 0x271
 800a15e:	4630      	mov	r0, r6
 800a160:	f7ff ff12 	bl	8009f88 <__i2b>
 800a164:	2300      	movs	r3, #0
 800a166:	f8c8 0008 	str.w	r0, [r8, #8]
 800a16a:	4604      	mov	r4, r0
 800a16c:	6003      	str	r3, [r0, #0]
 800a16e:	f04f 0900 	mov.w	r9, #0
 800a172:	07eb      	lsls	r3, r5, #31
 800a174:	d50a      	bpl.n	800a18c <__pow5mult+0x84>
 800a176:	4639      	mov	r1, r7
 800a178:	4622      	mov	r2, r4
 800a17a:	4630      	mov	r0, r6
 800a17c:	f7ff ff1a 	bl	8009fb4 <__multiply>
 800a180:	4639      	mov	r1, r7
 800a182:	4680      	mov	r8, r0
 800a184:	4630      	mov	r0, r6
 800a186:	f7ff fe47 	bl	8009e18 <_Bfree>
 800a18a:	4647      	mov	r7, r8
 800a18c:	106d      	asrs	r5, r5, #1
 800a18e:	d00b      	beq.n	800a1a8 <__pow5mult+0xa0>
 800a190:	6820      	ldr	r0, [r4, #0]
 800a192:	b938      	cbnz	r0, 800a1a4 <__pow5mult+0x9c>
 800a194:	4622      	mov	r2, r4
 800a196:	4621      	mov	r1, r4
 800a198:	4630      	mov	r0, r6
 800a19a:	f7ff ff0b 	bl	8009fb4 <__multiply>
 800a19e:	6020      	str	r0, [r4, #0]
 800a1a0:	f8c0 9000 	str.w	r9, [r0]
 800a1a4:	4604      	mov	r4, r0
 800a1a6:	e7e4      	b.n	800a172 <__pow5mult+0x6a>
 800a1a8:	4638      	mov	r0, r7
 800a1aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1ae:	bf00      	nop
 800a1b0:	0800b548 	.word	0x0800b548
 800a1b4:	0800b319 	.word	0x0800b319
 800a1b8:	0800b3fc 	.word	0x0800b3fc

0800a1bc <__lshift>:
 800a1bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1c0:	460c      	mov	r4, r1
 800a1c2:	6849      	ldr	r1, [r1, #4]
 800a1c4:	6923      	ldr	r3, [r4, #16]
 800a1c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a1ca:	68a3      	ldr	r3, [r4, #8]
 800a1cc:	4607      	mov	r7, r0
 800a1ce:	4691      	mov	r9, r2
 800a1d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a1d4:	f108 0601 	add.w	r6, r8, #1
 800a1d8:	42b3      	cmp	r3, r6
 800a1da:	db0b      	blt.n	800a1f4 <__lshift+0x38>
 800a1dc:	4638      	mov	r0, r7
 800a1de:	f7ff fddb 	bl	8009d98 <_Balloc>
 800a1e2:	4605      	mov	r5, r0
 800a1e4:	b948      	cbnz	r0, 800a1fa <__lshift+0x3e>
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	4b2a      	ldr	r3, [pc, #168]	; (800a294 <__lshift+0xd8>)
 800a1ea:	482b      	ldr	r0, [pc, #172]	; (800a298 <__lshift+0xdc>)
 800a1ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a1f0:	f000 fb1c 	bl	800a82c <__assert_func>
 800a1f4:	3101      	adds	r1, #1
 800a1f6:	005b      	lsls	r3, r3, #1
 800a1f8:	e7ee      	b.n	800a1d8 <__lshift+0x1c>
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	f100 0114 	add.w	r1, r0, #20
 800a200:	f100 0210 	add.w	r2, r0, #16
 800a204:	4618      	mov	r0, r3
 800a206:	4553      	cmp	r3, sl
 800a208:	db37      	blt.n	800a27a <__lshift+0xbe>
 800a20a:	6920      	ldr	r0, [r4, #16]
 800a20c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a210:	f104 0314 	add.w	r3, r4, #20
 800a214:	f019 091f 	ands.w	r9, r9, #31
 800a218:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a21c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a220:	d02f      	beq.n	800a282 <__lshift+0xc6>
 800a222:	f1c9 0e20 	rsb	lr, r9, #32
 800a226:	468a      	mov	sl, r1
 800a228:	f04f 0c00 	mov.w	ip, #0
 800a22c:	681a      	ldr	r2, [r3, #0]
 800a22e:	fa02 f209 	lsl.w	r2, r2, r9
 800a232:	ea42 020c 	orr.w	r2, r2, ip
 800a236:	f84a 2b04 	str.w	r2, [sl], #4
 800a23a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a23e:	4298      	cmp	r0, r3
 800a240:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a244:	d8f2      	bhi.n	800a22c <__lshift+0x70>
 800a246:	1b03      	subs	r3, r0, r4
 800a248:	3b15      	subs	r3, #21
 800a24a:	f023 0303 	bic.w	r3, r3, #3
 800a24e:	3304      	adds	r3, #4
 800a250:	f104 0215 	add.w	r2, r4, #21
 800a254:	4290      	cmp	r0, r2
 800a256:	bf38      	it	cc
 800a258:	2304      	movcc	r3, #4
 800a25a:	f841 c003 	str.w	ip, [r1, r3]
 800a25e:	f1bc 0f00 	cmp.w	ip, #0
 800a262:	d001      	beq.n	800a268 <__lshift+0xac>
 800a264:	f108 0602 	add.w	r6, r8, #2
 800a268:	3e01      	subs	r6, #1
 800a26a:	4638      	mov	r0, r7
 800a26c:	612e      	str	r6, [r5, #16]
 800a26e:	4621      	mov	r1, r4
 800a270:	f7ff fdd2 	bl	8009e18 <_Bfree>
 800a274:	4628      	mov	r0, r5
 800a276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a27a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a27e:	3301      	adds	r3, #1
 800a280:	e7c1      	b.n	800a206 <__lshift+0x4a>
 800a282:	3904      	subs	r1, #4
 800a284:	f853 2b04 	ldr.w	r2, [r3], #4
 800a288:	f841 2f04 	str.w	r2, [r1, #4]!
 800a28c:	4298      	cmp	r0, r3
 800a28e:	d8f9      	bhi.n	800a284 <__lshift+0xc8>
 800a290:	e7ea      	b.n	800a268 <__lshift+0xac>
 800a292:	bf00      	nop
 800a294:	0800b38b 	.word	0x0800b38b
 800a298:	0800b3fc 	.word	0x0800b3fc

0800a29c <__mcmp>:
 800a29c:	b530      	push	{r4, r5, lr}
 800a29e:	6902      	ldr	r2, [r0, #16]
 800a2a0:	690c      	ldr	r4, [r1, #16]
 800a2a2:	1b12      	subs	r2, r2, r4
 800a2a4:	d10e      	bne.n	800a2c4 <__mcmp+0x28>
 800a2a6:	f100 0314 	add.w	r3, r0, #20
 800a2aa:	3114      	adds	r1, #20
 800a2ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a2b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a2b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a2b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a2bc:	42a5      	cmp	r5, r4
 800a2be:	d003      	beq.n	800a2c8 <__mcmp+0x2c>
 800a2c0:	d305      	bcc.n	800a2ce <__mcmp+0x32>
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	4610      	mov	r0, r2
 800a2c6:	bd30      	pop	{r4, r5, pc}
 800a2c8:	4283      	cmp	r3, r0
 800a2ca:	d3f3      	bcc.n	800a2b4 <__mcmp+0x18>
 800a2cc:	e7fa      	b.n	800a2c4 <__mcmp+0x28>
 800a2ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a2d2:	e7f7      	b.n	800a2c4 <__mcmp+0x28>

0800a2d4 <__mdiff>:
 800a2d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2d8:	460c      	mov	r4, r1
 800a2da:	4606      	mov	r6, r0
 800a2dc:	4611      	mov	r1, r2
 800a2de:	4620      	mov	r0, r4
 800a2e0:	4690      	mov	r8, r2
 800a2e2:	f7ff ffdb 	bl	800a29c <__mcmp>
 800a2e6:	1e05      	subs	r5, r0, #0
 800a2e8:	d110      	bne.n	800a30c <__mdiff+0x38>
 800a2ea:	4629      	mov	r1, r5
 800a2ec:	4630      	mov	r0, r6
 800a2ee:	f7ff fd53 	bl	8009d98 <_Balloc>
 800a2f2:	b930      	cbnz	r0, 800a302 <__mdiff+0x2e>
 800a2f4:	4b3a      	ldr	r3, [pc, #232]	; (800a3e0 <__mdiff+0x10c>)
 800a2f6:	4602      	mov	r2, r0
 800a2f8:	f240 2132 	movw	r1, #562	; 0x232
 800a2fc:	4839      	ldr	r0, [pc, #228]	; (800a3e4 <__mdiff+0x110>)
 800a2fe:	f000 fa95 	bl	800a82c <__assert_func>
 800a302:	2301      	movs	r3, #1
 800a304:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a308:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a30c:	bfa4      	itt	ge
 800a30e:	4643      	movge	r3, r8
 800a310:	46a0      	movge	r8, r4
 800a312:	4630      	mov	r0, r6
 800a314:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a318:	bfa6      	itte	ge
 800a31a:	461c      	movge	r4, r3
 800a31c:	2500      	movge	r5, #0
 800a31e:	2501      	movlt	r5, #1
 800a320:	f7ff fd3a 	bl	8009d98 <_Balloc>
 800a324:	b920      	cbnz	r0, 800a330 <__mdiff+0x5c>
 800a326:	4b2e      	ldr	r3, [pc, #184]	; (800a3e0 <__mdiff+0x10c>)
 800a328:	4602      	mov	r2, r0
 800a32a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a32e:	e7e5      	b.n	800a2fc <__mdiff+0x28>
 800a330:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a334:	6926      	ldr	r6, [r4, #16]
 800a336:	60c5      	str	r5, [r0, #12]
 800a338:	f104 0914 	add.w	r9, r4, #20
 800a33c:	f108 0514 	add.w	r5, r8, #20
 800a340:	f100 0e14 	add.w	lr, r0, #20
 800a344:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a348:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a34c:	f108 0210 	add.w	r2, r8, #16
 800a350:	46f2      	mov	sl, lr
 800a352:	2100      	movs	r1, #0
 800a354:	f859 3b04 	ldr.w	r3, [r9], #4
 800a358:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a35c:	fa1f f883 	uxth.w	r8, r3
 800a360:	fa11 f18b 	uxtah	r1, r1, fp
 800a364:	0c1b      	lsrs	r3, r3, #16
 800a366:	eba1 0808 	sub.w	r8, r1, r8
 800a36a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a36e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a372:	fa1f f888 	uxth.w	r8, r8
 800a376:	1419      	asrs	r1, r3, #16
 800a378:	454e      	cmp	r6, r9
 800a37a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a37e:	f84a 3b04 	str.w	r3, [sl], #4
 800a382:	d8e7      	bhi.n	800a354 <__mdiff+0x80>
 800a384:	1b33      	subs	r3, r6, r4
 800a386:	3b15      	subs	r3, #21
 800a388:	f023 0303 	bic.w	r3, r3, #3
 800a38c:	3304      	adds	r3, #4
 800a38e:	3415      	adds	r4, #21
 800a390:	42a6      	cmp	r6, r4
 800a392:	bf38      	it	cc
 800a394:	2304      	movcc	r3, #4
 800a396:	441d      	add	r5, r3
 800a398:	4473      	add	r3, lr
 800a39a:	469e      	mov	lr, r3
 800a39c:	462e      	mov	r6, r5
 800a39e:	4566      	cmp	r6, ip
 800a3a0:	d30e      	bcc.n	800a3c0 <__mdiff+0xec>
 800a3a2:	f10c 0203 	add.w	r2, ip, #3
 800a3a6:	1b52      	subs	r2, r2, r5
 800a3a8:	f022 0203 	bic.w	r2, r2, #3
 800a3ac:	3d03      	subs	r5, #3
 800a3ae:	45ac      	cmp	ip, r5
 800a3b0:	bf38      	it	cc
 800a3b2:	2200      	movcc	r2, #0
 800a3b4:	441a      	add	r2, r3
 800a3b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a3ba:	b17b      	cbz	r3, 800a3dc <__mdiff+0x108>
 800a3bc:	6107      	str	r7, [r0, #16]
 800a3be:	e7a3      	b.n	800a308 <__mdiff+0x34>
 800a3c0:	f856 8b04 	ldr.w	r8, [r6], #4
 800a3c4:	fa11 f288 	uxtah	r2, r1, r8
 800a3c8:	1414      	asrs	r4, r2, #16
 800a3ca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a3ce:	b292      	uxth	r2, r2
 800a3d0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a3d4:	f84e 2b04 	str.w	r2, [lr], #4
 800a3d8:	1421      	asrs	r1, r4, #16
 800a3da:	e7e0      	b.n	800a39e <__mdiff+0xca>
 800a3dc:	3f01      	subs	r7, #1
 800a3de:	e7ea      	b.n	800a3b6 <__mdiff+0xe2>
 800a3e0:	0800b38b 	.word	0x0800b38b
 800a3e4:	0800b3fc 	.word	0x0800b3fc

0800a3e8 <__d2b>:
 800a3e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a3ec:	4689      	mov	r9, r1
 800a3ee:	2101      	movs	r1, #1
 800a3f0:	ec57 6b10 	vmov	r6, r7, d0
 800a3f4:	4690      	mov	r8, r2
 800a3f6:	f7ff fccf 	bl	8009d98 <_Balloc>
 800a3fa:	4604      	mov	r4, r0
 800a3fc:	b930      	cbnz	r0, 800a40c <__d2b+0x24>
 800a3fe:	4602      	mov	r2, r0
 800a400:	4b25      	ldr	r3, [pc, #148]	; (800a498 <__d2b+0xb0>)
 800a402:	4826      	ldr	r0, [pc, #152]	; (800a49c <__d2b+0xb4>)
 800a404:	f240 310a 	movw	r1, #778	; 0x30a
 800a408:	f000 fa10 	bl	800a82c <__assert_func>
 800a40c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a410:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a414:	bb35      	cbnz	r5, 800a464 <__d2b+0x7c>
 800a416:	2e00      	cmp	r6, #0
 800a418:	9301      	str	r3, [sp, #4]
 800a41a:	d028      	beq.n	800a46e <__d2b+0x86>
 800a41c:	4668      	mov	r0, sp
 800a41e:	9600      	str	r6, [sp, #0]
 800a420:	f7ff fd82 	bl	8009f28 <__lo0bits>
 800a424:	9900      	ldr	r1, [sp, #0]
 800a426:	b300      	cbz	r0, 800a46a <__d2b+0x82>
 800a428:	9a01      	ldr	r2, [sp, #4]
 800a42a:	f1c0 0320 	rsb	r3, r0, #32
 800a42e:	fa02 f303 	lsl.w	r3, r2, r3
 800a432:	430b      	orrs	r3, r1
 800a434:	40c2      	lsrs	r2, r0
 800a436:	6163      	str	r3, [r4, #20]
 800a438:	9201      	str	r2, [sp, #4]
 800a43a:	9b01      	ldr	r3, [sp, #4]
 800a43c:	61a3      	str	r3, [r4, #24]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	bf14      	ite	ne
 800a442:	2202      	movne	r2, #2
 800a444:	2201      	moveq	r2, #1
 800a446:	6122      	str	r2, [r4, #16]
 800a448:	b1d5      	cbz	r5, 800a480 <__d2b+0x98>
 800a44a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a44e:	4405      	add	r5, r0
 800a450:	f8c9 5000 	str.w	r5, [r9]
 800a454:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a458:	f8c8 0000 	str.w	r0, [r8]
 800a45c:	4620      	mov	r0, r4
 800a45e:	b003      	add	sp, #12
 800a460:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a464:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a468:	e7d5      	b.n	800a416 <__d2b+0x2e>
 800a46a:	6161      	str	r1, [r4, #20]
 800a46c:	e7e5      	b.n	800a43a <__d2b+0x52>
 800a46e:	a801      	add	r0, sp, #4
 800a470:	f7ff fd5a 	bl	8009f28 <__lo0bits>
 800a474:	9b01      	ldr	r3, [sp, #4]
 800a476:	6163      	str	r3, [r4, #20]
 800a478:	2201      	movs	r2, #1
 800a47a:	6122      	str	r2, [r4, #16]
 800a47c:	3020      	adds	r0, #32
 800a47e:	e7e3      	b.n	800a448 <__d2b+0x60>
 800a480:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a484:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a488:	f8c9 0000 	str.w	r0, [r9]
 800a48c:	6918      	ldr	r0, [r3, #16]
 800a48e:	f7ff fd2b 	bl	8009ee8 <__hi0bits>
 800a492:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a496:	e7df      	b.n	800a458 <__d2b+0x70>
 800a498:	0800b38b 	.word	0x0800b38b
 800a49c:	0800b3fc 	.word	0x0800b3fc

0800a4a0 <_calloc_r>:
 800a4a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4a2:	fba1 2402 	umull	r2, r4, r1, r2
 800a4a6:	b94c      	cbnz	r4, 800a4bc <_calloc_r+0x1c>
 800a4a8:	4611      	mov	r1, r2
 800a4aa:	9201      	str	r2, [sp, #4]
 800a4ac:	f7fd fd7e 	bl	8007fac <_malloc_r>
 800a4b0:	9a01      	ldr	r2, [sp, #4]
 800a4b2:	4605      	mov	r5, r0
 800a4b4:	b930      	cbnz	r0, 800a4c4 <_calloc_r+0x24>
 800a4b6:	4628      	mov	r0, r5
 800a4b8:	b003      	add	sp, #12
 800a4ba:	bd30      	pop	{r4, r5, pc}
 800a4bc:	220c      	movs	r2, #12
 800a4be:	6002      	str	r2, [r0, #0]
 800a4c0:	2500      	movs	r5, #0
 800a4c2:	e7f8      	b.n	800a4b6 <_calloc_r+0x16>
 800a4c4:	4621      	mov	r1, r4
 800a4c6:	f7fd fcfd 	bl	8007ec4 <memset>
 800a4ca:	e7f4      	b.n	800a4b6 <_calloc_r+0x16>

0800a4cc <__sfputc_r>:
 800a4cc:	6893      	ldr	r3, [r2, #8]
 800a4ce:	3b01      	subs	r3, #1
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	b410      	push	{r4}
 800a4d4:	6093      	str	r3, [r2, #8]
 800a4d6:	da08      	bge.n	800a4ea <__sfputc_r+0x1e>
 800a4d8:	6994      	ldr	r4, [r2, #24]
 800a4da:	42a3      	cmp	r3, r4
 800a4dc:	db01      	blt.n	800a4e2 <__sfputc_r+0x16>
 800a4de:	290a      	cmp	r1, #10
 800a4e0:	d103      	bne.n	800a4ea <__sfputc_r+0x1e>
 800a4e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4e6:	f7fe badd 	b.w	8008aa4 <__swbuf_r>
 800a4ea:	6813      	ldr	r3, [r2, #0]
 800a4ec:	1c58      	adds	r0, r3, #1
 800a4ee:	6010      	str	r0, [r2, #0]
 800a4f0:	7019      	strb	r1, [r3, #0]
 800a4f2:	4608      	mov	r0, r1
 800a4f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4f8:	4770      	bx	lr

0800a4fa <__sfputs_r>:
 800a4fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4fc:	4606      	mov	r6, r0
 800a4fe:	460f      	mov	r7, r1
 800a500:	4614      	mov	r4, r2
 800a502:	18d5      	adds	r5, r2, r3
 800a504:	42ac      	cmp	r4, r5
 800a506:	d101      	bne.n	800a50c <__sfputs_r+0x12>
 800a508:	2000      	movs	r0, #0
 800a50a:	e007      	b.n	800a51c <__sfputs_r+0x22>
 800a50c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a510:	463a      	mov	r2, r7
 800a512:	4630      	mov	r0, r6
 800a514:	f7ff ffda 	bl	800a4cc <__sfputc_r>
 800a518:	1c43      	adds	r3, r0, #1
 800a51a:	d1f3      	bne.n	800a504 <__sfputs_r+0xa>
 800a51c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a520 <_vfiprintf_r>:
 800a520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a524:	460d      	mov	r5, r1
 800a526:	b09d      	sub	sp, #116	; 0x74
 800a528:	4614      	mov	r4, r2
 800a52a:	4698      	mov	r8, r3
 800a52c:	4606      	mov	r6, r0
 800a52e:	b118      	cbz	r0, 800a538 <_vfiprintf_r+0x18>
 800a530:	6983      	ldr	r3, [r0, #24]
 800a532:	b90b      	cbnz	r3, 800a538 <_vfiprintf_r+0x18>
 800a534:	f7ff fb0c 	bl	8009b50 <__sinit>
 800a538:	4b89      	ldr	r3, [pc, #548]	; (800a760 <_vfiprintf_r+0x240>)
 800a53a:	429d      	cmp	r5, r3
 800a53c:	d11b      	bne.n	800a576 <_vfiprintf_r+0x56>
 800a53e:	6875      	ldr	r5, [r6, #4]
 800a540:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a542:	07d9      	lsls	r1, r3, #31
 800a544:	d405      	bmi.n	800a552 <_vfiprintf_r+0x32>
 800a546:	89ab      	ldrh	r3, [r5, #12]
 800a548:	059a      	lsls	r2, r3, #22
 800a54a:	d402      	bmi.n	800a552 <_vfiprintf_r+0x32>
 800a54c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a54e:	f7ff fba2 	bl	8009c96 <__retarget_lock_acquire_recursive>
 800a552:	89ab      	ldrh	r3, [r5, #12]
 800a554:	071b      	lsls	r3, r3, #28
 800a556:	d501      	bpl.n	800a55c <_vfiprintf_r+0x3c>
 800a558:	692b      	ldr	r3, [r5, #16]
 800a55a:	b9eb      	cbnz	r3, 800a598 <_vfiprintf_r+0x78>
 800a55c:	4629      	mov	r1, r5
 800a55e:	4630      	mov	r0, r6
 800a560:	f7fe faf2 	bl	8008b48 <__swsetup_r>
 800a564:	b1c0      	cbz	r0, 800a598 <_vfiprintf_r+0x78>
 800a566:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a568:	07dc      	lsls	r4, r3, #31
 800a56a:	d50e      	bpl.n	800a58a <_vfiprintf_r+0x6a>
 800a56c:	f04f 30ff 	mov.w	r0, #4294967295
 800a570:	b01d      	add	sp, #116	; 0x74
 800a572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a576:	4b7b      	ldr	r3, [pc, #492]	; (800a764 <_vfiprintf_r+0x244>)
 800a578:	429d      	cmp	r5, r3
 800a57a:	d101      	bne.n	800a580 <_vfiprintf_r+0x60>
 800a57c:	68b5      	ldr	r5, [r6, #8]
 800a57e:	e7df      	b.n	800a540 <_vfiprintf_r+0x20>
 800a580:	4b79      	ldr	r3, [pc, #484]	; (800a768 <_vfiprintf_r+0x248>)
 800a582:	429d      	cmp	r5, r3
 800a584:	bf08      	it	eq
 800a586:	68f5      	ldreq	r5, [r6, #12]
 800a588:	e7da      	b.n	800a540 <_vfiprintf_r+0x20>
 800a58a:	89ab      	ldrh	r3, [r5, #12]
 800a58c:	0598      	lsls	r0, r3, #22
 800a58e:	d4ed      	bmi.n	800a56c <_vfiprintf_r+0x4c>
 800a590:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a592:	f7ff fb81 	bl	8009c98 <__retarget_lock_release_recursive>
 800a596:	e7e9      	b.n	800a56c <_vfiprintf_r+0x4c>
 800a598:	2300      	movs	r3, #0
 800a59a:	9309      	str	r3, [sp, #36]	; 0x24
 800a59c:	2320      	movs	r3, #32
 800a59e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a5a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5a6:	2330      	movs	r3, #48	; 0x30
 800a5a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a76c <_vfiprintf_r+0x24c>
 800a5ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5b0:	f04f 0901 	mov.w	r9, #1
 800a5b4:	4623      	mov	r3, r4
 800a5b6:	469a      	mov	sl, r3
 800a5b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5bc:	b10a      	cbz	r2, 800a5c2 <_vfiprintf_r+0xa2>
 800a5be:	2a25      	cmp	r2, #37	; 0x25
 800a5c0:	d1f9      	bne.n	800a5b6 <_vfiprintf_r+0x96>
 800a5c2:	ebba 0b04 	subs.w	fp, sl, r4
 800a5c6:	d00b      	beq.n	800a5e0 <_vfiprintf_r+0xc0>
 800a5c8:	465b      	mov	r3, fp
 800a5ca:	4622      	mov	r2, r4
 800a5cc:	4629      	mov	r1, r5
 800a5ce:	4630      	mov	r0, r6
 800a5d0:	f7ff ff93 	bl	800a4fa <__sfputs_r>
 800a5d4:	3001      	adds	r0, #1
 800a5d6:	f000 80aa 	beq.w	800a72e <_vfiprintf_r+0x20e>
 800a5da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5dc:	445a      	add	r2, fp
 800a5de:	9209      	str	r2, [sp, #36]	; 0x24
 800a5e0:	f89a 3000 	ldrb.w	r3, [sl]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	f000 80a2 	beq.w	800a72e <_vfiprintf_r+0x20e>
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a5f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5f4:	f10a 0a01 	add.w	sl, sl, #1
 800a5f8:	9304      	str	r3, [sp, #16]
 800a5fa:	9307      	str	r3, [sp, #28]
 800a5fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a600:	931a      	str	r3, [sp, #104]	; 0x68
 800a602:	4654      	mov	r4, sl
 800a604:	2205      	movs	r2, #5
 800a606:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a60a:	4858      	ldr	r0, [pc, #352]	; (800a76c <_vfiprintf_r+0x24c>)
 800a60c:	f7f5 fe00 	bl	8000210 <memchr>
 800a610:	9a04      	ldr	r2, [sp, #16]
 800a612:	b9d8      	cbnz	r0, 800a64c <_vfiprintf_r+0x12c>
 800a614:	06d1      	lsls	r1, r2, #27
 800a616:	bf44      	itt	mi
 800a618:	2320      	movmi	r3, #32
 800a61a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a61e:	0713      	lsls	r3, r2, #28
 800a620:	bf44      	itt	mi
 800a622:	232b      	movmi	r3, #43	; 0x2b
 800a624:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a628:	f89a 3000 	ldrb.w	r3, [sl]
 800a62c:	2b2a      	cmp	r3, #42	; 0x2a
 800a62e:	d015      	beq.n	800a65c <_vfiprintf_r+0x13c>
 800a630:	9a07      	ldr	r2, [sp, #28]
 800a632:	4654      	mov	r4, sl
 800a634:	2000      	movs	r0, #0
 800a636:	f04f 0c0a 	mov.w	ip, #10
 800a63a:	4621      	mov	r1, r4
 800a63c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a640:	3b30      	subs	r3, #48	; 0x30
 800a642:	2b09      	cmp	r3, #9
 800a644:	d94e      	bls.n	800a6e4 <_vfiprintf_r+0x1c4>
 800a646:	b1b0      	cbz	r0, 800a676 <_vfiprintf_r+0x156>
 800a648:	9207      	str	r2, [sp, #28]
 800a64a:	e014      	b.n	800a676 <_vfiprintf_r+0x156>
 800a64c:	eba0 0308 	sub.w	r3, r0, r8
 800a650:	fa09 f303 	lsl.w	r3, r9, r3
 800a654:	4313      	orrs	r3, r2
 800a656:	9304      	str	r3, [sp, #16]
 800a658:	46a2      	mov	sl, r4
 800a65a:	e7d2      	b.n	800a602 <_vfiprintf_r+0xe2>
 800a65c:	9b03      	ldr	r3, [sp, #12]
 800a65e:	1d19      	adds	r1, r3, #4
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	9103      	str	r1, [sp, #12]
 800a664:	2b00      	cmp	r3, #0
 800a666:	bfbb      	ittet	lt
 800a668:	425b      	neglt	r3, r3
 800a66a:	f042 0202 	orrlt.w	r2, r2, #2
 800a66e:	9307      	strge	r3, [sp, #28]
 800a670:	9307      	strlt	r3, [sp, #28]
 800a672:	bfb8      	it	lt
 800a674:	9204      	strlt	r2, [sp, #16]
 800a676:	7823      	ldrb	r3, [r4, #0]
 800a678:	2b2e      	cmp	r3, #46	; 0x2e
 800a67a:	d10c      	bne.n	800a696 <_vfiprintf_r+0x176>
 800a67c:	7863      	ldrb	r3, [r4, #1]
 800a67e:	2b2a      	cmp	r3, #42	; 0x2a
 800a680:	d135      	bne.n	800a6ee <_vfiprintf_r+0x1ce>
 800a682:	9b03      	ldr	r3, [sp, #12]
 800a684:	1d1a      	adds	r2, r3, #4
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	9203      	str	r2, [sp, #12]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	bfb8      	it	lt
 800a68e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a692:	3402      	adds	r4, #2
 800a694:	9305      	str	r3, [sp, #20]
 800a696:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a77c <_vfiprintf_r+0x25c>
 800a69a:	7821      	ldrb	r1, [r4, #0]
 800a69c:	2203      	movs	r2, #3
 800a69e:	4650      	mov	r0, sl
 800a6a0:	f7f5 fdb6 	bl	8000210 <memchr>
 800a6a4:	b140      	cbz	r0, 800a6b8 <_vfiprintf_r+0x198>
 800a6a6:	2340      	movs	r3, #64	; 0x40
 800a6a8:	eba0 000a 	sub.w	r0, r0, sl
 800a6ac:	fa03 f000 	lsl.w	r0, r3, r0
 800a6b0:	9b04      	ldr	r3, [sp, #16]
 800a6b2:	4303      	orrs	r3, r0
 800a6b4:	3401      	adds	r4, #1
 800a6b6:	9304      	str	r3, [sp, #16]
 800a6b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6bc:	482c      	ldr	r0, [pc, #176]	; (800a770 <_vfiprintf_r+0x250>)
 800a6be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6c2:	2206      	movs	r2, #6
 800a6c4:	f7f5 fda4 	bl	8000210 <memchr>
 800a6c8:	2800      	cmp	r0, #0
 800a6ca:	d03f      	beq.n	800a74c <_vfiprintf_r+0x22c>
 800a6cc:	4b29      	ldr	r3, [pc, #164]	; (800a774 <_vfiprintf_r+0x254>)
 800a6ce:	bb1b      	cbnz	r3, 800a718 <_vfiprintf_r+0x1f8>
 800a6d0:	9b03      	ldr	r3, [sp, #12]
 800a6d2:	3307      	adds	r3, #7
 800a6d4:	f023 0307 	bic.w	r3, r3, #7
 800a6d8:	3308      	adds	r3, #8
 800a6da:	9303      	str	r3, [sp, #12]
 800a6dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6de:	443b      	add	r3, r7
 800a6e0:	9309      	str	r3, [sp, #36]	; 0x24
 800a6e2:	e767      	b.n	800a5b4 <_vfiprintf_r+0x94>
 800a6e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6e8:	460c      	mov	r4, r1
 800a6ea:	2001      	movs	r0, #1
 800a6ec:	e7a5      	b.n	800a63a <_vfiprintf_r+0x11a>
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	3401      	adds	r4, #1
 800a6f2:	9305      	str	r3, [sp, #20]
 800a6f4:	4619      	mov	r1, r3
 800a6f6:	f04f 0c0a 	mov.w	ip, #10
 800a6fa:	4620      	mov	r0, r4
 800a6fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a700:	3a30      	subs	r2, #48	; 0x30
 800a702:	2a09      	cmp	r2, #9
 800a704:	d903      	bls.n	800a70e <_vfiprintf_r+0x1ee>
 800a706:	2b00      	cmp	r3, #0
 800a708:	d0c5      	beq.n	800a696 <_vfiprintf_r+0x176>
 800a70a:	9105      	str	r1, [sp, #20]
 800a70c:	e7c3      	b.n	800a696 <_vfiprintf_r+0x176>
 800a70e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a712:	4604      	mov	r4, r0
 800a714:	2301      	movs	r3, #1
 800a716:	e7f0      	b.n	800a6fa <_vfiprintf_r+0x1da>
 800a718:	ab03      	add	r3, sp, #12
 800a71a:	9300      	str	r3, [sp, #0]
 800a71c:	462a      	mov	r2, r5
 800a71e:	4b16      	ldr	r3, [pc, #88]	; (800a778 <_vfiprintf_r+0x258>)
 800a720:	a904      	add	r1, sp, #16
 800a722:	4630      	mov	r0, r6
 800a724:	f7fd fd56 	bl	80081d4 <_printf_float>
 800a728:	4607      	mov	r7, r0
 800a72a:	1c78      	adds	r0, r7, #1
 800a72c:	d1d6      	bne.n	800a6dc <_vfiprintf_r+0x1bc>
 800a72e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a730:	07d9      	lsls	r1, r3, #31
 800a732:	d405      	bmi.n	800a740 <_vfiprintf_r+0x220>
 800a734:	89ab      	ldrh	r3, [r5, #12]
 800a736:	059a      	lsls	r2, r3, #22
 800a738:	d402      	bmi.n	800a740 <_vfiprintf_r+0x220>
 800a73a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a73c:	f7ff faac 	bl	8009c98 <__retarget_lock_release_recursive>
 800a740:	89ab      	ldrh	r3, [r5, #12]
 800a742:	065b      	lsls	r3, r3, #25
 800a744:	f53f af12 	bmi.w	800a56c <_vfiprintf_r+0x4c>
 800a748:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a74a:	e711      	b.n	800a570 <_vfiprintf_r+0x50>
 800a74c:	ab03      	add	r3, sp, #12
 800a74e:	9300      	str	r3, [sp, #0]
 800a750:	462a      	mov	r2, r5
 800a752:	4b09      	ldr	r3, [pc, #36]	; (800a778 <_vfiprintf_r+0x258>)
 800a754:	a904      	add	r1, sp, #16
 800a756:	4630      	mov	r0, r6
 800a758:	f7fd ffe0 	bl	800871c <_printf_i>
 800a75c:	e7e4      	b.n	800a728 <_vfiprintf_r+0x208>
 800a75e:	bf00      	nop
 800a760:	0800b3bc 	.word	0x0800b3bc
 800a764:	0800b3dc 	.word	0x0800b3dc
 800a768:	0800b39c 	.word	0x0800b39c
 800a76c:	0800b554 	.word	0x0800b554
 800a770:	0800b55e 	.word	0x0800b55e
 800a774:	080081d5 	.word	0x080081d5
 800a778:	0800a4fb 	.word	0x0800a4fb
 800a77c:	0800b55a 	.word	0x0800b55a

0800a780 <__sread>:
 800a780:	b510      	push	{r4, lr}
 800a782:	460c      	mov	r4, r1
 800a784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a788:	f000 f8d6 	bl	800a938 <_read_r>
 800a78c:	2800      	cmp	r0, #0
 800a78e:	bfab      	itete	ge
 800a790:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a792:	89a3      	ldrhlt	r3, [r4, #12]
 800a794:	181b      	addge	r3, r3, r0
 800a796:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a79a:	bfac      	ite	ge
 800a79c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a79e:	81a3      	strhlt	r3, [r4, #12]
 800a7a0:	bd10      	pop	{r4, pc}

0800a7a2 <__swrite>:
 800a7a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7a6:	461f      	mov	r7, r3
 800a7a8:	898b      	ldrh	r3, [r1, #12]
 800a7aa:	05db      	lsls	r3, r3, #23
 800a7ac:	4605      	mov	r5, r0
 800a7ae:	460c      	mov	r4, r1
 800a7b0:	4616      	mov	r6, r2
 800a7b2:	d505      	bpl.n	800a7c0 <__swrite+0x1e>
 800a7b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7b8:	2302      	movs	r3, #2
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f000 f898 	bl	800a8f0 <_lseek_r>
 800a7c0:	89a3      	ldrh	r3, [r4, #12]
 800a7c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a7ca:	81a3      	strh	r3, [r4, #12]
 800a7cc:	4632      	mov	r2, r6
 800a7ce:	463b      	mov	r3, r7
 800a7d0:	4628      	mov	r0, r5
 800a7d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7d6:	f000 b817 	b.w	800a808 <_write_r>

0800a7da <__sseek>:
 800a7da:	b510      	push	{r4, lr}
 800a7dc:	460c      	mov	r4, r1
 800a7de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7e2:	f000 f885 	bl	800a8f0 <_lseek_r>
 800a7e6:	1c43      	adds	r3, r0, #1
 800a7e8:	89a3      	ldrh	r3, [r4, #12]
 800a7ea:	bf15      	itete	ne
 800a7ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800a7ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a7f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a7f6:	81a3      	strheq	r3, [r4, #12]
 800a7f8:	bf18      	it	ne
 800a7fa:	81a3      	strhne	r3, [r4, #12]
 800a7fc:	bd10      	pop	{r4, pc}

0800a7fe <__sclose>:
 800a7fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a802:	f000 b831 	b.w	800a868 <_close_r>
	...

0800a808 <_write_r>:
 800a808:	b538      	push	{r3, r4, r5, lr}
 800a80a:	4d07      	ldr	r5, [pc, #28]	; (800a828 <_write_r+0x20>)
 800a80c:	4604      	mov	r4, r0
 800a80e:	4608      	mov	r0, r1
 800a810:	4611      	mov	r1, r2
 800a812:	2200      	movs	r2, #0
 800a814:	602a      	str	r2, [r5, #0]
 800a816:	461a      	mov	r2, r3
 800a818:	f7f7 fed7 	bl	80025ca <_write>
 800a81c:	1c43      	adds	r3, r0, #1
 800a81e:	d102      	bne.n	800a826 <_write_r+0x1e>
 800a820:	682b      	ldr	r3, [r5, #0]
 800a822:	b103      	cbz	r3, 800a826 <_write_r+0x1e>
 800a824:	6023      	str	r3, [r4, #0]
 800a826:	bd38      	pop	{r3, r4, r5, pc}
 800a828:	200004c8 	.word	0x200004c8

0800a82c <__assert_func>:
 800a82c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a82e:	4614      	mov	r4, r2
 800a830:	461a      	mov	r2, r3
 800a832:	4b09      	ldr	r3, [pc, #36]	; (800a858 <__assert_func+0x2c>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4605      	mov	r5, r0
 800a838:	68d8      	ldr	r0, [r3, #12]
 800a83a:	b14c      	cbz	r4, 800a850 <__assert_func+0x24>
 800a83c:	4b07      	ldr	r3, [pc, #28]	; (800a85c <__assert_func+0x30>)
 800a83e:	9100      	str	r1, [sp, #0]
 800a840:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a844:	4906      	ldr	r1, [pc, #24]	; (800a860 <__assert_func+0x34>)
 800a846:	462b      	mov	r3, r5
 800a848:	f000 f81e 	bl	800a888 <fiprintf>
 800a84c:	f000 f893 	bl	800a976 <abort>
 800a850:	4b04      	ldr	r3, [pc, #16]	; (800a864 <__assert_func+0x38>)
 800a852:	461c      	mov	r4, r3
 800a854:	e7f3      	b.n	800a83e <__assert_func+0x12>
 800a856:	bf00      	nop
 800a858:	20000014 	.word	0x20000014
 800a85c:	0800b565 	.word	0x0800b565
 800a860:	0800b572 	.word	0x0800b572
 800a864:	0800b5a0 	.word	0x0800b5a0

0800a868 <_close_r>:
 800a868:	b538      	push	{r3, r4, r5, lr}
 800a86a:	4d06      	ldr	r5, [pc, #24]	; (800a884 <_close_r+0x1c>)
 800a86c:	2300      	movs	r3, #0
 800a86e:	4604      	mov	r4, r0
 800a870:	4608      	mov	r0, r1
 800a872:	602b      	str	r3, [r5, #0]
 800a874:	f7f7 fec5 	bl	8002602 <_close>
 800a878:	1c43      	adds	r3, r0, #1
 800a87a:	d102      	bne.n	800a882 <_close_r+0x1a>
 800a87c:	682b      	ldr	r3, [r5, #0]
 800a87e:	b103      	cbz	r3, 800a882 <_close_r+0x1a>
 800a880:	6023      	str	r3, [r4, #0]
 800a882:	bd38      	pop	{r3, r4, r5, pc}
 800a884:	200004c8 	.word	0x200004c8

0800a888 <fiprintf>:
 800a888:	b40e      	push	{r1, r2, r3}
 800a88a:	b503      	push	{r0, r1, lr}
 800a88c:	4601      	mov	r1, r0
 800a88e:	ab03      	add	r3, sp, #12
 800a890:	4805      	ldr	r0, [pc, #20]	; (800a8a8 <fiprintf+0x20>)
 800a892:	f853 2b04 	ldr.w	r2, [r3], #4
 800a896:	6800      	ldr	r0, [r0, #0]
 800a898:	9301      	str	r3, [sp, #4]
 800a89a:	f7ff fe41 	bl	800a520 <_vfiprintf_r>
 800a89e:	b002      	add	sp, #8
 800a8a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8a4:	b003      	add	sp, #12
 800a8a6:	4770      	bx	lr
 800a8a8:	20000014 	.word	0x20000014

0800a8ac <_fstat_r>:
 800a8ac:	b538      	push	{r3, r4, r5, lr}
 800a8ae:	4d07      	ldr	r5, [pc, #28]	; (800a8cc <_fstat_r+0x20>)
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	4604      	mov	r4, r0
 800a8b4:	4608      	mov	r0, r1
 800a8b6:	4611      	mov	r1, r2
 800a8b8:	602b      	str	r3, [r5, #0]
 800a8ba:	f7f7 feae 	bl	800261a <_fstat>
 800a8be:	1c43      	adds	r3, r0, #1
 800a8c0:	d102      	bne.n	800a8c8 <_fstat_r+0x1c>
 800a8c2:	682b      	ldr	r3, [r5, #0]
 800a8c4:	b103      	cbz	r3, 800a8c8 <_fstat_r+0x1c>
 800a8c6:	6023      	str	r3, [r4, #0]
 800a8c8:	bd38      	pop	{r3, r4, r5, pc}
 800a8ca:	bf00      	nop
 800a8cc:	200004c8 	.word	0x200004c8

0800a8d0 <_isatty_r>:
 800a8d0:	b538      	push	{r3, r4, r5, lr}
 800a8d2:	4d06      	ldr	r5, [pc, #24]	; (800a8ec <_isatty_r+0x1c>)
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	4604      	mov	r4, r0
 800a8d8:	4608      	mov	r0, r1
 800a8da:	602b      	str	r3, [r5, #0]
 800a8dc:	f7f7 fead 	bl	800263a <_isatty>
 800a8e0:	1c43      	adds	r3, r0, #1
 800a8e2:	d102      	bne.n	800a8ea <_isatty_r+0x1a>
 800a8e4:	682b      	ldr	r3, [r5, #0]
 800a8e6:	b103      	cbz	r3, 800a8ea <_isatty_r+0x1a>
 800a8e8:	6023      	str	r3, [r4, #0]
 800a8ea:	bd38      	pop	{r3, r4, r5, pc}
 800a8ec:	200004c8 	.word	0x200004c8

0800a8f0 <_lseek_r>:
 800a8f0:	b538      	push	{r3, r4, r5, lr}
 800a8f2:	4d07      	ldr	r5, [pc, #28]	; (800a910 <_lseek_r+0x20>)
 800a8f4:	4604      	mov	r4, r0
 800a8f6:	4608      	mov	r0, r1
 800a8f8:	4611      	mov	r1, r2
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	602a      	str	r2, [r5, #0]
 800a8fe:	461a      	mov	r2, r3
 800a900:	f7f7 fea6 	bl	8002650 <_lseek>
 800a904:	1c43      	adds	r3, r0, #1
 800a906:	d102      	bne.n	800a90e <_lseek_r+0x1e>
 800a908:	682b      	ldr	r3, [r5, #0]
 800a90a:	b103      	cbz	r3, 800a90e <_lseek_r+0x1e>
 800a90c:	6023      	str	r3, [r4, #0]
 800a90e:	bd38      	pop	{r3, r4, r5, pc}
 800a910:	200004c8 	.word	0x200004c8

0800a914 <__ascii_mbtowc>:
 800a914:	b082      	sub	sp, #8
 800a916:	b901      	cbnz	r1, 800a91a <__ascii_mbtowc+0x6>
 800a918:	a901      	add	r1, sp, #4
 800a91a:	b142      	cbz	r2, 800a92e <__ascii_mbtowc+0x1a>
 800a91c:	b14b      	cbz	r3, 800a932 <__ascii_mbtowc+0x1e>
 800a91e:	7813      	ldrb	r3, [r2, #0]
 800a920:	600b      	str	r3, [r1, #0]
 800a922:	7812      	ldrb	r2, [r2, #0]
 800a924:	1e10      	subs	r0, r2, #0
 800a926:	bf18      	it	ne
 800a928:	2001      	movne	r0, #1
 800a92a:	b002      	add	sp, #8
 800a92c:	4770      	bx	lr
 800a92e:	4610      	mov	r0, r2
 800a930:	e7fb      	b.n	800a92a <__ascii_mbtowc+0x16>
 800a932:	f06f 0001 	mvn.w	r0, #1
 800a936:	e7f8      	b.n	800a92a <__ascii_mbtowc+0x16>

0800a938 <_read_r>:
 800a938:	b538      	push	{r3, r4, r5, lr}
 800a93a:	4d07      	ldr	r5, [pc, #28]	; (800a958 <_read_r+0x20>)
 800a93c:	4604      	mov	r4, r0
 800a93e:	4608      	mov	r0, r1
 800a940:	4611      	mov	r1, r2
 800a942:	2200      	movs	r2, #0
 800a944:	602a      	str	r2, [r5, #0]
 800a946:	461a      	mov	r2, r3
 800a948:	f7f7 fe22 	bl	8002590 <_read>
 800a94c:	1c43      	adds	r3, r0, #1
 800a94e:	d102      	bne.n	800a956 <_read_r+0x1e>
 800a950:	682b      	ldr	r3, [r5, #0]
 800a952:	b103      	cbz	r3, 800a956 <_read_r+0x1e>
 800a954:	6023      	str	r3, [r4, #0]
 800a956:	bd38      	pop	{r3, r4, r5, pc}
 800a958:	200004c8 	.word	0x200004c8

0800a95c <__ascii_wctomb>:
 800a95c:	b149      	cbz	r1, 800a972 <__ascii_wctomb+0x16>
 800a95e:	2aff      	cmp	r2, #255	; 0xff
 800a960:	bf85      	ittet	hi
 800a962:	238a      	movhi	r3, #138	; 0x8a
 800a964:	6003      	strhi	r3, [r0, #0]
 800a966:	700a      	strbls	r2, [r1, #0]
 800a968:	f04f 30ff 	movhi.w	r0, #4294967295
 800a96c:	bf98      	it	ls
 800a96e:	2001      	movls	r0, #1
 800a970:	4770      	bx	lr
 800a972:	4608      	mov	r0, r1
 800a974:	4770      	bx	lr

0800a976 <abort>:
 800a976:	b508      	push	{r3, lr}
 800a978:	2006      	movs	r0, #6
 800a97a:	f000 f82b 	bl	800a9d4 <raise>
 800a97e:	2001      	movs	r0, #1
 800a980:	f7f7 fdfc 	bl	800257c <_exit>

0800a984 <_raise_r>:
 800a984:	291f      	cmp	r1, #31
 800a986:	b538      	push	{r3, r4, r5, lr}
 800a988:	4604      	mov	r4, r0
 800a98a:	460d      	mov	r5, r1
 800a98c:	d904      	bls.n	800a998 <_raise_r+0x14>
 800a98e:	2316      	movs	r3, #22
 800a990:	6003      	str	r3, [r0, #0]
 800a992:	f04f 30ff 	mov.w	r0, #4294967295
 800a996:	bd38      	pop	{r3, r4, r5, pc}
 800a998:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a99a:	b112      	cbz	r2, 800a9a2 <_raise_r+0x1e>
 800a99c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a9a0:	b94b      	cbnz	r3, 800a9b6 <_raise_r+0x32>
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	f000 f830 	bl	800aa08 <_getpid_r>
 800a9a8:	462a      	mov	r2, r5
 800a9aa:	4601      	mov	r1, r0
 800a9ac:	4620      	mov	r0, r4
 800a9ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9b2:	f000 b817 	b.w	800a9e4 <_kill_r>
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	d00a      	beq.n	800a9d0 <_raise_r+0x4c>
 800a9ba:	1c59      	adds	r1, r3, #1
 800a9bc:	d103      	bne.n	800a9c6 <_raise_r+0x42>
 800a9be:	2316      	movs	r3, #22
 800a9c0:	6003      	str	r3, [r0, #0]
 800a9c2:	2001      	movs	r0, #1
 800a9c4:	e7e7      	b.n	800a996 <_raise_r+0x12>
 800a9c6:	2400      	movs	r4, #0
 800a9c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a9cc:	4628      	mov	r0, r5
 800a9ce:	4798      	blx	r3
 800a9d0:	2000      	movs	r0, #0
 800a9d2:	e7e0      	b.n	800a996 <_raise_r+0x12>

0800a9d4 <raise>:
 800a9d4:	4b02      	ldr	r3, [pc, #8]	; (800a9e0 <raise+0xc>)
 800a9d6:	4601      	mov	r1, r0
 800a9d8:	6818      	ldr	r0, [r3, #0]
 800a9da:	f7ff bfd3 	b.w	800a984 <_raise_r>
 800a9de:	bf00      	nop
 800a9e0:	20000014 	.word	0x20000014

0800a9e4 <_kill_r>:
 800a9e4:	b538      	push	{r3, r4, r5, lr}
 800a9e6:	4d07      	ldr	r5, [pc, #28]	; (800aa04 <_kill_r+0x20>)
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	4604      	mov	r4, r0
 800a9ec:	4608      	mov	r0, r1
 800a9ee:	4611      	mov	r1, r2
 800a9f0:	602b      	str	r3, [r5, #0]
 800a9f2:	f7f7 fdb3 	bl	800255c <_kill>
 800a9f6:	1c43      	adds	r3, r0, #1
 800a9f8:	d102      	bne.n	800aa00 <_kill_r+0x1c>
 800a9fa:	682b      	ldr	r3, [r5, #0]
 800a9fc:	b103      	cbz	r3, 800aa00 <_kill_r+0x1c>
 800a9fe:	6023      	str	r3, [r4, #0]
 800aa00:	bd38      	pop	{r3, r4, r5, pc}
 800aa02:	bf00      	nop
 800aa04:	200004c8 	.word	0x200004c8

0800aa08 <_getpid_r>:
 800aa08:	f7f7 bda0 	b.w	800254c <_getpid>
 800aa0c:	0000      	movs	r0, r0
	...

0800aa10 <exp>:
 800aa10:	b538      	push	{r3, r4, r5, lr}
 800aa12:	ed2d 8b02 	vpush	{d8}
 800aa16:	ec55 4b10 	vmov	r4, r5, d0
 800aa1a:	f000 f881 	bl	800ab20 <__ieee754_exp>
 800aa1e:	eeb0 8a40 	vmov.f32	s16, s0
 800aa22:	eef0 8a60 	vmov.f32	s17, s1
 800aa26:	ec45 4b10 	vmov	d0, r4, r5
 800aa2a:	f000 fbe7 	bl	800b1fc <finite>
 800aa2e:	b168      	cbz	r0, 800aa4c <exp+0x3c>
 800aa30:	a317      	add	r3, pc, #92	; (adr r3, 800aa90 <exp+0x80>)
 800aa32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa36:	4620      	mov	r0, r4
 800aa38:	4629      	mov	r1, r5
 800aa3a:	f7f6 f885 	bl	8000b48 <__aeabi_dcmpgt>
 800aa3e:	b160      	cbz	r0, 800aa5a <exp+0x4a>
 800aa40:	f7fd fa0e 	bl	8007e60 <__errno>
 800aa44:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 800aa80 <exp+0x70>
 800aa48:	2322      	movs	r3, #34	; 0x22
 800aa4a:	6003      	str	r3, [r0, #0]
 800aa4c:	eeb0 0a48 	vmov.f32	s0, s16
 800aa50:	eef0 0a68 	vmov.f32	s1, s17
 800aa54:	ecbd 8b02 	vpop	{d8}
 800aa58:	bd38      	pop	{r3, r4, r5, pc}
 800aa5a:	a30f      	add	r3, pc, #60	; (adr r3, 800aa98 <exp+0x88>)
 800aa5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa60:	4620      	mov	r0, r4
 800aa62:	4629      	mov	r1, r5
 800aa64:	f7f6 f852 	bl	8000b0c <__aeabi_dcmplt>
 800aa68:	2800      	cmp	r0, #0
 800aa6a:	d0ef      	beq.n	800aa4c <exp+0x3c>
 800aa6c:	f7fd f9f8 	bl	8007e60 <__errno>
 800aa70:	2322      	movs	r3, #34	; 0x22
 800aa72:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800aa88 <exp+0x78>
 800aa76:	6003      	str	r3, [r0, #0]
 800aa78:	e7e8      	b.n	800aa4c <exp+0x3c>
 800aa7a:	bf00      	nop
 800aa7c:	f3af 8000 	nop.w
 800aa80:	00000000 	.word	0x00000000
 800aa84:	7ff00000 	.word	0x7ff00000
	...
 800aa90:	fefa39ef 	.word	0xfefa39ef
 800aa94:	40862e42 	.word	0x40862e42
 800aa98:	d52d3051 	.word	0xd52d3051
 800aa9c:	c0874910 	.word	0xc0874910

0800aaa0 <log>:
 800aaa0:	b538      	push	{r3, r4, r5, lr}
 800aaa2:	ed2d 8b02 	vpush	{d8}
 800aaa6:	ec55 4b10 	vmov	r4, r5, d0
 800aaaa:	f000 f9bd 	bl	800ae28 <__ieee754_log>
 800aaae:	4622      	mov	r2, r4
 800aab0:	462b      	mov	r3, r5
 800aab2:	4620      	mov	r0, r4
 800aab4:	4629      	mov	r1, r5
 800aab6:	eeb0 8a40 	vmov.f32	s16, s0
 800aaba:	eef0 8a60 	vmov.f32	s17, s1
 800aabe:	f7f6 f84d 	bl	8000b5c <__aeabi_dcmpun>
 800aac2:	b998      	cbnz	r0, 800aaec <log+0x4c>
 800aac4:	2200      	movs	r2, #0
 800aac6:	2300      	movs	r3, #0
 800aac8:	4620      	mov	r0, r4
 800aaca:	4629      	mov	r1, r5
 800aacc:	f7f6 f83c 	bl	8000b48 <__aeabi_dcmpgt>
 800aad0:	b960      	cbnz	r0, 800aaec <log+0x4c>
 800aad2:	2200      	movs	r2, #0
 800aad4:	2300      	movs	r3, #0
 800aad6:	4620      	mov	r0, r4
 800aad8:	4629      	mov	r1, r5
 800aada:	f7f6 f80d 	bl	8000af8 <__aeabi_dcmpeq>
 800aade:	b160      	cbz	r0, 800aafa <log+0x5a>
 800aae0:	f7fd f9be 	bl	8007e60 <__errno>
 800aae4:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800ab10 <log+0x70>
 800aae8:	2322      	movs	r3, #34	; 0x22
 800aaea:	6003      	str	r3, [r0, #0]
 800aaec:	eeb0 0a48 	vmov.f32	s0, s16
 800aaf0:	eef0 0a68 	vmov.f32	s1, s17
 800aaf4:	ecbd 8b02 	vpop	{d8}
 800aaf8:	bd38      	pop	{r3, r4, r5, pc}
 800aafa:	f7fd f9b1 	bl	8007e60 <__errno>
 800aafe:	ecbd 8b02 	vpop	{d8}
 800ab02:	2321      	movs	r3, #33	; 0x21
 800ab04:	6003      	str	r3, [r0, #0]
 800ab06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab0a:	4803      	ldr	r0, [pc, #12]	; (800ab18 <log+0x78>)
 800ab0c:	f000 bb84 	b.w	800b218 <nan>
 800ab10:	00000000 	.word	0x00000000
 800ab14:	fff00000 	.word	0xfff00000
 800ab18:	0800b5a0 	.word	0x0800b5a0
 800ab1c:	00000000 	.word	0x00000000

0800ab20 <__ieee754_exp>:
 800ab20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab24:	ec55 4b10 	vmov	r4, r5, d0
 800ab28:	49b5      	ldr	r1, [pc, #724]	; (800ae00 <__ieee754_exp+0x2e0>)
 800ab2a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ab2e:	428b      	cmp	r3, r1
 800ab30:	ed2d 8b04 	vpush	{d8-d9}
 800ab34:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800ab38:	d93d      	bls.n	800abb6 <__ieee754_exp+0x96>
 800ab3a:	49b2      	ldr	r1, [pc, #712]	; (800ae04 <__ieee754_exp+0x2e4>)
 800ab3c:	428b      	cmp	r3, r1
 800ab3e:	d918      	bls.n	800ab72 <__ieee754_exp+0x52>
 800ab40:	ee10 3a10 	vmov	r3, s0
 800ab44:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	d009      	beq.n	800ab60 <__ieee754_exp+0x40>
 800ab4c:	ee10 2a10 	vmov	r2, s0
 800ab50:	462b      	mov	r3, r5
 800ab52:	4620      	mov	r0, r4
 800ab54:	4629      	mov	r1, r5
 800ab56:	f7f5 fbb1 	bl	80002bc <__adddf3>
 800ab5a:	4604      	mov	r4, r0
 800ab5c:	460d      	mov	r5, r1
 800ab5e:	e002      	b.n	800ab66 <__ieee754_exp+0x46>
 800ab60:	b10e      	cbz	r6, 800ab66 <__ieee754_exp+0x46>
 800ab62:	2400      	movs	r4, #0
 800ab64:	2500      	movs	r5, #0
 800ab66:	ecbd 8b04 	vpop	{d8-d9}
 800ab6a:	ec45 4b10 	vmov	d0, r4, r5
 800ab6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab72:	a38d      	add	r3, pc, #564	; (adr r3, 800ada8 <__ieee754_exp+0x288>)
 800ab74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab78:	ee10 0a10 	vmov	r0, s0
 800ab7c:	4629      	mov	r1, r5
 800ab7e:	f7f5 ffe3 	bl	8000b48 <__aeabi_dcmpgt>
 800ab82:	4607      	mov	r7, r0
 800ab84:	b130      	cbz	r0, 800ab94 <__ieee754_exp+0x74>
 800ab86:	ecbd 8b04 	vpop	{d8-d9}
 800ab8a:	2000      	movs	r0, #0
 800ab8c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab90:	f000 bb2b 	b.w	800b1ea <__math_oflow>
 800ab94:	a386      	add	r3, pc, #536	; (adr r3, 800adb0 <__ieee754_exp+0x290>)
 800ab96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9a:	4620      	mov	r0, r4
 800ab9c:	4629      	mov	r1, r5
 800ab9e:	f7f5 ffb5 	bl	8000b0c <__aeabi_dcmplt>
 800aba2:	2800      	cmp	r0, #0
 800aba4:	f000 808b 	beq.w	800acbe <__ieee754_exp+0x19e>
 800aba8:	ecbd 8b04 	vpop	{d8-d9}
 800abac:	4638      	mov	r0, r7
 800abae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abb2:	f000 bb11 	b.w	800b1d8 <__math_uflow>
 800abb6:	4a94      	ldr	r2, [pc, #592]	; (800ae08 <__ieee754_exp+0x2e8>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	f240 80ac 	bls.w	800ad16 <__ieee754_exp+0x1f6>
 800abbe:	4a93      	ldr	r2, [pc, #588]	; (800ae0c <__ieee754_exp+0x2ec>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d87c      	bhi.n	800acbe <__ieee754_exp+0x19e>
 800abc4:	4b92      	ldr	r3, [pc, #584]	; (800ae10 <__ieee754_exp+0x2f0>)
 800abc6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800abca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abce:	ee10 0a10 	vmov	r0, s0
 800abd2:	4629      	mov	r1, r5
 800abd4:	f7f5 fb70 	bl	80002b8 <__aeabi_dsub>
 800abd8:	4b8e      	ldr	r3, [pc, #568]	; (800ae14 <__ieee754_exp+0x2f4>)
 800abda:	00f7      	lsls	r7, r6, #3
 800abdc:	443b      	add	r3, r7
 800abde:	ed93 7b00 	vldr	d7, [r3]
 800abe2:	f1c6 0a01 	rsb	sl, r6, #1
 800abe6:	4680      	mov	r8, r0
 800abe8:	4689      	mov	r9, r1
 800abea:	ebaa 0a06 	sub.w	sl, sl, r6
 800abee:	eeb0 8a47 	vmov.f32	s16, s14
 800abf2:	eef0 8a67 	vmov.f32	s17, s15
 800abf6:	ec53 2b18 	vmov	r2, r3, d8
 800abfa:	4640      	mov	r0, r8
 800abfc:	4649      	mov	r1, r9
 800abfe:	f7f5 fb5b 	bl	80002b8 <__aeabi_dsub>
 800ac02:	4604      	mov	r4, r0
 800ac04:	460d      	mov	r5, r1
 800ac06:	4622      	mov	r2, r4
 800ac08:	462b      	mov	r3, r5
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	4629      	mov	r1, r5
 800ac0e:	f7f5 fd0b 	bl	8000628 <__aeabi_dmul>
 800ac12:	a369      	add	r3, pc, #420	; (adr r3, 800adb8 <__ieee754_exp+0x298>)
 800ac14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac18:	4606      	mov	r6, r0
 800ac1a:	460f      	mov	r7, r1
 800ac1c:	f7f5 fd04 	bl	8000628 <__aeabi_dmul>
 800ac20:	a367      	add	r3, pc, #412	; (adr r3, 800adc0 <__ieee754_exp+0x2a0>)
 800ac22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac26:	f7f5 fb47 	bl	80002b8 <__aeabi_dsub>
 800ac2a:	4632      	mov	r2, r6
 800ac2c:	463b      	mov	r3, r7
 800ac2e:	f7f5 fcfb 	bl	8000628 <__aeabi_dmul>
 800ac32:	a365      	add	r3, pc, #404	; (adr r3, 800adc8 <__ieee754_exp+0x2a8>)
 800ac34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac38:	f7f5 fb40 	bl	80002bc <__adddf3>
 800ac3c:	4632      	mov	r2, r6
 800ac3e:	463b      	mov	r3, r7
 800ac40:	f7f5 fcf2 	bl	8000628 <__aeabi_dmul>
 800ac44:	a362      	add	r3, pc, #392	; (adr r3, 800add0 <__ieee754_exp+0x2b0>)
 800ac46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4a:	f7f5 fb35 	bl	80002b8 <__aeabi_dsub>
 800ac4e:	4632      	mov	r2, r6
 800ac50:	463b      	mov	r3, r7
 800ac52:	f7f5 fce9 	bl	8000628 <__aeabi_dmul>
 800ac56:	a360      	add	r3, pc, #384	; (adr r3, 800add8 <__ieee754_exp+0x2b8>)
 800ac58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5c:	f7f5 fb2e 	bl	80002bc <__adddf3>
 800ac60:	4632      	mov	r2, r6
 800ac62:	463b      	mov	r3, r7
 800ac64:	f7f5 fce0 	bl	8000628 <__aeabi_dmul>
 800ac68:	4602      	mov	r2, r0
 800ac6a:	460b      	mov	r3, r1
 800ac6c:	4620      	mov	r0, r4
 800ac6e:	4629      	mov	r1, r5
 800ac70:	f7f5 fb22 	bl	80002b8 <__aeabi_dsub>
 800ac74:	4602      	mov	r2, r0
 800ac76:	460b      	mov	r3, r1
 800ac78:	4606      	mov	r6, r0
 800ac7a:	460f      	mov	r7, r1
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	4629      	mov	r1, r5
 800ac80:	f7f5 fcd2 	bl	8000628 <__aeabi_dmul>
 800ac84:	ec41 0b19 	vmov	d9, r0, r1
 800ac88:	f1ba 0f00 	cmp.w	sl, #0
 800ac8c:	d15d      	bne.n	800ad4a <__ieee754_exp+0x22a>
 800ac8e:	2200      	movs	r2, #0
 800ac90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac94:	4630      	mov	r0, r6
 800ac96:	4639      	mov	r1, r7
 800ac98:	f7f5 fb0e 	bl	80002b8 <__aeabi_dsub>
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	460b      	mov	r3, r1
 800aca0:	ec51 0b19 	vmov	r0, r1, d9
 800aca4:	f7f5 fdea 	bl	800087c <__aeabi_ddiv>
 800aca8:	4622      	mov	r2, r4
 800acaa:	462b      	mov	r3, r5
 800acac:	f7f5 fb04 	bl	80002b8 <__aeabi_dsub>
 800acb0:	4602      	mov	r2, r0
 800acb2:	460b      	mov	r3, r1
 800acb4:	2000      	movs	r0, #0
 800acb6:	4958      	ldr	r1, [pc, #352]	; (800ae18 <__ieee754_exp+0x2f8>)
 800acb8:	f7f5 fafe 	bl	80002b8 <__aeabi_dsub>
 800acbc:	e74d      	b.n	800ab5a <__ieee754_exp+0x3a>
 800acbe:	4857      	ldr	r0, [pc, #348]	; (800ae1c <__ieee754_exp+0x2fc>)
 800acc0:	a347      	add	r3, pc, #284	; (adr r3, 800ade0 <__ieee754_exp+0x2c0>)
 800acc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc6:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800acca:	4629      	mov	r1, r5
 800accc:	4620      	mov	r0, r4
 800acce:	f7f5 fcab 	bl	8000628 <__aeabi_dmul>
 800acd2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800acd6:	f7f5 faf1 	bl	80002bc <__adddf3>
 800acda:	f7f5 ff55 	bl	8000b88 <__aeabi_d2iz>
 800acde:	4682      	mov	sl, r0
 800ace0:	f7f5 fc38 	bl	8000554 <__aeabi_i2d>
 800ace4:	a340      	add	r3, pc, #256	; (adr r3, 800ade8 <__ieee754_exp+0x2c8>)
 800ace6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acea:	4606      	mov	r6, r0
 800acec:	460f      	mov	r7, r1
 800acee:	f7f5 fc9b 	bl	8000628 <__aeabi_dmul>
 800acf2:	4602      	mov	r2, r0
 800acf4:	460b      	mov	r3, r1
 800acf6:	4620      	mov	r0, r4
 800acf8:	4629      	mov	r1, r5
 800acfa:	f7f5 fadd 	bl	80002b8 <__aeabi_dsub>
 800acfe:	a33c      	add	r3, pc, #240	; (adr r3, 800adf0 <__ieee754_exp+0x2d0>)
 800ad00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad04:	4680      	mov	r8, r0
 800ad06:	4689      	mov	r9, r1
 800ad08:	4630      	mov	r0, r6
 800ad0a:	4639      	mov	r1, r7
 800ad0c:	f7f5 fc8c 	bl	8000628 <__aeabi_dmul>
 800ad10:	ec41 0b18 	vmov	d8, r0, r1
 800ad14:	e76f      	b.n	800abf6 <__ieee754_exp+0xd6>
 800ad16:	4a42      	ldr	r2, [pc, #264]	; (800ae20 <__ieee754_exp+0x300>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d811      	bhi.n	800ad40 <__ieee754_exp+0x220>
 800ad1c:	a336      	add	r3, pc, #216	; (adr r3, 800adf8 <__ieee754_exp+0x2d8>)
 800ad1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad22:	ee10 0a10 	vmov	r0, s0
 800ad26:	4629      	mov	r1, r5
 800ad28:	f7f5 fac8 	bl	80002bc <__adddf3>
 800ad2c:	4b3a      	ldr	r3, [pc, #232]	; (800ae18 <__ieee754_exp+0x2f8>)
 800ad2e:	2200      	movs	r2, #0
 800ad30:	f7f5 ff0a 	bl	8000b48 <__aeabi_dcmpgt>
 800ad34:	b138      	cbz	r0, 800ad46 <__ieee754_exp+0x226>
 800ad36:	4b38      	ldr	r3, [pc, #224]	; (800ae18 <__ieee754_exp+0x2f8>)
 800ad38:	2200      	movs	r2, #0
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	4629      	mov	r1, r5
 800ad3e:	e70a      	b.n	800ab56 <__ieee754_exp+0x36>
 800ad40:	f04f 0a00 	mov.w	sl, #0
 800ad44:	e75f      	b.n	800ac06 <__ieee754_exp+0xe6>
 800ad46:	4682      	mov	sl, r0
 800ad48:	e75d      	b.n	800ac06 <__ieee754_exp+0xe6>
 800ad4a:	4632      	mov	r2, r6
 800ad4c:	463b      	mov	r3, r7
 800ad4e:	2000      	movs	r0, #0
 800ad50:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800ad54:	f7f5 fab0 	bl	80002b8 <__aeabi_dsub>
 800ad58:	4602      	mov	r2, r0
 800ad5a:	460b      	mov	r3, r1
 800ad5c:	ec51 0b19 	vmov	r0, r1, d9
 800ad60:	f7f5 fd8c 	bl	800087c <__aeabi_ddiv>
 800ad64:	4602      	mov	r2, r0
 800ad66:	460b      	mov	r3, r1
 800ad68:	ec51 0b18 	vmov	r0, r1, d8
 800ad6c:	f7f5 faa4 	bl	80002b8 <__aeabi_dsub>
 800ad70:	4642      	mov	r2, r8
 800ad72:	464b      	mov	r3, r9
 800ad74:	f7f5 faa0 	bl	80002b8 <__aeabi_dsub>
 800ad78:	4602      	mov	r2, r0
 800ad7a:	460b      	mov	r3, r1
 800ad7c:	2000      	movs	r0, #0
 800ad7e:	4926      	ldr	r1, [pc, #152]	; (800ae18 <__ieee754_exp+0x2f8>)
 800ad80:	f7f5 fa9a 	bl	80002b8 <__aeabi_dsub>
 800ad84:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800ad88:	4592      	cmp	sl, r2
 800ad8a:	db02      	blt.n	800ad92 <__ieee754_exp+0x272>
 800ad8c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800ad90:	e6e3      	b.n	800ab5a <__ieee754_exp+0x3a>
 800ad92:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800ad96:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800ada0:	f7f5 fc42 	bl	8000628 <__aeabi_dmul>
 800ada4:	e6d9      	b.n	800ab5a <__ieee754_exp+0x3a>
 800ada6:	bf00      	nop
 800ada8:	fefa39ef 	.word	0xfefa39ef
 800adac:	40862e42 	.word	0x40862e42
 800adb0:	d52d3051 	.word	0xd52d3051
 800adb4:	c0874910 	.word	0xc0874910
 800adb8:	72bea4d0 	.word	0x72bea4d0
 800adbc:	3e663769 	.word	0x3e663769
 800adc0:	c5d26bf1 	.word	0xc5d26bf1
 800adc4:	3ebbbd41 	.word	0x3ebbbd41
 800adc8:	af25de2c 	.word	0xaf25de2c
 800adcc:	3f11566a 	.word	0x3f11566a
 800add0:	16bebd93 	.word	0x16bebd93
 800add4:	3f66c16c 	.word	0x3f66c16c
 800add8:	5555553e 	.word	0x5555553e
 800addc:	3fc55555 	.word	0x3fc55555
 800ade0:	652b82fe 	.word	0x652b82fe
 800ade4:	3ff71547 	.word	0x3ff71547
 800ade8:	fee00000 	.word	0xfee00000
 800adec:	3fe62e42 	.word	0x3fe62e42
 800adf0:	35793c76 	.word	0x35793c76
 800adf4:	3dea39ef 	.word	0x3dea39ef
 800adf8:	8800759c 	.word	0x8800759c
 800adfc:	7e37e43c 	.word	0x7e37e43c
 800ae00:	40862e41 	.word	0x40862e41
 800ae04:	7fefffff 	.word	0x7fefffff
 800ae08:	3fd62e42 	.word	0x3fd62e42
 800ae0c:	3ff0a2b1 	.word	0x3ff0a2b1
 800ae10:	0800b6c0 	.word	0x0800b6c0
 800ae14:	0800b6d0 	.word	0x0800b6d0
 800ae18:	3ff00000 	.word	0x3ff00000
 800ae1c:	0800b6b0 	.word	0x0800b6b0
 800ae20:	3defffff 	.word	0x3defffff
 800ae24:	00000000 	.word	0x00000000

0800ae28 <__ieee754_log>:
 800ae28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae2c:	ec51 0b10 	vmov	r0, r1, d0
 800ae30:	ed2d 8b04 	vpush	{d8-d9}
 800ae34:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800ae38:	b083      	sub	sp, #12
 800ae3a:	460d      	mov	r5, r1
 800ae3c:	da29      	bge.n	800ae92 <__ieee754_log+0x6a>
 800ae3e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ae42:	4303      	orrs	r3, r0
 800ae44:	ee10 2a10 	vmov	r2, s0
 800ae48:	d10c      	bne.n	800ae64 <__ieee754_log+0x3c>
 800ae4a:	49cf      	ldr	r1, [pc, #828]	; (800b188 <__ieee754_log+0x360>)
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	2300      	movs	r3, #0
 800ae50:	2000      	movs	r0, #0
 800ae52:	f7f5 fd13 	bl	800087c <__aeabi_ddiv>
 800ae56:	ec41 0b10 	vmov	d0, r0, r1
 800ae5a:	b003      	add	sp, #12
 800ae5c:	ecbd 8b04 	vpop	{d8-d9}
 800ae60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae64:	2900      	cmp	r1, #0
 800ae66:	da05      	bge.n	800ae74 <__ieee754_log+0x4c>
 800ae68:	460b      	mov	r3, r1
 800ae6a:	f7f5 fa25 	bl	80002b8 <__aeabi_dsub>
 800ae6e:	2200      	movs	r2, #0
 800ae70:	2300      	movs	r3, #0
 800ae72:	e7ee      	b.n	800ae52 <__ieee754_log+0x2a>
 800ae74:	4bc5      	ldr	r3, [pc, #788]	; (800b18c <__ieee754_log+0x364>)
 800ae76:	2200      	movs	r2, #0
 800ae78:	f7f5 fbd6 	bl	8000628 <__aeabi_dmul>
 800ae7c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800ae80:	460d      	mov	r5, r1
 800ae82:	4ac3      	ldr	r2, [pc, #780]	; (800b190 <__ieee754_log+0x368>)
 800ae84:	4295      	cmp	r5, r2
 800ae86:	dd06      	ble.n	800ae96 <__ieee754_log+0x6e>
 800ae88:	4602      	mov	r2, r0
 800ae8a:	460b      	mov	r3, r1
 800ae8c:	f7f5 fa16 	bl	80002bc <__adddf3>
 800ae90:	e7e1      	b.n	800ae56 <__ieee754_log+0x2e>
 800ae92:	2300      	movs	r3, #0
 800ae94:	e7f5      	b.n	800ae82 <__ieee754_log+0x5a>
 800ae96:	152c      	asrs	r4, r5, #20
 800ae98:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ae9c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800aea0:	441c      	add	r4, r3
 800aea2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800aea6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800aeaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aeae:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800aeb2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800aeb6:	ea42 0105 	orr.w	r1, r2, r5
 800aeba:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800aebe:	2200      	movs	r2, #0
 800aec0:	4bb4      	ldr	r3, [pc, #720]	; (800b194 <__ieee754_log+0x36c>)
 800aec2:	f7f5 f9f9 	bl	80002b8 <__aeabi_dsub>
 800aec6:	1cab      	adds	r3, r5, #2
 800aec8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aecc:	2b02      	cmp	r3, #2
 800aece:	4682      	mov	sl, r0
 800aed0:	468b      	mov	fp, r1
 800aed2:	f04f 0200 	mov.w	r2, #0
 800aed6:	dc53      	bgt.n	800af80 <__ieee754_log+0x158>
 800aed8:	2300      	movs	r3, #0
 800aeda:	f7f5 fe0d 	bl	8000af8 <__aeabi_dcmpeq>
 800aede:	b1d0      	cbz	r0, 800af16 <__ieee754_log+0xee>
 800aee0:	2c00      	cmp	r4, #0
 800aee2:	f000 8122 	beq.w	800b12a <__ieee754_log+0x302>
 800aee6:	4620      	mov	r0, r4
 800aee8:	f7f5 fb34 	bl	8000554 <__aeabi_i2d>
 800aeec:	a390      	add	r3, pc, #576	; (adr r3, 800b130 <__ieee754_log+0x308>)
 800aeee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef2:	4606      	mov	r6, r0
 800aef4:	460f      	mov	r7, r1
 800aef6:	f7f5 fb97 	bl	8000628 <__aeabi_dmul>
 800aefa:	a38f      	add	r3, pc, #572	; (adr r3, 800b138 <__ieee754_log+0x310>)
 800aefc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af00:	4604      	mov	r4, r0
 800af02:	460d      	mov	r5, r1
 800af04:	4630      	mov	r0, r6
 800af06:	4639      	mov	r1, r7
 800af08:	f7f5 fb8e 	bl	8000628 <__aeabi_dmul>
 800af0c:	4602      	mov	r2, r0
 800af0e:	460b      	mov	r3, r1
 800af10:	4620      	mov	r0, r4
 800af12:	4629      	mov	r1, r5
 800af14:	e7ba      	b.n	800ae8c <__ieee754_log+0x64>
 800af16:	a38a      	add	r3, pc, #552	; (adr r3, 800b140 <__ieee754_log+0x318>)
 800af18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af1c:	4650      	mov	r0, sl
 800af1e:	4659      	mov	r1, fp
 800af20:	f7f5 fb82 	bl	8000628 <__aeabi_dmul>
 800af24:	4602      	mov	r2, r0
 800af26:	460b      	mov	r3, r1
 800af28:	2000      	movs	r0, #0
 800af2a:	499b      	ldr	r1, [pc, #620]	; (800b198 <__ieee754_log+0x370>)
 800af2c:	f7f5 f9c4 	bl	80002b8 <__aeabi_dsub>
 800af30:	4652      	mov	r2, sl
 800af32:	4606      	mov	r6, r0
 800af34:	460f      	mov	r7, r1
 800af36:	465b      	mov	r3, fp
 800af38:	4650      	mov	r0, sl
 800af3a:	4659      	mov	r1, fp
 800af3c:	f7f5 fb74 	bl	8000628 <__aeabi_dmul>
 800af40:	4602      	mov	r2, r0
 800af42:	460b      	mov	r3, r1
 800af44:	4630      	mov	r0, r6
 800af46:	4639      	mov	r1, r7
 800af48:	f7f5 fb6e 	bl	8000628 <__aeabi_dmul>
 800af4c:	4606      	mov	r6, r0
 800af4e:	460f      	mov	r7, r1
 800af50:	b914      	cbnz	r4, 800af58 <__ieee754_log+0x130>
 800af52:	4632      	mov	r2, r6
 800af54:	463b      	mov	r3, r7
 800af56:	e0a2      	b.n	800b09e <__ieee754_log+0x276>
 800af58:	4620      	mov	r0, r4
 800af5a:	f7f5 fafb 	bl	8000554 <__aeabi_i2d>
 800af5e:	a374      	add	r3, pc, #464	; (adr r3, 800b130 <__ieee754_log+0x308>)
 800af60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af64:	4680      	mov	r8, r0
 800af66:	4689      	mov	r9, r1
 800af68:	f7f5 fb5e 	bl	8000628 <__aeabi_dmul>
 800af6c:	a372      	add	r3, pc, #456	; (adr r3, 800b138 <__ieee754_log+0x310>)
 800af6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af72:	4604      	mov	r4, r0
 800af74:	460d      	mov	r5, r1
 800af76:	4640      	mov	r0, r8
 800af78:	4649      	mov	r1, r9
 800af7a:	f7f5 fb55 	bl	8000628 <__aeabi_dmul>
 800af7e:	e0a7      	b.n	800b0d0 <__ieee754_log+0x2a8>
 800af80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800af84:	f7f5 f99a 	bl	80002bc <__adddf3>
 800af88:	4602      	mov	r2, r0
 800af8a:	460b      	mov	r3, r1
 800af8c:	4650      	mov	r0, sl
 800af8e:	4659      	mov	r1, fp
 800af90:	f7f5 fc74 	bl	800087c <__aeabi_ddiv>
 800af94:	ec41 0b18 	vmov	d8, r0, r1
 800af98:	4620      	mov	r0, r4
 800af9a:	f7f5 fadb 	bl	8000554 <__aeabi_i2d>
 800af9e:	ec53 2b18 	vmov	r2, r3, d8
 800afa2:	ec41 0b19 	vmov	d9, r0, r1
 800afa6:	ec51 0b18 	vmov	r0, r1, d8
 800afaa:	f7f5 fb3d 	bl	8000628 <__aeabi_dmul>
 800afae:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800afb2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800afb6:	9301      	str	r3, [sp, #4]
 800afb8:	4602      	mov	r2, r0
 800afba:	460b      	mov	r3, r1
 800afbc:	4680      	mov	r8, r0
 800afbe:	4689      	mov	r9, r1
 800afc0:	f7f5 fb32 	bl	8000628 <__aeabi_dmul>
 800afc4:	a360      	add	r3, pc, #384	; (adr r3, 800b148 <__ieee754_log+0x320>)
 800afc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afca:	4606      	mov	r6, r0
 800afcc:	460f      	mov	r7, r1
 800afce:	f7f5 fb2b 	bl	8000628 <__aeabi_dmul>
 800afd2:	a35f      	add	r3, pc, #380	; (adr r3, 800b150 <__ieee754_log+0x328>)
 800afd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd8:	f7f5 f970 	bl	80002bc <__adddf3>
 800afdc:	4632      	mov	r2, r6
 800afde:	463b      	mov	r3, r7
 800afe0:	f7f5 fb22 	bl	8000628 <__aeabi_dmul>
 800afe4:	a35c      	add	r3, pc, #368	; (adr r3, 800b158 <__ieee754_log+0x330>)
 800afe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afea:	f7f5 f967 	bl	80002bc <__adddf3>
 800afee:	4632      	mov	r2, r6
 800aff0:	463b      	mov	r3, r7
 800aff2:	f7f5 fb19 	bl	8000628 <__aeabi_dmul>
 800aff6:	a35a      	add	r3, pc, #360	; (adr r3, 800b160 <__ieee754_log+0x338>)
 800aff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affc:	f7f5 f95e 	bl	80002bc <__adddf3>
 800b000:	4642      	mov	r2, r8
 800b002:	464b      	mov	r3, r9
 800b004:	f7f5 fb10 	bl	8000628 <__aeabi_dmul>
 800b008:	a357      	add	r3, pc, #348	; (adr r3, 800b168 <__ieee754_log+0x340>)
 800b00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00e:	4680      	mov	r8, r0
 800b010:	4689      	mov	r9, r1
 800b012:	4630      	mov	r0, r6
 800b014:	4639      	mov	r1, r7
 800b016:	f7f5 fb07 	bl	8000628 <__aeabi_dmul>
 800b01a:	a355      	add	r3, pc, #340	; (adr r3, 800b170 <__ieee754_log+0x348>)
 800b01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b020:	f7f5 f94c 	bl	80002bc <__adddf3>
 800b024:	4632      	mov	r2, r6
 800b026:	463b      	mov	r3, r7
 800b028:	f7f5 fafe 	bl	8000628 <__aeabi_dmul>
 800b02c:	a352      	add	r3, pc, #328	; (adr r3, 800b178 <__ieee754_log+0x350>)
 800b02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b032:	f7f5 f943 	bl	80002bc <__adddf3>
 800b036:	4632      	mov	r2, r6
 800b038:	463b      	mov	r3, r7
 800b03a:	f7f5 faf5 	bl	8000628 <__aeabi_dmul>
 800b03e:	460b      	mov	r3, r1
 800b040:	4602      	mov	r2, r0
 800b042:	4649      	mov	r1, r9
 800b044:	4640      	mov	r0, r8
 800b046:	f7f5 f939 	bl	80002bc <__adddf3>
 800b04a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800b04e:	9b01      	ldr	r3, [sp, #4]
 800b050:	3551      	adds	r5, #81	; 0x51
 800b052:	431d      	orrs	r5, r3
 800b054:	2d00      	cmp	r5, #0
 800b056:	4680      	mov	r8, r0
 800b058:	4689      	mov	r9, r1
 800b05a:	dd48      	ble.n	800b0ee <__ieee754_log+0x2c6>
 800b05c:	4b4e      	ldr	r3, [pc, #312]	; (800b198 <__ieee754_log+0x370>)
 800b05e:	2200      	movs	r2, #0
 800b060:	4650      	mov	r0, sl
 800b062:	4659      	mov	r1, fp
 800b064:	f7f5 fae0 	bl	8000628 <__aeabi_dmul>
 800b068:	4652      	mov	r2, sl
 800b06a:	465b      	mov	r3, fp
 800b06c:	f7f5 fadc 	bl	8000628 <__aeabi_dmul>
 800b070:	4602      	mov	r2, r0
 800b072:	460b      	mov	r3, r1
 800b074:	4606      	mov	r6, r0
 800b076:	460f      	mov	r7, r1
 800b078:	4640      	mov	r0, r8
 800b07a:	4649      	mov	r1, r9
 800b07c:	f7f5 f91e 	bl	80002bc <__adddf3>
 800b080:	ec53 2b18 	vmov	r2, r3, d8
 800b084:	f7f5 fad0 	bl	8000628 <__aeabi_dmul>
 800b088:	4680      	mov	r8, r0
 800b08a:	4689      	mov	r9, r1
 800b08c:	b964      	cbnz	r4, 800b0a8 <__ieee754_log+0x280>
 800b08e:	4602      	mov	r2, r0
 800b090:	460b      	mov	r3, r1
 800b092:	4630      	mov	r0, r6
 800b094:	4639      	mov	r1, r7
 800b096:	f7f5 f90f 	bl	80002b8 <__aeabi_dsub>
 800b09a:	4602      	mov	r2, r0
 800b09c:	460b      	mov	r3, r1
 800b09e:	4650      	mov	r0, sl
 800b0a0:	4659      	mov	r1, fp
 800b0a2:	f7f5 f909 	bl	80002b8 <__aeabi_dsub>
 800b0a6:	e6d6      	b.n	800ae56 <__ieee754_log+0x2e>
 800b0a8:	a321      	add	r3, pc, #132	; (adr r3, 800b130 <__ieee754_log+0x308>)
 800b0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ae:	ec51 0b19 	vmov	r0, r1, d9
 800b0b2:	f7f5 fab9 	bl	8000628 <__aeabi_dmul>
 800b0b6:	a320      	add	r3, pc, #128	; (adr r3, 800b138 <__ieee754_log+0x310>)
 800b0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0bc:	4604      	mov	r4, r0
 800b0be:	460d      	mov	r5, r1
 800b0c0:	ec51 0b19 	vmov	r0, r1, d9
 800b0c4:	f7f5 fab0 	bl	8000628 <__aeabi_dmul>
 800b0c8:	4642      	mov	r2, r8
 800b0ca:	464b      	mov	r3, r9
 800b0cc:	f7f5 f8f6 	bl	80002bc <__adddf3>
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	460b      	mov	r3, r1
 800b0d4:	4630      	mov	r0, r6
 800b0d6:	4639      	mov	r1, r7
 800b0d8:	f7f5 f8ee 	bl	80002b8 <__aeabi_dsub>
 800b0dc:	4652      	mov	r2, sl
 800b0de:	465b      	mov	r3, fp
 800b0e0:	f7f5 f8ea 	bl	80002b8 <__aeabi_dsub>
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	460b      	mov	r3, r1
 800b0e8:	4620      	mov	r0, r4
 800b0ea:	4629      	mov	r1, r5
 800b0ec:	e7d9      	b.n	800b0a2 <__ieee754_log+0x27a>
 800b0ee:	4602      	mov	r2, r0
 800b0f0:	460b      	mov	r3, r1
 800b0f2:	4650      	mov	r0, sl
 800b0f4:	4659      	mov	r1, fp
 800b0f6:	f7f5 f8df 	bl	80002b8 <__aeabi_dsub>
 800b0fa:	ec53 2b18 	vmov	r2, r3, d8
 800b0fe:	f7f5 fa93 	bl	8000628 <__aeabi_dmul>
 800b102:	4606      	mov	r6, r0
 800b104:	460f      	mov	r7, r1
 800b106:	2c00      	cmp	r4, #0
 800b108:	f43f af23 	beq.w	800af52 <__ieee754_log+0x12a>
 800b10c:	a308      	add	r3, pc, #32	; (adr r3, 800b130 <__ieee754_log+0x308>)
 800b10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b112:	ec51 0b19 	vmov	r0, r1, d9
 800b116:	f7f5 fa87 	bl	8000628 <__aeabi_dmul>
 800b11a:	a307      	add	r3, pc, #28	; (adr r3, 800b138 <__ieee754_log+0x310>)
 800b11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b120:	4604      	mov	r4, r0
 800b122:	460d      	mov	r5, r1
 800b124:	ec51 0b19 	vmov	r0, r1, d9
 800b128:	e727      	b.n	800af7a <__ieee754_log+0x152>
 800b12a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800b180 <__ieee754_log+0x358>
 800b12e:	e694      	b.n	800ae5a <__ieee754_log+0x32>
 800b130:	fee00000 	.word	0xfee00000
 800b134:	3fe62e42 	.word	0x3fe62e42
 800b138:	35793c76 	.word	0x35793c76
 800b13c:	3dea39ef 	.word	0x3dea39ef
 800b140:	55555555 	.word	0x55555555
 800b144:	3fd55555 	.word	0x3fd55555
 800b148:	df3e5244 	.word	0xdf3e5244
 800b14c:	3fc2f112 	.word	0x3fc2f112
 800b150:	96cb03de 	.word	0x96cb03de
 800b154:	3fc74664 	.word	0x3fc74664
 800b158:	94229359 	.word	0x94229359
 800b15c:	3fd24924 	.word	0x3fd24924
 800b160:	55555593 	.word	0x55555593
 800b164:	3fe55555 	.word	0x3fe55555
 800b168:	d078c69f 	.word	0xd078c69f
 800b16c:	3fc39a09 	.word	0x3fc39a09
 800b170:	1d8e78af 	.word	0x1d8e78af
 800b174:	3fcc71c5 	.word	0x3fcc71c5
 800b178:	9997fa04 	.word	0x9997fa04
 800b17c:	3fd99999 	.word	0x3fd99999
	...
 800b188:	c3500000 	.word	0xc3500000
 800b18c:	43500000 	.word	0x43500000
 800b190:	7fefffff 	.word	0x7fefffff
 800b194:	3ff00000 	.word	0x3ff00000
 800b198:	3fe00000 	.word	0x3fe00000

0800b19c <with_errno>:
 800b19c:	b570      	push	{r4, r5, r6, lr}
 800b19e:	4604      	mov	r4, r0
 800b1a0:	460d      	mov	r5, r1
 800b1a2:	4616      	mov	r6, r2
 800b1a4:	f7fc fe5c 	bl	8007e60 <__errno>
 800b1a8:	4629      	mov	r1, r5
 800b1aa:	6006      	str	r6, [r0, #0]
 800b1ac:	4620      	mov	r0, r4
 800b1ae:	bd70      	pop	{r4, r5, r6, pc}

0800b1b0 <xflow>:
 800b1b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1b2:	4614      	mov	r4, r2
 800b1b4:	461d      	mov	r5, r3
 800b1b6:	b108      	cbz	r0, 800b1bc <xflow+0xc>
 800b1b8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b1bc:	e9cd 2300 	strd	r2, r3, [sp]
 800b1c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b1c4:	4620      	mov	r0, r4
 800b1c6:	4629      	mov	r1, r5
 800b1c8:	f7f5 fa2e 	bl	8000628 <__aeabi_dmul>
 800b1cc:	2222      	movs	r2, #34	; 0x22
 800b1ce:	b003      	add	sp, #12
 800b1d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b1d4:	f7ff bfe2 	b.w	800b19c <with_errno>

0800b1d8 <__math_uflow>:
 800b1d8:	b508      	push	{r3, lr}
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b1e0:	f7ff ffe6 	bl	800b1b0 <xflow>
 800b1e4:	ec41 0b10 	vmov	d0, r0, r1
 800b1e8:	bd08      	pop	{r3, pc}

0800b1ea <__math_oflow>:
 800b1ea:	b508      	push	{r3, lr}
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800b1f2:	f7ff ffdd 	bl	800b1b0 <xflow>
 800b1f6:	ec41 0b10 	vmov	d0, r0, r1
 800b1fa:	bd08      	pop	{r3, pc}

0800b1fc <finite>:
 800b1fc:	b082      	sub	sp, #8
 800b1fe:	ed8d 0b00 	vstr	d0, [sp]
 800b202:	9801      	ldr	r0, [sp, #4]
 800b204:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b208:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b20c:	0fc0      	lsrs	r0, r0, #31
 800b20e:	b002      	add	sp, #8
 800b210:	4770      	bx	lr
 800b212:	0000      	movs	r0, r0
 800b214:	0000      	movs	r0, r0
	...

0800b218 <nan>:
 800b218:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b220 <nan+0x8>
 800b21c:	4770      	bx	lr
 800b21e:	bf00      	nop
 800b220:	00000000 	.word	0x00000000
 800b224:	7ff80000 	.word	0x7ff80000

0800b228 <_init>:
 800b228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b22a:	bf00      	nop
 800b22c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b22e:	bc08      	pop	{r3}
 800b230:	469e      	mov	lr, r3
 800b232:	4770      	bx	lr

0800b234 <_fini>:
 800b234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b236:	bf00      	nop
 800b238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b23a:	bc08      	pop	{r3}
 800b23c:	469e      	mov	lr, r3
 800b23e:	4770      	bx	lr
