
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae00  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  0800afc0  0800afc0  0001afc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b468  0800b468  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b468  0800b468  0001b468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b470  0800b470  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b470  0800b470  0001b470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b474  0800b474  0001b474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b478  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  200001dc  0800b654  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000474  0800b654  00020474  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000175d7  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028d1  00000000  00000000  000377e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f0  00000000  00000000  0003a0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013f8  00000000  00000000  0003b5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d54b  00000000  00000000  0003c9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000175c2  00000000  00000000  00069eeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011def7  00000000  00000000  000814ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019f3a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006dd8  00000000  00000000  0019f3f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800afa8 	.word	0x0800afa8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	0800afa8 	.word	0x0800afa8

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b974 	b.w	8000f78 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468e      	mov	lr, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14d      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4694      	mov	ip, r2
 8000cba:	d969      	bls.n	8000d90 <__udivmoddi4+0xe8>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b152      	cbz	r2, 8000cd8 <__udivmoddi4+0x30>
 8000cc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cc6:	f1c2 0120 	rsb	r1, r2, #32
 8000cca:	fa20 f101 	lsr.w	r1, r0, r1
 8000cce:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cd6:	4094      	lsls	r4, r2
 8000cd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cdc:	0c21      	lsrs	r1, r4, #16
 8000cde:	fbbe f6f8 	udiv	r6, lr, r8
 8000ce2:	fa1f f78c 	uxth.w	r7, ip
 8000ce6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cee:	fb06 f107 	mul.w	r1, r6, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cfe:	f080 811f 	bcs.w	8000f40 <__udivmoddi4+0x298>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 811c 	bls.w	8000f40 <__udivmoddi4+0x298>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d1c:	fb00 f707 	mul.w	r7, r0, r7
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x92>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2c:	f080 810a 	bcs.w	8000f44 <__udivmoddi4+0x29c>
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	f240 8107 	bls.w	8000f44 <__udivmoddi4+0x29c>
 8000d36:	4464      	add	r4, ip
 8000d38:	3802      	subs	r0, #2
 8000d3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3e:	1be4      	subs	r4, r4, r7
 8000d40:	2600      	movs	r6, #0
 8000d42:	b11d      	cbz	r5, 8000d4c <__udivmoddi4+0xa4>
 8000d44:	40d4      	lsrs	r4, r2
 8000d46:	2300      	movs	r3, #0
 8000d48:	e9c5 4300 	strd	r4, r3, [r5]
 8000d4c:	4631      	mov	r1, r6
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0xc2>
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	f000 80ef 	beq.w	8000f3a <__udivmoddi4+0x292>
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d62:	4630      	mov	r0, r6
 8000d64:	4631      	mov	r1, r6
 8000d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6a:	fab3 f683 	clz	r6, r3
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d14a      	bne.n	8000e08 <__udivmoddi4+0x160>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d302      	bcc.n	8000d7c <__udivmoddi4+0xd4>
 8000d76:	4282      	cmp	r2, r0
 8000d78:	f200 80f9 	bhi.w	8000f6e <__udivmoddi4+0x2c6>
 8000d7c:	1a84      	subs	r4, r0, r2
 8000d7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d82:	2001      	movs	r0, #1
 8000d84:	469e      	mov	lr, r3
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d0e0      	beq.n	8000d4c <__udivmoddi4+0xa4>
 8000d8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d8e:	e7dd      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000d90:	b902      	cbnz	r2, 8000d94 <__udivmoddi4+0xec>
 8000d92:	deff      	udf	#255	; 0xff
 8000d94:	fab2 f282 	clz	r2, r2
 8000d98:	2a00      	cmp	r2, #0
 8000d9a:	f040 8092 	bne.w	8000ec2 <__udivmoddi4+0x21a>
 8000d9e:	eba1 010c 	sub.w	r1, r1, ip
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	2601      	movs	r6, #1
 8000dac:	0c20      	lsrs	r0, r4, #16
 8000dae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000db2:	fb07 1113 	mls	r1, r7, r3, r1
 8000db6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dba:	fb0e f003 	mul.w	r0, lr, r3
 8000dbe:	4288      	cmp	r0, r1
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x12c>
 8000dc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x12a>
 8000dcc:	4288      	cmp	r0, r1
 8000dce:	f200 80cb 	bhi.w	8000f68 <__udivmoddi4+0x2c0>
 8000dd2:	4643      	mov	r3, r8
 8000dd4:	1a09      	subs	r1, r1, r0
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ddc:	fb07 1110 	mls	r1, r7, r0, r1
 8000de0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de4:	fb0e fe00 	mul.w	lr, lr, r0
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x156>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000df4:	d202      	bcs.n	8000dfc <__udivmoddi4+0x154>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f200 80bb 	bhi.w	8000f72 <__udivmoddi4+0x2ca>
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	eba4 040e 	sub.w	r4, r4, lr
 8000e02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e06:	e79c      	b.n	8000d42 <__udivmoddi4+0x9a>
 8000e08:	f1c6 0720 	rsb	r7, r6, #32
 8000e0c:	40b3      	lsls	r3, r6
 8000e0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e16:	fa20 f407 	lsr.w	r4, r0, r7
 8000e1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	40f9      	lsrs	r1, r7
 8000e22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e26:	fa00 f306 	lsl.w	r3, r0, r6
 8000e2a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e2e:	0c20      	lsrs	r0, r4, #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fb09 1118 	mls	r1, r9, r8, r1
 8000e38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e40:	4288      	cmp	r0, r1
 8000e42:	fa02 f206 	lsl.w	r2, r2, r6
 8000e46:	d90b      	bls.n	8000e60 <__udivmoddi4+0x1b8>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e50:	f080 8088 	bcs.w	8000f64 <__udivmoddi4+0x2bc>
 8000e54:	4288      	cmp	r0, r1
 8000e56:	f240 8085 	bls.w	8000f64 <__udivmoddi4+0x2bc>
 8000e5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e68:	fb09 1110 	mls	r1, r9, r0, r1
 8000e6c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e74:	458e      	cmp	lr, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x1e2>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e80:	d26c      	bcs.n	8000f5c <__udivmoddi4+0x2b4>
 8000e82:	458e      	cmp	lr, r1
 8000e84:	d96a      	bls.n	8000f5c <__udivmoddi4+0x2b4>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e8e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e92:	eba1 010e 	sub.w	r1, r1, lr
 8000e96:	42a1      	cmp	r1, r4
 8000e98:	46c8      	mov	r8, r9
 8000e9a:	46a6      	mov	lr, r4
 8000e9c:	d356      	bcc.n	8000f4c <__udivmoddi4+0x2a4>
 8000e9e:	d053      	beq.n	8000f48 <__udivmoddi4+0x2a0>
 8000ea0:	b15d      	cbz	r5, 8000eba <__udivmoddi4+0x212>
 8000ea2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ea6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eaa:	fa01 f707 	lsl.w	r7, r1, r7
 8000eae:	fa22 f306 	lsr.w	r3, r2, r6
 8000eb2:	40f1      	lsrs	r1, r6
 8000eb4:	431f      	orrs	r7, r3
 8000eb6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eba:	2600      	movs	r6, #0
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	f1c2 0320 	rsb	r3, r2, #32
 8000ec6:	40d8      	lsrs	r0, r3
 8000ec8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ecc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed0:	4091      	lsls	r1, r2
 8000ed2:	4301      	orrs	r1, r0
 8000ed4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed8:	fa1f fe8c 	uxth.w	lr, ip
 8000edc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ee0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee4:	0c0b      	lsrs	r3, r1, #16
 8000ee6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eea:	fb00 f60e 	mul.w	r6, r0, lr
 8000eee:	429e      	cmp	r6, r3
 8000ef0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x260>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000efe:	d22f      	bcs.n	8000f60 <__udivmoddi4+0x2b8>
 8000f00:	429e      	cmp	r6, r3
 8000f02:	d92d      	bls.n	8000f60 <__udivmoddi4+0x2b8>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	1b9b      	subs	r3, r3, r6
 8000f0a:	b289      	uxth	r1, r1
 8000f0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f10:	fb07 3316 	mls	r3, r7, r6, r3
 8000f14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f18:	fb06 f30e 	mul.w	r3, r6, lr
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x28a>
 8000f20:	eb1c 0101 	adds.w	r1, ip, r1
 8000f24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f28:	d216      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	d914      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2e:	3e02      	subs	r6, #2
 8000f30:	4461      	add	r1, ip
 8000f32:	1ac9      	subs	r1, r1, r3
 8000f34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f38:	e738      	b.n	8000dac <__udivmoddi4+0x104>
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e705      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e3      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6f8      	b.n	8000d3a <__udivmoddi4+0x92>
 8000f48:	454b      	cmp	r3, r9
 8000f4a:	d2a9      	bcs.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7a3      	b.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f58:	4646      	mov	r6, r8
 8000f5a:	e7ea      	b.n	8000f32 <__udivmoddi4+0x28a>
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	e794      	b.n	8000e8a <__udivmoddi4+0x1e2>
 8000f60:	4640      	mov	r0, r8
 8000f62:	e7d1      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f64:	46d0      	mov	r8, sl
 8000f66:	e77b      	b.n	8000e60 <__udivmoddi4+0x1b8>
 8000f68:	3b02      	subs	r3, #2
 8000f6a:	4461      	add	r1, ip
 8000f6c:	e732      	b.n	8000dd4 <__udivmoddi4+0x12c>
 8000f6e:	4630      	mov	r0, r6
 8000f70:	e709      	b.n	8000d86 <__udivmoddi4+0xde>
 8000f72:	4464      	add	r4, ip
 8000f74:	3802      	subs	r0, #2
 8000f76:	e742      	b.n	8000dfe <__udivmoddi4+0x156>

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <getStart>:
static BlockType g_blockType; // use this to remember the next object block type between function calls
static int g_skipStart = 0;
static Block *g_blocks;

int getStart(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
  uint16_t w, lastw;

  lastw = 0xffff; // some inconsequential initial value
 8000f82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f86:	80fb      	strh	r3, [r7, #6]

  while(1)
  {
    w = getWord();
 8000f88:	f000 f95a 	bl	8001240 <getWord>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	80bb      	strh	r3, [r7, #4]
    //printf("%x\n", w);
    if (w==0 && lastw==0){
 8000f90:	88bb      	ldrh	r3, [r7, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d104      	bne.n	8000fa0 <getStart+0x24>
 8000f96:	88fb      	ldrh	r3, [r7, #6]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d101      	bne.n	8000fa0 <getStart+0x24>

      return 0; // in I2C and SPI modes this means no data, so return immediately
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	e028      	b.n	8000ff2 <getStart+0x76>
    }
    else if (w==PIXY_START_WORD && lastw==PIXY_START_WORD)
 8000fa0:	88bb      	ldrh	r3, [r7, #4]
 8000fa2:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d109      	bne.n	8000fbe <getStart+0x42>
 8000faa:	88fb      	ldrh	r3, [r7, #6]
 8000fac:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d104      	bne.n	8000fbe <getStart+0x42>
    {
      g_blockType = NORMAL_BLOCK; // remember block type
 8000fb4:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <getStart+0x80>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
      return 1; // code found!
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e019      	b.n	8000ff2 <getStart+0x76>
    }
    else if (w==PIXY_START_WORD_CC && lastw==PIXY_START_WORD)
 8000fbe:	88bb      	ldrh	r3, [r7, #4]
 8000fc0:	f64a 2256 	movw	r2, #43606	; 0xaa56
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d109      	bne.n	8000fdc <getStart+0x60>
 8000fc8:	88fb      	ldrh	r3, [r7, #6]
 8000fca:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d104      	bne.n	8000fdc <getStart+0x60>
    {
      g_blockType = CC_BLOCK; // found color code block
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <getStart+0x80>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	701a      	strb	r2, [r3, #0]
      return 1;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e00a      	b.n	8000ff2 <getStart+0x76>
    }
    else if (w==PIXY_START_WORDX) // this is important, we might be juxtaposed
 8000fdc:	88bb      	ldrh	r3, [r7, #4]
 8000fde:	f245 52aa 	movw	r2, #21930	; 0x55aa
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d102      	bne.n	8000fec <getStart+0x70>
      getByte(0); // we're out of sync! (backwards)
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f000 f8fc 	bl	80011e4 <getByte>
    lastw = w; // save
 8000fec:	88bb      	ldrh	r3, [r7, #4]
 8000fee:	80fb      	strh	r3, [r7, #6]
    w = getWord();
 8000ff0:	e7ca      	b.n	8000f88 <getStart+0xc>
  }
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000438 	.word	0x20000438

08001000 <getBlocks>:

uint16_t getBlocks(uint16_t maxBlocks)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	80fb      	strh	r3, [r7, #6]
  uint8_t i;
  uint16_t w, blockCount, checksum, sum;
  Block *block;

  if (!g_skipStart)
 800100a:	4b47      	ldr	r3, [pc, #284]	; (8001128 <getBlocks+0x128>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d106      	bne.n	8001020 <getBlocks+0x20>
  {
    if (getStart()==0)
 8001012:	f7ff ffb3 	bl	8000f7c <getStart>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d104      	bne.n	8001026 <getBlocks+0x26>
      return 0;
 800101c:	2300      	movs	r3, #0
 800101e:	e07f      	b.n	8001120 <getBlocks+0x120>
  }
  else
    g_skipStart = 0;
 8001020:	4b41      	ldr	r3, [pc, #260]	; (8001128 <getBlocks+0x128>)
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]

  for(blockCount=0; blockCount<maxBlocks && blockCount<PIXY_ARRAYSIZE;)
 8001026:	2300      	movs	r3, #0
 8001028:	82bb      	strh	r3, [r7, #20]
 800102a:	e072      	b.n	8001112 <getBlocks+0x112>
  {
    checksum = getWord();
 800102c:	f000 f908 	bl	8001240 <getWord>
 8001030:	4603      	mov	r3, r0
 8001032:	823b      	strh	r3, [r7, #16]
    if (checksum==PIXY_START_WORD) // we've reached the beginning of the next frame
 8001034:	8a3b      	ldrh	r3, [r7, #16]
 8001036:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800103a:	4293      	cmp	r3, r2
 800103c:	d107      	bne.n	800104e <getBlocks+0x4e>
    {
      g_skipStart = 1;
 800103e:	4b3a      	ldr	r3, [pc, #232]	; (8001128 <getBlocks+0x128>)
 8001040:	2201      	movs	r2, #1
 8001042:	601a      	str	r2, [r3, #0]
      g_blockType = NORMAL_BLOCK;
 8001044:	4b39      	ldr	r3, [pc, #228]	; (800112c <getBlocks+0x12c>)
 8001046:	2200      	movs	r2, #0
 8001048:	701a      	strb	r2, [r3, #0]
      return blockCount;
 800104a:	8abb      	ldrh	r3, [r7, #20]
 800104c:	e068      	b.n	8001120 <getBlocks+0x120>
    }
    else if (checksum==PIXY_START_WORD_CC)
 800104e:	8a3b      	ldrh	r3, [r7, #16]
 8001050:	f64a 2256 	movw	r2, #43606	; 0xaa56
 8001054:	4293      	cmp	r3, r2
 8001056:	d107      	bne.n	8001068 <getBlocks+0x68>
    {
      g_skipStart = 1;
 8001058:	4b33      	ldr	r3, [pc, #204]	; (8001128 <getBlocks+0x128>)
 800105a:	2201      	movs	r2, #1
 800105c:	601a      	str	r2, [r3, #0]
      g_blockType = CC_BLOCK;
 800105e:	4b33      	ldr	r3, [pc, #204]	; (800112c <getBlocks+0x12c>)
 8001060:	2201      	movs	r2, #1
 8001062:	701a      	strb	r2, [r3, #0]
      return blockCount;
 8001064:	8abb      	ldrh	r3, [r7, #20]
 8001066:	e05b      	b.n	8001120 <getBlocks+0x120>
    }
    else if (checksum==0)
 8001068:	8a3b      	ldrh	r3, [r7, #16]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <getBlocks+0x72>
      return blockCount;
 800106e:	8abb      	ldrh	r3, [r7, #20]
 8001070:	e056      	b.n	8001120 <getBlocks+0x120>

    block = g_blocks + blockCount;
 8001072:	4b2f      	ldr	r3, [pc, #188]	; (8001130 <getBlocks+0x130>)
 8001074:	6819      	ldr	r1, [r3, #0]
 8001076:	8aba      	ldrh	r2, [r7, #20]
 8001078:	4613      	mov	r3, r2
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	4413      	add	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	440b      	add	r3, r1
 8001082:	60fb      	str	r3, [r7, #12]

    for (i=0, sum=0; i<sizeof(Block)/sizeof(uint16_t); i++)
 8001084:	2300      	movs	r3, #0
 8001086:	75fb      	strb	r3, [r7, #23]
 8001088:	2300      	movs	r3, #0
 800108a:	827b      	strh	r3, [r7, #18]
 800108c:	e01b      	b.n	80010c6 <getBlocks+0xc6>
    {
      if (g_blockType==NORMAL_BLOCK && i>=5) // no angle for normal block
 800108e:	4b27      	ldr	r3, [pc, #156]	; (800112c <getBlocks+0x12c>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d106      	bne.n	80010a4 <getBlocks+0xa4>
 8001096:	7dfb      	ldrb	r3, [r7, #23]
 8001098:	2b04      	cmp	r3, #4
 800109a:	d903      	bls.n	80010a4 <getBlocks+0xa4>
      {
        block->angle = 0;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	2200      	movs	r2, #0
 80010a0:	815a      	strh	r2, [r3, #10]
        break;
 80010a2:	e013      	b.n	80010cc <getBlocks+0xcc>
      }
      w = getWord();
 80010a4:	f000 f8cc 	bl	8001240 <getWord>
 80010a8:	4603      	mov	r3, r0
 80010aa:	817b      	strh	r3, [r7, #10]
      sum += w;
 80010ac:	8a7a      	ldrh	r2, [r7, #18]
 80010ae:	897b      	ldrh	r3, [r7, #10]
 80010b0:	4413      	add	r3, r2
 80010b2:	827b      	strh	r3, [r7, #18]
      *((uint16_t *)block + i) = w;
 80010b4:	7dfb      	ldrb	r3, [r7, #23]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	68fa      	ldr	r2, [r7, #12]
 80010ba:	4413      	add	r3, r2
 80010bc:	897a      	ldrh	r2, [r7, #10]
 80010be:	801a      	strh	r2, [r3, #0]
    for (i=0, sum=0; i<sizeof(Block)/sizeof(uint16_t); i++)
 80010c0:	7dfb      	ldrb	r3, [r7, #23]
 80010c2:	3301      	adds	r3, #1
 80010c4:	75fb      	strb	r3, [r7, #23]
 80010c6:	7dfb      	ldrb	r3, [r7, #23]
 80010c8:	2b05      	cmp	r3, #5
 80010ca:	d9e0      	bls.n	800108e <getBlocks+0x8e>
    }

    // check checksum
    if (checksum==sum)
 80010cc:	8a3a      	ldrh	r2, [r7, #16]
 80010ce:	8a7b      	ldrh	r3, [r7, #18]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d103      	bne.n	80010dc <getBlocks+0xdc>
      blockCount++;
 80010d4:	8abb      	ldrh	r3, [r7, #20]
 80010d6:	3301      	adds	r3, #1
 80010d8:	82bb      	strh	r3, [r7, #20]
 80010da:	e002      	b.n	80010e2 <getBlocks+0xe2>
    else
      printf("checksum error!\n");
 80010dc:	4815      	ldr	r0, [pc, #84]	; (8001134 <getBlocks+0x134>)
 80010de:	f007 fb89 	bl	80087f4 <puts>

    w = getWord();
 80010e2:	f000 f8ad 	bl	8001240 <getWord>
 80010e6:	4603      	mov	r3, r0
 80010e8:	817b      	strh	r3, [r7, #10]
    if (w==PIXY_START_WORD)
 80010ea:	897b      	ldrh	r3, [r7, #10]
 80010ec:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d103      	bne.n	80010fc <getBlocks+0xfc>
      g_blockType = NORMAL_BLOCK;
 80010f4:	4b0d      	ldr	r3, [pc, #52]	; (800112c <getBlocks+0x12c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
 80010fa:	e00a      	b.n	8001112 <getBlocks+0x112>
    else if (w==PIXY_START_WORD_CC)
 80010fc:	897b      	ldrh	r3, [r7, #10]
 80010fe:	f64a 2256 	movw	r2, #43606	; 0xaa56
 8001102:	4293      	cmp	r3, r2
 8001104:	d103      	bne.n	800110e <getBlocks+0x10e>
      g_blockType = CC_BLOCK;
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <getBlocks+0x12c>)
 8001108:	2201      	movs	r2, #1
 800110a:	701a      	strb	r2, [r3, #0]
 800110c:	e001      	b.n	8001112 <getBlocks+0x112>
    else
      return blockCount;
 800110e:	8abb      	ldrh	r3, [r7, #20]
 8001110:	e006      	b.n	8001120 <getBlocks+0x120>
  for(blockCount=0; blockCount<maxBlocks && blockCount<PIXY_ARRAYSIZE;)
 8001112:	8aba      	ldrh	r2, [r7, #20]
 8001114:	88fb      	ldrh	r3, [r7, #6]
 8001116:	429a      	cmp	r2, r3
 8001118:	d202      	bcs.n	8001120 <getBlocks+0x120>
 800111a:	8abb      	ldrh	r3, [r7, #20]
 800111c:	2b63      	cmp	r3, #99	; 0x63
 800111e:	d985      	bls.n	800102c <getBlocks+0x2c>
  }
}
 8001120:	4618      	mov	r0, r3
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	2000043c 	.word	0x2000043c
 800112c:	20000438 	.word	0x20000438
 8001130:	20000440 	.word	0x20000440
 8001134:	0800afc0 	.word	0x0800afc0

08001138 <pixy_init>:

void pixy_init()
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  g_blocks = (Block *)malloc(sizeof(Block)*PIXY_ARRAYSIZE);
 800113c:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8001140:	f006 fd78 	bl	8007c34 <malloc>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	4b01      	ldr	r3, [pc, #4]	; (8001150 <pixy_init+0x18>)
 800114a:	601a      	str	r2, [r3, #0]
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000440 	.word	0x20000440

08001154 <SetPWM>:

// Sets a timer's PWM to a value
// timerIndex = which timer (eg TIM2 -> pass 2, TIM3 -> pass 3)
// pwmVal = value to set that timer's CCR to; these should be defined below
void SetPWM(uint16_t timerIndex, uint16_t pwmVal)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	460a      	mov	r2, r1
 800115e:	80fb      	strh	r3, [r7, #6]
 8001160:	4613      	mov	r3, r2
 8001162:	80bb      	strh	r3, [r7, #4]
	TIM_TypeDef* timer;

	switch (timerIndex)
 8001164:	88fb      	ldrh	r3, [r7, #6]
 8001166:	2b04      	cmp	r3, #4
 8001168:	d00d      	beq.n	8001186 <SetPWM+0x32>
 800116a:	2b04      	cmp	r3, #4
 800116c:	dc12      	bgt.n	8001194 <SetPWM+0x40>
 800116e:	2b02      	cmp	r3, #2
 8001170:	d002      	beq.n	8001178 <SetPWM+0x24>
 8001172:	2b03      	cmp	r3, #3
 8001174:	d004      	beq.n	8001180 <SetPWM+0x2c>
		break;
	case 4:
		timer = TIM4;
		break;
	default:
		return; // just in case.
 8001176:	e00d      	b.n	8001194 <SetPWM+0x40>
		timer = TIM2;
 8001178:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800117c:	60fb      	str	r3, [r7, #12]
		break;
 800117e:	e005      	b.n	800118c <SetPWM+0x38>
		timer = TIM3;
 8001180:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <SetPWM+0x4c>)
 8001182:	60fb      	str	r3, [r7, #12]
		break;
 8001184:	e002      	b.n	800118c <SetPWM+0x38>
		timer = TIM4;
 8001186:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <SetPWM+0x50>)
 8001188:	60fb      	str	r3, [r7, #12]
		break;
 800118a:	bf00      	nop
	}

	timer->CCR3 = pwmVal;
 800118c:	88ba      	ldrh	r2, [r7, #4]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	63da      	str	r2, [r3, #60]	; 0x3c
 8001192:	e000      	b.n	8001196 <SetPWM+0x42>
		return; // just in case.
 8001194:	bf00      	nop
}
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	40000400 	.word	0x40000400
 80011a4:	40000800 	.word	0x40000800

080011a8 <UpdateState>:

uint8_t currentState = STATE_FIND_BALL;

// Updates the current state
void UpdateState(uint8_t nextState)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
	currentState = nextState;
 80011b2:	4a0b      	ldr	r2, [pc, #44]	; (80011e0 <UpdateState+0x38>)
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	7013      	strb	r3, [r2, #0]
	switch(currentState)
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <UpdateState+0x38>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d008      	beq.n	80011d2 <UpdateState+0x2a>
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	dc09      	bgt.n	80011d8 <UpdateState+0x30>
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <UpdateState+0x24>
 80011c8:	2b01      	cmp	r3, #1
	{
	case STATE_FIND_BALL:
		ResetAverage();
		break;
	case STATE_GRAB_BALL:
		break;
 80011ca:	e005      	b.n	80011d8 <UpdateState+0x30>
		ResetAverage();
 80011cc:	f000 f85c 	bl	8001288 <ResetAverage>
		break;
 80011d0:	e002      	b.n	80011d8 <UpdateState+0x30>
	case STATE_RETURN_BALL:
		ResetAverage();
 80011d2:	f000 f859 	bl	8001288 <ResetAverage>
		break;
 80011d6:	bf00      	nop
	}
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000444 	.word	0x20000444

080011e4 <getByte>:
uint8_t rx_data[2];
uint8_t tx_data[2] = { PIXY_SYNC_BYTE, 0 };

// Gets one byte from the Pixy cam
uint8_t getByte(uint8_t output)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af02      	add	r7, sp, #8
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef hal_status;
	uint8_t data = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2140      	movs	r1, #64	; 0x40
 80011f6:	480f      	ldr	r0, [pc, #60]	; (8001234 <getByte+0x50>)
 80011f8:	f002 fd0c 	bl	8003c14 <HAL_GPIO_WritePin>
	hal_status = HAL_SPI_TransmitReceive(&hspi1, &output, &data, 1, 0xFFFFFFFF);
 80011fc:	f107 020e 	add.w	r2, r7, #14
 8001200:	1df9      	adds	r1, r7, #7
 8001202:	f04f 33ff 	mov.w	r3, #4294967295
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	2301      	movs	r3, #1
 800120a:	480b      	ldr	r0, [pc, #44]	; (8001238 <getByte+0x54>)
 800120c:	f004 fa81 	bl	8005712 <HAL_SPI_TransmitReceive>
 8001210:	4603      	mov	r3, r0
 8001212:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001214:	2201      	movs	r2, #1
 8001216:	2140      	movs	r1, #64	; 0x40
 8001218:	4806      	ldr	r0, [pc, #24]	; (8001234 <getByte+0x50>)
 800121a:	f002 fcfb 	bl	8003c14 <HAL_GPIO_WritePin>

	if (hal_status != HAL_OK)
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d002      	beq.n	800122a <getByte+0x46>
	{
		printf("not ok\n");
 8001224:	4805      	ldr	r0, [pc, #20]	; (800123c <getByte+0x58>)
 8001226:	f007 fae5 	bl	80087f4 <puts>
	}

	return data;
 800122a:	7bbb      	ldrb	r3, [r7, #14]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	48000400 	.word	0x48000400
 8001238:	200002f0 	.word	0x200002f0
 800123c:	0800afd0 	.word	0x0800afd0

08001240 <getWord>:

// Gets a word (2 bytes) from the Pixy cam
uint16_t getWord(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
	uint16_t w;

	rx_data[0] = getByte(PIXY_SYNC_BYTE_DATA);
 8001246:	205b      	movs	r0, #91	; 0x5b
 8001248:	f7ff ffcc 	bl	80011e4 <getByte>
 800124c:	4603      	mov	r3, r0
 800124e:	461a      	mov	r2, r3
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <getWord+0x44>)
 8001252:	701a      	strb	r2, [r3, #0]
	rx_data[1] = getByte(0);
 8001254:	2000      	movs	r0, #0
 8001256:	f7ff ffc5 	bl	80011e4 <getByte>
 800125a:	4603      	mov	r3, r0
 800125c:	461a      	mov	r2, r3
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <getWord+0x44>)
 8001260:	705a      	strb	r2, [r3, #1]

	w = rx_data[0];
 8001262:	4b08      	ldr	r3, [pc, #32]	; (8001284 <getWord+0x44>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	80fb      	strh	r3, [r7, #6]
	w <<= 8;
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	021b      	lsls	r3, r3, #8
 800126c:	80fb      	strh	r3, [r7, #6]
	w |= rx_data[1];
 800126e:	4b05      	ldr	r3, [pc, #20]	; (8001284 <getWord+0x44>)
 8001270:	785b      	ldrb	r3, [r3, #1]
 8001272:	b29a      	uxth	r2, r3
 8001274:	88fb      	ldrh	r3, [r7, #6]
 8001276:	4313      	orrs	r3, r2
 8001278:	80fb      	strh	r3, [r7, #6]

	return w;
 800127a:	88fb      	ldrh	r3, [r7, #6]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000448 	.word	0x20000448

08001288 <ResetAverage>:
uint16_t xValsIndex = 0;
float runningAverage = 0.0f;

// Resets the running average and array
void ResetAverage()
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
	xVals[0] = xVals[1] = xVals[2] = xVals[3] = 0;
 800128c:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <ResetAverage+0x34>)
 800128e:	2200      	movs	r2, #0
 8001290:	80da      	strh	r2, [r3, #6]
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <ResetAverage+0x34>)
 8001294:	88da      	ldrh	r2, [r3, #6]
 8001296:	4b09      	ldr	r3, [pc, #36]	; (80012bc <ResetAverage+0x34>)
 8001298:	809a      	strh	r2, [r3, #4]
 800129a:	4b08      	ldr	r3, [pc, #32]	; (80012bc <ResetAverage+0x34>)
 800129c:	889a      	ldrh	r2, [r3, #4]
 800129e:	4b07      	ldr	r3, [pc, #28]	; (80012bc <ResetAverage+0x34>)
 80012a0:	805a      	strh	r2, [r3, #2]
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <ResetAverage+0x34>)
 80012a4:	885a      	ldrh	r2, [r3, #2]
 80012a6:	4b05      	ldr	r3, [pc, #20]	; (80012bc <ResetAverage+0x34>)
 80012a8:	801a      	strh	r2, [r3, #0]
	runningAverage = 0.0f;
 80012aa:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <ResetAverage+0x38>)
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
}
 80012b2:	bf00      	nop
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	2000044c 	.word	0x2000044c
 80012c0:	20000458 	.word	0x20000458

080012c4 <GetSignatureIndex>:

// Gets the index of whatever signature we're looking for in the block data from the Pixy cam
// I'm basically assuming whatever we're looking for will be the first piece of data in the blocks.
uint16_t GetSignatureIndex(uint32_t num_blocks, uint8_t sigVal)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	70fb      	strb	r3, [r7, #3]
	int i = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
	while (i < num_blocks)
 80012d4:	e00f      	b.n	80012f6 <GetSignatureIndex+0x32>
	{
		if (g_blocks[i].signature == sigVal)
 80012d6:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <GetSignatureIndex+0x50>)
 80012d8:	6819      	ldr	r1, [r3, #0]
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	4613      	mov	r3, r2
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	4413      	add	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	440b      	add	r3, r1
 80012e6:	881a      	ldrh	r2, [r3, #0]
 80012e8:	78fb      	ldrb	r3, [r7, #3]
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d007      	beq.n	8001300 <GetSignatureIndex+0x3c>
			break;
		i++;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	3301      	adds	r3, #1
 80012f4:	60fb      	str	r3, [r7, #12]
	while (i < num_blocks)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d8eb      	bhi.n	80012d6 <GetSignatureIndex+0x12>
 80012fe:	e000      	b.n	8001302 <GetSignatureIndex+0x3e>
			break;
 8001300:	bf00      	nop
	}
	return i;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	b29b      	uxth	r3, r3
}
 8001306:	4618      	mov	r0, r3
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	20000440 	.word	0x20000440

08001318 <GetNextX>:
#define HEIGHT	185

// Gets the X value of the signature items and updates the running average
// sig = one of the two signatures defined above
void GetNextX(uint8_t sig)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
	uint32_t num_blocks = getBlocks(PIXY_ARRAYSIZE);
 8001322:	2064      	movs	r0, #100	; 0x64
 8001324:	f7ff fe6c 	bl	8001000 <getBlocks>
 8001328:	4603      	mov	r3, r0
 800132a:	613b      	str	r3, [r7, #16]
	if (!num_blocks)
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d059      	beq.n	80013e6 <GetNextX+0xce>
		return;

	uint16_t index = GetSignatureIndex(num_blocks, sig);
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	4619      	mov	r1, r3
 8001336:	6938      	ldr	r0, [r7, #16]
 8001338:	f7ff ffc4 	bl	80012c4 <GetSignatureIndex>
 800133c:	4603      	mov	r3, r0
 800133e:	81fb      	strh	r3, [r7, #14]
	uint16_t newX = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	82fb      	strh	r3, [r7, #22]
	if (index != num_blocks)
 8001344:	89fb      	ldrh	r3, [r7, #14]
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	429a      	cmp	r2, r3
 800134a:	d009      	beq.n	8001360 <GetNextX+0x48>
	{
		newX = g_blocks[index].x;
 800134c:	4b28      	ldr	r3, [pc, #160]	; (80013f0 <GetNextX+0xd8>)
 800134e:	6819      	ldr	r1, [r3, #0]
 8001350:	89fa      	ldrh	r2, [r7, #14]
 8001352:	4613      	mov	r3, r2
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	4413      	add	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	440b      	add	r3, r1
 800135c:	885b      	ldrh	r3, [r3, #2]
 800135e:	82fb      	strh	r3, [r7, #22]
	}

	//printf("width: %d\n", g_blocks[index].height);
	//printf("y val: %d\n", g_blocks[index].y);
	// x vals don't go above 320
	int16_t diff = newX - xVals[xValsIndex];
 8001360:	4b24      	ldr	r3, [pc, #144]	; (80013f4 <GetNextX+0xdc>)
 8001362:	881b      	ldrh	r3, [r3, #0]
 8001364:	461a      	mov	r2, r3
 8001366:	4b24      	ldr	r3, [pc, #144]	; (80013f8 <GetNextX+0xe0>)
 8001368:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800136c:	8afa      	ldrh	r2, [r7, #22]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	b29b      	uxth	r3, r3
 8001372:	81bb      	strh	r3, [r7, #12]
	runningAverage += diff * 0.25f;
 8001374:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001378:	ee07 3a90 	vmov	s15, r3
 800137c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001380:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8001384:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001388:	4b1c      	ldr	r3, [pc, #112]	; (80013fc <GetNextX+0xe4>)
 800138a:	edd3 7a00 	vldr	s15, [r3]
 800138e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001392:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <GetNextX+0xe4>)
 8001394:	edc3 7a00 	vstr	s15, [r3]

	xVals[xValsIndex] = newX;
 8001398:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <GetNextX+0xdc>)
 800139a:	881b      	ldrh	r3, [r3, #0]
 800139c:	4619      	mov	r1, r3
 800139e:	4a16      	ldr	r2, [pc, #88]	; (80013f8 <GetNextX+0xe0>)
 80013a0:	8afb      	ldrh	r3, [r7, #22]
 80013a2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	xValsIndex = (xValsIndex + 1) % 4;
 80013a6:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <GetNextX+0xdc>)
 80013a8:	881b      	ldrh	r3, [r3, #0]
 80013aa:	3301      	adds	r3, #1
 80013ac:	425a      	negs	r2, r3
 80013ae:	f003 0303 	and.w	r3, r3, #3
 80013b2:	f002 0203 	and.w	r2, r2, #3
 80013b6:	bf58      	it	pl
 80013b8:	4253      	negpl	r3, r2
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <GetNextX+0xdc>)
 80013be:	801a      	strh	r2, [r3, #0]

	// I have no idea if this will even work, I just wanted to make sure there was a way to get to each state
	if (g_blocks[index].y >= HEIGHT && currentState == STATE_FIND_BALL)
 80013c0:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <GetNextX+0xd8>)
 80013c2:	6819      	ldr	r1, [r3, #0]
 80013c4:	89fa      	ldrh	r2, [r7, #14]
 80013c6:	4613      	mov	r3, r2
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4413      	add	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	440b      	add	r3, r1
 80013d0:	889b      	ldrh	r3, [r3, #4]
 80013d2:	2bb8      	cmp	r3, #184	; 0xb8
 80013d4:	d908      	bls.n	80013e8 <GetNextX+0xd0>
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <GetNextX+0xe8>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d104      	bne.n	80013e8 <GetNextX+0xd0>
		UpdateState(STATE_GRAB_BALL);
 80013de:	2001      	movs	r0, #1
 80013e0:	f7ff fee2 	bl	80011a8 <UpdateState>
 80013e4:	e000      	b.n	80013e8 <GetNextX+0xd0>
		return;
 80013e6:	bf00      	nop
}
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000440 	.word	0x20000440
 80013f4:	20000454 	.word	0x20000454
 80013f8:	2000044c 	.word	0x2000044c
 80013fc:	20000458 	.word	0x20000458
 8001400:	20000444 	.word	0x20000444

08001404 <UpdatePixyCam>:


// Updates the Pixy cam
void UpdatePixyCam()
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
	switch (currentState)
 8001408:	4b09      	ldr	r3, [pc, #36]	; (8001430 <UpdatePixyCam+0x2c>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b02      	cmp	r3, #2
 800140e:	d009      	beq.n	8001424 <UpdatePixyCam+0x20>
 8001410:	2b02      	cmp	r3, #2
 8001412:	dc0b      	bgt.n	800142c <UpdatePixyCam+0x28>
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <UpdatePixyCam+0x18>
 8001418:	2b01      	cmp	r3, #1
	{
	case STATE_FIND_BALL:
		GetNextX(PIXY_SIG_BALL);
		break;
	case STATE_GRAB_BALL:
		return; // pixy cam doesn't need to do anything here
 800141a:	e007      	b.n	800142c <UpdatePixyCam+0x28>
		GetNextX(PIXY_SIG_BALL);
 800141c:	2001      	movs	r0, #1
 800141e:	f7ff ff7b 	bl	8001318 <GetNextX>
		break;
 8001422:	e003      	b.n	800142c <UpdatePixyCam+0x28>
	case STATE_RETURN_BALL:
		GetNextX(PIXY_SIG_RETURN);
 8001424:	2002      	movs	r0, #2
 8001426:	f7ff ff77 	bl	8001318 <GetNextX>
		break;
 800142a:	bf00      	nop
	}
}
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000444 	.word	0x20000444

08001434 <SetWheelSpeed>:
// Sets the wheel speed
// speed = PWM value for the wheel
// wheel = which wheel to use
// Use the defines above.
void SetWheelSpeed(uint8_t wheel, uint8_t speed)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	460a      	mov	r2, r1
 800143e:	71fb      	strb	r3, [r7, #7]
 8001440:	4613      	mov	r3, r2
 8001442:	71bb      	strb	r3, [r7, #6]
	// still need to determine which timer is controlling which wheel
	// speed = PWM value
	SetPWM(wheel, speed);
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	b29b      	uxth	r3, r3
 8001448:	79ba      	ldrb	r2, [r7, #6]
 800144a:	b292      	uxth	r2, r2
 800144c:	4611      	mov	r1, r2
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fe80 	bl	8001154 <SetPWM>
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <UpdateWheelSpeed>:
// avgMax = max value the running average can be
// avgMin = min value the running average can be
// speed = speed to set the wheels
// This will turn off one of the wheels depending on where the ball is
void UpdateWheelSpeed(uint16_t avgMax, uint16_t avgMin, uint8_t speed)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	80fb      	strh	r3, [r7, #6]
 8001466:	460b      	mov	r3, r1
 8001468:	80bb      	strh	r3, [r7, #4]
 800146a:	4613      	mov	r3, r2
 800146c:	70fb      	strb	r3, [r7, #3]
	uint8_t wheelLeftSpeed = speed;
 800146e:	78fb      	ldrb	r3, [r7, #3]
 8001470:	73fb      	strb	r3, [r7, #15]
	uint8_t wheelRightSpeed = speed;
 8001472:	78fb      	ldrb	r3, [r7, #3]
 8001474:	73bb      	strb	r3, [r7, #14]
	if (runningAverage < avgMin)
 8001476:	88bb      	ldrh	r3, [r7, #4]
 8001478:	ee07 3a90 	vmov	s15, r3
 800147c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001480:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <UpdateWheelSpeed+0x74>)
 8001482:	edd3 7a00 	vldr	s15, [r3]
 8001486:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800148a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148e:	dd01      	ble.n	8001494 <UpdateWheelSpeed+0x38>
		wheelLeftSpeed = WHEEL_SPEED_ZERO;
 8001490:	238b      	movs	r3, #139	; 0x8b
 8001492:	73fb      	strb	r3, [r7, #15]
	if (runningAverage > avgMax)
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	ee07 3a90 	vmov	s15, r3
 800149a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800149e:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <UpdateWheelSpeed+0x74>)
 80014a0:	edd3 7a00 	vldr	s15, [r3]
 80014a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ac:	d501      	bpl.n	80014b2 <UpdateWheelSpeed+0x56>
		wheelRightSpeed = WHEEL_SPEED_ZERO;
 80014ae:	238b      	movs	r3, #139	; 0x8b
 80014b0:	73bb      	strb	r3, [r7, #14]

	SetWheelSpeed(WHEEL_LEFT, wheelLeftSpeed);
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
 80014b4:	4619      	mov	r1, r3
 80014b6:	2002      	movs	r0, #2
 80014b8:	f7ff ffbc 	bl	8001434 <SetWheelSpeed>
	SetWheelSpeed(WHEEL_RIGHT, wheelRightSpeed);
 80014bc:	7bbb      	ldrb	r3, [r7, #14]
 80014be:	4619      	mov	r1, r3
 80014c0:	2003      	movs	r0, #3
 80014c2:	f7ff ffb7 	bl	8001434 <SetWheelSpeed>
}
 80014c6:	bf00      	nop
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000458 	.word	0x20000458

080014d4 <UpdateWheels>:

// Updates the wheels
void UpdateWheels()
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
	uint8_t speed = WHEEL_SPEED_FULL;
 80014da:	2350      	movs	r3, #80	; 0x50
 80014dc:	71fb      	strb	r3, [r7, #7]
	switch (currentState)
 80014de:	4b13      	ldr	r3, [pc, #76]	; (800152c <UpdateWheels+0x58>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d016      	beq.n	8001514 <UpdateWheels+0x40>
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	dc1b      	bgt.n	8001522 <UpdateWheels+0x4e>
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d002      	beq.n	80014f4 <UpdateWheels+0x20>
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d007      	beq.n	8001502 <UpdateWheels+0x2e>
		break;
	case STATE_RETURN_BALL:
		UpdateWheelSpeed(MAX_RETURN_X, MIN_RETURN_X, speed);
		break;
	}
}
 80014f2:	e016      	b.n	8001522 <UpdateWheels+0x4e>
		UpdateWheelSpeed(MAX_BALL_X, MIN_BALL_X, speed);
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	461a      	mov	r2, r3
 80014f8:	2164      	movs	r1, #100	; 0x64
 80014fa:	20dc      	movs	r0, #220	; 0xdc
 80014fc:	f7ff ffae 	bl	800145c <UpdateWheelSpeed>
		break;
 8001500:	e00f      	b.n	8001522 <UpdateWheels+0x4e>
		SetWheelSpeed(WHEEL_LEFT, WHEEL_SPEED_HALF);
 8001502:	2178      	movs	r1, #120	; 0x78
 8001504:	2002      	movs	r0, #2
 8001506:	f7ff ff95 	bl	8001434 <SetWheelSpeed>
		SetWheelSpeed(WHEEL_RIGHT, WHEEL_SPEED_HALF);
 800150a:	2178      	movs	r1, #120	; 0x78
 800150c:	2003      	movs	r0, #3
 800150e:	f7ff ff91 	bl	8001434 <SetWheelSpeed>
		break;
 8001512:	e006      	b.n	8001522 <UpdateWheels+0x4e>
		UpdateWheelSpeed(MAX_RETURN_X, MIN_RETURN_X, speed);
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	461a      	mov	r2, r3
 8001518:	2182      	movs	r1, #130	; 0x82
 800151a:	20be      	movs	r0, #190	; 0xbe
 800151c:	f7ff ff9e 	bl	800145c <UpdateWheelSpeed>
		break;
 8001520:	bf00      	nop
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000444 	.word	0x20000444

08001530 <CheckIR>:

#define DIST_TO_BALL	11.0f

// Checks the value reported by the IR sensor
uint8_t CheckIR()
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
	uint16_t adcVal = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Start(&hadc1);
 800153a:	4829      	ldr	r0, [pc, #164]	; (80015e0 <CheckIR+0xb0>)
 800153c:	f001 fb70 	bl	8002c20 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 0xFFFFFFFF);
 8001540:	f04f 31ff 	mov.w	r1, #4294967295
 8001544:	4826      	ldr	r0, [pc, #152]	; (80015e0 <CheckIR+0xb0>)
 8001546:	f001 fbce 	bl	8002ce6 <HAL_ADC_PollForConversion>
	adcVal = HAL_ADC_GetValue(&hadc1);
 800154a:	4825      	ldr	r0, [pc, #148]	; (80015e0 <CheckIR+0xb0>)
 800154c:	f001 fc5a 	bl	8002e04 <HAL_ADC_GetValue>
 8001550:	4603      	mov	r3, r0
 8001552:	80fb      	strh	r3, [r7, #6]
	float distVal = exp((log(adcVal) - 10.66) / (-1.123));
 8001554:	88fb      	ldrh	r3, [r7, #6]
 8001556:	4618      	mov	r0, r3
 8001558:	f7fe ffec 	bl	8000534 <__aeabi_ui2d>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	ec43 2b10 	vmov	d0, r2, r3
 8001564:	f009 f95c 	bl	800a820 <log>
 8001568:	ec51 0b10 	vmov	r0, r1, d0
 800156c:	a318      	add	r3, pc, #96	; (adr r3, 80015d0 <CheckIR+0xa0>)
 800156e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001572:	f7fe fea1 	bl	80002b8 <__aeabi_dsub>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4610      	mov	r0, r2
 800157c:	4619      	mov	r1, r3
 800157e:	a316      	add	r3, pc, #88	; (adr r3, 80015d8 <CheckIR+0xa8>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7ff f97a 	bl	800087c <__aeabi_ddiv>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	ec43 2b17 	vmov	d7, r2, r3
 8001590:	eeb0 0a47 	vmov.f32	s0, s14
 8001594:	eef0 0a67 	vmov.f32	s1, s15
 8001598:	f009 f8fa 	bl	800a790 <exp>
 800159c:	ec53 2b10 	vmov	r2, r3, d0
 80015a0:	4610      	mov	r0, r2
 80015a2:	4619      	mov	r1, r3
 80015a4:	f7ff fb18 	bl	8000bd8 <__aeabi_d2f>
 80015a8:	4603      	mov	r3, r0
 80015aa:	603b      	str	r3, [r7, #0]
	//printf("distVal: %f\n", distVal);
	if (distVal <= DIST_TO_BALL)
 80015ac:	edd7 7a00 	vldr	s15, [r7]
 80015b0:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 80015b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015bc:	d801      	bhi.n	80015c2 <CheckIR+0x92>
		return 1;
 80015be:	2301      	movs	r3, #1
 80015c0:	e000      	b.n	80015c4 <CheckIR+0x94>
	return 0;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	f3af 8000 	nop.w
 80015d0:	851eb852 	.word	0x851eb852
 80015d4:	402551eb 	.word	0x402551eb
 80015d8:	d916872b 	.word	0xd916872b
 80015dc:	bff1f7ce 	.word	0xbff1f7ce
 80015e0:	200001f8 	.word	0x200001f8

080015e4 <CloseClaw>:
#define WAIT_TIME		4000000
#define CLAW_WAIT_TIME	4000000

// Closes the claw
void CloseClaw()
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
	SetPWM(4, CLAW_CLOSED);
 80015e8:	21aa      	movs	r1, #170	; 0xaa
 80015ea:	2004      	movs	r0, #4
 80015ec:	f7ff fdb2 	bl	8001154 <SetPWM>
}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <OpenClaw>:

// Opens the claw
void OpenClaw()
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
	SetPWM(4, CLAW_OPEN);
 80015f8:	216e      	movs	r1, #110	; 0x6e
 80015fa:	2004      	movs	r0, #4
 80015fc:	f7ff fdaa 	bl	8001154 <SetPWM>
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}

08001604 <WaitForClaw>:

void WaitForClaw()
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
	SetWheelSpeed(WHEEL_LEFT, WHEEL_SPEED_ZERO);
 800160a:	218b      	movs	r1, #139	; 0x8b
 800160c:	2002      	movs	r0, #2
 800160e:	f7ff ff11 	bl	8001434 <SetWheelSpeed>
	SetWheelSpeed(WHEEL_RIGHT, WHEEL_SPEED_ZERO);
 8001612:	218b      	movs	r1, #139	; 0x8b
 8001614:	2003      	movs	r0, #3
 8001616:	f7ff ff0d 	bl	8001434 <SetWheelSpeed>
	for (int i = 0; i < CLAW_WAIT_TIME; i++);
 800161a:	2300      	movs	r3, #0
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	e002      	b.n	8001626 <WaitForClaw+0x22>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3301      	adds	r3, #1
 8001624:	607b      	str	r3, [r7, #4]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a03      	ldr	r2, [pc, #12]	; (8001638 <WaitForClaw+0x34>)
 800162a:	4293      	cmp	r3, r2
 800162c:	ddf8      	ble.n	8001620 <WaitForClaw+0x1c>
}
 800162e:	bf00      	nop
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	003d08ff 	.word	0x003d08ff

0800163c <ReturnBall>:

// Routine for returning the ball
void ReturnBall()
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
	uint8_t speed = WHEEL_SPEED_HALF;
 8001642:	2378      	movs	r3, #120	; 0x78
 8001644:	70fb      	strb	r3, [r7, #3]
	//speed /= 2;

	// roll the ball forward
	SetWheelSpeed(WHEEL_LEFT, speed);
 8001646:	78fb      	ldrb	r3, [r7, #3]
 8001648:	4619      	mov	r1, r3
 800164a:	2002      	movs	r0, #2
 800164c:	f7ff fef2 	bl	8001434 <SetWheelSpeed>
	SetWheelSpeed(WHEEL_RIGHT, speed);
 8001650:	78fb      	ldrb	r3, [r7, #3]
 8001652:	4619      	mov	r1, r3
 8001654:	2003      	movs	r0, #3
 8001656:	f7ff feed 	bl	8001434 <SetWheelSpeed>
	OpenClaw();
 800165a:	f7ff ffcb 	bl	80015f4 <OpenClaw>
	for (int i = 0; i < PUSH_TIME; i++);
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	e002      	b.n	800166a <ReturnBall+0x2e>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	3301      	adds	r3, #1
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4a16      	ldr	r2, [pc, #88]	; (80016c8 <ReturnBall+0x8c>)
 800166e:	4293      	cmp	r3, r2
 8001670:	ddf8      	ble.n	8001664 <ReturnBall+0x28>

	// stop for a little bit
	SetWheelSpeed(WHEEL_LEFT, WHEEL_SPEED_ZERO);
 8001672:	218b      	movs	r1, #139	; 0x8b
 8001674:	2002      	movs	r0, #2
 8001676:	f7ff fedd 	bl	8001434 <SetWheelSpeed>
	SetWheelSpeed(WHEEL_RIGHT, WHEEL_SPEED_ZERO);
 800167a:	218b      	movs	r1, #139	; 0x8b
 800167c:	2003      	movs	r0, #3
 800167e:	f7ff fed9 	bl	8001434 <SetWheelSpeed>
	for (int i = 0; i < WAIT_TIME; i++);
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	e002      	b.n	800168e <ReturnBall+0x52>
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	3301      	adds	r3, #1
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	4a0e      	ldr	r2, [pc, #56]	; (80016cc <ReturnBall+0x90>)
 8001692:	4293      	cmp	r3, r2
 8001694:	ddf8      	ble.n	8001688 <ReturnBall+0x4c>

	// turn a bit so the camera doesn't immediately find the ball again
	SetWheelSpeed(WHEEL_LEFT, speed);
 8001696:	78fb      	ldrb	r3, [r7, #3]
 8001698:	4619      	mov	r1, r3
 800169a:	2002      	movs	r0, #2
 800169c:	f7ff feca 	bl	8001434 <SetWheelSpeed>
	SetWheelSpeed(WHEEL_RIGHT, WHEEL_SPEED_ZERO);
 80016a0:	218b      	movs	r1, #139	; 0x8b
 80016a2:	2003      	movs	r0, #3
 80016a4:	f7ff fec6 	bl	8001434 <SetWheelSpeed>
	for (int i = 0; i < PUSH_TIME; i++);
 80016a8:	2300      	movs	r3, #0
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	e002      	b.n	80016b4 <ReturnBall+0x78>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	3301      	adds	r3, #1
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <ReturnBall+0x8c>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	ddf8      	ble.n	80016ae <ReturnBall+0x72>
}
 80016bc:	bf00      	nop
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	0001387f 	.word	0x0001387f
 80016cc:	003d08ff 	.word	0x003d08ff

080016d0 <UpdateClaw>:

// Update the claw
void UpdateClaw()
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
	switch (currentState)
 80016d4:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <UpdateClaw+0x74>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d012      	beq.n	8001702 <UpdateClaw+0x32>
 80016dc:	2b02      	cmp	r3, #2
 80016de:	dc2f      	bgt.n	8001740 <UpdateClaw+0x70>
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d02a      	beq.n	800173a <UpdateClaw+0x6a>
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d12b      	bne.n	8001740 <UpdateClaw+0x70>
	{
	case STATE_FIND_BALL:
		return; // Claw shouldn't need to do anything here
	case STATE_GRAB_BALL:
    // if IR sensor detects ball
		if (CheckIR())
 80016e8:	f7ff ff22 	bl	8001530 <CheckIR>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d025      	beq.n	800173e <UpdateClaw+0x6e>
		{
			CloseClaw();
 80016f2:	f7ff ff77 	bl	80015e4 <CloseClaw>
			WaitForClaw();
 80016f6:	f7ff ff85 	bl	8001604 <WaitForClaw>
			UpdateState(STATE_RETURN_BALL);
 80016fa:	2002      	movs	r0, #2
 80016fc:	f7ff fd54 	bl	80011a8 <UpdateState>
		}
		break;
 8001700:	e01d      	b.n	800173e <UpdateClaw+0x6e>
	case STATE_RETURN_BALL:
		if (runningAverage >= MIN_RETURN_X &&
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <UpdateClaw+0x78>)
 8001704:	edd3 7a00 	vldr	s15, [r3]
 8001708:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800174c <UpdateClaw+0x7c>
 800170c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001714:	da00      	bge.n	8001718 <UpdateClaw+0x48>
			runningAverage <= MAX_RETURN_X)
		{
			ReturnBall();
			UpdateState(STATE_FIND_BALL);
		}
		break;
 8001716:	e013      	b.n	8001740 <UpdateClaw+0x70>
			runningAverage <= MAX_RETURN_X)
 8001718:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <UpdateClaw+0x78>)
 800171a:	edd3 7a00 	vldr	s15, [r3]
		if (runningAverage >= MIN_RETURN_X &&
 800171e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001750 <UpdateClaw+0x80>
 8001722:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800172a:	d900      	bls.n	800172e <UpdateClaw+0x5e>
		break;
 800172c:	e008      	b.n	8001740 <UpdateClaw+0x70>
			ReturnBall();
 800172e:	f7ff ff85 	bl	800163c <ReturnBall>
			UpdateState(STATE_FIND_BALL);
 8001732:	2000      	movs	r0, #0
 8001734:	f7ff fd38 	bl	80011a8 <UpdateState>
		break;
 8001738:	e002      	b.n	8001740 <UpdateClaw+0x70>
		return; // Claw shouldn't need to do anything here
 800173a:	bf00      	nop
 800173c:	e000      	b.n	8001740 <UpdateClaw+0x70>
		break;
 800173e:	bf00      	nop
	}
}
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000444 	.word	0x20000444
 8001748:	20000458 	.word	0x20000458
 800174c:	43020000 	.word	0x43020000
 8001750:	433e0000 	.word	0x433e0000

08001754 <WheelsInit>:

// Initializes the timers for the wheels
void WheelsInit()
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001758:	2108      	movs	r1, #8
 800175a:	4808      	ldr	r0, [pc, #32]	; (800177c <WheelsInit+0x28>)
 800175c:	f004 fc08 	bl	8005f70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001760:	2108      	movs	r1, #8
 8001762:	4807      	ldr	r0, [pc, #28]	; (8001780 <WheelsInit+0x2c>)
 8001764:	f004 fc04 	bl	8005f70 <HAL_TIM_PWM_Start>
	SetWheelSpeed(WHEEL_LEFT, WHEEL_SPEED_ZERO);
 8001768:	218b      	movs	r1, #139	; 0x8b
 800176a:	2002      	movs	r0, #2
 800176c:	f7ff fe62 	bl	8001434 <SetWheelSpeed>
	SetWheelSpeed(WHEEL_RIGHT, WHEEL_SPEED_ZERO);
 8001770:	218b      	movs	r1, #139	; 0x8b
 8001772:	2003      	movs	r0, #3
 8001774:	f7ff fe5e 	bl	8001434 <SetWheelSpeed>
}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000354 	.word	0x20000354
 8001780:	200003a0 	.word	0x200003a0

08001784 <ClawInit>:

// Initializes the timer for the claw
void ClawInit()
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001788:	2108      	movs	r1, #8
 800178a:	4803      	ldr	r0, [pc, #12]	; (8001798 <ClawInit+0x14>)
 800178c:	f004 fbf0 	bl	8005f70 <HAL_TIM_PWM_Start>
	OpenClaw();
 8001790:	f7ff ff30 	bl	80015f4 <OpenClaw>
}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}
 8001798:	200003ec 	.word	0x200003ec

0800179c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80017a0:	f000 fea3 	bl	80024ea <HAL_Init>

	/* USER CODE BEGIN Init */
	pixy_init();
 80017a4:	f7ff fcc8 	bl	8001138 <pixy_init>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80017a8:	f000 f832 	bl	8001810 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80017ac:	f000 fac6 	bl	8001d3c <MX_GPIO_Init>
	MX_SPI1_Init();
 80017b0:	f000 f924 	bl	80019fc <MX_SPI1_Init>
	MX_LPUART1_UART_Init();
 80017b4:	f000 f8d6 	bl	8001964 <MX_LPUART1_UART_Init>
	MX_ADC1_Init();
 80017b8:	f000 f870 	bl	800189c <MX_ADC1_Init>
	MX_TIM2_Init();
 80017bc:	f000 f95c 	bl	8001a78 <MX_TIM2_Init>
	MX_TIM3_Init();
 80017c0:	f000 f9d0 	bl	8001b64 <MX_TIM3_Init>
	MX_TIM4_Init();
 80017c4:	f000 fa44 	bl	8001c50 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	WheelsInit();
 80017c8:	f7ff ffc4 	bl	8001754 <WheelsInit>
	ClawInit();
 80017cc:	f7ff ffda 	bl	8001784 <ClawInit>

	// I don't think we're using these?
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80017d0:	2201      	movs	r2, #1
 80017d2:	2102      	movs	r1, #2
 80017d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d8:	f002 fa1c 	bl	8003c14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 80017dc:	2201      	movs	r2, #1
 80017de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017e2:	4808      	ldr	r0, [pc, #32]	; (8001804 <main+0x68>)
 80017e4:	f002 fa16 	bl	8003c14 <HAL_GPIO_WritePin>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		//CheckIR();
		printf("Current state: %d\n", currentState);
 80017e8:	4b07      	ldr	r3, [pc, #28]	; (8001808 <main+0x6c>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	4619      	mov	r1, r3
 80017ee:	4807      	ldr	r0, [pc, #28]	; (800180c <main+0x70>)
 80017f0:	f006 ff7a 	bl	80086e8 <iprintf>
		UpdatePixyCam();
 80017f4:	f7ff fe06 	bl	8001404 <UpdatePixyCam>
		UpdateWheels();
 80017f8:	f7ff fe6c 	bl	80014d4 <UpdateWheels>
		UpdateClaw();
 80017fc:	f7ff ff68 	bl	80016d0 <UpdateClaw>
		printf("Current state: %d\n", currentState);
 8001800:	e7f2      	b.n	80017e8 <main+0x4c>
 8001802:	bf00      	nop
 8001804:	48001000 	.word	0x48001000
 8001808:	20000444 	.word	0x20000444
 800180c:	0800afd8 	.word	0x0800afd8

08001810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b096      	sub	sp, #88	; 0x58
 8001814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	2244      	movs	r2, #68	; 0x44
 800181c:	2100      	movs	r1, #0
 800181e:	4618      	mov	r0, r3
 8001820:	f006 fa10 	bl	8007c44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001824:	463b      	mov	r3, r7
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
 8001830:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001832:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001836:	f002 fa25 	bl	8003c84 <HAL_PWREx_ControlVoltageScaling>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001840:	f000 fb2a 	bl	8001e98 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001844:	2310      	movs	r3, #16
 8001846:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001848:	2301      	movs	r3, #1
 800184a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800184c:	2300      	movs	r3, #0
 800184e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001850:	2360      	movs	r3, #96	; 0x60
 8001852:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001854:	2300      	movs	r3, #0
 8001856:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	4618      	mov	r0, r3
 800185e:	f002 fac5 	bl	8003dec <HAL_RCC_OscConfig>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001868:	f000 fb16 	bl	8001e98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800186c:	230f      	movs	r3, #15
 800186e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001870:	2300      	movs	r3, #0
 8001872:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001874:	2300      	movs	r3, #0
 8001876:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001878:	2300      	movs	r3, #0
 800187a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800187c:	2300      	movs	r3, #0
 800187e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001880:	463b      	mov	r3, r7
 8001882:	2100      	movs	r1, #0
 8001884:	4618      	mov	r0, r3
 8001886:	f002 fecb 	bl	8004620 <HAL_RCC_ClockConfig>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001890:	f000 fb02 	bl	8001e98 <Error_Handler>
  }
}
 8001894:	bf00      	nop
 8001896:	3758      	adds	r7, #88	; 0x58
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018a2:	463b      	mov	r3, r7
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]
 80018b0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80018b2:	4b29      	ldr	r3, [pc, #164]	; (8001958 <MX_ADC1_Init+0xbc>)
 80018b4:	4a29      	ldr	r2, [pc, #164]	; (800195c <MX_ADC1_Init+0xc0>)
 80018b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 80018b8:	4b27      	ldr	r3, [pc, #156]	; (8001958 <MX_ADC1_Init+0xbc>)
 80018ba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80018be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018c0:	4b25      	ldr	r3, [pc, #148]	; (8001958 <MX_ADC1_Init+0xbc>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018c6:	4b24      	ldr	r3, [pc, #144]	; (8001958 <MX_ADC1_Init+0xbc>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018cc:	4b22      	ldr	r3, [pc, #136]	; (8001958 <MX_ADC1_Init+0xbc>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018d2:	4b21      	ldr	r3, [pc, #132]	; (8001958 <MX_ADC1_Init+0xbc>)
 80018d4:	2204      	movs	r2, #4
 80018d6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80018d8:	4b1f      	ldr	r3, [pc, #124]	; (8001958 <MX_ADC1_Init+0xbc>)
 80018da:	2200      	movs	r2, #0
 80018dc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80018de:	4b1e      	ldr	r3, [pc, #120]	; (8001958 <MX_ADC1_Init+0xbc>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80018e4:	4b1c      	ldr	r3, [pc, #112]	; (8001958 <MX_ADC1_Init+0xbc>)
 80018e6:	2201      	movs	r2, #1
 80018e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018ea:	4b1b      	ldr	r3, [pc, #108]	; (8001958 <MX_ADC1_Init+0xbc>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018f2:	4b19      	ldr	r3, [pc, #100]	; (8001958 <MX_ADC1_Init+0xbc>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018f8:	4b17      	ldr	r3, [pc, #92]	; (8001958 <MX_ADC1_Init+0xbc>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80018fe:	4b16      	ldr	r3, [pc, #88]	; (8001958 <MX_ADC1_Init+0xbc>)
 8001900:	2200      	movs	r2, #0
 8001902:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001906:	4b14      	ldr	r3, [pc, #80]	; (8001958 <MX_ADC1_Init+0xbc>)
 8001908:	2200      	movs	r2, #0
 800190a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800190c:	4b12      	ldr	r3, [pc, #72]	; (8001958 <MX_ADC1_Init+0xbc>)
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001914:	4810      	ldr	r0, [pc, #64]	; (8001958 <MX_ADC1_Init+0xbc>)
 8001916:	f001 f837 	bl	8002988 <HAL_ADC_Init>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8001920:	f000 faba 	bl	8001e98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001924:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <MX_ADC1_Init+0xc4>)
 8001926:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001928:	2306      	movs	r3, #6
 800192a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800192c:	2307      	movs	r3, #7
 800192e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001930:	237f      	movs	r3, #127	; 0x7f
 8001932:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001934:	2304      	movs	r3, #4
 8001936:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800193c:	463b      	mov	r3, r7
 800193e:	4619      	mov	r1, r3
 8001940:	4805      	ldr	r0, [pc, #20]	; (8001958 <MX_ADC1_Init+0xbc>)
 8001942:	f001 fa6d 	bl	8002e20 <HAL_ADC_ConfigChannel>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800194c:	f000 faa4 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001950:	bf00      	nop
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	200001f8 	.word	0x200001f8
 800195c:	50040000 	.word	0x50040000
 8001960:	04300002 	.word	0x04300002

08001964 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001968:	4b22      	ldr	r3, [pc, #136]	; (80019f4 <MX_LPUART1_UART_Init+0x90>)
 800196a:	4a23      	ldr	r2, [pc, #140]	; (80019f8 <MX_LPUART1_UART_Init+0x94>)
 800196c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800196e:	4b21      	ldr	r3, [pc, #132]	; (80019f4 <MX_LPUART1_UART_Init+0x90>)
 8001970:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001974:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001976:	4b1f      	ldr	r3, [pc, #124]	; (80019f4 <MX_LPUART1_UART_Init+0x90>)
 8001978:	2200      	movs	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800197c:	4b1d      	ldr	r3, [pc, #116]	; (80019f4 <MX_LPUART1_UART_Init+0x90>)
 800197e:	2200      	movs	r2, #0
 8001980:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001982:	4b1c      	ldr	r3, [pc, #112]	; (80019f4 <MX_LPUART1_UART_Init+0x90>)
 8001984:	2200      	movs	r2, #0
 8001986:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001988:	4b1a      	ldr	r3, [pc, #104]	; (80019f4 <MX_LPUART1_UART_Init+0x90>)
 800198a:	220c      	movs	r2, #12
 800198c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800198e:	4b19      	ldr	r3, [pc, #100]	; (80019f4 <MX_LPUART1_UART_Init+0x90>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001994:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <MX_LPUART1_UART_Init+0x90>)
 8001996:	2200      	movs	r2, #0
 8001998:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800199a:	4b16      	ldr	r3, [pc, #88]	; (80019f4 <MX_LPUART1_UART_Init+0x90>)
 800199c:	2200      	movs	r2, #0
 800199e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019a0:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <MX_LPUART1_UART_Init+0x90>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80019a6:	4b13      	ldr	r3, [pc, #76]	; (80019f4 <MX_LPUART1_UART_Init+0x90>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80019ac:	4811      	ldr	r0, [pc, #68]	; (80019f4 <MX_LPUART1_UART_Init+0x90>)
 80019ae:	f005 fa7b 	bl	8006ea8 <HAL_UART_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80019b8:	f000 fa6e 	bl	8001e98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019bc:	2100      	movs	r1, #0
 80019be:	480d      	ldr	r0, [pc, #52]	; (80019f4 <MX_LPUART1_UART_Init+0x90>)
 80019c0:	f006 f844 	bl	8007a4c <HAL_UARTEx_SetTxFifoThreshold>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80019ca:	f000 fa65 	bl	8001e98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019ce:	2100      	movs	r1, #0
 80019d0:	4808      	ldr	r0, [pc, #32]	; (80019f4 <MX_LPUART1_UART_Init+0x90>)
 80019d2:	f006 f879 	bl	8007ac8 <HAL_UARTEx_SetRxFifoThreshold>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80019dc:	f000 fa5c 	bl	8001e98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80019e0:	4804      	ldr	r0, [pc, #16]	; (80019f4 <MX_LPUART1_UART_Init+0x90>)
 80019e2:	f005 fffa 	bl	80079da <HAL_UARTEx_DisableFifoMode>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80019ec:	f000 fa54 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20000260 	.word	0x20000260
 80019f8:	40008000 	.word	0x40008000

080019fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a00:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <MX_SPI1_Init+0x74>)
 8001a02:	4a1c      	ldr	r2, [pc, #112]	; (8001a74 <MX_SPI1_Init+0x78>)
 8001a04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a06:	4b1a      	ldr	r3, [pc, #104]	; (8001a70 <MX_SPI1_Init+0x74>)
 8001a08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a0e:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <MX_SPI1_Init+0x74>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a14:	4b16      	ldr	r3, [pc, #88]	; (8001a70 <MX_SPI1_Init+0x74>)
 8001a16:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a1a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a1c:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <MX_SPI1_Init+0x74>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a22:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <MX_SPI1_Init+0x74>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a28:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <MX_SPI1_Init+0x74>)
 8001a2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a2e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001a30:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <MX_SPI1_Init+0x74>)
 8001a32:	2208      	movs	r2, #8
 8001a34:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a36:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <MX_SPI1_Init+0x74>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <MX_SPI1_Init+0x74>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a42:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <MX_SPI1_Init+0x74>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a48:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <MX_SPI1_Init+0x74>)
 8001a4a:	2207      	movs	r2, #7
 8001a4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a4e:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <MX_SPI1_Init+0x74>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a54:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <MX_SPI1_Init+0x74>)
 8001a56:	2208      	movs	r2, #8
 8001a58:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a5a:	4805      	ldr	r0, [pc, #20]	; (8001a70 <MX_SPI1_Init+0x74>)
 8001a5c:	f003 fdb6 	bl	80055cc <HAL_SPI_Init>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001a66:	f000 fa17 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	200002f0 	.word	0x200002f0
 8001a74:	40013000 	.word	0x40013000

08001a78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08e      	sub	sp, #56	; 0x38
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]
 8001a88:	609a      	str	r2, [r3, #8]
 8001a8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a8c:	f107 031c 	add.w	r3, r7, #28
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a98:	463b      	mov	r3, r7
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	60da      	str	r2, [r3, #12]
 8001aa4:	611a      	str	r2, [r3, #16]
 8001aa6:	615a      	str	r2, [r3, #20]
 8001aa8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001aaa:	4b2d      	ldr	r3, [pc, #180]	; (8001b60 <MX_TIM2_Init+0xe8>)
 8001aac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ab0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ab2:	4b2b      	ldr	r3, [pc, #172]	; (8001b60 <MX_TIM2_Init+0xe8>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab8:	4b29      	ldr	r3, [pc, #164]	; (8001b60 <MX_TIM2_Init+0xe8>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 159;
 8001abe:	4b28      	ldr	r3, [pc, #160]	; (8001b60 <MX_TIM2_Init+0xe8>)
 8001ac0:	229f      	movs	r2, #159	; 0x9f
 8001ac2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac4:	4b26      	ldr	r3, [pc, #152]	; (8001b60 <MX_TIM2_Init+0xe8>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aca:	4b25      	ldr	r3, [pc, #148]	; (8001b60 <MX_TIM2_Init+0xe8>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ad0:	4823      	ldr	r0, [pc, #140]	; (8001b60 <MX_TIM2_Init+0xe8>)
 8001ad2:	f004 f995 	bl	8005e00 <HAL_TIM_Base_Init>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001adc:	f000 f9dc 	bl	8001e98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ae6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aea:	4619      	mov	r1, r3
 8001aec:	481c      	ldr	r0, [pc, #112]	; (8001b60 <MX_TIM2_Init+0xe8>)
 8001aee:	f004 fc59 	bl	80063a4 <HAL_TIM_ConfigClockSource>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001af8:	f000 f9ce 	bl	8001e98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001afc:	4818      	ldr	r0, [pc, #96]	; (8001b60 <MX_TIM2_Init+0xe8>)
 8001afe:	f004 f9d6 	bl	8005eae <HAL_TIM_PWM_Init>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001b08:	f000 f9c6 	bl	8001e98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b10:	2300      	movs	r3, #0
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b14:	f107 031c 	add.w	r3, r7, #28
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4811      	ldr	r0, [pc, #68]	; (8001b60 <MX_TIM2_Init+0xe8>)
 8001b1c:	f005 f93c 	bl	8006d98 <HAL_TIMEx_MasterConfigSynchronization>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001b26:	f000 f9b7 	bl	8001e98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b2a:	2360      	movs	r3, #96	; 0x60
 8001b2c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 79;
 8001b2e:	234f      	movs	r3, #79	; 0x4f
 8001b30:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b3a:	463b      	mov	r3, r7
 8001b3c:	2208      	movs	r2, #8
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4807      	ldr	r0, [pc, #28]	; (8001b60 <MX_TIM2_Init+0xe8>)
 8001b42:	f004 fb1b 	bl	800617c <HAL_TIM_PWM_ConfigChannel>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001b4c:	f000 f9a4 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b50:	4803      	ldr	r0, [pc, #12]	; (8001b60 <MX_TIM2_Init+0xe8>)
 8001b52:	f000 fb1d 	bl	8002190 <HAL_TIM_MspPostInit>

}
 8001b56:	bf00      	nop
 8001b58:	3738      	adds	r7, #56	; 0x38
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000354 	.word	0x20000354

08001b64 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08e      	sub	sp, #56	; 0x38
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	609a      	str	r2, [r3, #8]
 8001b76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b78:	f107 031c 	add.w	r3, r7, #28
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b84:	463b      	mov	r3, r7
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	605a      	str	r2, [r3, #4]
 8001b8c:	609a      	str	r2, [r3, #8]
 8001b8e:	60da      	str	r2, [r3, #12]
 8001b90:	611a      	str	r2, [r3, #16]
 8001b92:	615a      	str	r2, [r3, #20]
 8001b94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b96:	4b2c      	ldr	r3, [pc, #176]	; (8001c48 <MX_TIM3_Init+0xe4>)
 8001b98:	4a2c      	ldr	r2, [pc, #176]	; (8001c4c <MX_TIM3_Init+0xe8>)
 8001b9a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b9c:	4b2a      	ldr	r3, [pc, #168]	; (8001c48 <MX_TIM3_Init+0xe4>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba2:	4b29      	ldr	r3, [pc, #164]	; (8001c48 <MX_TIM3_Init+0xe4>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 159;
 8001ba8:	4b27      	ldr	r3, [pc, #156]	; (8001c48 <MX_TIM3_Init+0xe4>)
 8001baa:	229f      	movs	r2, #159	; 0x9f
 8001bac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bae:	4b26      	ldr	r3, [pc, #152]	; (8001c48 <MX_TIM3_Init+0xe4>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb4:	4b24      	ldr	r3, [pc, #144]	; (8001c48 <MX_TIM3_Init+0xe4>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bba:	4823      	ldr	r0, [pc, #140]	; (8001c48 <MX_TIM3_Init+0xe4>)
 8001bbc:	f004 f920 	bl	8005e00 <HAL_TIM_Base_Init>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001bc6:	f000 f967 	bl	8001e98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	481c      	ldr	r0, [pc, #112]	; (8001c48 <MX_TIM3_Init+0xe4>)
 8001bd8:	f004 fbe4 	bl	80063a4 <HAL_TIM_ConfigClockSource>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001be2:	f000 f959 	bl	8001e98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001be6:	4818      	ldr	r0, [pc, #96]	; (8001c48 <MX_TIM3_Init+0xe4>)
 8001be8:	f004 f961 	bl	8005eae <HAL_TIM_PWM_Init>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001bf2:	f000 f951 	bl	8001e98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bfe:	f107 031c 	add.w	r3, r7, #28
 8001c02:	4619      	mov	r1, r3
 8001c04:	4810      	ldr	r0, [pc, #64]	; (8001c48 <MX_TIM3_Init+0xe4>)
 8001c06:	f005 f8c7 	bl	8006d98 <HAL_TIMEx_MasterConfigSynchronization>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001c10:	f000 f942 	bl	8001e98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c14:	2360      	movs	r3, #96	; 0x60
 8001c16:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 79;
 8001c18:	234f      	movs	r3, #79	; 0x4f
 8001c1a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c24:	463b      	mov	r3, r7
 8001c26:	2208      	movs	r2, #8
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4807      	ldr	r0, [pc, #28]	; (8001c48 <MX_TIM3_Init+0xe4>)
 8001c2c:	f004 faa6 	bl	800617c <HAL_TIM_PWM_ConfigChannel>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001c36:	f000 f92f 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c3a:	4803      	ldr	r0, [pc, #12]	; (8001c48 <MX_TIM3_Init+0xe4>)
 8001c3c:	f000 faa8 	bl	8002190 <HAL_TIM_MspPostInit>

}
 8001c40:	bf00      	nop
 8001c42:	3738      	adds	r7, #56	; 0x38
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	200003a0 	.word	0x200003a0
 8001c4c:	40000400 	.word	0x40000400

08001c50 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08e      	sub	sp, #56	; 0x38
 8001c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	605a      	str	r2, [r3, #4]
 8001c60:	609a      	str	r2, [r3, #8]
 8001c62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c64:	f107 031c 	add.w	r3, r7, #28
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c70:	463b      	mov	r3, r7
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	60da      	str	r2, [r3, #12]
 8001c7c:	611a      	str	r2, [r3, #16]
 8001c7e:	615a      	str	r2, [r3, #20]
 8001c80:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c82:	4b2c      	ldr	r3, [pc, #176]	; (8001d34 <MX_TIM4_Init+0xe4>)
 8001c84:	4a2c      	ldr	r2, [pc, #176]	; (8001d38 <MX_TIM4_Init+0xe8>)
 8001c86:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 39;
 8001c88:	4b2a      	ldr	r3, [pc, #168]	; (8001d34 <MX_TIM4_Init+0xe4>)
 8001c8a:	2227      	movs	r2, #39	; 0x27
 8001c8c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c8e:	4b29      	ldr	r3, [pc, #164]	; (8001d34 <MX_TIM4_Init+0xe4>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 249;
 8001c94:	4b27      	ldr	r3, [pc, #156]	; (8001d34 <MX_TIM4_Init+0xe4>)
 8001c96:	22f9      	movs	r2, #249	; 0xf9
 8001c98:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c9a:	4b26      	ldr	r3, [pc, #152]	; (8001d34 <MX_TIM4_Init+0xe4>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca0:	4b24      	ldr	r3, [pc, #144]	; (8001d34 <MX_TIM4_Init+0xe4>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ca6:	4823      	ldr	r0, [pc, #140]	; (8001d34 <MX_TIM4_Init+0xe4>)
 8001ca8:	f004 f8aa 	bl	8005e00 <HAL_TIM_Base_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001cb2:	f000 f8f1 	bl	8001e98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001cbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	481c      	ldr	r0, [pc, #112]	; (8001d34 <MX_TIM4_Init+0xe4>)
 8001cc4:	f004 fb6e 	bl	80063a4 <HAL_TIM_ConfigClockSource>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001cce:	f000 f8e3 	bl	8001e98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001cd2:	4818      	ldr	r0, [pc, #96]	; (8001d34 <MX_TIM4_Init+0xe4>)
 8001cd4:	f004 f8eb 	bl	8005eae <HAL_TIM_PWM_Init>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001cde:	f000 f8db 	bl	8001e98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cea:	f107 031c 	add.w	r3, r7, #28
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4810      	ldr	r0, [pc, #64]	; (8001d34 <MX_TIM4_Init+0xe4>)
 8001cf2:	f005 f851 	bl	8006d98 <HAL_TIMEx_MasterConfigSynchronization>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001cfc:	f000 f8cc 	bl	8001e98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d00:	2360      	movs	r3, #96	; 0x60
 8001d02:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 79;
 8001d04:	234f      	movs	r3, #79	; 0x4f
 8001d06:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d10:	463b      	mov	r3, r7
 8001d12:	2208      	movs	r2, #8
 8001d14:	4619      	mov	r1, r3
 8001d16:	4807      	ldr	r0, [pc, #28]	; (8001d34 <MX_TIM4_Init+0xe4>)
 8001d18:	f004 fa30 	bl	800617c <HAL_TIM_PWM_ConfigChannel>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001d22:	f000 f8b9 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001d26:	4803      	ldr	r0, [pc, #12]	; (8001d34 <MX_TIM4_Init+0xe4>)
 8001d28:	f000 fa32 	bl	8002190 <HAL_TIM_MspPostInit>

}
 8001d2c:	bf00      	nop
 8001d2e:	3738      	adds	r7, #56	; 0x38
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	200003ec 	.word	0x200003ec
 8001d38:	40000800 	.word	0x40000800

08001d3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08c      	sub	sp, #48	; 0x30
 8001d40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d42:	f107 031c 	add.w	r3, r7, #28
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	60da      	str	r2, [r3, #12]
 8001d50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d52:	4b45      	ldr	r3, [pc, #276]	; (8001e68 <MX_GPIO_Init+0x12c>)
 8001d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d56:	4a44      	ldr	r2, [pc, #272]	; (8001e68 <MX_GPIO_Init+0x12c>)
 8001d58:	f043 0304 	orr.w	r3, r3, #4
 8001d5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d5e:	4b42      	ldr	r3, [pc, #264]	; (8001e68 <MX_GPIO_Init+0x12c>)
 8001d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d62:	f003 0304 	and.w	r3, r3, #4
 8001d66:	61bb      	str	r3, [r7, #24]
 8001d68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6a:	4b3f      	ldr	r3, [pc, #252]	; (8001e68 <MX_GPIO_Init+0x12c>)
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6e:	4a3e      	ldr	r2, [pc, #248]	; (8001e68 <MX_GPIO_Init+0x12c>)
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d76:	4b3c      	ldr	r3, [pc, #240]	; (8001e68 <MX_GPIO_Init+0x12c>)
 8001d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d82:	4b39      	ldr	r3, [pc, #228]	; (8001e68 <MX_GPIO_Init+0x12c>)
 8001d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d86:	4a38      	ldr	r2, [pc, #224]	; (8001e68 <MX_GPIO_Init+0x12c>)
 8001d88:	f043 0302 	orr.w	r3, r3, #2
 8001d8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d8e:	4b36      	ldr	r3, [pc, #216]	; (8001e68 <MX_GPIO_Init+0x12c>)
 8001d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d9a:	4b33      	ldr	r3, [pc, #204]	; (8001e68 <MX_GPIO_Init+0x12c>)
 8001d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9e:	4a32      	ldr	r2, [pc, #200]	; (8001e68 <MX_GPIO_Init+0x12c>)
 8001da0:	f043 0310 	orr.w	r3, r3, #16
 8001da4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001da6:	4b30      	ldr	r3, [pc, #192]	; (8001e68 <MX_GPIO_Init+0x12c>)
 8001da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001daa:	f003 0310 	and.w	r3, r3, #16
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001db2:	4b2d      	ldr	r3, [pc, #180]	; (8001e68 <MX_GPIO_Init+0x12c>)
 8001db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db6:	4a2c      	ldr	r2, [pc, #176]	; (8001e68 <MX_GPIO_Init+0x12c>)
 8001db8:	f043 0308 	orr.w	r3, r3, #8
 8001dbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dbe:	4b2a      	ldr	r3, [pc, #168]	; (8001e68 <MX_GPIO_Init+0x12c>)
 8001dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	60bb      	str	r3, [r7, #8]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001dca:	4b27      	ldr	r3, [pc, #156]	; (8001e68 <MX_GPIO_Init+0x12c>)
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dce:	4a26      	ldr	r2, [pc, #152]	; (8001e68 <MX_GPIO_Init+0x12c>)
 8001dd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dd6:	4b24      	ldr	r3, [pc, #144]	; (8001e68 <MX_GPIO_Init+0x12c>)
 8001dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dde:	607b      	str	r3, [r7, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001de2:	f001 fff3 	bl	8003dcc <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001de6:	2200      	movs	r2, #0
 8001de8:	2102      	movs	r1, #2
 8001dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dee:	f001 ff11 	bl	8003c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8001df2:	2200      	movs	r2, #0
 8001df4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001df8:	481c      	ldr	r0, [pc, #112]	; (8001e6c <MX_GPIO_Init+0x130>)
 8001dfa:	f001 ff0b 	bl	8003c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2140      	movs	r1, #64	; 0x40
 8001e02:	481b      	ldr	r0, [pc, #108]	; (8001e70 <MX_GPIO_Init+0x134>)
 8001e04:	f001 ff06 	bl	8003c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e14:	2300      	movs	r3, #0
 8001e16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e18:	f107 031c 	add.w	r3, r7, #28
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e22:	f001 fd65 	bl	80038f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e34:	2300      	movs	r3, #0
 8001e36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e38:	f107 031c 	add.w	r3, r7, #28
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	480b      	ldr	r0, [pc, #44]	; (8001e6c <MX_GPIO_Init+0x130>)
 8001e40:	f001 fd56 	bl	80038f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e44:	2340      	movs	r3, #64	; 0x40
 8001e46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e50:	2300      	movs	r3, #0
 8001e52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e54:	f107 031c 	add.w	r3, r7, #28
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4805      	ldr	r0, [pc, #20]	; (8001e70 <MX_GPIO_Init+0x134>)
 8001e5c:	f001 fd48 	bl	80038f0 <HAL_GPIO_Init>

}
 8001e60:	bf00      	nop
 8001e62:	3730      	adds	r7, #48	; 0x30
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	48001000 	.word	0x48001000
 8001e70:	48000400 	.word	0x48000400

08001e74 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)&ch, 1, 0xFFFF);
 8001e7c:	1d39      	adds	r1, r7, #4
 8001e7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e82:	2201      	movs	r2, #1
 8001e84:	4803      	ldr	r0, [pc, #12]	; (8001e94 <__io_putchar+0x20>)
 8001e86:	f005 f85f 	bl	8006f48 <HAL_UART_Transmit>
	return ch;
 8001e8a:	687b      	ldr	r3, [r7, #4]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20000260 	.word	0x20000260

08001e98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e9c:	b672      	cpsid	i
}
 8001e9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ea0:	e7fe      	b.n	8001ea0 <Error_Handler+0x8>
	...

08001ea4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eaa:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <HAL_MspInit+0x44>)
 8001eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eae:	4a0e      	ldr	r2, [pc, #56]	; (8001ee8 <HAL_MspInit+0x44>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6613      	str	r3, [r2, #96]	; 0x60
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <HAL_MspInit+0x44>)
 8001eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	607b      	str	r3, [r7, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ec2:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <HAL_MspInit+0x44>)
 8001ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec6:	4a08      	ldr	r2, [pc, #32]	; (8001ee8 <HAL_MspInit+0x44>)
 8001ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ecc:	6593      	str	r3, [r2, #88]	; 0x58
 8001ece:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <HAL_MspInit+0x44>)
 8001ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed6:	603b      	str	r3, [r7, #0]
 8001ed8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40021000 	.word	0x40021000

08001eec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b0ae      	sub	sp, #184	; 0xb8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f04:	f107 0310 	add.w	r3, r7, #16
 8001f08:	2294      	movs	r2, #148	; 0x94
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f005 fe99 	bl	8007c44 <memset>
  if(hadc->Instance==ADC1)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a27      	ldr	r2, [pc, #156]	; (8001fb4 <HAL_ADC_MspInit+0xc8>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d146      	bne.n	8001faa <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001f1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f20:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001f22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001f26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001f32:	2310      	movs	r3, #16
 8001f34:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001f36:	2302      	movs	r3, #2
 8001f38:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001f42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f46:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f48:	f107 0310 	add.w	r3, r7, #16
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f002 fe25 	bl	8004b9c <HAL_RCCEx_PeriphCLKConfig>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001f58:	f7ff ff9e 	bl	8001e98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001f5c:	4b16      	ldr	r3, [pc, #88]	; (8001fb8 <HAL_ADC_MspInit+0xcc>)
 8001f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f60:	4a15      	ldr	r2, [pc, #84]	; (8001fb8 <HAL_ADC_MspInit+0xcc>)
 8001f62:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f68:	4b13      	ldr	r3, [pc, #76]	; (8001fb8 <HAL_ADC_MspInit+0xcc>)
 8001f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f74:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <HAL_ADC_MspInit+0xcc>)
 8001f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f78:	4a0f      	ldr	r2, [pc, #60]	; (8001fb8 <HAL_ADC_MspInit+0xcc>)
 8001f7a:	f043 0304 	orr.w	r3, r3, #4
 8001f7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f80:	4b0d      	ldr	r3, [pc, #52]	; (8001fb8 <HAL_ADC_MspInit+0xcc>)
 8001f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001f92:	230b      	movs	r3, #11
 8001f94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f9e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4805      	ldr	r0, [pc, #20]	; (8001fbc <HAL_ADC_MspInit+0xd0>)
 8001fa6:	f001 fca3 	bl	80038f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001faa:	bf00      	nop
 8001fac:	37b8      	adds	r7, #184	; 0xb8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	50040000 	.word	0x50040000
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	48000800 	.word	0x48000800

08001fc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b0ae      	sub	sp, #184	; 0xb8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fd8:	f107 0310 	add.w	r3, r7, #16
 8001fdc:	2294      	movs	r2, #148	; 0x94
 8001fde:	2100      	movs	r1, #0
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f005 fe2f 	bl	8007c44 <memset>
  if(huart->Instance==LPUART1)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a22      	ldr	r2, [pc, #136]	; (8002074 <HAL_UART_MspInit+0xb4>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d13d      	bne.n	800206c <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001ff0:	2320      	movs	r3, #32
 8001ff2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ff8:	f107 0310 	add.w	r3, r7, #16
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f002 fdcd 	bl	8004b9c <HAL_RCCEx_PeriphCLKConfig>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002008:	f7ff ff46 	bl	8001e98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800200c:	4b1a      	ldr	r3, [pc, #104]	; (8002078 <HAL_UART_MspInit+0xb8>)
 800200e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002010:	4a19      	ldr	r2, [pc, #100]	; (8002078 <HAL_UART_MspInit+0xb8>)
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002018:	4b17      	ldr	r3, [pc, #92]	; (8002078 <HAL_UART_MspInit+0xb8>)
 800201a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002024:	4b14      	ldr	r3, [pc, #80]	; (8002078 <HAL_UART_MspInit+0xb8>)
 8002026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002028:	4a13      	ldr	r2, [pc, #76]	; (8002078 <HAL_UART_MspInit+0xb8>)
 800202a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800202e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002030:	4b11      	ldr	r3, [pc, #68]	; (8002078 <HAL_UART_MspInit+0xb8>)
 8002032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 800203c:	f001 fec6 	bl	8003dcc <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002040:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002044:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002048:	2302      	movs	r3, #2
 800204a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002054:	2303      	movs	r3, #3
 8002056:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800205a:	2308      	movs	r3, #8
 800205c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002060:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002064:	4619      	mov	r1, r3
 8002066:	4805      	ldr	r0, [pc, #20]	; (800207c <HAL_UART_MspInit+0xbc>)
 8002068:	f001 fc42 	bl	80038f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800206c:	bf00      	nop
 800206e:	37b8      	adds	r7, #184	; 0xb8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40008000 	.word	0x40008000
 8002078:	40021000 	.word	0x40021000
 800207c:	48001800 	.word	0x48001800

08002080 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b08a      	sub	sp, #40	; 0x28
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002088:	f107 0314 	add.w	r3, r7, #20
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	60da      	str	r2, [r3, #12]
 8002096:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a17      	ldr	r2, [pc, #92]	; (80020fc <HAL_SPI_MspInit+0x7c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d128      	bne.n	80020f4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020a2:	4b17      	ldr	r3, [pc, #92]	; (8002100 <HAL_SPI_MspInit+0x80>)
 80020a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020a6:	4a16      	ldr	r2, [pc, #88]	; (8002100 <HAL_SPI_MspInit+0x80>)
 80020a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020ac:	6613      	str	r3, [r2, #96]	; 0x60
 80020ae:	4b14      	ldr	r3, [pc, #80]	; (8002100 <HAL_SPI_MspInit+0x80>)
 80020b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020b6:	613b      	str	r3, [r7, #16]
 80020b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ba:	4b11      	ldr	r3, [pc, #68]	; (8002100 <HAL_SPI_MspInit+0x80>)
 80020bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020be:	4a10      	ldr	r2, [pc, #64]	; (8002100 <HAL_SPI_MspInit+0x80>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020c6:	4b0e      	ldr	r3, [pc, #56]	; (8002100 <HAL_SPI_MspInit+0x80>)
 80020c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80020d2:	23e0      	movs	r3, #224	; 0xe0
 80020d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d6:	2302      	movs	r3, #2
 80020d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020de:	2303      	movs	r3, #3
 80020e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020e2:	2305      	movs	r3, #5
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e6:	f107 0314 	add.w	r3, r7, #20
 80020ea:	4619      	mov	r1, r3
 80020ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020f0:	f001 fbfe 	bl	80038f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80020f4:	bf00      	nop
 80020f6:	3728      	adds	r7, #40	; 0x28
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40013000 	.word	0x40013000
 8002100:	40021000 	.word	0x40021000

08002104 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002104:	b480      	push	{r7}
 8002106:	b087      	sub	sp, #28
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002114:	d10c      	bne.n	8002130 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002116:	4b1b      	ldr	r3, [pc, #108]	; (8002184 <HAL_TIM_Base_MspInit+0x80>)
 8002118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211a:	4a1a      	ldr	r2, [pc, #104]	; (8002184 <HAL_TIM_Base_MspInit+0x80>)
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	6593      	str	r3, [r2, #88]	; 0x58
 8002122:	4b18      	ldr	r3, [pc, #96]	; (8002184 <HAL_TIM_Base_MspInit+0x80>)
 8002124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	617b      	str	r3, [r7, #20]
 800212c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800212e:	e022      	b.n	8002176 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a14      	ldr	r2, [pc, #80]	; (8002188 <HAL_TIM_Base_MspInit+0x84>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d10c      	bne.n	8002154 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800213a:	4b12      	ldr	r3, [pc, #72]	; (8002184 <HAL_TIM_Base_MspInit+0x80>)
 800213c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213e:	4a11      	ldr	r2, [pc, #68]	; (8002184 <HAL_TIM_Base_MspInit+0x80>)
 8002140:	f043 0302 	orr.w	r3, r3, #2
 8002144:	6593      	str	r3, [r2, #88]	; 0x58
 8002146:	4b0f      	ldr	r3, [pc, #60]	; (8002184 <HAL_TIM_Base_MspInit+0x80>)
 8002148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	693b      	ldr	r3, [r7, #16]
}
 8002152:	e010      	b.n	8002176 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a0c      	ldr	r2, [pc, #48]	; (800218c <HAL_TIM_Base_MspInit+0x88>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d10b      	bne.n	8002176 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800215e:	4b09      	ldr	r3, [pc, #36]	; (8002184 <HAL_TIM_Base_MspInit+0x80>)
 8002160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002162:	4a08      	ldr	r2, [pc, #32]	; (8002184 <HAL_TIM_Base_MspInit+0x80>)
 8002164:	f043 0304 	orr.w	r3, r3, #4
 8002168:	6593      	str	r3, [r2, #88]	; 0x58
 800216a:	4b06      	ldr	r3, [pc, #24]	; (8002184 <HAL_TIM_Base_MspInit+0x80>)
 800216c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]
}
 8002176:	bf00      	nop
 8002178:	371c      	adds	r7, #28
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40021000 	.word	0x40021000
 8002188:	40000400 	.word	0x40000400
 800218c:	40000800 	.word	0x40000800

08002190 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08a      	sub	sp, #40	; 0x28
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002198:	f107 0314 	add.w	r3, r7, #20
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b0:	d11d      	bne.n	80021ee <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b2:	4b33      	ldr	r3, [pc, #204]	; (8002280 <HAL_TIM_MspPostInit+0xf0>)
 80021b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b6:	4a32      	ldr	r2, [pc, #200]	; (8002280 <HAL_TIM_MspPostInit+0xf0>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021be:	4b30      	ldr	r3, [pc, #192]	; (8002280 <HAL_TIM_MspPostInit+0xf0>)
 80021c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	613b      	str	r3, [r7, #16]
 80021c8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021ca:	2304      	movs	r3, #4
 80021cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ce:	2302      	movs	r3, #2
 80021d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d6:	2300      	movs	r3, #0
 80021d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021da:	2301      	movs	r3, #1
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021de:	f107 0314 	add.w	r3, r7, #20
 80021e2:	4619      	mov	r1, r3
 80021e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021e8:	f001 fb82 	bl	80038f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80021ec:	e043      	b.n	8002276 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM3)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a24      	ldr	r2, [pc, #144]	; (8002284 <HAL_TIM_MspPostInit+0xf4>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d11c      	bne.n	8002232 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f8:	4b21      	ldr	r3, [pc, #132]	; (8002280 <HAL_TIM_MspPostInit+0xf0>)
 80021fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fc:	4a20      	ldr	r2, [pc, #128]	; (8002280 <HAL_TIM_MspPostInit+0xf0>)
 80021fe:	f043 0302 	orr.w	r3, r3, #2
 8002202:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002204:	4b1e      	ldr	r3, [pc, #120]	; (8002280 <HAL_TIM_MspPostInit+0xf0>)
 8002206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002210:	2301      	movs	r3, #1
 8002212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002214:	2302      	movs	r3, #2
 8002216:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221c:	2300      	movs	r3, #0
 800221e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002220:	2302      	movs	r3, #2
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002224:	f107 0314 	add.w	r3, r7, #20
 8002228:	4619      	mov	r1, r3
 800222a:	4817      	ldr	r0, [pc, #92]	; (8002288 <HAL_TIM_MspPostInit+0xf8>)
 800222c:	f001 fb60 	bl	80038f0 <HAL_GPIO_Init>
}
 8002230:	e021      	b.n	8002276 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM4)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a15      	ldr	r2, [pc, #84]	; (800228c <HAL_TIM_MspPostInit+0xfc>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d11c      	bne.n	8002276 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800223c:	4b10      	ldr	r3, [pc, #64]	; (8002280 <HAL_TIM_MspPostInit+0xf0>)
 800223e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002240:	4a0f      	ldr	r2, [pc, #60]	; (8002280 <HAL_TIM_MspPostInit+0xf0>)
 8002242:	f043 0308 	orr.w	r3, r3, #8
 8002246:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002248:	4b0d      	ldr	r3, [pc, #52]	; (8002280 <HAL_TIM_MspPostInit+0xf0>)
 800224a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800224c:	f003 0308 	and.w	r3, r3, #8
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002254:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225a:	2302      	movs	r3, #2
 800225c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225e:	2300      	movs	r3, #0
 8002260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002262:	2300      	movs	r3, #0
 8002264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002266:	2302      	movs	r3, #2
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800226a:	f107 0314 	add.w	r3, r7, #20
 800226e:	4619      	mov	r1, r3
 8002270:	4807      	ldr	r0, [pc, #28]	; (8002290 <HAL_TIM_MspPostInit+0x100>)
 8002272:	f001 fb3d 	bl	80038f0 <HAL_GPIO_Init>
}
 8002276:	bf00      	nop
 8002278:	3728      	adds	r7, #40	; 0x28
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40021000 	.word	0x40021000
 8002284:	40000400 	.word	0x40000400
 8002288:	48000400 	.word	0x48000400
 800228c:	40000800 	.word	0x40000800
 8002290:	48000c00 	.word	0x48000c00

08002294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002298:	e7fe      	b.n	8002298 <NMI_Handler+0x4>

0800229a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800229a:	b480      	push	{r7}
 800229c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800229e:	e7fe      	b.n	800229e <HardFault_Handler+0x4>

080022a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022a4:	e7fe      	b.n	80022a4 <MemManage_Handler+0x4>

080022a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022aa:	e7fe      	b.n	80022aa <BusFault_Handler+0x4>

080022ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022b0:	e7fe      	b.n	80022b0 <UsageFault_Handler+0x4>

080022b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022ce:	b480      	push	{r7}
 80022d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022e0:	f000 f958 	bl	8002594 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022e4:	bf00      	nop
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
	return 1;
 80022ec:	2301      	movs	r3, #1
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <_kill>:

int _kill(int pid, int sig)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002302:	f005 fc6d 	bl	8007be0 <__errno>
 8002306:	4603      	mov	r3, r0
 8002308:	2216      	movs	r2, #22
 800230a:	601a      	str	r2, [r3, #0]
	return -1;
 800230c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002310:	4618      	mov	r0, r3
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <_exit>:

void _exit (int status)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002320:	f04f 31ff 	mov.w	r1, #4294967295
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f7ff ffe7 	bl	80022f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800232a:	e7fe      	b.n	800232a <_exit+0x12>

0800232c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	e00a      	b.n	8002354 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800233e:	f3af 8000 	nop.w
 8002342:	4601      	mov	r1, r0
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	1c5a      	adds	r2, r3, #1
 8002348:	60ba      	str	r2, [r7, #8]
 800234a:	b2ca      	uxtb	r2, r1
 800234c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	3301      	adds	r3, #1
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	429a      	cmp	r2, r3
 800235a:	dbf0      	blt.n	800233e <_read+0x12>
	}

return len;
 800235c:	687b      	ldr	r3, [r7, #4]
}
 800235e:	4618      	mov	r0, r3
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b086      	sub	sp, #24
 800236a:	af00      	add	r7, sp, #0
 800236c:	60f8      	str	r0, [r7, #12]
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	e009      	b.n	800238c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	60ba      	str	r2, [r7, #8]
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff fd77 	bl	8001e74 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	3301      	adds	r3, #1
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	429a      	cmp	r2, r3
 8002392:	dbf1      	blt.n	8002378 <_write+0x12>
	}
	return len;
 8002394:	687b      	ldr	r3, [r7, #4]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <_close>:

int _close(int file)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
	return -1;
 80023a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
 80023be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023c6:	605a      	str	r2, [r3, #4]
	return 0;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <_isatty>:

int _isatty(int file)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
	return 1;
 80023de:	2301      	movs	r3, #1
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
	return 0;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
	...

08002408 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002410:	4a14      	ldr	r2, [pc, #80]	; (8002464 <_sbrk+0x5c>)
 8002412:	4b15      	ldr	r3, [pc, #84]	; (8002468 <_sbrk+0x60>)
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800241c:	4b13      	ldr	r3, [pc, #76]	; (800246c <_sbrk+0x64>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d102      	bne.n	800242a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002424:	4b11      	ldr	r3, [pc, #68]	; (800246c <_sbrk+0x64>)
 8002426:	4a12      	ldr	r2, [pc, #72]	; (8002470 <_sbrk+0x68>)
 8002428:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800242a:	4b10      	ldr	r3, [pc, #64]	; (800246c <_sbrk+0x64>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4413      	add	r3, r2
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	429a      	cmp	r2, r3
 8002436:	d207      	bcs.n	8002448 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002438:	f005 fbd2 	bl	8007be0 <__errno>
 800243c:	4603      	mov	r3, r0
 800243e:	220c      	movs	r2, #12
 8002440:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002442:	f04f 33ff 	mov.w	r3, #4294967295
 8002446:	e009      	b.n	800245c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002448:	4b08      	ldr	r3, [pc, #32]	; (800246c <_sbrk+0x64>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800244e:	4b07      	ldr	r3, [pc, #28]	; (800246c <_sbrk+0x64>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4413      	add	r3, r2
 8002456:	4a05      	ldr	r2, [pc, #20]	; (800246c <_sbrk+0x64>)
 8002458:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800245a:	68fb      	ldr	r3, [r7, #12]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	200a0000 	.word	0x200a0000
 8002468:	00000400 	.word	0x00000400
 800246c:	2000045c 	.word	0x2000045c
 8002470:	20000478 	.word	0x20000478

08002474 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002478:	4b06      	ldr	r3, [pc, #24]	; (8002494 <SystemInit+0x20>)
 800247a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247e:	4a05      	ldr	r2, [pc, #20]	; (8002494 <SystemInit+0x20>)
 8002480:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002484:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	e000ed00 	.word	0xe000ed00

08002498 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002498:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800249c:	f7ff ffea 	bl	8002474 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024a0:	480c      	ldr	r0, [pc, #48]	; (80024d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80024a2:	490d      	ldr	r1, [pc, #52]	; (80024d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024a4:	4a0d      	ldr	r2, [pc, #52]	; (80024dc <LoopForever+0xe>)
  movs r3, #0
 80024a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024a8:	e002      	b.n	80024b0 <LoopCopyDataInit>

080024aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ae:	3304      	adds	r3, #4

080024b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024b4:	d3f9      	bcc.n	80024aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024b6:	4a0a      	ldr	r2, [pc, #40]	; (80024e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024b8:	4c0a      	ldr	r4, [pc, #40]	; (80024e4 <LoopForever+0x16>)
  movs r3, #0
 80024ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024bc:	e001      	b.n	80024c2 <LoopFillZerobss>

080024be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024c0:	3204      	adds	r2, #4

080024c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024c4:	d3fb      	bcc.n	80024be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024c6:	f005 fb91 	bl	8007bec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024ca:	f7ff f967 	bl	800179c <main>

080024ce <LoopForever>:

LoopForever:
    b LoopForever
 80024ce:	e7fe      	b.n	80024ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80024d0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80024d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024d8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80024dc:	0800b478 	.word	0x0800b478
  ldr r2, =_sbss
 80024e0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80024e4:	20000474 	.word	0x20000474

080024e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024e8:	e7fe      	b.n	80024e8 <ADC1_IRQHandler>

080024ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b082      	sub	sp, #8
 80024ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024f0:	2300      	movs	r3, #0
 80024f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024f4:	2003      	movs	r0, #3
 80024f6:	f001 f9c7 	bl	8003888 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024fa:	200f      	movs	r0, #15
 80024fc:	f000 f80e 	bl	800251c <HAL_InitTick>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d002      	beq.n	800250c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	71fb      	strb	r3, [r7, #7]
 800250a:	e001      	b.n	8002510 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800250c:	f7ff fcca 	bl	8001ea4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002510:	79fb      	ldrb	r3, [r7, #7]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
	...

0800251c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002524:	2300      	movs	r3, #0
 8002526:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002528:	4b17      	ldr	r3, [pc, #92]	; (8002588 <HAL_InitTick+0x6c>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d023      	beq.n	8002578 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002530:	4b16      	ldr	r3, [pc, #88]	; (800258c <HAL_InitTick+0x70>)
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	4b14      	ldr	r3, [pc, #80]	; (8002588 <HAL_InitTick+0x6c>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	4619      	mov	r1, r3
 800253a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800253e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002542:	fbb2 f3f3 	udiv	r3, r2, r3
 8002546:	4618      	mov	r0, r3
 8002548:	f001 f9c5 	bl	80038d6 <HAL_SYSTICK_Config>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10f      	bne.n	8002572 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b0f      	cmp	r3, #15
 8002556:	d809      	bhi.n	800256c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002558:	2200      	movs	r2, #0
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	f04f 30ff 	mov.w	r0, #4294967295
 8002560:	f001 f99d 	bl	800389e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002564:	4a0a      	ldr	r2, [pc, #40]	; (8002590 <HAL_InitTick+0x74>)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	e007      	b.n	800257c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	73fb      	strb	r3, [r7, #15]
 8002570:	e004      	b.n	800257c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	73fb      	strb	r3, [r7, #15]
 8002576:	e001      	b.n	800257c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800257c:	7bfb      	ldrb	r3, [r7, #15]
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20000008 	.word	0x20000008
 800258c:	20000000 	.word	0x20000000
 8002590:	20000004 	.word	0x20000004

08002594 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002598:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <HAL_IncTick+0x20>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	461a      	mov	r2, r3
 800259e:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <HAL_IncTick+0x24>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4413      	add	r3, r2
 80025a4:	4a04      	ldr	r2, [pc, #16]	; (80025b8 <HAL_IncTick+0x24>)
 80025a6:	6013      	str	r3, [r2, #0]
}
 80025a8:	bf00      	nop
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	20000008 	.word	0x20000008
 80025b8:	20000460 	.word	0x20000460

080025bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  return uwTick;
 80025c0:	4b03      	ldr	r3, [pc, #12]	; (80025d0 <HAL_GetTick+0x14>)
 80025c2:	681b      	ldr	r3, [r3, #0]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	20000460 	.word	0x20000460

080025d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	431a      	orrs	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	609a      	str	r2, [r3, #8]
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
 8002602:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	609a      	str	r2, [r3, #8]
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002630:	4618      	mov	r0, r3
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800263c:	b480      	push	{r7}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
 8002648:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	3360      	adds	r3, #96	; 0x60
 800264e:	461a      	mov	r2, r3
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	4b08      	ldr	r3, [pc, #32]	; (8002680 <LL_ADC_SetOffset+0x44>)
 800265e:	4013      	ands	r3, r2
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	4313      	orrs	r3, r2
 800266c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002674:	bf00      	nop
 8002676:	371c      	adds	r7, #28
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	03fff000 	.word	0x03fff000

08002684 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3360      	adds	r3, #96	; 0x60
 8002692:	461a      	mov	r2, r3
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b087      	sub	sp, #28
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	3360      	adds	r3, #96	; 0x60
 80026c0:	461a      	mov	r2, r3
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4413      	add	r3, r2
 80026c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	431a      	orrs	r2, r3
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80026da:	bf00      	nop
 80026dc:	371c      	adds	r7, #28
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
 80026ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	615a      	str	r2, [r3, #20]
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002720:	2301      	movs	r3, #1
 8002722:	e000      	b.n	8002726 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002732:	b480      	push	{r7}
 8002734:	b087      	sub	sp, #28
 8002736:	af00      	add	r7, sp, #0
 8002738:	60f8      	str	r0, [r7, #12]
 800273a:	60b9      	str	r1, [r7, #8]
 800273c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	3330      	adds	r3, #48	; 0x30
 8002742:	461a      	mov	r2, r3
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	0a1b      	lsrs	r3, r3, #8
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	f003 030c 	and.w	r3, r3, #12
 800274e:	4413      	add	r3, r2
 8002750:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	f003 031f 	and.w	r3, r3, #31
 800275c:	211f      	movs	r1, #31
 800275e:	fa01 f303 	lsl.w	r3, r1, r3
 8002762:	43db      	mvns	r3, r3
 8002764:	401a      	ands	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	0e9b      	lsrs	r3, r3, #26
 800276a:	f003 011f 	and.w	r1, r3, #31
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	f003 031f 	and.w	r3, r3, #31
 8002774:	fa01 f303 	lsl.w	r3, r1, r3
 8002778:	431a      	orrs	r2, r3
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800277e:	bf00      	nop
 8002780:	371c      	adds	r7, #28
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800278a:	b480      	push	{r7}
 800278c:	b087      	sub	sp, #28
 800278e:	af00      	add	r7, sp, #0
 8002790:	60f8      	str	r0, [r7, #12]
 8002792:	60b9      	str	r1, [r7, #8]
 8002794:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	3314      	adds	r3, #20
 800279a:	461a      	mov	r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	0e5b      	lsrs	r3, r3, #25
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	f003 0304 	and.w	r3, r3, #4
 80027a6:	4413      	add	r3, r2
 80027a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	0d1b      	lsrs	r3, r3, #20
 80027b2:	f003 031f 	and.w	r3, r3, #31
 80027b6:	2107      	movs	r1, #7
 80027b8:	fa01 f303 	lsl.w	r3, r1, r3
 80027bc:	43db      	mvns	r3, r3
 80027be:	401a      	ands	r2, r3
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	0d1b      	lsrs	r3, r3, #20
 80027c4:	f003 031f 	and.w	r3, r3, #31
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	fa01 f303 	lsl.w	r3, r1, r3
 80027ce:	431a      	orrs	r2, r3
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80027d4:	bf00      	nop
 80027d6:	371c      	adds	r7, #28
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f8:	43db      	mvns	r3, r3
 80027fa:	401a      	ands	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f003 0318 	and.w	r3, r3, #24
 8002802:	4908      	ldr	r1, [pc, #32]	; (8002824 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002804:	40d9      	lsrs	r1, r3
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	400b      	ands	r3, r1
 800280a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800280e:	431a      	orrs	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002816:	bf00      	nop
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	0007ffff 	.word	0x0007ffff

08002828 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002838:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6093      	str	r3, [r2, #8]
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800285c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002860:	d101      	bne.n	8002866 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002862:	2301      	movs	r3, #1
 8002864:	e000      	b.n	8002868 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002884:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002888:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028b0:	d101      	bne.n	80028b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028d8:	f043 0201 	orr.w	r2, r3, #1
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d101      	bne.n	8002904 <LL_ADC_IsEnabled+0x18>
 8002900:	2301      	movs	r3, #1
 8002902:	e000      	b.n	8002906 <LL_ADC_IsEnabled+0x1a>
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002912:	b480      	push	{r7}
 8002914:	b083      	sub	sp, #12
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002922:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002926:	f043 0204 	orr.w	r2, r3, #4
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 0304 	and.w	r3, r3, #4
 800294a:	2b04      	cmp	r3, #4
 800294c:	d101      	bne.n	8002952 <LL_ADC_REG_IsConversionOngoing+0x18>
 800294e:	2301      	movs	r3, #1
 8002950:	e000      	b.n	8002954 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 0308 	and.w	r3, r3, #8
 8002970:	2b08      	cmp	r3, #8
 8002972:	d101      	bne.n	8002978 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002974:	2301      	movs	r3, #1
 8002976:	e000      	b.n	800297a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
	...

08002988 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b088      	sub	sp, #32
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002990:	2300      	movs	r3, #0
 8002992:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002994:	2300      	movs	r3, #0
 8002996:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e12f      	b.n	8002c02 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d109      	bne.n	80029c4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7ff fa9b 	bl	8001eec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff ff3f 	bl	800284c <LL_ADC_IsDeepPowerDownEnabled>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d004      	beq.n	80029de <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff ff25 	bl	8002828 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff ff5a 	bl	800289c <LL_ADC_IsInternalRegulatorEnabled>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d115      	bne.n	8002a1a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff ff3e 	bl	8002874 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029f8:	4b84      	ldr	r3, [pc, #528]	; (8002c0c <HAL_ADC_Init+0x284>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	099b      	lsrs	r3, r3, #6
 80029fe:	4a84      	ldr	r2, [pc, #528]	; (8002c10 <HAL_ADC_Init+0x288>)
 8002a00:	fba2 2303 	umull	r2, r3, r2, r3
 8002a04:	099b      	lsrs	r3, r3, #6
 8002a06:	3301      	adds	r3, #1
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a0c:	e002      	b.n	8002a14 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	3b01      	subs	r3, #1
 8002a12:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f9      	bne.n	8002a0e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff ff3c 	bl	800289c <LL_ADC_IsInternalRegulatorEnabled>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10d      	bne.n	8002a46 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2e:	f043 0210 	orr.w	r2, r3, #16
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3a:	f043 0201 	orr.w	r2, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff ff75 	bl	800293a <LL_ADC_REG_IsConversionOngoing>
 8002a50:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a56:	f003 0310 	and.w	r3, r3, #16
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f040 80c8 	bne.w	8002bf0 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f040 80c4 	bne.w	8002bf0 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002a70:	f043 0202 	orr.w	r2, r3, #2
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff ff35 	bl	80028ec <LL_ADC_IsEnabled>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10b      	bne.n	8002aa0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a88:	4862      	ldr	r0, [pc, #392]	; (8002c14 <HAL_ADC_Init+0x28c>)
 8002a8a:	f7ff ff2f 	bl	80028ec <LL_ADC_IsEnabled>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d105      	bne.n	8002aa0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	4619      	mov	r1, r3
 8002a9a:	485f      	ldr	r0, [pc, #380]	; (8002c18 <HAL_ADC_Init+0x290>)
 8002a9c:	f7ff fd9a 	bl	80025d4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	7e5b      	ldrb	r3, [r3, #25]
 8002aa4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002aaa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002ab0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002ab6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002abe:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d106      	bne.n	8002adc <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	045b      	lsls	r3, r3, #17
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d009      	beq.n	8002af8 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	4b47      	ldr	r3, [pc, #284]	; (8002c1c <HAL_ADC_Init+0x294>)
 8002b00:	4013      	ands	r3, r2
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	6812      	ldr	r2, [r2, #0]
 8002b06:	69b9      	ldr	r1, [r7, #24]
 8002b08:	430b      	orrs	r3, r1
 8002b0a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff ff12 	bl	800293a <LL_ADC_REG_IsConversionOngoing>
 8002b16:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff ff1f 	bl	8002960 <LL_ADC_INJ_IsConversionOngoing>
 8002b22:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d140      	bne.n	8002bac <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d13d      	bne.n	8002bac <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	7e1b      	ldrb	r3, [r3, #24]
 8002b38:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b3a:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b42:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b44:	4313      	orrs	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b52:	f023 0306 	bic.w	r3, r3, #6
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	6812      	ldr	r2, [r2, #0]
 8002b5a:	69b9      	ldr	r1, [r7, #24]
 8002b5c:	430b      	orrs	r3, r1
 8002b5e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d118      	bne.n	8002b9c <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002b74:	f023 0304 	bic.w	r3, r3, #4
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b80:	4311      	orrs	r1, r2
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002b86:	4311      	orrs	r1, r2
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f042 0201 	orr.w	r2, r2, #1
 8002b98:	611a      	str	r2, [r3, #16]
 8002b9a:	e007      	b.n	8002bac <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	691a      	ldr	r2, [r3, #16]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 0201 	bic.w	r2, r2, #1
 8002baa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d10c      	bne.n	8002bce <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	f023 010f 	bic.w	r1, r3, #15
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	1e5a      	subs	r2, r3, #1
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	631a      	str	r2, [r3, #48]	; 0x30
 8002bcc:	e007      	b.n	8002bde <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 020f 	bic.w	r2, r2, #15
 8002bdc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be2:	f023 0303 	bic.w	r3, r3, #3
 8002be6:	f043 0201 	orr.w	r2, r3, #1
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	659a      	str	r2, [r3, #88]	; 0x58
 8002bee:	e007      	b.n	8002c00 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf4:	f043 0210 	orr.w	r2, r3, #16
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c00:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3720      	adds	r7, #32
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	20000000 	.word	0x20000000
 8002c10:	053e2d63 	.word	0x053e2d63
 8002c14:	50040000 	.word	0x50040000
 8002c18:	50040300 	.word	0x50040300
 8002c1c:	fff0c007 	.word	0xfff0c007

08002c20 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff fe84 	bl	800293a <LL_ADC_REG_IsConversionOngoing>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d14f      	bne.n	8002cd8 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d101      	bne.n	8002c46 <HAL_ADC_Start+0x26>
 8002c42:	2302      	movs	r3, #2
 8002c44:	e04b      	b.n	8002cde <HAL_ADC_Start+0xbe>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 fce2 	bl	8003618 <ADC_Enable>
 8002c54:	4603      	mov	r3, r0
 8002c56:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002c58:	7bfb      	ldrb	r3, [r7, #15]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d137      	bne.n	8002cce <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c62:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c66:	f023 0301 	bic.w	r3, r3, #1
 8002c6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c7e:	d106      	bne.n	8002c8e <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c84:	f023 0206 	bic.w	r2, r3, #6
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c8c:	e002      	b.n	8002c94 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	221c      	movs	r2, #28
 8002c9a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d007      	beq.n	8002cc2 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002cba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff fe23 	bl	8002912 <LL_ADC_REG_StartConversion>
 8002ccc:	e006      	b.n	8002cdc <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002cd6:	e001      	b.n	8002cdc <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002cd8:	2302      	movs	r3, #2
 8002cda:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b086      	sub	sp, #24
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
 8002cee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d102      	bne.n	8002cfe <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002cf8:	2308      	movs	r3, #8
 8002cfa:	617b      	str	r3, [r7, #20]
 8002cfc:	e010      	b.n	8002d20 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d007      	beq.n	8002d1c <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d10:	f043 0220 	orr.w	r2, r3, #32
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e06f      	b.n	8002dfc <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002d1c:	2304      	movs	r3, #4
 8002d1e:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002d20:	f7ff fc4c 	bl	80025bc <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002d26:	e021      	b.n	8002d6c <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d2e:	d01d      	beq.n	8002d6c <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002d30:	f7ff fc44 	bl	80025bc <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d302      	bcc.n	8002d46 <HAL_ADC_PollForConversion+0x60>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d112      	bne.n	8002d6c <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10b      	bne.n	8002d6c <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d58:	f043 0204 	orr.w	r2, r3, #4
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e047      	b.n	8002dfc <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	4013      	ands	r3, r2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0d6      	beq.n	8002d28 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff fcbe 	bl	800270c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d01c      	beq.n	8002dd0 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	7e5b      	ldrb	r3, [r3, #25]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d118      	bne.n	8002dd0 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0308 	and.w	r3, r3, #8
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	d111      	bne.n	8002dd0 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d105      	bne.n	8002dd0 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc8:	f043 0201 	orr.w	r2, r3, #1
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	2b08      	cmp	r3, #8
 8002ddc:	d104      	bne.n	8002de8 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2208      	movs	r2, #8
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	e008      	b.n	8002dfa <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d103      	bne.n	8002dfa <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	220c      	movs	r2, #12
 8002df8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
	...

08002e20 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b0b6      	sub	sp, #216	; 0xd8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d101      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x22>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e3d5      	b.n	80035ee <HAL_ADC_ConfigChannel+0x7ce>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff fd73 	bl	800293a <LL_ADC_REG_IsConversionOngoing>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f040 83ba 	bne.w	80035d0 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2b05      	cmp	r3, #5
 8002e62:	d824      	bhi.n	8002eae <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	3b02      	subs	r3, #2
 8002e6a:	2b03      	cmp	r3, #3
 8002e6c:	d81b      	bhi.n	8002ea6 <HAL_ADC_ConfigChannel+0x86>
 8002e6e:	a201      	add	r2, pc, #4	; (adr r2, 8002e74 <HAL_ADC_ConfigChannel+0x54>)
 8002e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e74:	08002e85 	.word	0x08002e85
 8002e78:	08002e8d 	.word	0x08002e8d
 8002e7c:	08002e95 	.word	0x08002e95
 8002e80:	08002e9d 	.word	0x08002e9d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	220c      	movs	r2, #12
 8002e88:	605a      	str	r2, [r3, #4]
          break;
 8002e8a:	e011      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	2212      	movs	r2, #18
 8002e90:	605a      	str	r2, [r3, #4]
          break;
 8002e92:	e00d      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	2218      	movs	r2, #24
 8002e98:	605a      	str	r2, [r3, #4]
          break;
 8002e9a:	e009      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ea2:	605a      	str	r2, [r3, #4]
          break;
 8002ea4:	e004      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2206      	movs	r2, #6
 8002eaa:	605a      	str	r2, [r3, #4]
          break;
 8002eac:	e000      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002eae:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6818      	ldr	r0, [r3, #0]
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	6859      	ldr	r1, [r3, #4]
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	f7ff fc38 	bl	8002732 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff fd37 	bl	800293a <LL_ADC_REG_IsConversionOngoing>
 8002ecc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff fd43 	bl	8002960 <LL_ADC_INJ_IsConversionOngoing>
 8002eda:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ede:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f040 81c1 	bne.w	800326a <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ee8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f040 81bc 	bne.w	800326a <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002efa:	d10f      	bne.n	8002f1c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6818      	ldr	r0, [r3, #0]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2200      	movs	r2, #0
 8002f06:	4619      	mov	r1, r3
 8002f08:	f7ff fc3f 	bl	800278a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff fbe6 	bl	80026e6 <LL_ADC_SetSamplingTimeCommonConfig>
 8002f1a:	e00e      	b.n	8002f3a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6818      	ldr	r0, [r3, #0]
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	6819      	ldr	r1, [r3, #0]
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	461a      	mov	r2, r3
 8002f2a:	f7ff fc2e 	bl	800278a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2100      	movs	r1, #0
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff fbd6 	bl	80026e6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	695a      	ldr	r2, [r3, #20]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	08db      	lsrs	r3, r3, #3
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	2b04      	cmp	r3, #4
 8002f5a:	d00a      	beq.n	8002f72 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6818      	ldr	r0, [r3, #0]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	6919      	ldr	r1, [r3, #16]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f6c:	f7ff fb66 	bl	800263c <LL_ADC_SetOffset>
 8002f70:	e17b      	b.n	800326a <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2100      	movs	r1, #0
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff fb83 	bl	8002684 <LL_ADC_GetOffsetChannel>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10a      	bne.n	8002f9e <HAL_ADC_ConfigChannel+0x17e>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff fb78 	bl	8002684 <LL_ADC_GetOffsetChannel>
 8002f94:	4603      	mov	r3, r0
 8002f96:	0e9b      	lsrs	r3, r3, #26
 8002f98:	f003 021f 	and.w	r2, r3, #31
 8002f9c:	e01e      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x1bc>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff fb6d 	bl	8002684 <LL_ADC_GetOffsetChannel>
 8002faa:	4603      	mov	r3, r0
 8002fac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002fb4:	fa93 f3a3 	rbit	r3, r3
 8002fb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002fbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002fc0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002fc4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002fcc:	2320      	movs	r3, #32
 8002fce:	e004      	b.n	8002fda <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002fd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fd4:	fab3 f383 	clz	r3, r3
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d105      	bne.n	8002ff4 <HAL_ADC_ConfigChannel+0x1d4>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	0e9b      	lsrs	r3, r3, #26
 8002fee:	f003 031f 	and.w	r3, r3, #31
 8002ff2:	e018      	b.n	8003026 <HAL_ADC_ConfigChannel+0x206>
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003000:	fa93 f3a3 	rbit	r3, r3
 8003004:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003008:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800300c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003010:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8003018:	2320      	movs	r3, #32
 800301a:	e004      	b.n	8003026 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 800301c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003020:	fab3 f383 	clz	r3, r3
 8003024:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003026:	429a      	cmp	r2, r3
 8003028:	d106      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2200      	movs	r2, #0
 8003030:	2100      	movs	r1, #0
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff fb3c 	bl	80026b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2101      	movs	r1, #1
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff fb20 	bl	8002684 <LL_ADC_GetOffsetChannel>
 8003044:	4603      	mov	r3, r0
 8003046:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10a      	bne.n	8003064 <HAL_ADC_ConfigChannel+0x244>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2101      	movs	r1, #1
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff fb15 	bl	8002684 <LL_ADC_GetOffsetChannel>
 800305a:	4603      	mov	r3, r0
 800305c:	0e9b      	lsrs	r3, r3, #26
 800305e:	f003 021f 	and.w	r2, r3, #31
 8003062:	e01e      	b.n	80030a2 <HAL_ADC_ConfigChannel+0x282>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2101      	movs	r1, #1
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff fb0a 	bl	8002684 <LL_ADC_GetOffsetChannel>
 8003070:	4603      	mov	r3, r0
 8003072:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003076:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800307a:	fa93 f3a3 	rbit	r3, r3
 800307e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003082:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003086:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800308a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8003092:	2320      	movs	r3, #32
 8003094:	e004      	b.n	80030a0 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8003096:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800309a:	fab3 f383 	clz	r3, r3
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d105      	bne.n	80030ba <HAL_ADC_ConfigChannel+0x29a>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	0e9b      	lsrs	r3, r3, #26
 80030b4:	f003 031f 	and.w	r3, r3, #31
 80030b8:	e018      	b.n	80030ec <HAL_ADC_ConfigChannel+0x2cc>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030c6:	fa93 f3a3 	rbit	r3, r3
 80030ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80030ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80030d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80030d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80030de:	2320      	movs	r3, #32
 80030e0:	e004      	b.n	80030ec <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80030e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030e6:	fab3 f383 	clz	r3, r3
 80030ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d106      	bne.n	80030fe <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2200      	movs	r2, #0
 80030f6:	2101      	movs	r1, #1
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff fad9 	bl	80026b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2102      	movs	r1, #2
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff fabd 	bl	8002684 <LL_ADC_GetOffsetChannel>
 800310a:	4603      	mov	r3, r0
 800310c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10a      	bne.n	800312a <HAL_ADC_ConfigChannel+0x30a>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2102      	movs	r1, #2
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff fab2 	bl	8002684 <LL_ADC_GetOffsetChannel>
 8003120:	4603      	mov	r3, r0
 8003122:	0e9b      	lsrs	r3, r3, #26
 8003124:	f003 021f 	and.w	r2, r3, #31
 8003128:	e01e      	b.n	8003168 <HAL_ADC_ConfigChannel+0x348>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2102      	movs	r1, #2
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff faa7 	bl	8002684 <LL_ADC_GetOffsetChannel>
 8003136:	4603      	mov	r3, r0
 8003138:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003140:	fa93 f3a3 	rbit	r3, r3
 8003144:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003148:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800314c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003150:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8003158:	2320      	movs	r3, #32
 800315a:	e004      	b.n	8003166 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 800315c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003160:	fab3 f383 	clz	r3, r3
 8003164:	b2db      	uxtb	r3, r3
 8003166:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003170:	2b00      	cmp	r3, #0
 8003172:	d105      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x360>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	0e9b      	lsrs	r3, r3, #26
 800317a:	f003 031f 	and.w	r3, r3, #31
 800317e:	e016      	b.n	80031ae <HAL_ADC_ConfigChannel+0x38e>
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003188:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800318c:	fa93 f3a3 	rbit	r3, r3
 8003190:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003192:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003194:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003198:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80031a0:	2320      	movs	r3, #32
 80031a2:	e004      	b.n	80031ae <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80031a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031a8:	fab3 f383 	clz	r3, r3
 80031ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d106      	bne.n	80031c0 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2200      	movs	r2, #0
 80031b8:	2102      	movs	r1, #2
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff fa78 	bl	80026b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2103      	movs	r1, #3
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff fa5c 	bl	8002684 <LL_ADC_GetOffsetChannel>
 80031cc:	4603      	mov	r3, r0
 80031ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10a      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x3cc>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2103      	movs	r1, #3
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff fa51 	bl	8002684 <LL_ADC_GetOffsetChannel>
 80031e2:	4603      	mov	r3, r0
 80031e4:	0e9b      	lsrs	r3, r3, #26
 80031e6:	f003 021f 	and.w	r2, r3, #31
 80031ea:	e017      	b.n	800321c <HAL_ADC_ConfigChannel+0x3fc>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2103      	movs	r1, #3
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff fa46 	bl	8002684 <LL_ADC_GetOffsetChannel>
 80031f8:	4603      	mov	r3, r0
 80031fa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031fe:	fa93 f3a3 	rbit	r3, r3
 8003202:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003204:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003206:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003208:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800320e:	2320      	movs	r3, #32
 8003210:	e003      	b.n	800321a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003212:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003214:	fab3 f383 	clz	r3, r3
 8003218:	b2db      	uxtb	r3, r3
 800321a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003224:	2b00      	cmp	r3, #0
 8003226:	d105      	bne.n	8003234 <HAL_ADC_ConfigChannel+0x414>
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	0e9b      	lsrs	r3, r3, #26
 800322e:	f003 031f 	and.w	r3, r3, #31
 8003232:	e011      	b.n	8003258 <HAL_ADC_ConfigChannel+0x438>
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800323c:	fa93 f3a3 	rbit	r3, r3
 8003240:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003242:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003244:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800324c:	2320      	movs	r3, #32
 800324e:	e003      	b.n	8003258 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003252:	fab3 f383 	clz	r3, r3
 8003256:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003258:	429a      	cmp	r2, r3
 800325a:	d106      	bne.n	800326a <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2200      	movs	r2, #0
 8003262:	2103      	movs	r1, #3
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff fa23 	bl	80026b0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff fb3c 	bl	80028ec <LL_ADC_IsEnabled>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	f040 8140 	bne.w	80034fc <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6818      	ldr	r0, [r3, #0]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	6819      	ldr	r1, [r3, #0]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	461a      	mov	r2, r3
 800328a:	f7ff faa9 	bl	80027e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	4a8f      	ldr	r2, [pc, #572]	; (80034d0 <HAL_ADC_ConfigChannel+0x6b0>)
 8003294:	4293      	cmp	r3, r2
 8003296:	f040 8131 	bne.w	80034fc <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10b      	bne.n	80032c2 <HAL_ADC_ConfigChannel+0x4a2>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	0e9b      	lsrs	r3, r3, #26
 80032b0:	3301      	adds	r3, #1
 80032b2:	f003 031f 	and.w	r3, r3, #31
 80032b6:	2b09      	cmp	r3, #9
 80032b8:	bf94      	ite	ls
 80032ba:	2301      	movls	r3, #1
 80032bc:	2300      	movhi	r3, #0
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	e019      	b.n	80032f6 <HAL_ADC_ConfigChannel+0x4d6>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032ca:	fa93 f3a3 	rbit	r3, r3
 80032ce:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80032d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032d2:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80032d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80032da:	2320      	movs	r3, #32
 80032dc:	e003      	b.n	80032e6 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80032de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032e0:	fab3 f383 	clz	r3, r3
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	3301      	adds	r3, #1
 80032e8:	f003 031f 	and.w	r3, r3, #31
 80032ec:	2b09      	cmp	r3, #9
 80032ee:	bf94      	ite	ls
 80032f0:	2301      	movls	r3, #1
 80032f2:	2300      	movhi	r3, #0
 80032f4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d079      	beq.n	80033ee <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003302:	2b00      	cmp	r3, #0
 8003304:	d107      	bne.n	8003316 <HAL_ADC_ConfigChannel+0x4f6>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	0e9b      	lsrs	r3, r3, #26
 800330c:	3301      	adds	r3, #1
 800330e:	069b      	lsls	r3, r3, #26
 8003310:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003314:	e015      	b.n	8003342 <HAL_ADC_ConfigChannel+0x522>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800331e:	fa93 f3a3 	rbit	r3, r3
 8003322:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003326:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003328:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800332e:	2320      	movs	r3, #32
 8003330:	e003      	b.n	800333a <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8003332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003334:	fab3 f383 	clz	r3, r3
 8003338:	b2db      	uxtb	r3, r3
 800333a:	3301      	adds	r3, #1
 800333c:	069b      	lsls	r3, r3, #26
 800333e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800334a:	2b00      	cmp	r3, #0
 800334c:	d109      	bne.n	8003362 <HAL_ADC_ConfigChannel+0x542>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	0e9b      	lsrs	r3, r3, #26
 8003354:	3301      	adds	r3, #1
 8003356:	f003 031f 	and.w	r3, r3, #31
 800335a:	2101      	movs	r1, #1
 800335c:	fa01 f303 	lsl.w	r3, r1, r3
 8003360:	e017      	b.n	8003392 <HAL_ADC_ConfigChannel+0x572>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800336a:	fa93 f3a3 	rbit	r3, r3
 800336e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003372:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003374:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800337a:	2320      	movs	r3, #32
 800337c:	e003      	b.n	8003386 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800337e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003380:	fab3 f383 	clz	r3, r3
 8003384:	b2db      	uxtb	r3, r3
 8003386:	3301      	adds	r3, #1
 8003388:	f003 031f 	and.w	r3, r3, #31
 800338c:	2101      	movs	r1, #1
 800338e:	fa01 f303 	lsl.w	r3, r1, r3
 8003392:	ea42 0103 	orr.w	r1, r2, r3
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10a      	bne.n	80033b8 <HAL_ADC_ConfigChannel+0x598>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	0e9b      	lsrs	r3, r3, #26
 80033a8:	3301      	adds	r3, #1
 80033aa:	f003 021f 	and.w	r2, r3, #31
 80033ae:	4613      	mov	r3, r2
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	4413      	add	r3, r2
 80033b4:	051b      	lsls	r3, r3, #20
 80033b6:	e018      	b.n	80033ea <HAL_ADC_ConfigChannel+0x5ca>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c0:	fa93 f3a3 	rbit	r3, r3
 80033c4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80033c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80033ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80033d0:	2320      	movs	r3, #32
 80033d2:	e003      	b.n	80033dc <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80033d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033d6:	fab3 f383 	clz	r3, r3
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	3301      	adds	r3, #1
 80033de:	f003 021f 	and.w	r2, r3, #31
 80033e2:	4613      	mov	r3, r2
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	4413      	add	r3, r2
 80033e8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033ea:	430b      	orrs	r3, r1
 80033ec:	e081      	b.n	80034f2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d107      	bne.n	800340a <HAL_ADC_ConfigChannel+0x5ea>
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	0e9b      	lsrs	r3, r3, #26
 8003400:	3301      	adds	r3, #1
 8003402:	069b      	lsls	r3, r3, #26
 8003404:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003408:	e015      	b.n	8003436 <HAL_ADC_ConfigChannel+0x616>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003412:	fa93 f3a3 	rbit	r3, r3
 8003416:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800341c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8003422:	2320      	movs	r3, #32
 8003424:	e003      	b.n	800342e <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8003426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003428:	fab3 f383 	clz	r3, r3
 800342c:	b2db      	uxtb	r3, r3
 800342e:	3301      	adds	r3, #1
 8003430:	069b      	lsls	r3, r3, #26
 8003432:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800343e:	2b00      	cmp	r3, #0
 8003440:	d109      	bne.n	8003456 <HAL_ADC_ConfigChannel+0x636>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	0e9b      	lsrs	r3, r3, #26
 8003448:	3301      	adds	r3, #1
 800344a:	f003 031f 	and.w	r3, r3, #31
 800344e:	2101      	movs	r1, #1
 8003450:	fa01 f303 	lsl.w	r3, r1, r3
 8003454:	e017      	b.n	8003486 <HAL_ADC_ConfigChannel+0x666>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	fa93 f3a3 	rbit	r3, r3
 8003462:	61fb      	str	r3, [r7, #28]
  return result;
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800346e:	2320      	movs	r3, #32
 8003470:	e003      	b.n	800347a <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	fab3 f383 	clz	r3, r3
 8003478:	b2db      	uxtb	r3, r3
 800347a:	3301      	adds	r3, #1
 800347c:	f003 031f 	and.w	r3, r3, #31
 8003480:	2101      	movs	r1, #1
 8003482:	fa01 f303 	lsl.w	r3, r1, r3
 8003486:	ea42 0103 	orr.w	r1, r2, r3
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10d      	bne.n	80034b2 <HAL_ADC_ConfigChannel+0x692>
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	0e9b      	lsrs	r3, r3, #26
 800349c:	3301      	adds	r3, #1
 800349e:	f003 021f 	and.w	r2, r3, #31
 80034a2:	4613      	mov	r3, r2
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	4413      	add	r3, r2
 80034a8:	3b1e      	subs	r3, #30
 80034aa:	051b      	lsls	r3, r3, #20
 80034ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034b0:	e01e      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x6d0>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	fa93 f3a3 	rbit	r3, r3
 80034be:	613b      	str	r3, [r7, #16]
  return result;
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d104      	bne.n	80034d4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80034ca:	2320      	movs	r3, #32
 80034cc:	e006      	b.n	80034dc <HAL_ADC_ConfigChannel+0x6bc>
 80034ce:	bf00      	nop
 80034d0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	fab3 f383 	clz	r3, r3
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	3301      	adds	r3, #1
 80034de:	f003 021f 	and.w	r2, r3, #31
 80034e2:	4613      	mov	r3, r2
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	4413      	add	r3, r2
 80034e8:	3b1e      	subs	r3, #30
 80034ea:	051b      	lsls	r3, r3, #20
 80034ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034f0:	430b      	orrs	r3, r1
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	6892      	ldr	r2, [r2, #8]
 80034f6:	4619      	mov	r1, r3
 80034f8:	f7ff f947 	bl	800278a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	4b3d      	ldr	r3, [pc, #244]	; (80035f8 <HAL_ADC_ConfigChannel+0x7d8>)
 8003502:	4013      	ands	r3, r2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d06c      	beq.n	80035e2 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003508:	483c      	ldr	r0, [pc, #240]	; (80035fc <HAL_ADC_ConfigChannel+0x7dc>)
 800350a:	f7ff f889 	bl	8002620 <LL_ADC_GetCommonPathInternalCh>
 800350e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a3a      	ldr	r2, [pc, #232]	; (8003600 <HAL_ADC_ConfigChannel+0x7e0>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d127      	bne.n	800356c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800351c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003520:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d121      	bne.n	800356c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a35      	ldr	r2, [pc, #212]	; (8003604 <HAL_ADC_ConfigChannel+0x7e4>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d157      	bne.n	80035e2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003532:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003536:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800353a:	4619      	mov	r1, r3
 800353c:	482f      	ldr	r0, [pc, #188]	; (80035fc <HAL_ADC_ConfigChannel+0x7dc>)
 800353e:	f7ff f85c 	bl	80025fa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003542:	4b31      	ldr	r3, [pc, #196]	; (8003608 <HAL_ADC_ConfigChannel+0x7e8>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	099b      	lsrs	r3, r3, #6
 8003548:	4a30      	ldr	r2, [pc, #192]	; (800360c <HAL_ADC_ConfigChannel+0x7ec>)
 800354a:	fba2 2303 	umull	r2, r3, r2, r3
 800354e:	099b      	lsrs	r3, r3, #6
 8003550:	1c5a      	adds	r2, r3, #1
 8003552:	4613      	mov	r3, r2
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	4413      	add	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800355c:	e002      	b.n	8003564 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	3b01      	subs	r3, #1
 8003562:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1f9      	bne.n	800355e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800356a:	e03a      	b.n	80035e2 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a27      	ldr	r2, [pc, #156]	; (8003610 <HAL_ADC_ConfigChannel+0x7f0>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d113      	bne.n	800359e <HAL_ADC_ConfigChannel+0x77e>
 8003576:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800357a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10d      	bne.n	800359e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a1f      	ldr	r2, [pc, #124]	; (8003604 <HAL_ADC_ConfigChannel+0x7e4>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d12a      	bne.n	80035e2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800358c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003590:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003594:	4619      	mov	r1, r3
 8003596:	4819      	ldr	r0, [pc, #100]	; (80035fc <HAL_ADC_ConfigChannel+0x7dc>)
 8003598:	f7ff f82f 	bl	80025fa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800359c:	e021      	b.n	80035e2 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a1c      	ldr	r2, [pc, #112]	; (8003614 <HAL_ADC_ConfigChannel+0x7f4>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d11c      	bne.n	80035e2 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80035a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d116      	bne.n	80035e2 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a12      	ldr	r2, [pc, #72]	; (8003604 <HAL_ADC_ConfigChannel+0x7e4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d111      	bne.n	80035e2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80035c6:	4619      	mov	r1, r3
 80035c8:	480c      	ldr	r0, [pc, #48]	; (80035fc <HAL_ADC_ConfigChannel+0x7dc>)
 80035ca:	f7ff f816 	bl	80025fa <LL_ADC_SetCommonPathInternalCh>
 80035ce:	e008      	b.n	80035e2 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d4:	f043 0220 	orr.w	r2, r3, #32
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80035ea:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	37d8      	adds	r7, #216	; 0xd8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	80080000 	.word	0x80080000
 80035fc:	50040300 	.word	0x50040300
 8003600:	c7520000 	.word	0xc7520000
 8003604:	50040000 	.word	0x50040000
 8003608:	20000000 	.word	0x20000000
 800360c:	053e2d63 	.word	0x053e2d63
 8003610:	cb840000 	.word	0xcb840000
 8003614:	80000001 	.word	0x80000001

08003618 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003620:	2300      	movs	r3, #0
 8003622:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff f95f 	bl	80028ec <LL_ADC_IsEnabled>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d169      	bne.n	8003708 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689a      	ldr	r2, [r3, #8]
 800363a:	4b36      	ldr	r3, [pc, #216]	; (8003714 <ADC_Enable+0xfc>)
 800363c:	4013      	ands	r3, r2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00d      	beq.n	800365e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003646:	f043 0210 	orr.w	r2, r3, #16
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003652:	f043 0201 	orr.w	r2, r3, #1
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e055      	b.n	800370a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f7ff f92e 	bl	80028c4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003668:	482b      	ldr	r0, [pc, #172]	; (8003718 <ADC_Enable+0x100>)
 800366a:	f7fe ffd9 	bl	8002620 <LL_ADC_GetCommonPathInternalCh>
 800366e:	4603      	mov	r3, r0
 8003670:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d013      	beq.n	80036a0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003678:	4b28      	ldr	r3, [pc, #160]	; (800371c <ADC_Enable+0x104>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	099b      	lsrs	r3, r3, #6
 800367e:	4a28      	ldr	r2, [pc, #160]	; (8003720 <ADC_Enable+0x108>)
 8003680:	fba2 2303 	umull	r2, r3, r2, r3
 8003684:	099b      	lsrs	r3, r3, #6
 8003686:	1c5a      	adds	r2, r3, #1
 8003688:	4613      	mov	r3, r2
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	4413      	add	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003692:	e002      	b.n	800369a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	3b01      	subs	r3, #1
 8003698:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1f9      	bne.n	8003694 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80036a0:	f7fe ff8c 	bl	80025bc <HAL_GetTick>
 80036a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036a6:	e028      	b.n	80036fa <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff f91d 	bl	80028ec <LL_ADC_IsEnabled>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d104      	bne.n	80036c2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4618      	mov	r0, r3
 80036be:	f7ff f901 	bl	80028c4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80036c2:	f7fe ff7b 	bl	80025bc <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d914      	bls.n	80036fa <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d00d      	beq.n	80036fa <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e2:	f043 0210 	orr.w	r2, r3, #16
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ee:	f043 0201 	orr.w	r2, r3, #1
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e007      	b.n	800370a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b01      	cmp	r3, #1
 8003706:	d1cf      	bne.n	80036a8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	8000003f 	.word	0x8000003f
 8003718:	50040300 	.word	0x50040300
 800371c:	20000000 	.word	0x20000000
 8003720:	053e2d63 	.word	0x053e2d63

08003724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f003 0307 	and.w	r3, r3, #7
 8003732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003734:	4b0c      	ldr	r3, [pc, #48]	; (8003768 <__NVIC_SetPriorityGrouping+0x44>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003740:	4013      	ands	r3, r2
 8003742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800374c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003756:	4a04      	ldr	r2, [pc, #16]	; (8003768 <__NVIC_SetPriorityGrouping+0x44>)
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	60d3      	str	r3, [r2, #12]
}
 800375c:	bf00      	nop
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	e000ed00 	.word	0xe000ed00

0800376c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003770:	4b04      	ldr	r3, [pc, #16]	; (8003784 <__NVIC_GetPriorityGrouping+0x18>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	0a1b      	lsrs	r3, r3, #8
 8003776:	f003 0307 	and.w	r3, r3, #7
}
 800377a:	4618      	mov	r0, r3
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	e000ed00 	.word	0xe000ed00

08003788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	6039      	str	r1, [r7, #0]
 8003792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003798:	2b00      	cmp	r3, #0
 800379a:	db0a      	blt.n	80037b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	490c      	ldr	r1, [pc, #48]	; (80037d4 <__NVIC_SetPriority+0x4c>)
 80037a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a6:	0112      	lsls	r2, r2, #4
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	440b      	add	r3, r1
 80037ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037b0:	e00a      	b.n	80037c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	4908      	ldr	r1, [pc, #32]	; (80037d8 <__NVIC_SetPriority+0x50>)
 80037b8:	79fb      	ldrb	r3, [r7, #7]
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	3b04      	subs	r3, #4
 80037c0:	0112      	lsls	r2, r2, #4
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	440b      	add	r3, r1
 80037c6:	761a      	strb	r2, [r3, #24]
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	e000e100 	.word	0xe000e100
 80037d8:	e000ed00 	.word	0xe000ed00

080037dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037dc:	b480      	push	{r7}
 80037de:	b089      	sub	sp, #36	; 0x24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f1c3 0307 	rsb	r3, r3, #7
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	bf28      	it	cs
 80037fa:	2304      	movcs	r3, #4
 80037fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	3304      	adds	r3, #4
 8003802:	2b06      	cmp	r3, #6
 8003804:	d902      	bls.n	800380c <NVIC_EncodePriority+0x30>
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	3b03      	subs	r3, #3
 800380a:	e000      	b.n	800380e <NVIC_EncodePriority+0x32>
 800380c:	2300      	movs	r3, #0
 800380e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003810:	f04f 32ff 	mov.w	r2, #4294967295
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	43da      	mvns	r2, r3
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	401a      	ands	r2, r3
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003824:	f04f 31ff 	mov.w	r1, #4294967295
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	fa01 f303 	lsl.w	r3, r1, r3
 800382e:	43d9      	mvns	r1, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003834:	4313      	orrs	r3, r2
         );
}
 8003836:	4618      	mov	r0, r3
 8003838:	3724      	adds	r7, #36	; 0x24
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
	...

08003844 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3b01      	subs	r3, #1
 8003850:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003854:	d301      	bcc.n	800385a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003856:	2301      	movs	r3, #1
 8003858:	e00f      	b.n	800387a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800385a:	4a0a      	ldr	r2, [pc, #40]	; (8003884 <SysTick_Config+0x40>)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3b01      	subs	r3, #1
 8003860:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003862:	210f      	movs	r1, #15
 8003864:	f04f 30ff 	mov.w	r0, #4294967295
 8003868:	f7ff ff8e 	bl	8003788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800386c:	4b05      	ldr	r3, [pc, #20]	; (8003884 <SysTick_Config+0x40>)
 800386e:	2200      	movs	r2, #0
 8003870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003872:	4b04      	ldr	r3, [pc, #16]	; (8003884 <SysTick_Config+0x40>)
 8003874:	2207      	movs	r2, #7
 8003876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	e000e010 	.word	0xe000e010

08003888 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f7ff ff47 	bl	8003724 <__NVIC_SetPriorityGrouping>
}
 8003896:	bf00      	nop
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b086      	sub	sp, #24
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	4603      	mov	r3, r0
 80038a6:	60b9      	str	r1, [r7, #8]
 80038a8:	607a      	str	r2, [r7, #4]
 80038aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80038ac:	2300      	movs	r3, #0
 80038ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038b0:	f7ff ff5c 	bl	800376c <__NVIC_GetPriorityGrouping>
 80038b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	68b9      	ldr	r1, [r7, #8]
 80038ba:	6978      	ldr	r0, [r7, #20]
 80038bc:	f7ff ff8e 	bl	80037dc <NVIC_EncodePriority>
 80038c0:	4602      	mov	r2, r0
 80038c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038c6:	4611      	mov	r1, r2
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff ff5d 	bl	8003788 <__NVIC_SetPriority>
}
 80038ce:	bf00      	nop
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b082      	sub	sp, #8
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7ff ffb0 	bl	8003844 <SysTick_Config>
 80038e4:	4603      	mov	r3, r0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
	...

080038f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b087      	sub	sp, #28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038fa:	2300      	movs	r3, #0
 80038fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038fe:	e166      	b.n	8003bce <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	2101      	movs	r1, #1
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	fa01 f303 	lsl.w	r3, r1, r3
 800390c:	4013      	ands	r3, r2
 800390e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 8158 	beq.w	8003bc8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f003 0303 	and.w	r3, r3, #3
 8003920:	2b01      	cmp	r3, #1
 8003922:	d005      	beq.n	8003930 <HAL_GPIO_Init+0x40>
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f003 0303 	and.w	r3, r3, #3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d130      	bne.n	8003992 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	2203      	movs	r2, #3
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	43db      	mvns	r3, r3
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	4013      	ands	r3, r2
 8003946:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	68da      	ldr	r2, [r3, #12]
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	4313      	orrs	r3, r2
 8003958:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003966:	2201      	movs	r2, #1
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	fa02 f303 	lsl.w	r3, r2, r3
 800396e:	43db      	mvns	r3, r3
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	4013      	ands	r3, r2
 8003974:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	091b      	lsrs	r3, r3, #4
 800397c:	f003 0201 	and.w	r2, r3, #1
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	fa02 f303 	lsl.w	r3, r2, r3
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	4313      	orrs	r3, r2
 800398a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f003 0303 	and.w	r3, r3, #3
 800399a:	2b03      	cmp	r3, #3
 800399c:	d017      	beq.n	80039ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	2203      	movs	r2, #3
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	43db      	mvns	r3, r3
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	4013      	ands	r3, r2
 80039b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	689a      	ldr	r2, [r3, #8]
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	fa02 f303 	lsl.w	r3, r2, r3
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d123      	bne.n	8003a22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	08da      	lsrs	r2, r3, #3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	3208      	adds	r2, #8
 80039e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	220f      	movs	r2, #15
 80039f2:	fa02 f303 	lsl.w	r3, r2, r3
 80039f6:	43db      	mvns	r3, r3
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	4013      	ands	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	691a      	ldr	r2, [r3, #16]
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f003 0307 	and.w	r3, r3, #7
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	08da      	lsrs	r2, r3, #3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	3208      	adds	r2, #8
 8003a1c:	6939      	ldr	r1, [r7, #16]
 8003a1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	2203      	movs	r2, #3
 8003a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a32:	43db      	mvns	r3, r3
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	4013      	ands	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f003 0203 	and.w	r2, r3, #3
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f000 80b2 	beq.w	8003bc8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a64:	4b61      	ldr	r3, [pc, #388]	; (8003bec <HAL_GPIO_Init+0x2fc>)
 8003a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a68:	4a60      	ldr	r2, [pc, #384]	; (8003bec <HAL_GPIO_Init+0x2fc>)
 8003a6a:	f043 0301 	orr.w	r3, r3, #1
 8003a6e:	6613      	str	r3, [r2, #96]	; 0x60
 8003a70:	4b5e      	ldr	r3, [pc, #376]	; (8003bec <HAL_GPIO_Init+0x2fc>)
 8003a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	60bb      	str	r3, [r7, #8]
 8003a7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a7c:	4a5c      	ldr	r2, [pc, #368]	; (8003bf0 <HAL_GPIO_Init+0x300>)
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	089b      	lsrs	r3, r3, #2
 8003a82:	3302      	adds	r3, #2
 8003a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	f003 0303 	and.w	r3, r3, #3
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	220f      	movs	r2, #15
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	43db      	mvns	r3, r3
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003aa6:	d02b      	beq.n	8003b00 <HAL_GPIO_Init+0x210>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a52      	ldr	r2, [pc, #328]	; (8003bf4 <HAL_GPIO_Init+0x304>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d025      	beq.n	8003afc <HAL_GPIO_Init+0x20c>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a51      	ldr	r2, [pc, #324]	; (8003bf8 <HAL_GPIO_Init+0x308>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d01f      	beq.n	8003af8 <HAL_GPIO_Init+0x208>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a50      	ldr	r2, [pc, #320]	; (8003bfc <HAL_GPIO_Init+0x30c>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d019      	beq.n	8003af4 <HAL_GPIO_Init+0x204>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a4f      	ldr	r2, [pc, #316]	; (8003c00 <HAL_GPIO_Init+0x310>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d013      	beq.n	8003af0 <HAL_GPIO_Init+0x200>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a4e      	ldr	r2, [pc, #312]	; (8003c04 <HAL_GPIO_Init+0x314>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d00d      	beq.n	8003aec <HAL_GPIO_Init+0x1fc>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a4d      	ldr	r2, [pc, #308]	; (8003c08 <HAL_GPIO_Init+0x318>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d007      	beq.n	8003ae8 <HAL_GPIO_Init+0x1f8>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a4c      	ldr	r2, [pc, #304]	; (8003c0c <HAL_GPIO_Init+0x31c>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d101      	bne.n	8003ae4 <HAL_GPIO_Init+0x1f4>
 8003ae0:	2307      	movs	r3, #7
 8003ae2:	e00e      	b.n	8003b02 <HAL_GPIO_Init+0x212>
 8003ae4:	2308      	movs	r3, #8
 8003ae6:	e00c      	b.n	8003b02 <HAL_GPIO_Init+0x212>
 8003ae8:	2306      	movs	r3, #6
 8003aea:	e00a      	b.n	8003b02 <HAL_GPIO_Init+0x212>
 8003aec:	2305      	movs	r3, #5
 8003aee:	e008      	b.n	8003b02 <HAL_GPIO_Init+0x212>
 8003af0:	2304      	movs	r3, #4
 8003af2:	e006      	b.n	8003b02 <HAL_GPIO_Init+0x212>
 8003af4:	2303      	movs	r3, #3
 8003af6:	e004      	b.n	8003b02 <HAL_GPIO_Init+0x212>
 8003af8:	2302      	movs	r3, #2
 8003afa:	e002      	b.n	8003b02 <HAL_GPIO_Init+0x212>
 8003afc:	2301      	movs	r3, #1
 8003afe:	e000      	b.n	8003b02 <HAL_GPIO_Init+0x212>
 8003b00:	2300      	movs	r3, #0
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	f002 0203 	and.w	r2, r2, #3
 8003b08:	0092      	lsls	r2, r2, #2
 8003b0a:	4093      	lsls	r3, r2
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b12:	4937      	ldr	r1, [pc, #220]	; (8003bf0 <HAL_GPIO_Init+0x300>)
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	089b      	lsrs	r3, r3, #2
 8003b18:	3302      	adds	r3, #2
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b20:	4b3b      	ldr	r3, [pc, #236]	; (8003c10 <HAL_GPIO_Init+0x320>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b44:	4a32      	ldr	r2, [pc, #200]	; (8003c10 <HAL_GPIO_Init+0x320>)
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b4a:	4b31      	ldr	r3, [pc, #196]	; (8003c10 <HAL_GPIO_Init+0x320>)
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	43db      	mvns	r3, r3
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	4013      	ands	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d003      	beq.n	8003b6e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b6e:	4a28      	ldr	r2, [pc, #160]	; (8003c10 <HAL_GPIO_Init+0x320>)
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003b74:	4b26      	ldr	r3, [pc, #152]	; (8003c10 <HAL_GPIO_Init+0x320>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	43db      	mvns	r3, r3
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	4013      	ands	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d003      	beq.n	8003b98 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b98:	4a1d      	ldr	r2, [pc, #116]	; (8003c10 <HAL_GPIO_Init+0x320>)
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003b9e:	4b1c      	ldr	r3, [pc, #112]	; (8003c10 <HAL_GPIO_Init+0x320>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	4013      	ands	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003bc2:	4a13      	ldr	r2, [pc, #76]	; (8003c10 <HAL_GPIO_Init+0x320>)
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f47f ae91 	bne.w	8003900 <HAL_GPIO_Init+0x10>
  }
}
 8003bde:	bf00      	nop
 8003be0:	bf00      	nop
 8003be2:	371c      	adds	r7, #28
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	40010000 	.word	0x40010000
 8003bf4:	48000400 	.word	0x48000400
 8003bf8:	48000800 	.word	0x48000800
 8003bfc:	48000c00 	.word	0x48000c00
 8003c00:	48001000 	.word	0x48001000
 8003c04:	48001400 	.word	0x48001400
 8003c08:	48001800 	.word	0x48001800
 8003c0c:	48001c00 	.word	0x48001c00
 8003c10:	40010400 	.word	0x40010400

08003c14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	807b      	strh	r3, [r7, #2]
 8003c20:	4613      	mov	r3, r2
 8003c22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c24:	787b      	ldrb	r3, [r7, #1]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c2a:	887a      	ldrh	r2, [r7, #2]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c30:	e002      	b.n	8003c38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c32:	887a      	ldrh	r2, [r7, #2]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c48:	4b0d      	ldr	r3, [pc, #52]	; (8003c80 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c54:	d102      	bne.n	8003c5c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003c56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c5a:	e00b      	b.n	8003c74 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003c5c:	4b08      	ldr	r3, [pc, #32]	; (8003c80 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c6a:	d102      	bne.n	8003c72 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003c6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c70:	e000      	b.n	8003c74 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003c72:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	40007000 	.word	0x40007000

08003c84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d141      	bne.n	8003d16 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c92:	4b4b      	ldr	r3, [pc, #300]	; (8003dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c9e:	d131      	bne.n	8003d04 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ca0:	4b47      	ldr	r3, [pc, #284]	; (8003dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ca6:	4a46      	ldr	r2, [pc, #280]	; (8003dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ca8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cb0:	4b43      	ldr	r3, [pc, #268]	; (8003dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cb8:	4a41      	ldr	r2, [pc, #260]	; (8003dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cbe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003cc0:	4b40      	ldr	r3, [pc, #256]	; (8003dc4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2232      	movs	r2, #50	; 0x32
 8003cc6:	fb02 f303 	mul.w	r3, r2, r3
 8003cca:	4a3f      	ldr	r2, [pc, #252]	; (8003dc8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd0:	0c9b      	lsrs	r3, r3, #18
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cd6:	e002      	b.n	8003cde <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cde:	4b38      	ldr	r3, [pc, #224]	; (8003dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cea:	d102      	bne.n	8003cf2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1f2      	bne.n	8003cd8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cf2:	4b33      	ldr	r3, [pc, #204]	; (8003dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cfe:	d158      	bne.n	8003db2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e057      	b.n	8003db4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d04:	4b2e      	ldr	r3, [pc, #184]	; (8003dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d0a:	4a2d      	ldr	r2, [pc, #180]	; (8003dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003d14:	e04d      	b.n	8003db2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d1c:	d141      	bne.n	8003da2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d1e:	4b28      	ldr	r3, [pc, #160]	; (8003dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d2a:	d131      	bne.n	8003d90 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d2c:	4b24      	ldr	r3, [pc, #144]	; (8003dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d32:	4a23      	ldr	r2, [pc, #140]	; (8003dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d3c:	4b20      	ldr	r3, [pc, #128]	; (8003dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d44:	4a1e      	ldr	r2, [pc, #120]	; (8003dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d4a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003d4c:	4b1d      	ldr	r3, [pc, #116]	; (8003dc4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2232      	movs	r2, #50	; 0x32
 8003d52:	fb02 f303 	mul.w	r3, r2, r3
 8003d56:	4a1c      	ldr	r2, [pc, #112]	; (8003dc8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d58:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5c:	0c9b      	lsrs	r3, r3, #18
 8003d5e:	3301      	adds	r3, #1
 8003d60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d62:	e002      	b.n	8003d6a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d6a:	4b15      	ldr	r3, [pc, #84]	; (8003dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d76:	d102      	bne.n	8003d7e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1f2      	bne.n	8003d64 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d7e:	4b10      	ldr	r3, [pc, #64]	; (8003dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d8a:	d112      	bne.n	8003db2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e011      	b.n	8003db4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d90:	4b0b      	ldr	r3, [pc, #44]	; (8003dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d96:	4a0a      	ldr	r2, [pc, #40]	; (8003dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003da0:	e007      	b.n	8003db2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003da2:	4b07      	ldr	r3, [pc, #28]	; (8003dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003daa:	4a05      	ldr	r2, [pc, #20]	; (8003dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003db0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3714      	adds	r7, #20
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	40007000 	.word	0x40007000
 8003dc4:	20000000 	.word	0x20000000
 8003dc8:	431bde83 	.word	0x431bde83

08003dcc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003dd0:	4b05      	ldr	r3, [pc, #20]	; (8003de8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	4a04      	ldr	r2, [pc, #16]	; (8003de8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003dd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dda:	6053      	str	r3, [r2, #4]
}
 8003ddc:	bf00      	nop
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	40007000 	.word	0x40007000

08003dec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b088      	sub	sp, #32
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d102      	bne.n	8003e00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	f000 bc08 	b.w	8004610 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e00:	4b96      	ldr	r3, [pc, #600]	; (800405c <HAL_RCC_OscConfig+0x270>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f003 030c 	and.w	r3, r3, #12
 8003e08:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e0a:	4b94      	ldr	r3, [pc, #592]	; (800405c <HAL_RCC_OscConfig+0x270>)
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	f003 0303 	and.w	r3, r3, #3
 8003e12:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0310 	and.w	r3, r3, #16
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 80e4 	beq.w	8003fea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d007      	beq.n	8003e38 <HAL_RCC_OscConfig+0x4c>
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	2b0c      	cmp	r3, #12
 8003e2c:	f040 808b 	bne.w	8003f46 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	f040 8087 	bne.w	8003f46 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e38:	4b88      	ldr	r3, [pc, #544]	; (800405c <HAL_RCC_OscConfig+0x270>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d005      	beq.n	8003e50 <HAL_RCC_OscConfig+0x64>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e3df      	b.n	8004610 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a1a      	ldr	r2, [r3, #32]
 8003e54:	4b81      	ldr	r3, [pc, #516]	; (800405c <HAL_RCC_OscConfig+0x270>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d004      	beq.n	8003e6a <HAL_RCC_OscConfig+0x7e>
 8003e60:	4b7e      	ldr	r3, [pc, #504]	; (800405c <HAL_RCC_OscConfig+0x270>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e68:	e005      	b.n	8003e76 <HAL_RCC_OscConfig+0x8a>
 8003e6a:	4b7c      	ldr	r3, [pc, #496]	; (800405c <HAL_RCC_OscConfig+0x270>)
 8003e6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e70:	091b      	lsrs	r3, r3, #4
 8003e72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d223      	bcs.n	8003ec2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 fdcc 	bl	8004a1c <RCC_SetFlashLatencyFromMSIRange>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e3c0      	b.n	8004610 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e8e:	4b73      	ldr	r3, [pc, #460]	; (800405c <HAL_RCC_OscConfig+0x270>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a72      	ldr	r2, [pc, #456]	; (800405c <HAL_RCC_OscConfig+0x270>)
 8003e94:	f043 0308 	orr.w	r3, r3, #8
 8003e98:	6013      	str	r3, [r2, #0]
 8003e9a:	4b70      	ldr	r3, [pc, #448]	; (800405c <HAL_RCC_OscConfig+0x270>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	496d      	ldr	r1, [pc, #436]	; (800405c <HAL_RCC_OscConfig+0x270>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003eac:	4b6b      	ldr	r3, [pc, #428]	; (800405c <HAL_RCC_OscConfig+0x270>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	69db      	ldr	r3, [r3, #28]
 8003eb8:	021b      	lsls	r3, r3, #8
 8003eba:	4968      	ldr	r1, [pc, #416]	; (800405c <HAL_RCC_OscConfig+0x270>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	604b      	str	r3, [r1, #4]
 8003ec0:	e025      	b.n	8003f0e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ec2:	4b66      	ldr	r3, [pc, #408]	; (800405c <HAL_RCC_OscConfig+0x270>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a65      	ldr	r2, [pc, #404]	; (800405c <HAL_RCC_OscConfig+0x270>)
 8003ec8:	f043 0308 	orr.w	r3, r3, #8
 8003ecc:	6013      	str	r3, [r2, #0]
 8003ece:	4b63      	ldr	r3, [pc, #396]	; (800405c <HAL_RCC_OscConfig+0x270>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	4960      	ldr	r1, [pc, #384]	; (800405c <HAL_RCC_OscConfig+0x270>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ee0:	4b5e      	ldr	r3, [pc, #376]	; (800405c <HAL_RCC_OscConfig+0x270>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	69db      	ldr	r3, [r3, #28]
 8003eec:	021b      	lsls	r3, r3, #8
 8003eee:	495b      	ldr	r1, [pc, #364]	; (800405c <HAL_RCC_OscConfig+0x270>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d109      	bne.n	8003f0e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 fd8c 	bl	8004a1c <RCC_SetFlashLatencyFromMSIRange>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e380      	b.n	8004610 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f0e:	f000 fcc1 	bl	8004894 <HAL_RCC_GetSysClockFreq>
 8003f12:	4602      	mov	r2, r0
 8003f14:	4b51      	ldr	r3, [pc, #324]	; (800405c <HAL_RCC_OscConfig+0x270>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	091b      	lsrs	r3, r3, #4
 8003f1a:	f003 030f 	and.w	r3, r3, #15
 8003f1e:	4950      	ldr	r1, [pc, #320]	; (8004060 <HAL_RCC_OscConfig+0x274>)
 8003f20:	5ccb      	ldrb	r3, [r1, r3]
 8003f22:	f003 031f 	and.w	r3, r3, #31
 8003f26:	fa22 f303 	lsr.w	r3, r2, r3
 8003f2a:	4a4e      	ldr	r2, [pc, #312]	; (8004064 <HAL_RCC_OscConfig+0x278>)
 8003f2c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f2e:	4b4e      	ldr	r3, [pc, #312]	; (8004068 <HAL_RCC_OscConfig+0x27c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7fe faf2 	bl	800251c <HAL_InitTick>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d052      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
 8003f44:	e364      	b.n	8004610 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d032      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f4e:	4b43      	ldr	r3, [pc, #268]	; (800405c <HAL_RCC_OscConfig+0x270>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a42      	ldr	r2, [pc, #264]	; (800405c <HAL_RCC_OscConfig+0x270>)
 8003f54:	f043 0301 	orr.w	r3, r3, #1
 8003f58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f5a:	f7fe fb2f 	bl	80025bc <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f60:	e008      	b.n	8003f74 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f62:	f7fe fb2b 	bl	80025bc <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e34d      	b.n	8004610 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f74:	4b39      	ldr	r3, [pc, #228]	; (800405c <HAL_RCC_OscConfig+0x270>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d0f0      	beq.n	8003f62 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f80:	4b36      	ldr	r3, [pc, #216]	; (800405c <HAL_RCC_OscConfig+0x270>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a35      	ldr	r2, [pc, #212]	; (800405c <HAL_RCC_OscConfig+0x270>)
 8003f86:	f043 0308 	orr.w	r3, r3, #8
 8003f8a:	6013      	str	r3, [r2, #0]
 8003f8c:	4b33      	ldr	r3, [pc, #204]	; (800405c <HAL_RCC_OscConfig+0x270>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	4930      	ldr	r1, [pc, #192]	; (800405c <HAL_RCC_OscConfig+0x270>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f9e:	4b2f      	ldr	r3, [pc, #188]	; (800405c <HAL_RCC_OscConfig+0x270>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	021b      	lsls	r3, r3, #8
 8003fac:	492b      	ldr	r1, [pc, #172]	; (800405c <HAL_RCC_OscConfig+0x270>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	604b      	str	r3, [r1, #4]
 8003fb2:	e01a      	b.n	8003fea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003fb4:	4b29      	ldr	r3, [pc, #164]	; (800405c <HAL_RCC_OscConfig+0x270>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a28      	ldr	r2, [pc, #160]	; (800405c <HAL_RCC_OscConfig+0x270>)
 8003fba:	f023 0301 	bic.w	r3, r3, #1
 8003fbe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fc0:	f7fe fafc 	bl	80025bc <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fc8:	f7fe faf8 	bl	80025bc <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e31a      	b.n	8004610 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fda:	4b20      	ldr	r3, [pc, #128]	; (800405c <HAL_RCC_OscConfig+0x270>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1f0      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x1dc>
 8003fe6:	e000      	b.n	8003fea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fe8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d073      	beq.n	80040de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	d005      	beq.n	8004008 <HAL_RCC_OscConfig+0x21c>
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	2b0c      	cmp	r3, #12
 8004000:	d10e      	bne.n	8004020 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	2b03      	cmp	r3, #3
 8004006:	d10b      	bne.n	8004020 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004008:	4b14      	ldr	r3, [pc, #80]	; (800405c <HAL_RCC_OscConfig+0x270>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d063      	beq.n	80040dc <HAL_RCC_OscConfig+0x2f0>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d15f      	bne.n	80040dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e2f7      	b.n	8004610 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004028:	d106      	bne.n	8004038 <HAL_RCC_OscConfig+0x24c>
 800402a:	4b0c      	ldr	r3, [pc, #48]	; (800405c <HAL_RCC_OscConfig+0x270>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a0b      	ldr	r2, [pc, #44]	; (800405c <HAL_RCC_OscConfig+0x270>)
 8004030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004034:	6013      	str	r3, [r2, #0]
 8004036:	e025      	b.n	8004084 <HAL_RCC_OscConfig+0x298>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004040:	d114      	bne.n	800406c <HAL_RCC_OscConfig+0x280>
 8004042:	4b06      	ldr	r3, [pc, #24]	; (800405c <HAL_RCC_OscConfig+0x270>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a05      	ldr	r2, [pc, #20]	; (800405c <HAL_RCC_OscConfig+0x270>)
 8004048:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800404c:	6013      	str	r3, [r2, #0]
 800404e:	4b03      	ldr	r3, [pc, #12]	; (800405c <HAL_RCC_OscConfig+0x270>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a02      	ldr	r2, [pc, #8]	; (800405c <HAL_RCC_OscConfig+0x270>)
 8004054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004058:	6013      	str	r3, [r2, #0]
 800405a:	e013      	b.n	8004084 <HAL_RCC_OscConfig+0x298>
 800405c:	40021000 	.word	0x40021000
 8004060:	0800afec 	.word	0x0800afec
 8004064:	20000000 	.word	0x20000000
 8004068:	20000004 	.word	0x20000004
 800406c:	4ba0      	ldr	r3, [pc, #640]	; (80042f0 <HAL_RCC_OscConfig+0x504>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a9f      	ldr	r2, [pc, #636]	; (80042f0 <HAL_RCC_OscConfig+0x504>)
 8004072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004076:	6013      	str	r3, [r2, #0]
 8004078:	4b9d      	ldr	r3, [pc, #628]	; (80042f0 <HAL_RCC_OscConfig+0x504>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a9c      	ldr	r2, [pc, #624]	; (80042f0 <HAL_RCC_OscConfig+0x504>)
 800407e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004082:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d013      	beq.n	80040b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408c:	f7fe fa96 	bl	80025bc <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004094:	f7fe fa92 	bl	80025bc <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b64      	cmp	r3, #100	; 0x64
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e2b4      	b.n	8004610 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040a6:	4b92      	ldr	r3, [pc, #584]	; (80042f0 <HAL_RCC_OscConfig+0x504>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0f0      	beq.n	8004094 <HAL_RCC_OscConfig+0x2a8>
 80040b2:	e014      	b.n	80040de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b4:	f7fe fa82 	bl	80025bc <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040bc:	f7fe fa7e 	bl	80025bc <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b64      	cmp	r3, #100	; 0x64
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e2a0      	b.n	8004610 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040ce:	4b88      	ldr	r3, [pc, #544]	; (80042f0 <HAL_RCC_OscConfig+0x504>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1f0      	bne.n	80040bc <HAL_RCC_OscConfig+0x2d0>
 80040da:	e000      	b.n	80040de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d060      	beq.n	80041ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	2b04      	cmp	r3, #4
 80040ee:	d005      	beq.n	80040fc <HAL_RCC_OscConfig+0x310>
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	2b0c      	cmp	r3, #12
 80040f4:	d119      	bne.n	800412a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d116      	bne.n	800412a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040fc:	4b7c      	ldr	r3, [pc, #496]	; (80042f0 <HAL_RCC_OscConfig+0x504>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004104:	2b00      	cmp	r3, #0
 8004106:	d005      	beq.n	8004114 <HAL_RCC_OscConfig+0x328>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e27d      	b.n	8004610 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004114:	4b76      	ldr	r3, [pc, #472]	; (80042f0 <HAL_RCC_OscConfig+0x504>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	061b      	lsls	r3, r3, #24
 8004122:	4973      	ldr	r1, [pc, #460]	; (80042f0 <HAL_RCC_OscConfig+0x504>)
 8004124:	4313      	orrs	r3, r2
 8004126:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004128:	e040      	b.n	80041ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d023      	beq.n	800417a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004132:	4b6f      	ldr	r3, [pc, #444]	; (80042f0 <HAL_RCC_OscConfig+0x504>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a6e      	ldr	r2, [pc, #440]	; (80042f0 <HAL_RCC_OscConfig+0x504>)
 8004138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800413c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413e:	f7fe fa3d 	bl	80025bc <HAL_GetTick>
 8004142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004144:	e008      	b.n	8004158 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004146:	f7fe fa39 	bl	80025bc <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e25b      	b.n	8004610 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004158:	4b65      	ldr	r3, [pc, #404]	; (80042f0 <HAL_RCC_OscConfig+0x504>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004160:	2b00      	cmp	r3, #0
 8004162:	d0f0      	beq.n	8004146 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004164:	4b62      	ldr	r3, [pc, #392]	; (80042f0 <HAL_RCC_OscConfig+0x504>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	061b      	lsls	r3, r3, #24
 8004172:	495f      	ldr	r1, [pc, #380]	; (80042f0 <HAL_RCC_OscConfig+0x504>)
 8004174:	4313      	orrs	r3, r2
 8004176:	604b      	str	r3, [r1, #4]
 8004178:	e018      	b.n	80041ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800417a:	4b5d      	ldr	r3, [pc, #372]	; (80042f0 <HAL_RCC_OscConfig+0x504>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a5c      	ldr	r2, [pc, #368]	; (80042f0 <HAL_RCC_OscConfig+0x504>)
 8004180:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004184:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004186:	f7fe fa19 	bl	80025bc <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800418c:	e008      	b.n	80041a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800418e:	f7fe fa15 	bl	80025bc <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e237      	b.n	8004610 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041a0:	4b53      	ldr	r3, [pc, #332]	; (80042f0 <HAL_RCC_OscConfig+0x504>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1f0      	bne.n	800418e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0308 	and.w	r3, r3, #8
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d03c      	beq.n	8004232 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d01c      	beq.n	80041fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041c0:	4b4b      	ldr	r3, [pc, #300]	; (80042f0 <HAL_RCC_OscConfig+0x504>)
 80041c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041c6:	4a4a      	ldr	r2, [pc, #296]	; (80042f0 <HAL_RCC_OscConfig+0x504>)
 80041c8:	f043 0301 	orr.w	r3, r3, #1
 80041cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d0:	f7fe f9f4 	bl	80025bc <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041d8:	f7fe f9f0 	bl	80025bc <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e212      	b.n	8004610 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041ea:	4b41      	ldr	r3, [pc, #260]	; (80042f0 <HAL_RCC_OscConfig+0x504>)
 80041ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0ef      	beq.n	80041d8 <HAL_RCC_OscConfig+0x3ec>
 80041f8:	e01b      	b.n	8004232 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041fa:	4b3d      	ldr	r3, [pc, #244]	; (80042f0 <HAL_RCC_OscConfig+0x504>)
 80041fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004200:	4a3b      	ldr	r2, [pc, #236]	; (80042f0 <HAL_RCC_OscConfig+0x504>)
 8004202:	f023 0301 	bic.w	r3, r3, #1
 8004206:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800420a:	f7fe f9d7 	bl	80025bc <HAL_GetTick>
 800420e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004210:	e008      	b.n	8004224 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004212:	f7fe f9d3 	bl	80025bc <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d901      	bls.n	8004224 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e1f5      	b.n	8004610 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004224:	4b32      	ldr	r3, [pc, #200]	; (80042f0 <HAL_RCC_OscConfig+0x504>)
 8004226:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1ef      	bne.n	8004212 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0304 	and.w	r3, r3, #4
 800423a:	2b00      	cmp	r3, #0
 800423c:	f000 80a6 	beq.w	800438c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004240:	2300      	movs	r3, #0
 8004242:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004244:	4b2a      	ldr	r3, [pc, #168]	; (80042f0 <HAL_RCC_OscConfig+0x504>)
 8004246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10d      	bne.n	800426c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004250:	4b27      	ldr	r3, [pc, #156]	; (80042f0 <HAL_RCC_OscConfig+0x504>)
 8004252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004254:	4a26      	ldr	r2, [pc, #152]	; (80042f0 <HAL_RCC_OscConfig+0x504>)
 8004256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800425a:	6593      	str	r3, [r2, #88]	; 0x58
 800425c:	4b24      	ldr	r3, [pc, #144]	; (80042f0 <HAL_RCC_OscConfig+0x504>)
 800425e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004264:	60bb      	str	r3, [r7, #8]
 8004266:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004268:	2301      	movs	r3, #1
 800426a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800426c:	4b21      	ldr	r3, [pc, #132]	; (80042f4 <HAL_RCC_OscConfig+0x508>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004274:	2b00      	cmp	r3, #0
 8004276:	d118      	bne.n	80042aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004278:	4b1e      	ldr	r3, [pc, #120]	; (80042f4 <HAL_RCC_OscConfig+0x508>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a1d      	ldr	r2, [pc, #116]	; (80042f4 <HAL_RCC_OscConfig+0x508>)
 800427e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004282:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004284:	f7fe f99a 	bl	80025bc <HAL_GetTick>
 8004288:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800428a:	e008      	b.n	800429e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800428c:	f7fe f996 	bl	80025bc <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b02      	cmp	r3, #2
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e1b8      	b.n	8004610 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800429e:	4b15      	ldr	r3, [pc, #84]	; (80042f4 <HAL_RCC_OscConfig+0x508>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0f0      	beq.n	800428c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d108      	bne.n	80042c4 <HAL_RCC_OscConfig+0x4d8>
 80042b2:	4b0f      	ldr	r3, [pc, #60]	; (80042f0 <HAL_RCC_OscConfig+0x504>)
 80042b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b8:	4a0d      	ldr	r2, [pc, #52]	; (80042f0 <HAL_RCC_OscConfig+0x504>)
 80042ba:	f043 0301 	orr.w	r3, r3, #1
 80042be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042c2:	e029      	b.n	8004318 <HAL_RCC_OscConfig+0x52c>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	2b05      	cmp	r3, #5
 80042ca:	d115      	bne.n	80042f8 <HAL_RCC_OscConfig+0x50c>
 80042cc:	4b08      	ldr	r3, [pc, #32]	; (80042f0 <HAL_RCC_OscConfig+0x504>)
 80042ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d2:	4a07      	ldr	r2, [pc, #28]	; (80042f0 <HAL_RCC_OscConfig+0x504>)
 80042d4:	f043 0304 	orr.w	r3, r3, #4
 80042d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042dc:	4b04      	ldr	r3, [pc, #16]	; (80042f0 <HAL_RCC_OscConfig+0x504>)
 80042de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e2:	4a03      	ldr	r2, [pc, #12]	; (80042f0 <HAL_RCC_OscConfig+0x504>)
 80042e4:	f043 0301 	orr.w	r3, r3, #1
 80042e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042ec:	e014      	b.n	8004318 <HAL_RCC_OscConfig+0x52c>
 80042ee:	bf00      	nop
 80042f0:	40021000 	.word	0x40021000
 80042f4:	40007000 	.word	0x40007000
 80042f8:	4b9d      	ldr	r3, [pc, #628]	; (8004570 <HAL_RCC_OscConfig+0x784>)
 80042fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fe:	4a9c      	ldr	r2, [pc, #624]	; (8004570 <HAL_RCC_OscConfig+0x784>)
 8004300:	f023 0301 	bic.w	r3, r3, #1
 8004304:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004308:	4b99      	ldr	r3, [pc, #612]	; (8004570 <HAL_RCC_OscConfig+0x784>)
 800430a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430e:	4a98      	ldr	r2, [pc, #608]	; (8004570 <HAL_RCC_OscConfig+0x784>)
 8004310:	f023 0304 	bic.w	r3, r3, #4
 8004314:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d016      	beq.n	800434e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004320:	f7fe f94c 	bl	80025bc <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004326:	e00a      	b.n	800433e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004328:	f7fe f948 	bl	80025bc <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	f241 3288 	movw	r2, #5000	; 0x1388
 8004336:	4293      	cmp	r3, r2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e168      	b.n	8004610 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800433e:	4b8c      	ldr	r3, [pc, #560]	; (8004570 <HAL_RCC_OscConfig+0x784>)
 8004340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d0ed      	beq.n	8004328 <HAL_RCC_OscConfig+0x53c>
 800434c:	e015      	b.n	800437a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800434e:	f7fe f935 	bl	80025bc <HAL_GetTick>
 8004352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004354:	e00a      	b.n	800436c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004356:	f7fe f931 	bl	80025bc <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	f241 3288 	movw	r2, #5000	; 0x1388
 8004364:	4293      	cmp	r3, r2
 8004366:	d901      	bls.n	800436c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e151      	b.n	8004610 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800436c:	4b80      	ldr	r3, [pc, #512]	; (8004570 <HAL_RCC_OscConfig+0x784>)
 800436e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1ed      	bne.n	8004356 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800437a:	7ffb      	ldrb	r3, [r7, #31]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d105      	bne.n	800438c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004380:	4b7b      	ldr	r3, [pc, #492]	; (8004570 <HAL_RCC_OscConfig+0x784>)
 8004382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004384:	4a7a      	ldr	r2, [pc, #488]	; (8004570 <HAL_RCC_OscConfig+0x784>)
 8004386:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800438a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0320 	and.w	r3, r3, #32
 8004394:	2b00      	cmp	r3, #0
 8004396:	d03c      	beq.n	8004412 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439c:	2b00      	cmp	r3, #0
 800439e:	d01c      	beq.n	80043da <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80043a0:	4b73      	ldr	r3, [pc, #460]	; (8004570 <HAL_RCC_OscConfig+0x784>)
 80043a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043a6:	4a72      	ldr	r2, [pc, #456]	; (8004570 <HAL_RCC_OscConfig+0x784>)
 80043a8:	f043 0301 	orr.w	r3, r3, #1
 80043ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b0:	f7fe f904 	bl	80025bc <HAL_GetTick>
 80043b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043b6:	e008      	b.n	80043ca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043b8:	f7fe f900 	bl	80025bc <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e122      	b.n	8004610 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043ca:	4b69      	ldr	r3, [pc, #420]	; (8004570 <HAL_RCC_OscConfig+0x784>)
 80043cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d0ef      	beq.n	80043b8 <HAL_RCC_OscConfig+0x5cc>
 80043d8:	e01b      	b.n	8004412 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80043da:	4b65      	ldr	r3, [pc, #404]	; (8004570 <HAL_RCC_OscConfig+0x784>)
 80043dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043e0:	4a63      	ldr	r2, [pc, #396]	; (8004570 <HAL_RCC_OscConfig+0x784>)
 80043e2:	f023 0301 	bic.w	r3, r3, #1
 80043e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ea:	f7fe f8e7 	bl	80025bc <HAL_GetTick>
 80043ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043f0:	e008      	b.n	8004404 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043f2:	f7fe f8e3 	bl	80025bc <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e105      	b.n	8004610 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004404:	4b5a      	ldr	r3, [pc, #360]	; (8004570 <HAL_RCC_OscConfig+0x784>)
 8004406:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1ef      	bne.n	80043f2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 80f9 	beq.w	800460e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004420:	2b02      	cmp	r3, #2
 8004422:	f040 80cf 	bne.w	80045c4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004426:	4b52      	ldr	r3, [pc, #328]	; (8004570 <HAL_RCC_OscConfig+0x784>)
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	f003 0203 	and.w	r2, r3, #3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004436:	429a      	cmp	r2, r3
 8004438:	d12c      	bne.n	8004494 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004444:	3b01      	subs	r3, #1
 8004446:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004448:	429a      	cmp	r2, r3
 800444a:	d123      	bne.n	8004494 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004456:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004458:	429a      	cmp	r2, r3
 800445a:	d11b      	bne.n	8004494 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004466:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004468:	429a      	cmp	r2, r3
 800446a:	d113      	bne.n	8004494 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004476:	085b      	lsrs	r3, r3, #1
 8004478:	3b01      	subs	r3, #1
 800447a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800447c:	429a      	cmp	r2, r3
 800447e:	d109      	bne.n	8004494 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	085b      	lsrs	r3, r3, #1
 800448c:	3b01      	subs	r3, #1
 800448e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004490:	429a      	cmp	r2, r3
 8004492:	d071      	beq.n	8004578 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	2b0c      	cmp	r3, #12
 8004498:	d068      	beq.n	800456c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800449a:	4b35      	ldr	r3, [pc, #212]	; (8004570 <HAL_RCC_OscConfig+0x784>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d105      	bne.n	80044b2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80044a6:	4b32      	ldr	r3, [pc, #200]	; (8004570 <HAL_RCC_OscConfig+0x784>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e0ac      	b.n	8004610 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80044b6:	4b2e      	ldr	r3, [pc, #184]	; (8004570 <HAL_RCC_OscConfig+0x784>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a2d      	ldr	r2, [pc, #180]	; (8004570 <HAL_RCC_OscConfig+0x784>)
 80044bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044c0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044c2:	f7fe f87b 	bl	80025bc <HAL_GetTick>
 80044c6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044c8:	e008      	b.n	80044dc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ca:	f7fe f877 	bl	80025bc <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d901      	bls.n	80044dc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e099      	b.n	8004610 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044dc:	4b24      	ldr	r3, [pc, #144]	; (8004570 <HAL_RCC_OscConfig+0x784>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1f0      	bne.n	80044ca <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044e8:	4b21      	ldr	r3, [pc, #132]	; (8004570 <HAL_RCC_OscConfig+0x784>)
 80044ea:	68da      	ldr	r2, [r3, #12]
 80044ec:	4b21      	ldr	r3, [pc, #132]	; (8004574 <HAL_RCC_OscConfig+0x788>)
 80044ee:	4013      	ands	r3, r2
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80044f8:	3a01      	subs	r2, #1
 80044fa:	0112      	lsls	r2, r2, #4
 80044fc:	4311      	orrs	r1, r2
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004502:	0212      	lsls	r2, r2, #8
 8004504:	4311      	orrs	r1, r2
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800450a:	0852      	lsrs	r2, r2, #1
 800450c:	3a01      	subs	r2, #1
 800450e:	0552      	lsls	r2, r2, #21
 8004510:	4311      	orrs	r1, r2
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004516:	0852      	lsrs	r2, r2, #1
 8004518:	3a01      	subs	r2, #1
 800451a:	0652      	lsls	r2, r2, #25
 800451c:	4311      	orrs	r1, r2
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004522:	06d2      	lsls	r2, r2, #27
 8004524:	430a      	orrs	r2, r1
 8004526:	4912      	ldr	r1, [pc, #72]	; (8004570 <HAL_RCC_OscConfig+0x784>)
 8004528:	4313      	orrs	r3, r2
 800452a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800452c:	4b10      	ldr	r3, [pc, #64]	; (8004570 <HAL_RCC_OscConfig+0x784>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a0f      	ldr	r2, [pc, #60]	; (8004570 <HAL_RCC_OscConfig+0x784>)
 8004532:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004536:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004538:	4b0d      	ldr	r3, [pc, #52]	; (8004570 <HAL_RCC_OscConfig+0x784>)
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	4a0c      	ldr	r2, [pc, #48]	; (8004570 <HAL_RCC_OscConfig+0x784>)
 800453e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004542:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004544:	f7fe f83a 	bl	80025bc <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800454c:	f7fe f836 	bl	80025bc <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b02      	cmp	r3, #2
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e058      	b.n	8004610 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800455e:	4b04      	ldr	r3, [pc, #16]	; (8004570 <HAL_RCC_OscConfig+0x784>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0f0      	beq.n	800454c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800456a:	e050      	b.n	800460e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e04f      	b.n	8004610 <HAL_RCC_OscConfig+0x824>
 8004570:	40021000 	.word	0x40021000
 8004574:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004578:	4b27      	ldr	r3, [pc, #156]	; (8004618 <HAL_RCC_OscConfig+0x82c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d144      	bne.n	800460e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004584:	4b24      	ldr	r3, [pc, #144]	; (8004618 <HAL_RCC_OscConfig+0x82c>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a23      	ldr	r2, [pc, #140]	; (8004618 <HAL_RCC_OscConfig+0x82c>)
 800458a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800458e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004590:	4b21      	ldr	r3, [pc, #132]	; (8004618 <HAL_RCC_OscConfig+0x82c>)
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	4a20      	ldr	r2, [pc, #128]	; (8004618 <HAL_RCC_OscConfig+0x82c>)
 8004596:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800459a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800459c:	f7fe f80e 	bl	80025bc <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045a4:	f7fe f80a 	bl	80025bc <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e02c      	b.n	8004610 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045b6:	4b18      	ldr	r3, [pc, #96]	; (8004618 <HAL_RCC_OscConfig+0x82c>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0f0      	beq.n	80045a4 <HAL_RCC_OscConfig+0x7b8>
 80045c2:	e024      	b.n	800460e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	2b0c      	cmp	r3, #12
 80045c8:	d01f      	beq.n	800460a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ca:	4b13      	ldr	r3, [pc, #76]	; (8004618 <HAL_RCC_OscConfig+0x82c>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a12      	ldr	r2, [pc, #72]	; (8004618 <HAL_RCC_OscConfig+0x82c>)
 80045d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d6:	f7fd fff1 	bl	80025bc <HAL_GetTick>
 80045da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045dc:	e008      	b.n	80045f0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045de:	f7fd ffed 	bl	80025bc <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d901      	bls.n	80045f0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e00f      	b.n	8004610 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045f0:	4b09      	ldr	r3, [pc, #36]	; (8004618 <HAL_RCC_OscConfig+0x82c>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1f0      	bne.n	80045de <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80045fc:	4b06      	ldr	r3, [pc, #24]	; (8004618 <HAL_RCC_OscConfig+0x82c>)
 80045fe:	68da      	ldr	r2, [r3, #12]
 8004600:	4905      	ldr	r1, [pc, #20]	; (8004618 <HAL_RCC_OscConfig+0x82c>)
 8004602:	4b06      	ldr	r3, [pc, #24]	; (800461c <HAL_RCC_OscConfig+0x830>)
 8004604:	4013      	ands	r3, r2
 8004606:	60cb      	str	r3, [r1, #12]
 8004608:	e001      	b.n	800460e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e000      	b.n	8004610 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3720      	adds	r7, #32
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	40021000 	.word	0x40021000
 800461c:	feeefffc 	.word	0xfeeefffc

08004620 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800462a:	2300      	movs	r3, #0
 800462c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d101      	bne.n	8004638 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e11d      	b.n	8004874 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004638:	4b90      	ldr	r3, [pc, #576]	; (800487c <HAL_RCC_ClockConfig+0x25c>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 030f 	and.w	r3, r3, #15
 8004640:	683a      	ldr	r2, [r7, #0]
 8004642:	429a      	cmp	r2, r3
 8004644:	d910      	bls.n	8004668 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004646:	4b8d      	ldr	r3, [pc, #564]	; (800487c <HAL_RCC_ClockConfig+0x25c>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f023 020f 	bic.w	r2, r3, #15
 800464e:	498b      	ldr	r1, [pc, #556]	; (800487c <HAL_RCC_ClockConfig+0x25c>)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	4313      	orrs	r3, r2
 8004654:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004656:	4b89      	ldr	r3, [pc, #548]	; (800487c <HAL_RCC_ClockConfig+0x25c>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 030f 	and.w	r3, r3, #15
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	429a      	cmp	r2, r3
 8004662:	d001      	beq.n	8004668 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e105      	b.n	8004874 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d010      	beq.n	8004696 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689a      	ldr	r2, [r3, #8]
 8004678:	4b81      	ldr	r3, [pc, #516]	; (8004880 <HAL_RCC_ClockConfig+0x260>)
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004680:	429a      	cmp	r2, r3
 8004682:	d908      	bls.n	8004696 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004684:	4b7e      	ldr	r3, [pc, #504]	; (8004880 <HAL_RCC_ClockConfig+0x260>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	497b      	ldr	r1, [pc, #492]	; (8004880 <HAL_RCC_ClockConfig+0x260>)
 8004692:	4313      	orrs	r3, r2
 8004694:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d079      	beq.n	8004796 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	2b03      	cmp	r3, #3
 80046a8:	d11e      	bne.n	80046e8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046aa:	4b75      	ldr	r3, [pc, #468]	; (8004880 <HAL_RCC_ClockConfig+0x260>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e0dc      	b.n	8004874 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80046ba:	f000 fa09 	bl	8004ad0 <RCC_GetSysClockFreqFromPLLSource>
 80046be:	4603      	mov	r3, r0
 80046c0:	4a70      	ldr	r2, [pc, #448]	; (8004884 <HAL_RCC_ClockConfig+0x264>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d946      	bls.n	8004754 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80046c6:	4b6e      	ldr	r3, [pc, #440]	; (8004880 <HAL_RCC_ClockConfig+0x260>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d140      	bne.n	8004754 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80046d2:	4b6b      	ldr	r3, [pc, #428]	; (8004880 <HAL_RCC_ClockConfig+0x260>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046da:	4a69      	ldr	r2, [pc, #420]	; (8004880 <HAL_RCC_ClockConfig+0x260>)
 80046dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80046e2:	2380      	movs	r3, #128	; 0x80
 80046e4:	617b      	str	r3, [r7, #20]
 80046e6:	e035      	b.n	8004754 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d107      	bne.n	8004700 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046f0:	4b63      	ldr	r3, [pc, #396]	; (8004880 <HAL_RCC_ClockConfig+0x260>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d115      	bne.n	8004728 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e0b9      	b.n	8004874 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d107      	bne.n	8004718 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004708:	4b5d      	ldr	r3, [pc, #372]	; (8004880 <HAL_RCC_ClockConfig+0x260>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	2b00      	cmp	r3, #0
 8004712:	d109      	bne.n	8004728 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e0ad      	b.n	8004874 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004718:	4b59      	ldr	r3, [pc, #356]	; (8004880 <HAL_RCC_ClockConfig+0x260>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e0a5      	b.n	8004874 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004728:	f000 f8b4 	bl	8004894 <HAL_RCC_GetSysClockFreq>
 800472c:	4603      	mov	r3, r0
 800472e:	4a55      	ldr	r2, [pc, #340]	; (8004884 <HAL_RCC_ClockConfig+0x264>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d90f      	bls.n	8004754 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004734:	4b52      	ldr	r3, [pc, #328]	; (8004880 <HAL_RCC_ClockConfig+0x260>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d109      	bne.n	8004754 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004740:	4b4f      	ldr	r3, [pc, #316]	; (8004880 <HAL_RCC_ClockConfig+0x260>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004748:	4a4d      	ldr	r2, [pc, #308]	; (8004880 <HAL_RCC_ClockConfig+0x260>)
 800474a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800474e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004750:	2380      	movs	r3, #128	; 0x80
 8004752:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004754:	4b4a      	ldr	r3, [pc, #296]	; (8004880 <HAL_RCC_ClockConfig+0x260>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f023 0203 	bic.w	r2, r3, #3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	4947      	ldr	r1, [pc, #284]	; (8004880 <HAL_RCC_ClockConfig+0x260>)
 8004762:	4313      	orrs	r3, r2
 8004764:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004766:	f7fd ff29 	bl	80025bc <HAL_GetTick>
 800476a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800476c:	e00a      	b.n	8004784 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800476e:	f7fd ff25 	bl	80025bc <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	f241 3288 	movw	r2, #5000	; 0x1388
 800477c:	4293      	cmp	r3, r2
 800477e:	d901      	bls.n	8004784 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e077      	b.n	8004874 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004784:	4b3e      	ldr	r3, [pc, #248]	; (8004880 <HAL_RCC_ClockConfig+0x260>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f003 020c 	and.w	r2, r3, #12
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	429a      	cmp	r2, r3
 8004794:	d1eb      	bne.n	800476e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	2b80      	cmp	r3, #128	; 0x80
 800479a:	d105      	bne.n	80047a8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800479c:	4b38      	ldr	r3, [pc, #224]	; (8004880 <HAL_RCC_ClockConfig+0x260>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	4a37      	ldr	r2, [pc, #220]	; (8004880 <HAL_RCC_ClockConfig+0x260>)
 80047a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047a6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d010      	beq.n	80047d6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689a      	ldr	r2, [r3, #8]
 80047b8:	4b31      	ldr	r3, [pc, #196]	; (8004880 <HAL_RCC_ClockConfig+0x260>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d208      	bcs.n	80047d6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047c4:	4b2e      	ldr	r3, [pc, #184]	; (8004880 <HAL_RCC_ClockConfig+0x260>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	492b      	ldr	r1, [pc, #172]	; (8004880 <HAL_RCC_ClockConfig+0x260>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047d6:	4b29      	ldr	r3, [pc, #164]	; (800487c <HAL_RCC_ClockConfig+0x25c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 030f 	and.w	r3, r3, #15
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d210      	bcs.n	8004806 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047e4:	4b25      	ldr	r3, [pc, #148]	; (800487c <HAL_RCC_ClockConfig+0x25c>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f023 020f 	bic.w	r2, r3, #15
 80047ec:	4923      	ldr	r1, [pc, #140]	; (800487c <HAL_RCC_ClockConfig+0x25c>)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047f4:	4b21      	ldr	r3, [pc, #132]	; (800487c <HAL_RCC_ClockConfig+0x25c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 030f 	and.w	r3, r3, #15
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d001      	beq.n	8004806 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e036      	b.n	8004874 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0304 	and.w	r3, r3, #4
 800480e:	2b00      	cmp	r3, #0
 8004810:	d008      	beq.n	8004824 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004812:	4b1b      	ldr	r3, [pc, #108]	; (8004880 <HAL_RCC_ClockConfig+0x260>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	4918      	ldr	r1, [pc, #96]	; (8004880 <HAL_RCC_ClockConfig+0x260>)
 8004820:	4313      	orrs	r3, r2
 8004822:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0308 	and.w	r3, r3, #8
 800482c:	2b00      	cmp	r3, #0
 800482e:	d009      	beq.n	8004844 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004830:	4b13      	ldr	r3, [pc, #76]	; (8004880 <HAL_RCC_ClockConfig+0x260>)
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	00db      	lsls	r3, r3, #3
 800483e:	4910      	ldr	r1, [pc, #64]	; (8004880 <HAL_RCC_ClockConfig+0x260>)
 8004840:	4313      	orrs	r3, r2
 8004842:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004844:	f000 f826 	bl	8004894 <HAL_RCC_GetSysClockFreq>
 8004848:	4602      	mov	r2, r0
 800484a:	4b0d      	ldr	r3, [pc, #52]	; (8004880 <HAL_RCC_ClockConfig+0x260>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	091b      	lsrs	r3, r3, #4
 8004850:	f003 030f 	and.w	r3, r3, #15
 8004854:	490c      	ldr	r1, [pc, #48]	; (8004888 <HAL_RCC_ClockConfig+0x268>)
 8004856:	5ccb      	ldrb	r3, [r1, r3]
 8004858:	f003 031f 	and.w	r3, r3, #31
 800485c:	fa22 f303 	lsr.w	r3, r2, r3
 8004860:	4a0a      	ldr	r2, [pc, #40]	; (800488c <HAL_RCC_ClockConfig+0x26c>)
 8004862:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004864:	4b0a      	ldr	r3, [pc, #40]	; (8004890 <HAL_RCC_ClockConfig+0x270>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4618      	mov	r0, r3
 800486a:	f7fd fe57 	bl	800251c <HAL_InitTick>
 800486e:	4603      	mov	r3, r0
 8004870:	73fb      	strb	r3, [r7, #15]

  return status;
 8004872:	7bfb      	ldrb	r3, [r7, #15]
}
 8004874:	4618      	mov	r0, r3
 8004876:	3718      	adds	r7, #24
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	40022000 	.word	0x40022000
 8004880:	40021000 	.word	0x40021000
 8004884:	04c4b400 	.word	0x04c4b400
 8004888:	0800afec 	.word	0x0800afec
 800488c:	20000000 	.word	0x20000000
 8004890:	20000004 	.word	0x20000004

08004894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004894:	b480      	push	{r7}
 8004896:	b089      	sub	sp, #36	; 0x24
 8004898:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800489a:	2300      	movs	r3, #0
 800489c:	61fb      	str	r3, [r7, #28]
 800489e:	2300      	movs	r3, #0
 80048a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048a2:	4b3e      	ldr	r3, [pc, #248]	; (800499c <HAL_RCC_GetSysClockFreq+0x108>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f003 030c 	and.w	r3, r3, #12
 80048aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048ac:	4b3b      	ldr	r3, [pc, #236]	; (800499c <HAL_RCC_GetSysClockFreq+0x108>)
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f003 0303 	and.w	r3, r3, #3
 80048b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d005      	beq.n	80048c8 <HAL_RCC_GetSysClockFreq+0x34>
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	2b0c      	cmp	r3, #12
 80048c0:	d121      	bne.n	8004906 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d11e      	bne.n	8004906 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80048c8:	4b34      	ldr	r3, [pc, #208]	; (800499c <HAL_RCC_GetSysClockFreq+0x108>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0308 	and.w	r3, r3, #8
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d107      	bne.n	80048e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80048d4:	4b31      	ldr	r3, [pc, #196]	; (800499c <HAL_RCC_GetSysClockFreq+0x108>)
 80048d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048da:	0a1b      	lsrs	r3, r3, #8
 80048dc:	f003 030f 	and.w	r3, r3, #15
 80048e0:	61fb      	str	r3, [r7, #28]
 80048e2:	e005      	b.n	80048f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80048e4:	4b2d      	ldr	r3, [pc, #180]	; (800499c <HAL_RCC_GetSysClockFreq+0x108>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	091b      	lsrs	r3, r3, #4
 80048ea:	f003 030f 	and.w	r3, r3, #15
 80048ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80048f0:	4a2b      	ldr	r2, [pc, #172]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10d      	bne.n	800491c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004904:	e00a      	b.n	800491c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	2b04      	cmp	r3, #4
 800490a:	d102      	bne.n	8004912 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800490c:	4b25      	ldr	r3, [pc, #148]	; (80049a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800490e:	61bb      	str	r3, [r7, #24]
 8004910:	e004      	b.n	800491c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	2b08      	cmp	r3, #8
 8004916:	d101      	bne.n	800491c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004918:	4b23      	ldr	r3, [pc, #140]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800491a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	2b0c      	cmp	r3, #12
 8004920:	d134      	bne.n	800498c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004922:	4b1e      	ldr	r3, [pc, #120]	; (800499c <HAL_RCC_GetSysClockFreq+0x108>)
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	f003 0303 	and.w	r3, r3, #3
 800492a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	2b02      	cmp	r3, #2
 8004930:	d003      	beq.n	800493a <HAL_RCC_GetSysClockFreq+0xa6>
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	2b03      	cmp	r3, #3
 8004936:	d003      	beq.n	8004940 <HAL_RCC_GetSysClockFreq+0xac>
 8004938:	e005      	b.n	8004946 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800493a:	4b1a      	ldr	r3, [pc, #104]	; (80049a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800493c:	617b      	str	r3, [r7, #20]
      break;
 800493e:	e005      	b.n	800494c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004940:	4b19      	ldr	r3, [pc, #100]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004942:	617b      	str	r3, [r7, #20]
      break;
 8004944:	e002      	b.n	800494c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	617b      	str	r3, [r7, #20]
      break;
 800494a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800494c:	4b13      	ldr	r3, [pc, #76]	; (800499c <HAL_RCC_GetSysClockFreq+0x108>)
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	091b      	lsrs	r3, r3, #4
 8004952:	f003 030f 	and.w	r3, r3, #15
 8004956:	3301      	adds	r3, #1
 8004958:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800495a:	4b10      	ldr	r3, [pc, #64]	; (800499c <HAL_RCC_GetSysClockFreq+0x108>)
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	0a1b      	lsrs	r3, r3, #8
 8004960:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	fb03 f202 	mul.w	r2, r3, r2
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004970:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004972:	4b0a      	ldr	r3, [pc, #40]	; (800499c <HAL_RCC_GetSysClockFreq+0x108>)
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	0e5b      	lsrs	r3, r3, #25
 8004978:	f003 0303 	and.w	r3, r3, #3
 800497c:	3301      	adds	r3, #1
 800497e:	005b      	lsls	r3, r3, #1
 8004980:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	fbb2 f3f3 	udiv	r3, r2, r3
 800498a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800498c:	69bb      	ldr	r3, [r7, #24]
}
 800498e:	4618      	mov	r0, r3
 8004990:	3724      	adds	r7, #36	; 0x24
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	40021000 	.word	0x40021000
 80049a0:	0800b004 	.word	0x0800b004
 80049a4:	00f42400 	.word	0x00f42400
 80049a8:	007a1200 	.word	0x007a1200

080049ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049b0:	4b03      	ldr	r3, [pc, #12]	; (80049c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80049b2:	681b      	ldr	r3, [r3, #0]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	20000000 	.word	0x20000000

080049c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80049c8:	f7ff fff0 	bl	80049ac <HAL_RCC_GetHCLKFreq>
 80049cc:	4602      	mov	r2, r0
 80049ce:	4b06      	ldr	r3, [pc, #24]	; (80049e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	0a1b      	lsrs	r3, r3, #8
 80049d4:	f003 0307 	and.w	r3, r3, #7
 80049d8:	4904      	ldr	r1, [pc, #16]	; (80049ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80049da:	5ccb      	ldrb	r3, [r1, r3]
 80049dc:	f003 031f 	and.w	r3, r3, #31
 80049e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	40021000 	.word	0x40021000
 80049ec:	0800affc 	.word	0x0800affc

080049f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80049f4:	f7ff ffda 	bl	80049ac <HAL_RCC_GetHCLKFreq>
 80049f8:	4602      	mov	r2, r0
 80049fa:	4b06      	ldr	r3, [pc, #24]	; (8004a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	0adb      	lsrs	r3, r3, #11
 8004a00:	f003 0307 	and.w	r3, r3, #7
 8004a04:	4904      	ldr	r1, [pc, #16]	; (8004a18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a06:	5ccb      	ldrb	r3, [r1, r3]
 8004a08:	f003 031f 	and.w	r3, r3, #31
 8004a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	40021000 	.word	0x40021000
 8004a18:	0800affc 	.word	0x0800affc

08004a1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004a24:	2300      	movs	r3, #0
 8004a26:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004a28:	4b27      	ldr	r3, [pc, #156]	; (8004ac8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d003      	beq.n	8004a3c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004a34:	f7ff f906 	bl	8003c44 <HAL_PWREx_GetVoltageRange>
 8004a38:	6178      	str	r0, [r7, #20]
 8004a3a:	e014      	b.n	8004a66 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a3c:	4b22      	ldr	r3, [pc, #136]	; (8004ac8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a40:	4a21      	ldr	r2, [pc, #132]	; (8004ac8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a46:	6593      	str	r3, [r2, #88]	; 0x58
 8004a48:	4b1f      	ldr	r3, [pc, #124]	; (8004ac8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a50:	60fb      	str	r3, [r7, #12]
 8004a52:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004a54:	f7ff f8f6 	bl	8003c44 <HAL_PWREx_GetVoltageRange>
 8004a58:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004a5a:	4b1b      	ldr	r3, [pc, #108]	; (8004ac8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a5e:	4a1a      	ldr	r2, [pc, #104]	; (8004ac8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a64:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a6c:	d10b      	bne.n	8004a86 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b80      	cmp	r3, #128	; 0x80
 8004a72:	d913      	bls.n	8004a9c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2ba0      	cmp	r3, #160	; 0xa0
 8004a78:	d902      	bls.n	8004a80 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	613b      	str	r3, [r7, #16]
 8004a7e:	e00d      	b.n	8004a9c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a80:	2301      	movs	r3, #1
 8004a82:	613b      	str	r3, [r7, #16]
 8004a84:	e00a      	b.n	8004a9c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b7f      	cmp	r3, #127	; 0x7f
 8004a8a:	d902      	bls.n	8004a92 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	613b      	str	r3, [r7, #16]
 8004a90:	e004      	b.n	8004a9c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b70      	cmp	r3, #112	; 0x70
 8004a96:	d101      	bne.n	8004a9c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a98:	2301      	movs	r3, #1
 8004a9a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004a9c:	4b0b      	ldr	r3, [pc, #44]	; (8004acc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f023 020f 	bic.w	r2, r3, #15
 8004aa4:	4909      	ldr	r1, [pc, #36]	; (8004acc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004aac:	4b07      	ldr	r3, [pc, #28]	; (8004acc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 030f 	and.w	r3, r3, #15
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d001      	beq.n	8004abe <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e000      	b.n	8004ac0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3718      	adds	r7, #24
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	40021000 	.word	0x40021000
 8004acc:	40022000 	.word	0x40022000

08004ad0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ad6:	4b2d      	ldr	r3, [pc, #180]	; (8004b8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	f003 0303 	and.w	r3, r3, #3
 8004ade:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2b03      	cmp	r3, #3
 8004ae4:	d00b      	beq.n	8004afe <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2b03      	cmp	r3, #3
 8004aea:	d825      	bhi.n	8004b38 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d008      	beq.n	8004b04 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d11f      	bne.n	8004b38 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004af8:	4b25      	ldr	r3, [pc, #148]	; (8004b90 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004afa:	613b      	str	r3, [r7, #16]
    break;
 8004afc:	e01f      	b.n	8004b3e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004afe:	4b25      	ldr	r3, [pc, #148]	; (8004b94 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004b00:	613b      	str	r3, [r7, #16]
    break;
 8004b02:	e01c      	b.n	8004b3e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b04:	4b21      	ldr	r3, [pc, #132]	; (8004b8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0308 	and.w	r3, r3, #8
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d107      	bne.n	8004b20 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b10:	4b1e      	ldr	r3, [pc, #120]	; (8004b8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b16:	0a1b      	lsrs	r3, r3, #8
 8004b18:	f003 030f 	and.w	r3, r3, #15
 8004b1c:	617b      	str	r3, [r7, #20]
 8004b1e:	e005      	b.n	8004b2c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b20:	4b1a      	ldr	r3, [pc, #104]	; (8004b8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	091b      	lsrs	r3, r3, #4
 8004b26:	f003 030f 	and.w	r3, r3, #15
 8004b2a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004b2c:	4a1a      	ldr	r2, [pc, #104]	; (8004b98 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b34:	613b      	str	r3, [r7, #16]
    break;
 8004b36:	e002      	b.n	8004b3e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	613b      	str	r3, [r7, #16]
    break;
 8004b3c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b3e:	4b13      	ldr	r3, [pc, #76]	; (8004b8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	091b      	lsrs	r3, r3, #4
 8004b44:	f003 030f 	and.w	r3, r3, #15
 8004b48:	3301      	adds	r3, #1
 8004b4a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004b4c:	4b0f      	ldr	r3, [pc, #60]	; (8004b8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	0a1b      	lsrs	r3, r3, #8
 8004b52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	fb03 f202 	mul.w	r2, r3, r2
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b62:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b64:	4b09      	ldr	r3, [pc, #36]	; (8004b8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	0e5b      	lsrs	r3, r3, #25
 8004b6a:	f003 0303 	and.w	r3, r3, #3
 8004b6e:	3301      	adds	r3, #1
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004b7e:	683b      	ldr	r3, [r7, #0]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	371c      	adds	r7, #28
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	40021000 	.word	0x40021000
 8004b90:	00f42400 	.word	0x00f42400
 8004b94:	007a1200 	.word	0x007a1200
 8004b98:	0800b004 	.word	0x0800b004

08004b9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ba8:	2300      	movs	r3, #0
 8004baa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d040      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bbc:	2b80      	cmp	r3, #128	; 0x80
 8004bbe:	d02a      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004bc0:	2b80      	cmp	r3, #128	; 0x80
 8004bc2:	d825      	bhi.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004bc4:	2b60      	cmp	r3, #96	; 0x60
 8004bc6:	d026      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004bc8:	2b60      	cmp	r3, #96	; 0x60
 8004bca:	d821      	bhi.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004bcc:	2b40      	cmp	r3, #64	; 0x40
 8004bce:	d006      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004bd0:	2b40      	cmp	r3, #64	; 0x40
 8004bd2:	d81d      	bhi.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d009      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004bd8:	2b20      	cmp	r3, #32
 8004bda:	d010      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004bdc:	e018      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004bde:	4b89      	ldr	r3, [pc, #548]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	4a88      	ldr	r2, [pc, #544]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004be8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004bea:	e015      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	3304      	adds	r3, #4
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 fb02 	bl	80051fc <RCCEx_PLLSAI1_Config>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004bfc:	e00c      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	3320      	adds	r3, #32
 8004c02:	2100      	movs	r1, #0
 8004c04:	4618      	mov	r0, r3
 8004c06:	f000 fbed 	bl	80053e4 <RCCEx_PLLSAI2_Config>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c0e:	e003      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	74fb      	strb	r3, [r7, #19]
      break;
 8004c14:	e000      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004c16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c18:	7cfb      	ldrb	r3, [r7, #19]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10b      	bne.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c1e:	4b79      	ldr	r3, [pc, #484]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c24:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c2c:	4975      	ldr	r1, [pc, #468]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004c34:	e001      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c36:	7cfb      	ldrb	r3, [r7, #19]
 8004c38:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d047      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c4e:	d030      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c54:	d82a      	bhi.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004c56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c5a:	d02a      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004c5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c60:	d824      	bhi.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004c62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c66:	d008      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c6c:	d81e      	bhi.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00a      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004c72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c76:	d010      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004c78:	e018      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c7a:	4b62      	ldr	r3, [pc, #392]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	4a61      	ldr	r2, [pc, #388]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c84:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c86:	e015      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	3304      	adds	r3, #4
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 fab4 	bl	80051fc <RCCEx_PLLSAI1_Config>
 8004c94:	4603      	mov	r3, r0
 8004c96:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c98:	e00c      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	3320      	adds	r3, #32
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f000 fb9f 	bl	80053e4 <RCCEx_PLLSAI2_Config>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004caa:	e003      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	74fb      	strb	r3, [r7, #19]
      break;
 8004cb0:	e000      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004cb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cb4:	7cfb      	ldrb	r3, [r7, #19]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10b      	bne.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004cba:	4b52      	ldr	r3, [pc, #328]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc8:	494e      	ldr	r1, [pc, #312]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004cd0:	e001      	b.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd2:	7cfb      	ldrb	r3, [r7, #19]
 8004cd4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f000 809f 	beq.w	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ce8:	4b46      	ldr	r3, [pc, #280]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d101      	bne.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e000      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00d      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cfe:	4b41      	ldr	r3, [pc, #260]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d02:	4a40      	ldr	r2, [pc, #256]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d08:	6593      	str	r3, [r2, #88]	; 0x58
 8004d0a:	4b3e      	ldr	r3, [pc, #248]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d12:	60bb      	str	r3, [r7, #8]
 8004d14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d16:	2301      	movs	r3, #1
 8004d18:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d1a:	4b3b      	ldr	r3, [pc, #236]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a3a      	ldr	r2, [pc, #232]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d26:	f7fd fc49 	bl	80025bc <HAL_GetTick>
 8004d2a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d2c:	e009      	b.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d2e:	f7fd fc45 	bl	80025bc <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d902      	bls.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	74fb      	strb	r3, [r7, #19]
        break;
 8004d40:	e005      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d42:	4b31      	ldr	r3, [pc, #196]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d0ef      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004d4e:	7cfb      	ldrb	r3, [r7, #19]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d15b      	bne.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d54:	4b2b      	ldr	r3, [pc, #172]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d5e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d01f      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d019      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d72:	4b24      	ldr	r3, [pc, #144]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d7c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d7e:	4b21      	ldr	r3, [pc, #132]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d84:	4a1f      	ldr	r2, [pc, #124]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d8e:	4b1d      	ldr	r3, [pc, #116]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d94:	4a1b      	ldr	r2, [pc, #108]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d9e:	4a19      	ldr	r2, [pc, #100]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d016      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db0:	f7fd fc04 	bl	80025bc <HAL_GetTick>
 8004db4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004db6:	e00b      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004db8:	f7fd fc00 	bl	80025bc <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d902      	bls.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	74fb      	strb	r3, [r7, #19]
            break;
 8004dce:	e006      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dd0:	4b0c      	ldr	r3, [pc, #48]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd6:	f003 0302 	and.w	r3, r3, #2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d0ec      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004dde:	7cfb      	ldrb	r3, [r7, #19]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10c      	bne.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004de4:	4b07      	ldr	r3, [pc, #28]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df4:	4903      	ldr	r1, [pc, #12]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004dfc:	e008      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004dfe:	7cfb      	ldrb	r3, [r7, #19]
 8004e00:	74bb      	strb	r3, [r7, #18]
 8004e02:	e005      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004e04:	40021000 	.word	0x40021000
 8004e08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e0c:	7cfb      	ldrb	r3, [r7, #19]
 8004e0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e10:	7c7b      	ldrb	r3, [r7, #17]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d105      	bne.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e16:	4ba0      	ldr	r3, [pc, #640]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e1a:	4a9f      	ldr	r2, [pc, #636]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e20:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00a      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e2e:	4b9a      	ldr	r3, [pc, #616]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e34:	f023 0203 	bic.w	r2, r3, #3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e3c:	4996      	ldr	r1, [pc, #600]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00a      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e50:	4b91      	ldr	r3, [pc, #580]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e56:	f023 020c 	bic.w	r2, r3, #12
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5e:	498e      	ldr	r1, [pc, #568]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0304 	and.w	r3, r3, #4
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00a      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e72:	4b89      	ldr	r3, [pc, #548]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e78:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e80:	4985      	ldr	r1, [pc, #532]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0308 	and.w	r3, r3, #8
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00a      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e94:	4b80      	ldr	r3, [pc, #512]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ea2:	497d      	ldr	r1, [pc, #500]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0310 	and.w	r3, r3, #16
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00a      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004eb6:	4b78      	ldr	r3, [pc, #480]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ebc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ec4:	4974      	ldr	r1, [pc, #464]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0320 	and.w	r3, r3, #32
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00a      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ed8:	4b6f      	ldr	r3, [pc, #444]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ede:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ee6:	496c      	ldr	r1, [pc, #432]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004efa:	4b67      	ldr	r3, [pc, #412]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f08:	4963      	ldr	r1, [pc, #396]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00a      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f1c:	4b5e      	ldr	r3, [pc, #376]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f2a:	495b      	ldr	r1, [pc, #364]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f3e:	4b56      	ldr	r3, [pc, #344]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f44:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f4c:	4952      	ldr	r1, [pc, #328]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00a      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f60:	4b4d      	ldr	r3, [pc, #308]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f66:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f6e:	494a      	ldr	r1, [pc, #296]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00a      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f82:	4b45      	ldr	r3, [pc, #276]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f90:	4941      	ldr	r1, [pc, #260]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00a      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004fa4:	4b3c      	ldr	r3, [pc, #240]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004faa:	f023 0203 	bic.w	r2, r3, #3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fb2:	4939      	ldr	r1, [pc, #228]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d028      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fc6:	4b34      	ldr	r3, [pc, #208]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fcc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fd4:	4930      	ldr	r1, [pc, #192]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fe0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fe4:	d106      	bne.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fe6:	4b2c      	ldr	r3, [pc, #176]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	4a2b      	ldr	r2, [pc, #172]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ff0:	60d3      	str	r3, [r2, #12]
 8004ff2:	e011      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ff8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ffc:	d10c      	bne.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	3304      	adds	r3, #4
 8005002:	2101      	movs	r1, #1
 8005004:	4618      	mov	r0, r3
 8005006:	f000 f8f9 	bl	80051fc <RCCEx_PLLSAI1_Config>
 800500a:	4603      	mov	r3, r0
 800500c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800500e:	7cfb      	ldrb	r3, [r7, #19]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d001      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005014:	7cfb      	ldrb	r3, [r7, #19]
 8005016:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d04d      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005028:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800502c:	d108      	bne.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800502e:	4b1a      	ldr	r3, [pc, #104]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005030:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005034:	4a18      	ldr	r2, [pc, #96]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005036:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800503a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800503e:	e012      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005040:	4b15      	ldr	r3, [pc, #84]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005042:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005046:	4a14      	ldr	r2, [pc, #80]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005048:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800504c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005050:	4b11      	ldr	r3, [pc, #68]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005056:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800505e:	490e      	ldr	r1, [pc, #56]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005060:	4313      	orrs	r3, r2
 8005062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800506a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800506e:	d106      	bne.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005070:	4b09      	ldr	r3, [pc, #36]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	4a08      	ldr	r2, [pc, #32]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005076:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800507a:	60d3      	str	r3, [r2, #12]
 800507c:	e020      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005082:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005086:	d109      	bne.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005088:	4b03      	ldr	r3, [pc, #12]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	4a02      	ldr	r2, [pc, #8]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800508e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005092:	60d3      	str	r3, [r2, #12]
 8005094:	e014      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005096:	bf00      	nop
 8005098:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050a4:	d10c      	bne.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	3304      	adds	r3, #4
 80050aa:	2101      	movs	r1, #1
 80050ac:	4618      	mov	r0, r3
 80050ae:	f000 f8a5 	bl	80051fc <RCCEx_PLLSAI1_Config>
 80050b2:	4603      	mov	r3, r0
 80050b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050b6:	7cfb      	ldrb	r3, [r7, #19]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d001      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80050bc:	7cfb      	ldrb	r3, [r7, #19]
 80050be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d028      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80050cc:	4b4a      	ldr	r3, [pc, #296]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050da:	4947      	ldr	r1, [pc, #284]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050ea:	d106      	bne.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050ec:	4b42      	ldr	r3, [pc, #264]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	4a41      	ldr	r2, [pc, #260]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050f6:	60d3      	str	r3, [r2, #12]
 80050f8:	e011      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005102:	d10c      	bne.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	3304      	adds	r3, #4
 8005108:	2101      	movs	r1, #1
 800510a:	4618      	mov	r0, r3
 800510c:	f000 f876 	bl	80051fc <RCCEx_PLLSAI1_Config>
 8005110:	4603      	mov	r3, r0
 8005112:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005114:	7cfb      	ldrb	r3, [r7, #19]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800511a:	7cfb      	ldrb	r3, [r7, #19]
 800511c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d01e      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800512a:	4b33      	ldr	r3, [pc, #204]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800512c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005130:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800513a:	492f      	ldr	r1, [pc, #188]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800513c:	4313      	orrs	r3, r2
 800513e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005148:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800514c:	d10c      	bne.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	3304      	adds	r3, #4
 8005152:	2102      	movs	r1, #2
 8005154:	4618      	mov	r0, r3
 8005156:	f000 f851 	bl	80051fc <RCCEx_PLLSAI1_Config>
 800515a:	4603      	mov	r3, r0
 800515c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800515e:	7cfb      	ldrb	r3, [r7, #19]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d001      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005164:	7cfb      	ldrb	r3, [r7, #19]
 8005166:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00b      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005174:	4b20      	ldr	r3, [pc, #128]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005176:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800517a:	f023 0204 	bic.w	r2, r3, #4
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005184:	491c      	ldr	r1, [pc, #112]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005186:	4313      	orrs	r3, r2
 8005188:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00b      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005198:	4b17      	ldr	r3, [pc, #92]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800519a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800519e:	f023 0218 	bic.w	r2, r3, #24
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a8:	4913      	ldr	r1, [pc, #76]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d017      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80051bc:	4b0e      	ldr	r3, [pc, #56]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051cc:	490a      	ldr	r1, [pc, #40]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051de:	d105      	bne.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051e0:	4b05      	ldr	r3, [pc, #20]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	4a04      	ldr	r2, [pc, #16]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051ea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80051ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3718      	adds	r7, #24
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	40021000 	.word	0x40021000

080051fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005206:	2300      	movs	r3, #0
 8005208:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800520a:	4b72      	ldr	r3, [pc, #456]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	f003 0303 	and.w	r3, r3, #3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00e      	beq.n	8005234 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005216:	4b6f      	ldr	r3, [pc, #444]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	f003 0203 	and.w	r2, r3, #3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	429a      	cmp	r2, r3
 8005224:	d103      	bne.n	800522e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
       ||
 800522a:	2b00      	cmp	r3, #0
 800522c:	d142      	bne.n	80052b4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	73fb      	strb	r3, [r7, #15]
 8005232:	e03f      	b.n	80052b4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2b03      	cmp	r3, #3
 800523a:	d018      	beq.n	800526e <RCCEx_PLLSAI1_Config+0x72>
 800523c:	2b03      	cmp	r3, #3
 800523e:	d825      	bhi.n	800528c <RCCEx_PLLSAI1_Config+0x90>
 8005240:	2b01      	cmp	r3, #1
 8005242:	d002      	beq.n	800524a <RCCEx_PLLSAI1_Config+0x4e>
 8005244:	2b02      	cmp	r3, #2
 8005246:	d009      	beq.n	800525c <RCCEx_PLLSAI1_Config+0x60>
 8005248:	e020      	b.n	800528c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800524a:	4b62      	ldr	r3, [pc, #392]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d11d      	bne.n	8005292 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800525a:	e01a      	b.n	8005292 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800525c:	4b5d      	ldr	r3, [pc, #372]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005264:	2b00      	cmp	r3, #0
 8005266:	d116      	bne.n	8005296 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800526c:	e013      	b.n	8005296 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800526e:	4b59      	ldr	r3, [pc, #356]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10f      	bne.n	800529a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800527a:	4b56      	ldr	r3, [pc, #344]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d109      	bne.n	800529a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800528a:	e006      	b.n	800529a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	73fb      	strb	r3, [r7, #15]
      break;
 8005290:	e004      	b.n	800529c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005292:	bf00      	nop
 8005294:	e002      	b.n	800529c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005296:	bf00      	nop
 8005298:	e000      	b.n	800529c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800529a:	bf00      	nop
    }

    if(status == HAL_OK)
 800529c:	7bfb      	ldrb	r3, [r7, #15]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d108      	bne.n	80052b4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80052a2:	4b4c      	ldr	r3, [pc, #304]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	f023 0203 	bic.w	r2, r3, #3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4949      	ldr	r1, [pc, #292]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80052b4:	7bfb      	ldrb	r3, [r7, #15]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f040 8086 	bne.w	80053c8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80052bc:	4b45      	ldr	r3, [pc, #276]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a44      	ldr	r2, [pc, #272]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80052c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052c8:	f7fd f978 	bl	80025bc <HAL_GetTick>
 80052cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80052ce:	e009      	b.n	80052e4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052d0:	f7fd f974 	bl	80025bc <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d902      	bls.n	80052e4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	73fb      	strb	r3, [r7, #15]
        break;
 80052e2:	e005      	b.n	80052f0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80052e4:	4b3b      	ldr	r3, [pc, #236]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1ef      	bne.n	80052d0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80052f0:	7bfb      	ldrb	r3, [r7, #15]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d168      	bne.n	80053c8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d113      	bne.n	8005324 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052fc:	4b35      	ldr	r3, [pc, #212]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052fe:	691a      	ldr	r2, [r3, #16]
 8005300:	4b35      	ldr	r3, [pc, #212]	; (80053d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005302:	4013      	ands	r3, r2
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	6892      	ldr	r2, [r2, #8]
 8005308:	0211      	lsls	r1, r2, #8
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	68d2      	ldr	r2, [r2, #12]
 800530e:	06d2      	lsls	r2, r2, #27
 8005310:	4311      	orrs	r1, r2
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	6852      	ldr	r2, [r2, #4]
 8005316:	3a01      	subs	r2, #1
 8005318:	0112      	lsls	r2, r2, #4
 800531a:	430a      	orrs	r2, r1
 800531c:	492d      	ldr	r1, [pc, #180]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800531e:	4313      	orrs	r3, r2
 8005320:	610b      	str	r3, [r1, #16]
 8005322:	e02d      	b.n	8005380 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d115      	bne.n	8005356 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800532a:	4b2a      	ldr	r3, [pc, #168]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800532c:	691a      	ldr	r2, [r3, #16]
 800532e:	4b2b      	ldr	r3, [pc, #172]	; (80053dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005330:	4013      	ands	r3, r2
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6892      	ldr	r2, [r2, #8]
 8005336:	0211      	lsls	r1, r2, #8
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6912      	ldr	r2, [r2, #16]
 800533c:	0852      	lsrs	r2, r2, #1
 800533e:	3a01      	subs	r2, #1
 8005340:	0552      	lsls	r2, r2, #21
 8005342:	4311      	orrs	r1, r2
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	6852      	ldr	r2, [r2, #4]
 8005348:	3a01      	subs	r2, #1
 800534a:	0112      	lsls	r2, r2, #4
 800534c:	430a      	orrs	r2, r1
 800534e:	4921      	ldr	r1, [pc, #132]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005350:	4313      	orrs	r3, r2
 8005352:	610b      	str	r3, [r1, #16]
 8005354:	e014      	b.n	8005380 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005356:	4b1f      	ldr	r3, [pc, #124]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005358:	691a      	ldr	r2, [r3, #16]
 800535a:	4b21      	ldr	r3, [pc, #132]	; (80053e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800535c:	4013      	ands	r3, r2
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	6892      	ldr	r2, [r2, #8]
 8005362:	0211      	lsls	r1, r2, #8
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	6952      	ldr	r2, [r2, #20]
 8005368:	0852      	lsrs	r2, r2, #1
 800536a:	3a01      	subs	r2, #1
 800536c:	0652      	lsls	r2, r2, #25
 800536e:	4311      	orrs	r1, r2
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	6852      	ldr	r2, [r2, #4]
 8005374:	3a01      	subs	r2, #1
 8005376:	0112      	lsls	r2, r2, #4
 8005378:	430a      	orrs	r2, r1
 800537a:	4916      	ldr	r1, [pc, #88]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800537c:	4313      	orrs	r3, r2
 800537e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005380:	4b14      	ldr	r3, [pc, #80]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a13      	ldr	r2, [pc, #76]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005386:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800538a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800538c:	f7fd f916 	bl	80025bc <HAL_GetTick>
 8005390:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005392:	e009      	b.n	80053a8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005394:	f7fd f912 	bl	80025bc <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d902      	bls.n	80053a8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	73fb      	strb	r3, [r7, #15]
          break;
 80053a6:	e005      	b.n	80053b4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80053a8:	4b0a      	ldr	r3, [pc, #40]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d0ef      	beq.n	8005394 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80053b4:	7bfb      	ldrb	r3, [r7, #15]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d106      	bne.n	80053c8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80053ba:	4b06      	ldr	r3, [pc, #24]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053bc:	691a      	ldr	r2, [r3, #16]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	4904      	ldr	r1, [pc, #16]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80053c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	40021000 	.word	0x40021000
 80053d8:	07ff800f 	.word	0x07ff800f
 80053dc:	ff9f800f 	.word	0xff9f800f
 80053e0:	f9ff800f 	.word	0xf9ff800f

080053e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053ee:	2300      	movs	r3, #0
 80053f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80053f2:	4b72      	ldr	r3, [pc, #456]	; (80055bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	f003 0303 	and.w	r3, r3, #3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00e      	beq.n	800541c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80053fe:	4b6f      	ldr	r3, [pc, #444]	; (80055bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	f003 0203 	and.w	r2, r3, #3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	429a      	cmp	r2, r3
 800540c:	d103      	bne.n	8005416 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
       ||
 8005412:	2b00      	cmp	r3, #0
 8005414:	d142      	bne.n	800549c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	73fb      	strb	r3, [r7, #15]
 800541a:	e03f      	b.n	800549c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2b03      	cmp	r3, #3
 8005422:	d018      	beq.n	8005456 <RCCEx_PLLSAI2_Config+0x72>
 8005424:	2b03      	cmp	r3, #3
 8005426:	d825      	bhi.n	8005474 <RCCEx_PLLSAI2_Config+0x90>
 8005428:	2b01      	cmp	r3, #1
 800542a:	d002      	beq.n	8005432 <RCCEx_PLLSAI2_Config+0x4e>
 800542c:	2b02      	cmp	r3, #2
 800542e:	d009      	beq.n	8005444 <RCCEx_PLLSAI2_Config+0x60>
 8005430:	e020      	b.n	8005474 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005432:	4b62      	ldr	r3, [pc, #392]	; (80055bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0302 	and.w	r3, r3, #2
 800543a:	2b00      	cmp	r3, #0
 800543c:	d11d      	bne.n	800547a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005442:	e01a      	b.n	800547a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005444:	4b5d      	ldr	r3, [pc, #372]	; (80055bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800544c:	2b00      	cmp	r3, #0
 800544e:	d116      	bne.n	800547e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005454:	e013      	b.n	800547e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005456:	4b59      	ldr	r3, [pc, #356]	; (80055bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10f      	bne.n	8005482 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005462:	4b56      	ldr	r3, [pc, #344]	; (80055bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d109      	bne.n	8005482 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005472:	e006      	b.n	8005482 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	73fb      	strb	r3, [r7, #15]
      break;
 8005478:	e004      	b.n	8005484 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800547a:	bf00      	nop
 800547c:	e002      	b.n	8005484 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800547e:	bf00      	nop
 8005480:	e000      	b.n	8005484 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005482:	bf00      	nop
    }

    if(status == HAL_OK)
 8005484:	7bfb      	ldrb	r3, [r7, #15]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d108      	bne.n	800549c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800548a:	4b4c      	ldr	r3, [pc, #304]	; (80055bc <RCCEx_PLLSAI2_Config+0x1d8>)
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	f023 0203 	bic.w	r2, r3, #3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4949      	ldr	r1, [pc, #292]	; (80055bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005498:	4313      	orrs	r3, r2
 800549a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800549c:	7bfb      	ldrb	r3, [r7, #15]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	f040 8086 	bne.w	80055b0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80054a4:	4b45      	ldr	r3, [pc, #276]	; (80055bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a44      	ldr	r2, [pc, #272]	; (80055bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80054aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054b0:	f7fd f884 	bl	80025bc <HAL_GetTick>
 80054b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80054b6:	e009      	b.n	80054cc <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80054b8:	f7fd f880 	bl	80025bc <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d902      	bls.n	80054cc <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	73fb      	strb	r3, [r7, #15]
        break;
 80054ca:	e005      	b.n	80054d8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80054cc:	4b3b      	ldr	r3, [pc, #236]	; (80055bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d1ef      	bne.n	80054b8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80054d8:	7bfb      	ldrb	r3, [r7, #15]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d168      	bne.n	80055b0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d113      	bne.n	800550c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80054e4:	4b35      	ldr	r3, [pc, #212]	; (80055bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80054e6:	695a      	ldr	r2, [r3, #20]
 80054e8:	4b35      	ldr	r3, [pc, #212]	; (80055c0 <RCCEx_PLLSAI2_Config+0x1dc>)
 80054ea:	4013      	ands	r3, r2
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	6892      	ldr	r2, [r2, #8]
 80054f0:	0211      	lsls	r1, r2, #8
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	68d2      	ldr	r2, [r2, #12]
 80054f6:	06d2      	lsls	r2, r2, #27
 80054f8:	4311      	orrs	r1, r2
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	6852      	ldr	r2, [r2, #4]
 80054fe:	3a01      	subs	r2, #1
 8005500:	0112      	lsls	r2, r2, #4
 8005502:	430a      	orrs	r2, r1
 8005504:	492d      	ldr	r1, [pc, #180]	; (80055bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005506:	4313      	orrs	r3, r2
 8005508:	614b      	str	r3, [r1, #20]
 800550a:	e02d      	b.n	8005568 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d115      	bne.n	800553e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005512:	4b2a      	ldr	r3, [pc, #168]	; (80055bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005514:	695a      	ldr	r2, [r3, #20]
 8005516:	4b2b      	ldr	r3, [pc, #172]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005518:	4013      	ands	r3, r2
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	6892      	ldr	r2, [r2, #8]
 800551e:	0211      	lsls	r1, r2, #8
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	6912      	ldr	r2, [r2, #16]
 8005524:	0852      	lsrs	r2, r2, #1
 8005526:	3a01      	subs	r2, #1
 8005528:	0552      	lsls	r2, r2, #21
 800552a:	4311      	orrs	r1, r2
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6852      	ldr	r2, [r2, #4]
 8005530:	3a01      	subs	r2, #1
 8005532:	0112      	lsls	r2, r2, #4
 8005534:	430a      	orrs	r2, r1
 8005536:	4921      	ldr	r1, [pc, #132]	; (80055bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005538:	4313      	orrs	r3, r2
 800553a:	614b      	str	r3, [r1, #20]
 800553c:	e014      	b.n	8005568 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800553e:	4b1f      	ldr	r3, [pc, #124]	; (80055bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005540:	695a      	ldr	r2, [r3, #20]
 8005542:	4b21      	ldr	r3, [pc, #132]	; (80055c8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005544:	4013      	ands	r3, r2
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	6892      	ldr	r2, [r2, #8]
 800554a:	0211      	lsls	r1, r2, #8
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	6952      	ldr	r2, [r2, #20]
 8005550:	0852      	lsrs	r2, r2, #1
 8005552:	3a01      	subs	r2, #1
 8005554:	0652      	lsls	r2, r2, #25
 8005556:	4311      	orrs	r1, r2
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	6852      	ldr	r2, [r2, #4]
 800555c:	3a01      	subs	r2, #1
 800555e:	0112      	lsls	r2, r2, #4
 8005560:	430a      	orrs	r2, r1
 8005562:	4916      	ldr	r1, [pc, #88]	; (80055bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005564:	4313      	orrs	r3, r2
 8005566:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005568:	4b14      	ldr	r3, [pc, #80]	; (80055bc <RCCEx_PLLSAI2_Config+0x1d8>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a13      	ldr	r2, [pc, #76]	; (80055bc <RCCEx_PLLSAI2_Config+0x1d8>)
 800556e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005572:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005574:	f7fd f822 	bl	80025bc <HAL_GetTick>
 8005578:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800557a:	e009      	b.n	8005590 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800557c:	f7fd f81e 	bl	80025bc <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b02      	cmp	r3, #2
 8005588:	d902      	bls.n	8005590 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	73fb      	strb	r3, [r7, #15]
          break;
 800558e:	e005      	b.n	800559c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005590:	4b0a      	ldr	r3, [pc, #40]	; (80055bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d0ef      	beq.n	800557c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800559c:	7bfb      	ldrb	r3, [r7, #15]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d106      	bne.n	80055b0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80055a2:	4b06      	ldr	r3, [pc, #24]	; (80055bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80055a4:	695a      	ldr	r2, [r3, #20]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	4904      	ldr	r1, [pc, #16]	; (80055bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80055b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	40021000 	.word	0x40021000
 80055c0:	07ff800f 	.word	0x07ff800f
 80055c4:	ff9f800f 	.word	0xff9f800f
 80055c8:	f9ff800f 	.word	0xf9ff800f

080055cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e095      	b.n	800570a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d108      	bne.n	80055f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055ee:	d009      	beq.n	8005604 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	61da      	str	r2, [r3, #28]
 80055f6:	e005      	b.n	8005604 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b00      	cmp	r3, #0
 8005614:	d106      	bne.n	8005624 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7fc fd2e 	bl	8002080 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2202      	movs	r2, #2
 8005628:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800563a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005644:	d902      	bls.n	800564c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005646:	2300      	movs	r3, #0
 8005648:	60fb      	str	r3, [r7, #12]
 800564a:	e002      	b.n	8005652 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800564c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005650:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800565a:	d007      	beq.n	800566c <HAL_SPI_Init+0xa0>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005664:	d002      	beq.n	800566c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800567c:	431a      	orrs	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	431a      	orrs	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	695b      	ldr	r3, [r3, #20]
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	431a      	orrs	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800569a:	431a      	orrs	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	69db      	ldr	r3, [r3, #28]
 80056a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056a4:	431a      	orrs	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ae:	ea42 0103 	orr.w	r1, r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	430a      	orrs	r2, r1
 80056c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	0c1b      	lsrs	r3, r3, #16
 80056c8:	f003 0204 	and.w	r2, r3, #4
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d0:	f003 0310 	and.w	r3, r3, #16
 80056d4:	431a      	orrs	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056da:	f003 0308 	and.w	r3, r3, #8
 80056de:	431a      	orrs	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80056e8:	ea42 0103 	orr.w	r1, r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	430a      	orrs	r2, r1
 80056f8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b08a      	sub	sp, #40	; 0x28
 8005716:	af00      	add	r7, sp, #0
 8005718:	60f8      	str	r0, [r7, #12]
 800571a:	60b9      	str	r1, [r7, #8]
 800571c:	607a      	str	r2, [r7, #4]
 800571e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005720:	2301      	movs	r3, #1
 8005722:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005724:	2300      	movs	r3, #0
 8005726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005730:	2b01      	cmp	r3, #1
 8005732:	d101      	bne.n	8005738 <HAL_SPI_TransmitReceive+0x26>
 8005734:	2302      	movs	r3, #2
 8005736:	e1fb      	b.n	8005b30 <HAL_SPI_TransmitReceive+0x41e>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005740:	f7fc ff3c 	bl	80025bc <HAL_GetTick>
 8005744:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800574c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005754:	887b      	ldrh	r3, [r7, #2]
 8005756:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005758:	887b      	ldrh	r3, [r7, #2]
 800575a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800575c:	7efb      	ldrb	r3, [r7, #27]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d00e      	beq.n	8005780 <HAL_SPI_TransmitReceive+0x6e>
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005768:	d106      	bne.n	8005778 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d102      	bne.n	8005778 <HAL_SPI_TransmitReceive+0x66>
 8005772:	7efb      	ldrb	r3, [r7, #27]
 8005774:	2b04      	cmp	r3, #4
 8005776:	d003      	beq.n	8005780 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005778:	2302      	movs	r3, #2
 800577a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800577e:	e1cd      	b.n	8005b1c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d005      	beq.n	8005792 <HAL_SPI_TransmitReceive+0x80>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d002      	beq.n	8005792 <HAL_SPI_TransmitReceive+0x80>
 800578c:	887b      	ldrh	r3, [r7, #2]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d103      	bne.n	800579a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005798:	e1c0      	b.n	8005b1c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b04      	cmp	r3, #4
 80057a4:	d003      	beq.n	80057ae <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2205      	movs	r2, #5
 80057aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	887a      	ldrh	r2, [r7, #2]
 80057be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	887a      	ldrh	r2, [r7, #2]
 80057c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	887a      	ldrh	r2, [r7, #2]
 80057d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	887a      	ldrh	r2, [r7, #2]
 80057da:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057f0:	d802      	bhi.n	80057f8 <HAL_SPI_TransmitReceive+0xe6>
 80057f2:	8a3b      	ldrh	r3, [r7, #16]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d908      	bls.n	800580a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685a      	ldr	r2, [r3, #4]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005806:	605a      	str	r2, [r3, #4]
 8005808:	e007      	b.n	800581a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	685a      	ldr	r2, [r3, #4]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005818:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005824:	2b40      	cmp	r3, #64	; 0x40
 8005826:	d007      	beq.n	8005838 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005836:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005840:	d97c      	bls.n	800593c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d002      	beq.n	8005850 <HAL_SPI_TransmitReceive+0x13e>
 800584a:	8a7b      	ldrh	r3, [r7, #18]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d169      	bne.n	8005924 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005854:	881a      	ldrh	r2, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005860:	1c9a      	adds	r2, r3, #2
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800586a:	b29b      	uxth	r3, r3
 800586c:	3b01      	subs	r3, #1
 800586e:	b29a      	uxth	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005874:	e056      	b.n	8005924 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b02      	cmp	r3, #2
 8005882:	d11b      	bne.n	80058bc <HAL_SPI_TransmitReceive+0x1aa>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005888:	b29b      	uxth	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d016      	beq.n	80058bc <HAL_SPI_TransmitReceive+0x1aa>
 800588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005890:	2b01      	cmp	r3, #1
 8005892:	d113      	bne.n	80058bc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005898:	881a      	ldrh	r2, [r3, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a4:	1c9a      	adds	r2, r3, #2
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	3b01      	subs	r3, #1
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058b8:	2300      	movs	r3, #0
 80058ba:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d11c      	bne.n	8005904 <HAL_SPI_TransmitReceive+0x1f2>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d016      	beq.n	8005904 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68da      	ldr	r2, [r3, #12]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e0:	b292      	uxth	r2, r2
 80058e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e8:	1c9a      	adds	r2, r3, #2
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	3b01      	subs	r3, #1
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005900:	2301      	movs	r3, #1
 8005902:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005904:	f7fc fe5a 	bl	80025bc <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005910:	429a      	cmp	r2, r3
 8005912:	d807      	bhi.n	8005924 <HAL_SPI_TransmitReceive+0x212>
 8005914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800591a:	d003      	beq.n	8005924 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005922:	e0fb      	b.n	8005b1c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005928:	b29b      	uxth	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1a3      	bne.n	8005876 <HAL_SPI_TransmitReceive+0x164>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005934:	b29b      	uxth	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d19d      	bne.n	8005876 <HAL_SPI_TransmitReceive+0x164>
 800593a:	e0df      	b.n	8005afc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d003      	beq.n	800594c <HAL_SPI_TransmitReceive+0x23a>
 8005944:	8a7b      	ldrh	r3, [r7, #18]
 8005946:	2b01      	cmp	r3, #1
 8005948:	f040 80cb 	bne.w	8005ae2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005950:	b29b      	uxth	r3, r3
 8005952:	2b01      	cmp	r3, #1
 8005954:	d912      	bls.n	800597c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595a:	881a      	ldrh	r2, [r3, #0]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005966:	1c9a      	adds	r2, r3, #2
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005970:	b29b      	uxth	r3, r3
 8005972:	3b02      	subs	r3, #2
 8005974:	b29a      	uxth	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	87da      	strh	r2, [r3, #62]	; 0x3e
 800597a:	e0b2      	b.n	8005ae2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	330c      	adds	r3, #12
 8005986:	7812      	ldrb	r2, [r2, #0]
 8005988:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598e:	1c5a      	adds	r2, r3, #1
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005998:	b29b      	uxth	r3, r3
 800599a:	3b01      	subs	r3, #1
 800599c:	b29a      	uxth	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059a2:	e09e      	b.n	8005ae2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f003 0302 	and.w	r3, r3, #2
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d134      	bne.n	8005a1c <HAL_SPI_TransmitReceive+0x30a>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d02f      	beq.n	8005a1c <HAL_SPI_TransmitReceive+0x30a>
 80059bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d12c      	bne.n	8005a1c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d912      	bls.n	80059f2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d0:	881a      	ldrh	r2, [r3, #0]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059dc:	1c9a      	adds	r2, r3, #2
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	3b02      	subs	r3, #2
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059f0:	e012      	b.n	8005a18 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	330c      	adds	r3, #12
 80059fc:	7812      	ldrb	r2, [r2, #0]
 80059fe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a04:	1c5a      	adds	r2, r3, #1
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	3b01      	subs	r3, #1
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d148      	bne.n	8005abc <HAL_SPI_TransmitReceive+0x3aa>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d042      	beq.n	8005abc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d923      	bls.n	8005a8a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68da      	ldr	r2, [r3, #12]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4c:	b292      	uxth	r2, r2
 8005a4e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a54:	1c9a      	adds	r2, r3, #2
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	3b02      	subs	r3, #2
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d81f      	bhi.n	8005ab8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	685a      	ldr	r2, [r3, #4]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a86:	605a      	str	r2, [r3, #4]
 8005a88:	e016      	b.n	8005ab8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f103 020c 	add.w	r2, r3, #12
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a96:	7812      	ldrb	r2, [r2, #0]
 8005a98:	b2d2      	uxtb	r2, r2
 8005a9a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa0:	1c5a      	adds	r2, r3, #1
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005abc:	f7fc fd7e 	bl	80025bc <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d803      	bhi.n	8005ad4 <HAL_SPI_TransmitReceive+0x3c2>
 8005acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad2:	d102      	bne.n	8005ada <HAL_SPI_TransmitReceive+0x3c8>
 8005ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d103      	bne.n	8005ae2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005ae0:	e01c      	b.n	8005b1c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f47f af5b 	bne.w	80059a4 <HAL_SPI_TransmitReceive+0x292>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f47f af54 	bne.w	80059a4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005afc:	69fa      	ldr	r2, [r7, #28]
 8005afe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f000 f937 	bl	8005d74 <SPI_EndRxTxTransaction>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d006      	beq.n	8005b1a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2220      	movs	r2, #32
 8005b16:	661a      	str	r2, [r3, #96]	; 0x60
 8005b18:	e000      	b.n	8005b1c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005b1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005b2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3728      	adds	r7, #40	; 0x28
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b088      	sub	sp, #32
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	603b      	str	r3, [r7, #0]
 8005b44:	4613      	mov	r3, r2
 8005b46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b48:	f7fc fd38 	bl	80025bc <HAL_GetTick>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b50:	1a9b      	subs	r3, r3, r2
 8005b52:	683a      	ldr	r2, [r7, #0]
 8005b54:	4413      	add	r3, r2
 8005b56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b58:	f7fc fd30 	bl	80025bc <HAL_GetTick>
 8005b5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b5e:	4b39      	ldr	r3, [pc, #228]	; (8005c44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	015b      	lsls	r3, r3, #5
 8005b64:	0d1b      	lsrs	r3, r3, #20
 8005b66:	69fa      	ldr	r2, [r7, #28]
 8005b68:	fb02 f303 	mul.w	r3, r2, r3
 8005b6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b6e:	e054      	b.n	8005c1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b76:	d050      	beq.n	8005c1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b78:	f7fc fd20 	bl	80025bc <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	69fa      	ldr	r2, [r7, #28]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d902      	bls.n	8005b8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d13d      	bne.n	8005c0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ba6:	d111      	bne.n	8005bcc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bb0:	d004      	beq.n	8005bbc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bba:	d107      	bne.n	8005bcc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bd4:	d10f      	bne.n	8005bf6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005be4:	601a      	str	r2, [r3, #0]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bf4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e017      	b.n	8005c3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d101      	bne.n	8005c14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	3b01      	subs	r3, #1
 8005c18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	689a      	ldr	r2, [r3, #8]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	4013      	ands	r3, r2
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	bf0c      	ite	eq
 8005c2a:	2301      	moveq	r3, #1
 8005c2c:	2300      	movne	r3, #0
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	461a      	mov	r2, r3
 8005c32:	79fb      	ldrb	r3, [r7, #7]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d19b      	bne.n	8005b70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3720      	adds	r7, #32
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	20000000 	.word	0x20000000

08005c48 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b08a      	sub	sp, #40	; 0x28
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
 8005c54:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005c56:	2300      	movs	r3, #0
 8005c58:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005c5a:	f7fc fcaf 	bl	80025bc <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c62:	1a9b      	subs	r3, r3, r2
 8005c64:	683a      	ldr	r2, [r7, #0]
 8005c66:	4413      	add	r3, r2
 8005c68:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005c6a:	f7fc fca7 	bl	80025bc <HAL_GetTick>
 8005c6e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	330c      	adds	r3, #12
 8005c76:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005c78:	4b3d      	ldr	r3, [pc, #244]	; (8005d70 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	4413      	add	r3, r2
 8005c82:	00da      	lsls	r2, r3, #3
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	0d1b      	lsrs	r3, r3, #20
 8005c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c8a:	fb02 f303 	mul.w	r3, r2, r3
 8005c8e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005c90:	e060      	b.n	8005d54 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005c98:	d107      	bne.n	8005caa <SPI_WaitFifoStateUntilTimeout+0x62>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d104      	bne.n	8005caa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005ca8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb0:	d050      	beq.n	8005d54 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005cb2:	f7fc fc83 	bl	80025bc <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	6a3b      	ldr	r3, [r7, #32]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d902      	bls.n	8005cc8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d13d      	bne.n	8005d44 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	685a      	ldr	r2, [r3, #4]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005cd6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ce0:	d111      	bne.n	8005d06 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cea:	d004      	beq.n	8005cf6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cf4:	d107      	bne.n	8005d06 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d04:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d0e:	d10f      	bne.n	8005d30 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d1e:	601a      	str	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d2e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e010      	b.n	8005d66 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d101      	bne.n	8005d4e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	3b01      	subs	r3, #1
 8005d52:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	689a      	ldr	r2, [r3, #8]
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d196      	bne.n	8005c92 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3728      	adds	r7, #40	; 0x28
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	20000000 	.word	0x20000000

08005d74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b086      	sub	sp, #24
 8005d78:	af02      	add	r7, sp, #8
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	9300      	str	r3, [sp, #0]
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f7ff ff5b 	bl	8005c48 <SPI_WaitFifoStateUntilTimeout>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d007      	beq.n	8005da8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d9c:	f043 0220 	orr.w	r2, r3, #32
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e027      	b.n	8005df8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	9300      	str	r3, [sp, #0]
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	2200      	movs	r2, #0
 8005db0:	2180      	movs	r1, #128	; 0x80
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f7ff fec0 	bl	8005b38 <SPI_WaitFlagStateUntilTimeout>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d007      	beq.n	8005dce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dc2:	f043 0220 	orr.w	r2, r3, #32
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e014      	b.n	8005df8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	9300      	str	r3, [sp, #0]
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f7ff ff34 	bl	8005c48 <SPI_WaitFifoStateUntilTimeout>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d007      	beq.n	8005df6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dea:	f043 0220 	orr.w	r2, r3, #32
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e000      	b.n	8005df8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d101      	bne.n	8005e12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e049      	b.n	8005ea6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d106      	bne.n	8005e2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f7fc f96c 	bl	8002104 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2202      	movs	r2, #2
 8005e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	3304      	adds	r3, #4
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	4610      	mov	r0, r2
 8005e40:	f000 fb7a 	bl	8006538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3708      	adds	r7, #8
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b082      	sub	sp, #8
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d101      	bne.n	8005ec0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e049      	b.n	8005f54 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d106      	bne.n	8005eda <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 f841 	bl	8005f5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2202      	movs	r2, #2
 8005ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	3304      	adds	r3, #4
 8005eea:	4619      	mov	r1, r3
 8005eec:	4610      	mov	r0, r2
 8005eee:	f000 fb23 	bl	8006538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3708      	adds	r7, #8
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d109      	bne.n	8005f94 <HAL_TIM_PWM_Start+0x24>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	bf14      	ite	ne
 8005f8c:	2301      	movne	r3, #1
 8005f8e:	2300      	moveq	r3, #0
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	e03c      	b.n	800600e <HAL_TIM_PWM_Start+0x9e>
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	2b04      	cmp	r3, #4
 8005f98:	d109      	bne.n	8005fae <HAL_TIM_PWM_Start+0x3e>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	bf14      	ite	ne
 8005fa6:	2301      	movne	r3, #1
 8005fa8:	2300      	moveq	r3, #0
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	e02f      	b.n	800600e <HAL_TIM_PWM_Start+0x9e>
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	2b08      	cmp	r3, #8
 8005fb2:	d109      	bne.n	8005fc8 <HAL_TIM_PWM_Start+0x58>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	bf14      	ite	ne
 8005fc0:	2301      	movne	r3, #1
 8005fc2:	2300      	moveq	r3, #0
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	e022      	b.n	800600e <HAL_TIM_PWM_Start+0x9e>
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	2b0c      	cmp	r3, #12
 8005fcc:	d109      	bne.n	8005fe2 <HAL_TIM_PWM_Start+0x72>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	bf14      	ite	ne
 8005fda:	2301      	movne	r3, #1
 8005fdc:	2300      	moveq	r3, #0
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	e015      	b.n	800600e <HAL_TIM_PWM_Start+0x9e>
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	2b10      	cmp	r3, #16
 8005fe6:	d109      	bne.n	8005ffc <HAL_TIM_PWM_Start+0x8c>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	bf14      	ite	ne
 8005ff4:	2301      	movne	r3, #1
 8005ff6:	2300      	moveq	r3, #0
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	e008      	b.n	800600e <HAL_TIM_PWM_Start+0x9e>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006002:	b2db      	uxtb	r3, r3
 8006004:	2b01      	cmp	r3, #1
 8006006:	bf14      	ite	ne
 8006008:	2301      	movne	r3, #1
 800600a:	2300      	moveq	r3, #0
 800600c:	b2db      	uxtb	r3, r3
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e09c      	b.n	8006150 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d104      	bne.n	8006026 <HAL_TIM_PWM_Start+0xb6>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2202      	movs	r2, #2
 8006020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006024:	e023      	b.n	800606e <HAL_TIM_PWM_Start+0xfe>
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	2b04      	cmp	r3, #4
 800602a:	d104      	bne.n	8006036 <HAL_TIM_PWM_Start+0xc6>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2202      	movs	r2, #2
 8006030:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006034:	e01b      	b.n	800606e <HAL_TIM_PWM_Start+0xfe>
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	2b08      	cmp	r3, #8
 800603a:	d104      	bne.n	8006046 <HAL_TIM_PWM_Start+0xd6>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2202      	movs	r2, #2
 8006040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006044:	e013      	b.n	800606e <HAL_TIM_PWM_Start+0xfe>
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	2b0c      	cmp	r3, #12
 800604a:	d104      	bne.n	8006056 <HAL_TIM_PWM_Start+0xe6>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2202      	movs	r2, #2
 8006050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006054:	e00b      	b.n	800606e <HAL_TIM_PWM_Start+0xfe>
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2b10      	cmp	r3, #16
 800605a:	d104      	bne.n	8006066 <HAL_TIM_PWM_Start+0xf6>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2202      	movs	r2, #2
 8006060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006064:	e003      	b.n	800606e <HAL_TIM_PWM_Start+0xfe>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2202      	movs	r2, #2
 800606a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2201      	movs	r2, #1
 8006074:	6839      	ldr	r1, [r7, #0]
 8006076:	4618      	mov	r0, r3
 8006078:	f000 fe68 	bl	8006d4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a35      	ldr	r2, [pc, #212]	; (8006158 <HAL_TIM_PWM_Start+0x1e8>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d013      	beq.n	80060ae <HAL_TIM_PWM_Start+0x13e>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a34      	ldr	r2, [pc, #208]	; (800615c <HAL_TIM_PWM_Start+0x1ec>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d00e      	beq.n	80060ae <HAL_TIM_PWM_Start+0x13e>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a32      	ldr	r2, [pc, #200]	; (8006160 <HAL_TIM_PWM_Start+0x1f0>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d009      	beq.n	80060ae <HAL_TIM_PWM_Start+0x13e>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a31      	ldr	r2, [pc, #196]	; (8006164 <HAL_TIM_PWM_Start+0x1f4>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d004      	beq.n	80060ae <HAL_TIM_PWM_Start+0x13e>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a2f      	ldr	r2, [pc, #188]	; (8006168 <HAL_TIM_PWM_Start+0x1f8>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d101      	bne.n	80060b2 <HAL_TIM_PWM_Start+0x142>
 80060ae:	2301      	movs	r3, #1
 80060b0:	e000      	b.n	80060b4 <HAL_TIM_PWM_Start+0x144>
 80060b2:	2300      	movs	r3, #0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d007      	beq.n	80060c8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060c6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a22      	ldr	r2, [pc, #136]	; (8006158 <HAL_TIM_PWM_Start+0x1e8>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d01d      	beq.n	800610e <HAL_TIM_PWM_Start+0x19e>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060da:	d018      	beq.n	800610e <HAL_TIM_PWM_Start+0x19e>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a22      	ldr	r2, [pc, #136]	; (800616c <HAL_TIM_PWM_Start+0x1fc>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d013      	beq.n	800610e <HAL_TIM_PWM_Start+0x19e>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a21      	ldr	r2, [pc, #132]	; (8006170 <HAL_TIM_PWM_Start+0x200>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d00e      	beq.n	800610e <HAL_TIM_PWM_Start+0x19e>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a1f      	ldr	r2, [pc, #124]	; (8006174 <HAL_TIM_PWM_Start+0x204>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d009      	beq.n	800610e <HAL_TIM_PWM_Start+0x19e>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a17      	ldr	r2, [pc, #92]	; (800615c <HAL_TIM_PWM_Start+0x1ec>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d004      	beq.n	800610e <HAL_TIM_PWM_Start+0x19e>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a15      	ldr	r2, [pc, #84]	; (8006160 <HAL_TIM_PWM_Start+0x1f0>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d115      	bne.n	800613a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	689a      	ldr	r2, [r3, #8]
 8006114:	4b18      	ldr	r3, [pc, #96]	; (8006178 <HAL_TIM_PWM_Start+0x208>)
 8006116:	4013      	ands	r3, r2
 8006118:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2b06      	cmp	r3, #6
 800611e:	d015      	beq.n	800614c <HAL_TIM_PWM_Start+0x1dc>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006126:	d011      	beq.n	800614c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f042 0201 	orr.w	r2, r2, #1
 8006136:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006138:	e008      	b.n	800614c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f042 0201 	orr.w	r2, r2, #1
 8006148:	601a      	str	r2, [r3, #0]
 800614a:	e000      	b.n	800614e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800614c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	40012c00 	.word	0x40012c00
 800615c:	40013400 	.word	0x40013400
 8006160:	40014000 	.word	0x40014000
 8006164:	40014400 	.word	0x40014400
 8006168:	40014800 	.word	0x40014800
 800616c:	40000400 	.word	0x40000400
 8006170:	40000800 	.word	0x40000800
 8006174:	40000c00 	.word	0x40000c00
 8006178:	00010007 	.word	0x00010007

0800617c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b086      	sub	sp, #24
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006188:	2300      	movs	r3, #0
 800618a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006192:	2b01      	cmp	r3, #1
 8006194:	d101      	bne.n	800619a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006196:	2302      	movs	r3, #2
 8006198:	e0ff      	b.n	800639a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2b14      	cmp	r3, #20
 80061a6:	f200 80f0 	bhi.w	800638a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80061aa:	a201      	add	r2, pc, #4	; (adr r2, 80061b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80061ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b0:	08006205 	.word	0x08006205
 80061b4:	0800638b 	.word	0x0800638b
 80061b8:	0800638b 	.word	0x0800638b
 80061bc:	0800638b 	.word	0x0800638b
 80061c0:	08006245 	.word	0x08006245
 80061c4:	0800638b 	.word	0x0800638b
 80061c8:	0800638b 	.word	0x0800638b
 80061cc:	0800638b 	.word	0x0800638b
 80061d0:	08006287 	.word	0x08006287
 80061d4:	0800638b 	.word	0x0800638b
 80061d8:	0800638b 	.word	0x0800638b
 80061dc:	0800638b 	.word	0x0800638b
 80061e0:	080062c7 	.word	0x080062c7
 80061e4:	0800638b 	.word	0x0800638b
 80061e8:	0800638b 	.word	0x0800638b
 80061ec:	0800638b 	.word	0x0800638b
 80061f0:	08006309 	.word	0x08006309
 80061f4:	0800638b 	.word	0x0800638b
 80061f8:	0800638b 	.word	0x0800638b
 80061fc:	0800638b 	.word	0x0800638b
 8006200:	08006349 	.word	0x08006349
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68b9      	ldr	r1, [r7, #8]
 800620a:	4618      	mov	r0, r3
 800620c:	f000 fa2e 	bl	800666c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	699a      	ldr	r2, [r3, #24]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f042 0208 	orr.w	r2, r2, #8
 800621e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	699a      	ldr	r2, [r3, #24]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f022 0204 	bic.w	r2, r2, #4
 800622e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6999      	ldr	r1, [r3, #24]
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	691a      	ldr	r2, [r3, #16]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	430a      	orrs	r2, r1
 8006240:	619a      	str	r2, [r3, #24]
      break;
 8006242:	e0a5      	b.n	8006390 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68b9      	ldr	r1, [r7, #8]
 800624a:	4618      	mov	r0, r3
 800624c:	f000 fa9e 	bl	800678c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	699a      	ldr	r2, [r3, #24]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800625e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	699a      	ldr	r2, [r3, #24]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800626e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6999      	ldr	r1, [r3, #24]
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	021a      	lsls	r2, r3, #8
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	430a      	orrs	r2, r1
 8006282:	619a      	str	r2, [r3, #24]
      break;
 8006284:	e084      	b.n	8006390 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68b9      	ldr	r1, [r7, #8]
 800628c:	4618      	mov	r0, r3
 800628e:	f000 fb07 	bl	80068a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	69da      	ldr	r2, [r3, #28]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f042 0208 	orr.w	r2, r2, #8
 80062a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	69da      	ldr	r2, [r3, #28]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f022 0204 	bic.w	r2, r2, #4
 80062b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	69d9      	ldr	r1, [r3, #28]
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	691a      	ldr	r2, [r3, #16]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	430a      	orrs	r2, r1
 80062c2:	61da      	str	r2, [r3, #28]
      break;
 80062c4:	e064      	b.n	8006390 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68b9      	ldr	r1, [r7, #8]
 80062cc:	4618      	mov	r0, r3
 80062ce:	f000 fb6f 	bl	80069b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	69da      	ldr	r2, [r3, #28]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	69da      	ldr	r2, [r3, #28]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	69d9      	ldr	r1, [r3, #28]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	021a      	lsls	r2, r3, #8
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	430a      	orrs	r2, r1
 8006304:	61da      	str	r2, [r3, #28]
      break;
 8006306:	e043      	b.n	8006390 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68b9      	ldr	r1, [r7, #8]
 800630e:	4618      	mov	r0, r3
 8006310:	f000 fbb8 	bl	8006a84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f042 0208 	orr.w	r2, r2, #8
 8006322:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f022 0204 	bic.w	r2, r2, #4
 8006332:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	691a      	ldr	r2, [r3, #16]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	430a      	orrs	r2, r1
 8006344:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006346:	e023      	b.n	8006390 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68b9      	ldr	r1, [r7, #8]
 800634e:	4618      	mov	r0, r3
 8006350:	f000 fbfc 	bl	8006b4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006362:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006372:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	021a      	lsls	r2, r3, #8
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	430a      	orrs	r2, r1
 8006386:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006388:	e002      	b.n	8006390 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	75fb      	strb	r3, [r7, #23]
      break;
 800638e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006398:	7dfb      	ldrb	r3, [r7, #23]
}
 800639a:	4618      	mov	r0, r3
 800639c:	3718      	adds	r7, #24
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop

080063a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063ae:	2300      	movs	r3, #0
 80063b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d101      	bne.n	80063c0 <HAL_TIM_ConfigClockSource+0x1c>
 80063bc:	2302      	movs	r3, #2
 80063be:	e0b6      	b.n	800652e <HAL_TIM_ConfigClockSource+0x18a>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2202      	movs	r2, #2
 80063cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80063e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063fc:	d03e      	beq.n	800647c <HAL_TIM_ConfigClockSource+0xd8>
 80063fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006402:	f200 8087 	bhi.w	8006514 <HAL_TIM_ConfigClockSource+0x170>
 8006406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800640a:	f000 8086 	beq.w	800651a <HAL_TIM_ConfigClockSource+0x176>
 800640e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006412:	d87f      	bhi.n	8006514 <HAL_TIM_ConfigClockSource+0x170>
 8006414:	2b70      	cmp	r3, #112	; 0x70
 8006416:	d01a      	beq.n	800644e <HAL_TIM_ConfigClockSource+0xaa>
 8006418:	2b70      	cmp	r3, #112	; 0x70
 800641a:	d87b      	bhi.n	8006514 <HAL_TIM_ConfigClockSource+0x170>
 800641c:	2b60      	cmp	r3, #96	; 0x60
 800641e:	d050      	beq.n	80064c2 <HAL_TIM_ConfigClockSource+0x11e>
 8006420:	2b60      	cmp	r3, #96	; 0x60
 8006422:	d877      	bhi.n	8006514 <HAL_TIM_ConfigClockSource+0x170>
 8006424:	2b50      	cmp	r3, #80	; 0x50
 8006426:	d03c      	beq.n	80064a2 <HAL_TIM_ConfigClockSource+0xfe>
 8006428:	2b50      	cmp	r3, #80	; 0x50
 800642a:	d873      	bhi.n	8006514 <HAL_TIM_ConfigClockSource+0x170>
 800642c:	2b40      	cmp	r3, #64	; 0x40
 800642e:	d058      	beq.n	80064e2 <HAL_TIM_ConfigClockSource+0x13e>
 8006430:	2b40      	cmp	r3, #64	; 0x40
 8006432:	d86f      	bhi.n	8006514 <HAL_TIM_ConfigClockSource+0x170>
 8006434:	2b30      	cmp	r3, #48	; 0x30
 8006436:	d064      	beq.n	8006502 <HAL_TIM_ConfigClockSource+0x15e>
 8006438:	2b30      	cmp	r3, #48	; 0x30
 800643a:	d86b      	bhi.n	8006514 <HAL_TIM_ConfigClockSource+0x170>
 800643c:	2b20      	cmp	r3, #32
 800643e:	d060      	beq.n	8006502 <HAL_TIM_ConfigClockSource+0x15e>
 8006440:	2b20      	cmp	r3, #32
 8006442:	d867      	bhi.n	8006514 <HAL_TIM_ConfigClockSource+0x170>
 8006444:	2b00      	cmp	r3, #0
 8006446:	d05c      	beq.n	8006502 <HAL_TIM_ConfigClockSource+0x15e>
 8006448:	2b10      	cmp	r3, #16
 800644a:	d05a      	beq.n	8006502 <HAL_TIM_ConfigClockSource+0x15e>
 800644c:	e062      	b.n	8006514 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6818      	ldr	r0, [r3, #0]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	6899      	ldr	r1, [r3, #8]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	685a      	ldr	r2, [r3, #4]
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	f000 fc55 	bl	8006d0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006470:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	609a      	str	r2, [r3, #8]
      break;
 800647a:	e04f      	b.n	800651c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6818      	ldr	r0, [r3, #0]
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	6899      	ldr	r1, [r3, #8]
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	685a      	ldr	r2, [r3, #4]
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	f000 fc3e 	bl	8006d0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689a      	ldr	r2, [r3, #8]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800649e:	609a      	str	r2, [r3, #8]
      break;
 80064a0:	e03c      	b.n	800651c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6818      	ldr	r0, [r3, #0]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	6859      	ldr	r1, [r3, #4]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	461a      	mov	r2, r3
 80064b0:	f000 fbb2 	bl	8006c18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2150      	movs	r1, #80	; 0x50
 80064ba:	4618      	mov	r0, r3
 80064bc:	f000 fc0b 	bl	8006cd6 <TIM_ITRx_SetConfig>
      break;
 80064c0:	e02c      	b.n	800651c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6818      	ldr	r0, [r3, #0]
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	6859      	ldr	r1, [r3, #4]
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	461a      	mov	r2, r3
 80064d0:	f000 fbd1 	bl	8006c76 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2160      	movs	r1, #96	; 0x60
 80064da:	4618      	mov	r0, r3
 80064dc:	f000 fbfb 	bl	8006cd6 <TIM_ITRx_SetConfig>
      break;
 80064e0:	e01c      	b.n	800651c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6818      	ldr	r0, [r3, #0]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	6859      	ldr	r1, [r3, #4]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	461a      	mov	r2, r3
 80064f0:	f000 fb92 	bl	8006c18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2140      	movs	r1, #64	; 0x40
 80064fa:	4618      	mov	r0, r3
 80064fc:	f000 fbeb 	bl	8006cd6 <TIM_ITRx_SetConfig>
      break;
 8006500:	e00c      	b.n	800651c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4619      	mov	r1, r3
 800650c:	4610      	mov	r0, r2
 800650e:	f000 fbe2 	bl	8006cd6 <TIM_ITRx_SetConfig>
      break;
 8006512:	e003      	b.n	800651c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	73fb      	strb	r3, [r7, #15]
      break;
 8006518:	e000      	b.n	800651c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800651a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800652c:	7bfb      	ldrb	r3, [r7, #15]
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
	...

08006538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a40      	ldr	r2, [pc, #256]	; (800664c <TIM_Base_SetConfig+0x114>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d013      	beq.n	8006578 <TIM_Base_SetConfig+0x40>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006556:	d00f      	beq.n	8006578 <TIM_Base_SetConfig+0x40>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a3d      	ldr	r2, [pc, #244]	; (8006650 <TIM_Base_SetConfig+0x118>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d00b      	beq.n	8006578 <TIM_Base_SetConfig+0x40>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a3c      	ldr	r2, [pc, #240]	; (8006654 <TIM_Base_SetConfig+0x11c>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d007      	beq.n	8006578 <TIM_Base_SetConfig+0x40>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a3b      	ldr	r2, [pc, #236]	; (8006658 <TIM_Base_SetConfig+0x120>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d003      	beq.n	8006578 <TIM_Base_SetConfig+0x40>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a3a      	ldr	r2, [pc, #232]	; (800665c <TIM_Base_SetConfig+0x124>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d108      	bne.n	800658a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800657e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	4313      	orrs	r3, r2
 8006588:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a2f      	ldr	r2, [pc, #188]	; (800664c <TIM_Base_SetConfig+0x114>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d01f      	beq.n	80065d2 <TIM_Base_SetConfig+0x9a>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006598:	d01b      	beq.n	80065d2 <TIM_Base_SetConfig+0x9a>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a2c      	ldr	r2, [pc, #176]	; (8006650 <TIM_Base_SetConfig+0x118>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d017      	beq.n	80065d2 <TIM_Base_SetConfig+0x9a>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a2b      	ldr	r2, [pc, #172]	; (8006654 <TIM_Base_SetConfig+0x11c>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d013      	beq.n	80065d2 <TIM_Base_SetConfig+0x9a>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a2a      	ldr	r2, [pc, #168]	; (8006658 <TIM_Base_SetConfig+0x120>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d00f      	beq.n	80065d2 <TIM_Base_SetConfig+0x9a>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a29      	ldr	r2, [pc, #164]	; (800665c <TIM_Base_SetConfig+0x124>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d00b      	beq.n	80065d2 <TIM_Base_SetConfig+0x9a>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a28      	ldr	r2, [pc, #160]	; (8006660 <TIM_Base_SetConfig+0x128>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d007      	beq.n	80065d2 <TIM_Base_SetConfig+0x9a>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a27      	ldr	r2, [pc, #156]	; (8006664 <TIM_Base_SetConfig+0x12c>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d003      	beq.n	80065d2 <TIM_Base_SetConfig+0x9a>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a26      	ldr	r2, [pc, #152]	; (8006668 <TIM_Base_SetConfig+0x130>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d108      	bne.n	80065e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	689a      	ldr	r2, [r3, #8]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a10      	ldr	r2, [pc, #64]	; (800664c <TIM_Base_SetConfig+0x114>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d00f      	beq.n	8006630 <TIM_Base_SetConfig+0xf8>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a12      	ldr	r2, [pc, #72]	; (800665c <TIM_Base_SetConfig+0x124>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d00b      	beq.n	8006630 <TIM_Base_SetConfig+0xf8>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a11      	ldr	r2, [pc, #68]	; (8006660 <TIM_Base_SetConfig+0x128>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d007      	beq.n	8006630 <TIM_Base_SetConfig+0xf8>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a10      	ldr	r2, [pc, #64]	; (8006664 <TIM_Base_SetConfig+0x12c>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d003      	beq.n	8006630 <TIM_Base_SetConfig+0xf8>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4a0f      	ldr	r2, [pc, #60]	; (8006668 <TIM_Base_SetConfig+0x130>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d103      	bne.n	8006638 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	691a      	ldr	r2, [r3, #16]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	615a      	str	r2, [r3, #20]
}
 800663e:	bf00      	nop
 8006640:	3714      	adds	r7, #20
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	40012c00 	.word	0x40012c00
 8006650:	40000400 	.word	0x40000400
 8006654:	40000800 	.word	0x40000800
 8006658:	40000c00 	.word	0x40000c00
 800665c:	40013400 	.word	0x40013400
 8006660:	40014000 	.word	0x40014000
 8006664:	40014400 	.word	0x40014400
 8006668:	40014800 	.word	0x40014800

0800666c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800666c:	b480      	push	{r7}
 800666e:	b087      	sub	sp, #28
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a1b      	ldr	r3, [r3, #32]
 800667a:	f023 0201 	bic.w	r2, r3, #1
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a1b      	ldr	r3, [r3, #32]
 8006686:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800669a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800669e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f023 0303 	bic.w	r3, r3, #3
 80066a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	f023 0302 	bic.w	r3, r3, #2
 80066b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a2c      	ldr	r2, [pc, #176]	; (8006778 <TIM_OC1_SetConfig+0x10c>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d00f      	beq.n	80066ec <TIM_OC1_SetConfig+0x80>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a2b      	ldr	r2, [pc, #172]	; (800677c <TIM_OC1_SetConfig+0x110>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d00b      	beq.n	80066ec <TIM_OC1_SetConfig+0x80>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a2a      	ldr	r2, [pc, #168]	; (8006780 <TIM_OC1_SetConfig+0x114>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d007      	beq.n	80066ec <TIM_OC1_SetConfig+0x80>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a29      	ldr	r2, [pc, #164]	; (8006784 <TIM_OC1_SetConfig+0x118>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d003      	beq.n	80066ec <TIM_OC1_SetConfig+0x80>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a28      	ldr	r2, [pc, #160]	; (8006788 <TIM_OC1_SetConfig+0x11c>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d10c      	bne.n	8006706 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	f023 0308 	bic.w	r3, r3, #8
 80066f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	f023 0304 	bic.w	r3, r3, #4
 8006704:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a1b      	ldr	r2, [pc, #108]	; (8006778 <TIM_OC1_SetConfig+0x10c>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d00f      	beq.n	800672e <TIM_OC1_SetConfig+0xc2>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a1a      	ldr	r2, [pc, #104]	; (800677c <TIM_OC1_SetConfig+0x110>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d00b      	beq.n	800672e <TIM_OC1_SetConfig+0xc2>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a19      	ldr	r2, [pc, #100]	; (8006780 <TIM_OC1_SetConfig+0x114>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d007      	beq.n	800672e <TIM_OC1_SetConfig+0xc2>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a18      	ldr	r2, [pc, #96]	; (8006784 <TIM_OC1_SetConfig+0x118>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d003      	beq.n	800672e <TIM_OC1_SetConfig+0xc2>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a17      	ldr	r2, [pc, #92]	; (8006788 <TIM_OC1_SetConfig+0x11c>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d111      	bne.n	8006752 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006734:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800673c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	4313      	orrs	r3, r2
 8006746:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	4313      	orrs	r3, r2
 8006750:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	685a      	ldr	r2, [r3, #4]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	697a      	ldr	r2, [r7, #20]
 800676a:	621a      	str	r2, [r3, #32]
}
 800676c:	bf00      	nop
 800676e:	371c      	adds	r7, #28
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr
 8006778:	40012c00 	.word	0x40012c00
 800677c:	40013400 	.word	0x40013400
 8006780:	40014000 	.word	0x40014000
 8006784:	40014400 	.word	0x40014400
 8006788:	40014800 	.word	0x40014800

0800678c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800678c:	b480      	push	{r7}
 800678e:	b087      	sub	sp, #28
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	f023 0210 	bic.w	r2, r3, #16
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a1b      	ldr	r3, [r3, #32]
 80067a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	699b      	ldr	r3, [r3, #24]
 80067b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	021b      	lsls	r3, r3, #8
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	f023 0320 	bic.w	r3, r3, #32
 80067da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	011b      	lsls	r3, r3, #4
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a28      	ldr	r2, [pc, #160]	; (800688c <TIM_OC2_SetConfig+0x100>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d003      	beq.n	80067f8 <TIM_OC2_SetConfig+0x6c>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a27      	ldr	r2, [pc, #156]	; (8006890 <TIM_OC2_SetConfig+0x104>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d10d      	bne.n	8006814 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	011b      	lsls	r3, r3, #4
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	4313      	orrs	r3, r2
 800680a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006812:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a1d      	ldr	r2, [pc, #116]	; (800688c <TIM_OC2_SetConfig+0x100>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d00f      	beq.n	800683c <TIM_OC2_SetConfig+0xb0>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a1c      	ldr	r2, [pc, #112]	; (8006890 <TIM_OC2_SetConfig+0x104>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d00b      	beq.n	800683c <TIM_OC2_SetConfig+0xb0>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a1b      	ldr	r2, [pc, #108]	; (8006894 <TIM_OC2_SetConfig+0x108>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d007      	beq.n	800683c <TIM_OC2_SetConfig+0xb0>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4a1a      	ldr	r2, [pc, #104]	; (8006898 <TIM_OC2_SetConfig+0x10c>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d003      	beq.n	800683c <TIM_OC2_SetConfig+0xb0>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a19      	ldr	r2, [pc, #100]	; (800689c <TIM_OC2_SetConfig+0x110>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d113      	bne.n	8006864 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006842:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800684a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	695b      	ldr	r3, [r3, #20]
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	4313      	orrs	r3, r2
 8006856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	693a      	ldr	r2, [r7, #16]
 8006860:	4313      	orrs	r3, r2
 8006862:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	685a      	ldr	r2, [r3, #4]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	697a      	ldr	r2, [r7, #20]
 800687c:	621a      	str	r2, [r3, #32]
}
 800687e:	bf00      	nop
 8006880:	371c      	adds	r7, #28
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	40012c00 	.word	0x40012c00
 8006890:	40013400 	.word	0x40013400
 8006894:	40014000 	.word	0x40014000
 8006898:	40014400 	.word	0x40014400
 800689c:	40014800 	.word	0x40014800

080068a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b087      	sub	sp, #28
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a1b      	ldr	r3, [r3, #32]
 80068ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	69db      	ldr	r3, [r3, #28]
 80068c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f023 0303 	bic.w	r3, r3, #3
 80068da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	021b      	lsls	r3, r3, #8
 80068f4:	697a      	ldr	r2, [r7, #20]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a27      	ldr	r2, [pc, #156]	; (800699c <TIM_OC3_SetConfig+0xfc>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d003      	beq.n	800690a <TIM_OC3_SetConfig+0x6a>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a26      	ldr	r2, [pc, #152]	; (80069a0 <TIM_OC3_SetConfig+0x100>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d10d      	bne.n	8006926 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006910:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	021b      	lsls	r3, r3, #8
 8006918:	697a      	ldr	r2, [r7, #20]
 800691a:	4313      	orrs	r3, r2
 800691c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006924:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a1c      	ldr	r2, [pc, #112]	; (800699c <TIM_OC3_SetConfig+0xfc>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d00f      	beq.n	800694e <TIM_OC3_SetConfig+0xae>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a1b      	ldr	r2, [pc, #108]	; (80069a0 <TIM_OC3_SetConfig+0x100>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d00b      	beq.n	800694e <TIM_OC3_SetConfig+0xae>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a1a      	ldr	r2, [pc, #104]	; (80069a4 <TIM_OC3_SetConfig+0x104>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d007      	beq.n	800694e <TIM_OC3_SetConfig+0xae>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a19      	ldr	r2, [pc, #100]	; (80069a8 <TIM_OC3_SetConfig+0x108>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d003      	beq.n	800694e <TIM_OC3_SetConfig+0xae>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a18      	ldr	r2, [pc, #96]	; (80069ac <TIM_OC3_SetConfig+0x10c>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d113      	bne.n	8006976 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006954:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800695c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	695b      	ldr	r3, [r3, #20]
 8006962:	011b      	lsls	r3, r3, #4
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	4313      	orrs	r3, r2
 8006968:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	011b      	lsls	r3, r3, #4
 8006970:	693a      	ldr	r2, [r7, #16]
 8006972:	4313      	orrs	r3, r2
 8006974:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	685a      	ldr	r2, [r3, #4]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	697a      	ldr	r2, [r7, #20]
 800698e:	621a      	str	r2, [r3, #32]
}
 8006990:	bf00      	nop
 8006992:	371c      	adds	r7, #28
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr
 800699c:	40012c00 	.word	0x40012c00
 80069a0:	40013400 	.word	0x40013400
 80069a4:	40014000 	.word	0x40014000
 80069a8:	40014400 	.word	0x40014400
 80069ac:	40014800 	.word	0x40014800

080069b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b087      	sub	sp, #28
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	69db      	ldr	r3, [r3, #28]
 80069d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	021b      	lsls	r3, r3, #8
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	031b      	lsls	r3, r3, #12
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a18      	ldr	r2, [pc, #96]	; (8006a70 <TIM_OC4_SetConfig+0xc0>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d00f      	beq.n	8006a34 <TIM_OC4_SetConfig+0x84>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a17      	ldr	r2, [pc, #92]	; (8006a74 <TIM_OC4_SetConfig+0xc4>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d00b      	beq.n	8006a34 <TIM_OC4_SetConfig+0x84>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a16      	ldr	r2, [pc, #88]	; (8006a78 <TIM_OC4_SetConfig+0xc8>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d007      	beq.n	8006a34 <TIM_OC4_SetConfig+0x84>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a15      	ldr	r2, [pc, #84]	; (8006a7c <TIM_OC4_SetConfig+0xcc>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d003      	beq.n	8006a34 <TIM_OC4_SetConfig+0x84>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a14      	ldr	r2, [pc, #80]	; (8006a80 <TIM_OC4_SetConfig+0xd0>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d109      	bne.n	8006a48 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	695b      	ldr	r3, [r3, #20]
 8006a40:	019b      	lsls	r3, r3, #6
 8006a42:	697a      	ldr	r2, [r7, #20]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	685a      	ldr	r2, [r3, #4]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	693a      	ldr	r2, [r7, #16]
 8006a60:	621a      	str	r2, [r3, #32]
}
 8006a62:	bf00      	nop
 8006a64:	371c      	adds	r7, #28
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	40012c00 	.word	0x40012c00
 8006a74:	40013400 	.word	0x40013400
 8006a78:	40014000 	.word	0x40014000
 8006a7c:	40014400 	.word	0x40014400
 8006a80:	40014800 	.word	0x40014800

08006a84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b087      	sub	sp, #28
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006ac8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	041b      	lsls	r3, r3, #16
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a17      	ldr	r2, [pc, #92]	; (8006b38 <TIM_OC5_SetConfig+0xb4>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d00f      	beq.n	8006afe <TIM_OC5_SetConfig+0x7a>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a16      	ldr	r2, [pc, #88]	; (8006b3c <TIM_OC5_SetConfig+0xb8>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d00b      	beq.n	8006afe <TIM_OC5_SetConfig+0x7a>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a15      	ldr	r2, [pc, #84]	; (8006b40 <TIM_OC5_SetConfig+0xbc>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d007      	beq.n	8006afe <TIM_OC5_SetConfig+0x7a>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a14      	ldr	r2, [pc, #80]	; (8006b44 <TIM_OC5_SetConfig+0xc0>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d003      	beq.n	8006afe <TIM_OC5_SetConfig+0x7a>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a13      	ldr	r2, [pc, #76]	; (8006b48 <TIM_OC5_SetConfig+0xc4>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d109      	bne.n	8006b12 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	021b      	lsls	r3, r3, #8
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	685a      	ldr	r2, [r3, #4]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	621a      	str	r2, [r3, #32]
}
 8006b2c:	bf00      	nop
 8006b2e:	371c      	adds	r7, #28
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr
 8006b38:	40012c00 	.word	0x40012c00
 8006b3c:	40013400 	.word	0x40013400
 8006b40:	40014000 	.word	0x40014000
 8006b44:	40014400 	.word	0x40014400
 8006b48:	40014800 	.word	0x40014800

08006b4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b087      	sub	sp, #28
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	021b      	lsls	r3, r3, #8
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	051b      	lsls	r3, r3, #20
 8006b9a:	693a      	ldr	r2, [r7, #16]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a18      	ldr	r2, [pc, #96]	; (8006c04 <TIM_OC6_SetConfig+0xb8>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d00f      	beq.n	8006bc8 <TIM_OC6_SetConfig+0x7c>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a17      	ldr	r2, [pc, #92]	; (8006c08 <TIM_OC6_SetConfig+0xbc>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d00b      	beq.n	8006bc8 <TIM_OC6_SetConfig+0x7c>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a16      	ldr	r2, [pc, #88]	; (8006c0c <TIM_OC6_SetConfig+0xc0>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d007      	beq.n	8006bc8 <TIM_OC6_SetConfig+0x7c>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a15      	ldr	r2, [pc, #84]	; (8006c10 <TIM_OC6_SetConfig+0xc4>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d003      	beq.n	8006bc8 <TIM_OC6_SetConfig+0x7c>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a14      	ldr	r2, [pc, #80]	; (8006c14 <TIM_OC6_SetConfig+0xc8>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d109      	bne.n	8006bdc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	695b      	ldr	r3, [r3, #20]
 8006bd4:	029b      	lsls	r3, r3, #10
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	685a      	ldr	r2, [r3, #4]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	693a      	ldr	r2, [r7, #16]
 8006bf4:	621a      	str	r2, [r3, #32]
}
 8006bf6:	bf00      	nop
 8006bf8:	371c      	adds	r7, #28
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	40012c00 	.word	0x40012c00
 8006c08:	40013400 	.word	0x40013400
 8006c0c:	40014000 	.word	0x40014000
 8006c10:	40014400 	.word	0x40014400
 8006c14:	40014800 	.word	0x40014800

08006c18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b087      	sub	sp, #28
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	f023 0201 	bic.w	r2, r3, #1
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	011b      	lsls	r3, r3, #4
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	f023 030a 	bic.w	r3, r3, #10
 8006c54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	693a      	ldr	r2, [r7, #16]
 8006c62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	697a      	ldr	r2, [r7, #20]
 8006c68:	621a      	str	r2, [r3, #32]
}
 8006c6a:	bf00      	nop
 8006c6c:	371c      	adds	r7, #28
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr

08006c76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c76:	b480      	push	{r7}
 8006c78:	b087      	sub	sp, #28
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	60f8      	str	r0, [r7, #12]
 8006c7e:	60b9      	str	r1, [r7, #8]
 8006c80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6a1b      	ldr	r3, [r3, #32]
 8006c86:	f023 0210 	bic.w	r2, r3, #16
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	699b      	ldr	r3, [r3, #24]
 8006c92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6a1b      	ldr	r3, [r3, #32]
 8006c98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ca0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	031b      	lsls	r3, r3, #12
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006cb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	011b      	lsls	r3, r3, #4
 8006cb8:	693a      	ldr	r2, [r7, #16]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	697a      	ldr	r2, [r7, #20]
 8006cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	693a      	ldr	r2, [r7, #16]
 8006cc8:	621a      	str	r2, [r3, #32]
}
 8006cca:	bf00      	nop
 8006ccc:	371c      	adds	r7, #28
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b085      	sub	sp, #20
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cee:	683a      	ldr	r2, [r7, #0]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	f043 0307 	orr.w	r3, r3, #7
 8006cf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	609a      	str	r2, [r3, #8]
}
 8006d00:	bf00      	nop
 8006d02:	3714      	adds	r7, #20
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b087      	sub	sp, #28
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
 8006d18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	021a      	lsls	r2, r3, #8
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	431a      	orrs	r2, r3
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	697a      	ldr	r2, [r7, #20]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	697a      	ldr	r2, [r7, #20]
 8006d3e:	609a      	str	r2, [r3, #8]
}
 8006d40:	bf00      	nop
 8006d42:	371c      	adds	r7, #28
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b087      	sub	sp, #28
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	f003 031f 	and.w	r3, r3, #31
 8006d5e:	2201      	movs	r2, #1
 8006d60:	fa02 f303 	lsl.w	r3, r2, r3
 8006d64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6a1a      	ldr	r2, [r3, #32]
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	43db      	mvns	r3, r3
 8006d6e:	401a      	ands	r2, r3
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6a1a      	ldr	r2, [r3, #32]
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	f003 031f 	and.w	r3, r3, #31
 8006d7e:	6879      	ldr	r1, [r7, #4]
 8006d80:	fa01 f303 	lsl.w	r3, r1, r3
 8006d84:	431a      	orrs	r2, r3
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	621a      	str	r2, [r3, #32]
}
 8006d8a:	bf00      	nop
 8006d8c:	371c      	adds	r7, #28
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
	...

08006d98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d101      	bne.n	8006db0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006dac:	2302      	movs	r3, #2
 8006dae:	e068      	b.n	8006e82 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2202      	movs	r2, #2
 8006dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a2e      	ldr	r2, [pc, #184]	; (8006e90 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d004      	beq.n	8006de4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a2d      	ldr	r2, [pc, #180]	; (8006e94 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d108      	bne.n	8006df6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006dea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dfc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68fa      	ldr	r2, [r7, #12]
 8006e04:	4313      	orrs	r3, r2
 8006e06:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a1e      	ldr	r2, [pc, #120]	; (8006e90 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d01d      	beq.n	8006e56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e22:	d018      	beq.n	8006e56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a1b      	ldr	r2, [pc, #108]	; (8006e98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d013      	beq.n	8006e56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a1a      	ldr	r2, [pc, #104]	; (8006e9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d00e      	beq.n	8006e56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a18      	ldr	r2, [pc, #96]	; (8006ea0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d009      	beq.n	8006e56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a13      	ldr	r2, [pc, #76]	; (8006e94 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d004      	beq.n	8006e56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a14      	ldr	r2, [pc, #80]	; (8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d10c      	bne.n	8006e70 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	68ba      	ldr	r2, [r7, #8]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68ba      	ldr	r2, [r7, #8]
 8006e6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3714      	adds	r7, #20
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	40012c00 	.word	0x40012c00
 8006e94:	40013400 	.word	0x40013400
 8006e98:	40000400 	.word	0x40000400
 8006e9c:	40000800 	.word	0x40000800
 8006ea0:	40000c00 	.word	0x40000c00
 8006ea4:	40014000 	.word	0x40014000

08006ea8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d101      	bne.n	8006eba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e042      	b.n	8006f40 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d106      	bne.n	8006ed2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f7fb f877 	bl	8001fc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2224      	movs	r2, #36	; 0x24
 8006ed6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f022 0201 	bic.w	r2, r2, #1
 8006ee8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 f8c4 	bl	8007078 <UART_SetConfig>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d101      	bne.n	8006efa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e022      	b.n	8006f40 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d002      	beq.n	8006f08 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 fbb4 	bl	8007670 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	685a      	ldr	r2, [r3, #4]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	689a      	ldr	r2, [r3, #8]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f042 0201 	orr.w	r2, r2, #1
 8006f36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 fc3b 	bl	80077b4 <UART_CheckIdleState>
 8006f3e:	4603      	mov	r3, r0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3708      	adds	r7, #8
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b08a      	sub	sp, #40	; 0x28
 8006f4c:	af02      	add	r7, sp, #8
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	603b      	str	r3, [r7, #0]
 8006f54:	4613      	mov	r3, r2
 8006f56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f5e:	2b20      	cmp	r3, #32
 8006f60:	f040 8084 	bne.w	800706c <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d002      	beq.n	8006f70 <HAL_UART_Transmit+0x28>
 8006f6a:	88fb      	ldrh	r3, [r7, #6]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d101      	bne.n	8006f74 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e07c      	b.n	800706e <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d101      	bne.n	8006f82 <HAL_UART_Transmit+0x3a>
 8006f7e:	2302      	movs	r3, #2
 8006f80:	e075      	b.n	800706e <HAL_UART_Transmit+0x126>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2221      	movs	r2, #33	; 0x21
 8006f96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f9a:	f7fb fb0f 	bl	80025bc <HAL_GetTick>
 8006f9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	88fa      	ldrh	r2, [r7, #6]
 8006fa4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	88fa      	ldrh	r2, [r7, #6]
 8006fac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fb8:	d108      	bne.n	8006fcc <HAL_UART_Transmit+0x84>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d104      	bne.n	8006fcc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	61bb      	str	r3, [r7, #24]
 8006fca:	e003      	b.n	8006fd4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006fdc:	e02d      	b.n	800703a <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	2180      	movs	r1, #128	; 0x80
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f000 fc2e 	bl	800784a <UART_WaitOnFlagUntilTimeout>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d001      	beq.n	8006ff8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e03a      	b.n	800706e <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10b      	bne.n	8007016 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	881a      	ldrh	r2, [r3, #0]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800700a:	b292      	uxth	r2, r2
 800700c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	3302      	adds	r3, #2
 8007012:	61bb      	str	r3, [r7, #24]
 8007014:	e008      	b.n	8007028 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	781a      	ldrb	r2, [r3, #0]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	b292      	uxth	r2, r2
 8007020:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	3301      	adds	r3, #1
 8007026:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800702e:	b29b      	uxth	r3, r3
 8007030:	3b01      	subs	r3, #1
 8007032:	b29a      	uxth	r2, r3
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007040:	b29b      	uxth	r3, r3
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1cb      	bne.n	8006fde <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	9300      	str	r3, [sp, #0]
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	2200      	movs	r2, #0
 800704e:	2140      	movs	r1, #64	; 0x40
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	f000 fbfa 	bl	800784a <UART_WaitOnFlagUntilTimeout>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d001      	beq.n	8007060 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 800705c:	2303      	movs	r3, #3
 800705e:	e006      	b.n	800706e <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2220      	movs	r2, #32
 8007064:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007068:	2300      	movs	r3, #0
 800706a:	e000      	b.n	800706e <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 800706c:	2302      	movs	r3, #2
  }
}
 800706e:	4618      	mov	r0, r3
 8007070:	3720      	adds	r7, #32
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
	...

08007078 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800707c:	b08c      	sub	sp, #48	; 0x30
 800707e:	af00      	add	r7, sp, #0
 8007080:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007082:	2300      	movs	r3, #0
 8007084:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	689a      	ldr	r2, [r3, #8]
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	431a      	orrs	r2, r3
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	431a      	orrs	r2, r3
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	69db      	ldr	r3, [r3, #28]
 800709c:	4313      	orrs	r3, r2
 800709e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	4baa      	ldr	r3, [pc, #680]	; (8007350 <UART_SetConfig+0x2d8>)
 80070a8:	4013      	ands	r3, r2
 80070aa:	697a      	ldr	r2, [r7, #20]
 80070ac:	6812      	ldr	r2, [r2, #0]
 80070ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070b0:	430b      	orrs	r3, r1
 80070b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	68da      	ldr	r2, [r3, #12]
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	430a      	orrs	r2, r1
 80070c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a9f      	ldr	r2, [pc, #636]	; (8007354 <UART_SetConfig+0x2dc>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d004      	beq.n	80070e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	6a1b      	ldr	r3, [r3, #32]
 80070de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070e0:	4313      	orrs	r3, r2
 80070e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80070ee:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	6812      	ldr	r2, [r2, #0]
 80070f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070f8:	430b      	orrs	r3, r1
 80070fa:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007102:	f023 010f 	bic.w	r1, r3, #15
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	430a      	orrs	r2, r1
 8007110:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a90      	ldr	r2, [pc, #576]	; (8007358 <UART_SetConfig+0x2e0>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d125      	bne.n	8007168 <UART_SetConfig+0xf0>
 800711c:	4b8f      	ldr	r3, [pc, #572]	; (800735c <UART_SetConfig+0x2e4>)
 800711e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007122:	f003 0303 	and.w	r3, r3, #3
 8007126:	2b03      	cmp	r3, #3
 8007128:	d81a      	bhi.n	8007160 <UART_SetConfig+0xe8>
 800712a:	a201      	add	r2, pc, #4	; (adr r2, 8007130 <UART_SetConfig+0xb8>)
 800712c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007130:	08007141 	.word	0x08007141
 8007134:	08007151 	.word	0x08007151
 8007138:	08007149 	.word	0x08007149
 800713c:	08007159 	.word	0x08007159
 8007140:	2301      	movs	r3, #1
 8007142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007146:	e116      	b.n	8007376 <UART_SetConfig+0x2fe>
 8007148:	2302      	movs	r3, #2
 800714a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800714e:	e112      	b.n	8007376 <UART_SetConfig+0x2fe>
 8007150:	2304      	movs	r3, #4
 8007152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007156:	e10e      	b.n	8007376 <UART_SetConfig+0x2fe>
 8007158:	2308      	movs	r3, #8
 800715a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800715e:	e10a      	b.n	8007376 <UART_SetConfig+0x2fe>
 8007160:	2310      	movs	r3, #16
 8007162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007166:	e106      	b.n	8007376 <UART_SetConfig+0x2fe>
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a7c      	ldr	r2, [pc, #496]	; (8007360 <UART_SetConfig+0x2e8>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d138      	bne.n	80071e4 <UART_SetConfig+0x16c>
 8007172:	4b7a      	ldr	r3, [pc, #488]	; (800735c <UART_SetConfig+0x2e4>)
 8007174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007178:	f003 030c 	and.w	r3, r3, #12
 800717c:	2b0c      	cmp	r3, #12
 800717e:	d82d      	bhi.n	80071dc <UART_SetConfig+0x164>
 8007180:	a201      	add	r2, pc, #4	; (adr r2, 8007188 <UART_SetConfig+0x110>)
 8007182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007186:	bf00      	nop
 8007188:	080071bd 	.word	0x080071bd
 800718c:	080071dd 	.word	0x080071dd
 8007190:	080071dd 	.word	0x080071dd
 8007194:	080071dd 	.word	0x080071dd
 8007198:	080071cd 	.word	0x080071cd
 800719c:	080071dd 	.word	0x080071dd
 80071a0:	080071dd 	.word	0x080071dd
 80071a4:	080071dd 	.word	0x080071dd
 80071a8:	080071c5 	.word	0x080071c5
 80071ac:	080071dd 	.word	0x080071dd
 80071b0:	080071dd 	.word	0x080071dd
 80071b4:	080071dd 	.word	0x080071dd
 80071b8:	080071d5 	.word	0x080071d5
 80071bc:	2300      	movs	r3, #0
 80071be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071c2:	e0d8      	b.n	8007376 <UART_SetConfig+0x2fe>
 80071c4:	2302      	movs	r3, #2
 80071c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071ca:	e0d4      	b.n	8007376 <UART_SetConfig+0x2fe>
 80071cc:	2304      	movs	r3, #4
 80071ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071d2:	e0d0      	b.n	8007376 <UART_SetConfig+0x2fe>
 80071d4:	2308      	movs	r3, #8
 80071d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071da:	e0cc      	b.n	8007376 <UART_SetConfig+0x2fe>
 80071dc:	2310      	movs	r3, #16
 80071de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071e2:	e0c8      	b.n	8007376 <UART_SetConfig+0x2fe>
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a5e      	ldr	r2, [pc, #376]	; (8007364 <UART_SetConfig+0x2ec>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d125      	bne.n	800723a <UART_SetConfig+0x1c2>
 80071ee:	4b5b      	ldr	r3, [pc, #364]	; (800735c <UART_SetConfig+0x2e4>)
 80071f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80071f8:	2b30      	cmp	r3, #48	; 0x30
 80071fa:	d016      	beq.n	800722a <UART_SetConfig+0x1b2>
 80071fc:	2b30      	cmp	r3, #48	; 0x30
 80071fe:	d818      	bhi.n	8007232 <UART_SetConfig+0x1ba>
 8007200:	2b20      	cmp	r3, #32
 8007202:	d00a      	beq.n	800721a <UART_SetConfig+0x1a2>
 8007204:	2b20      	cmp	r3, #32
 8007206:	d814      	bhi.n	8007232 <UART_SetConfig+0x1ba>
 8007208:	2b00      	cmp	r3, #0
 800720a:	d002      	beq.n	8007212 <UART_SetConfig+0x19a>
 800720c:	2b10      	cmp	r3, #16
 800720e:	d008      	beq.n	8007222 <UART_SetConfig+0x1aa>
 8007210:	e00f      	b.n	8007232 <UART_SetConfig+0x1ba>
 8007212:	2300      	movs	r3, #0
 8007214:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007218:	e0ad      	b.n	8007376 <UART_SetConfig+0x2fe>
 800721a:	2302      	movs	r3, #2
 800721c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007220:	e0a9      	b.n	8007376 <UART_SetConfig+0x2fe>
 8007222:	2304      	movs	r3, #4
 8007224:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007228:	e0a5      	b.n	8007376 <UART_SetConfig+0x2fe>
 800722a:	2308      	movs	r3, #8
 800722c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007230:	e0a1      	b.n	8007376 <UART_SetConfig+0x2fe>
 8007232:	2310      	movs	r3, #16
 8007234:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007238:	e09d      	b.n	8007376 <UART_SetConfig+0x2fe>
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a4a      	ldr	r2, [pc, #296]	; (8007368 <UART_SetConfig+0x2f0>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d125      	bne.n	8007290 <UART_SetConfig+0x218>
 8007244:	4b45      	ldr	r3, [pc, #276]	; (800735c <UART_SetConfig+0x2e4>)
 8007246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800724a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800724e:	2bc0      	cmp	r3, #192	; 0xc0
 8007250:	d016      	beq.n	8007280 <UART_SetConfig+0x208>
 8007252:	2bc0      	cmp	r3, #192	; 0xc0
 8007254:	d818      	bhi.n	8007288 <UART_SetConfig+0x210>
 8007256:	2b80      	cmp	r3, #128	; 0x80
 8007258:	d00a      	beq.n	8007270 <UART_SetConfig+0x1f8>
 800725a:	2b80      	cmp	r3, #128	; 0x80
 800725c:	d814      	bhi.n	8007288 <UART_SetConfig+0x210>
 800725e:	2b00      	cmp	r3, #0
 8007260:	d002      	beq.n	8007268 <UART_SetConfig+0x1f0>
 8007262:	2b40      	cmp	r3, #64	; 0x40
 8007264:	d008      	beq.n	8007278 <UART_SetConfig+0x200>
 8007266:	e00f      	b.n	8007288 <UART_SetConfig+0x210>
 8007268:	2300      	movs	r3, #0
 800726a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800726e:	e082      	b.n	8007376 <UART_SetConfig+0x2fe>
 8007270:	2302      	movs	r3, #2
 8007272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007276:	e07e      	b.n	8007376 <UART_SetConfig+0x2fe>
 8007278:	2304      	movs	r3, #4
 800727a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800727e:	e07a      	b.n	8007376 <UART_SetConfig+0x2fe>
 8007280:	2308      	movs	r3, #8
 8007282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007286:	e076      	b.n	8007376 <UART_SetConfig+0x2fe>
 8007288:	2310      	movs	r3, #16
 800728a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800728e:	e072      	b.n	8007376 <UART_SetConfig+0x2fe>
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a35      	ldr	r2, [pc, #212]	; (800736c <UART_SetConfig+0x2f4>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d12a      	bne.n	80072f0 <UART_SetConfig+0x278>
 800729a:	4b30      	ldr	r3, [pc, #192]	; (800735c <UART_SetConfig+0x2e4>)
 800729c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072a8:	d01a      	beq.n	80072e0 <UART_SetConfig+0x268>
 80072aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072ae:	d81b      	bhi.n	80072e8 <UART_SetConfig+0x270>
 80072b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072b4:	d00c      	beq.n	80072d0 <UART_SetConfig+0x258>
 80072b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072ba:	d815      	bhi.n	80072e8 <UART_SetConfig+0x270>
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d003      	beq.n	80072c8 <UART_SetConfig+0x250>
 80072c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072c4:	d008      	beq.n	80072d8 <UART_SetConfig+0x260>
 80072c6:	e00f      	b.n	80072e8 <UART_SetConfig+0x270>
 80072c8:	2300      	movs	r3, #0
 80072ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072ce:	e052      	b.n	8007376 <UART_SetConfig+0x2fe>
 80072d0:	2302      	movs	r3, #2
 80072d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072d6:	e04e      	b.n	8007376 <UART_SetConfig+0x2fe>
 80072d8:	2304      	movs	r3, #4
 80072da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072de:	e04a      	b.n	8007376 <UART_SetConfig+0x2fe>
 80072e0:	2308      	movs	r3, #8
 80072e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072e6:	e046      	b.n	8007376 <UART_SetConfig+0x2fe>
 80072e8:	2310      	movs	r3, #16
 80072ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072ee:	e042      	b.n	8007376 <UART_SetConfig+0x2fe>
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a17      	ldr	r2, [pc, #92]	; (8007354 <UART_SetConfig+0x2dc>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d13a      	bne.n	8007370 <UART_SetConfig+0x2f8>
 80072fa:	4b18      	ldr	r3, [pc, #96]	; (800735c <UART_SetConfig+0x2e4>)
 80072fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007300:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007304:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007308:	d01a      	beq.n	8007340 <UART_SetConfig+0x2c8>
 800730a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800730e:	d81b      	bhi.n	8007348 <UART_SetConfig+0x2d0>
 8007310:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007314:	d00c      	beq.n	8007330 <UART_SetConfig+0x2b8>
 8007316:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800731a:	d815      	bhi.n	8007348 <UART_SetConfig+0x2d0>
 800731c:	2b00      	cmp	r3, #0
 800731e:	d003      	beq.n	8007328 <UART_SetConfig+0x2b0>
 8007320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007324:	d008      	beq.n	8007338 <UART_SetConfig+0x2c0>
 8007326:	e00f      	b.n	8007348 <UART_SetConfig+0x2d0>
 8007328:	2300      	movs	r3, #0
 800732a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800732e:	e022      	b.n	8007376 <UART_SetConfig+0x2fe>
 8007330:	2302      	movs	r3, #2
 8007332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007336:	e01e      	b.n	8007376 <UART_SetConfig+0x2fe>
 8007338:	2304      	movs	r3, #4
 800733a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800733e:	e01a      	b.n	8007376 <UART_SetConfig+0x2fe>
 8007340:	2308      	movs	r3, #8
 8007342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007346:	e016      	b.n	8007376 <UART_SetConfig+0x2fe>
 8007348:	2310      	movs	r3, #16
 800734a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800734e:	e012      	b.n	8007376 <UART_SetConfig+0x2fe>
 8007350:	cfff69f3 	.word	0xcfff69f3
 8007354:	40008000 	.word	0x40008000
 8007358:	40013800 	.word	0x40013800
 800735c:	40021000 	.word	0x40021000
 8007360:	40004400 	.word	0x40004400
 8007364:	40004800 	.word	0x40004800
 8007368:	40004c00 	.word	0x40004c00
 800736c:	40005000 	.word	0x40005000
 8007370:	2310      	movs	r3, #16
 8007372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4aae      	ldr	r2, [pc, #696]	; (8007634 <UART_SetConfig+0x5bc>)
 800737c:	4293      	cmp	r3, r2
 800737e:	f040 8097 	bne.w	80074b0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007382:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007386:	2b08      	cmp	r3, #8
 8007388:	d823      	bhi.n	80073d2 <UART_SetConfig+0x35a>
 800738a:	a201      	add	r2, pc, #4	; (adr r2, 8007390 <UART_SetConfig+0x318>)
 800738c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007390:	080073b5 	.word	0x080073b5
 8007394:	080073d3 	.word	0x080073d3
 8007398:	080073bd 	.word	0x080073bd
 800739c:	080073d3 	.word	0x080073d3
 80073a0:	080073c3 	.word	0x080073c3
 80073a4:	080073d3 	.word	0x080073d3
 80073a8:	080073d3 	.word	0x080073d3
 80073ac:	080073d3 	.word	0x080073d3
 80073b0:	080073cb 	.word	0x080073cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073b4:	f7fd fb06 	bl	80049c4 <HAL_RCC_GetPCLK1Freq>
 80073b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073ba:	e010      	b.n	80073de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073bc:	4b9e      	ldr	r3, [pc, #632]	; (8007638 <UART_SetConfig+0x5c0>)
 80073be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80073c0:	e00d      	b.n	80073de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073c2:	f7fd fa67 	bl	8004894 <HAL_RCC_GetSysClockFreq>
 80073c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073c8:	e009      	b.n	80073de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80073d0:	e005      	b.n	80073de <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80073d2:	2300      	movs	r3, #0
 80073d4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80073dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80073de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f000 8130 	beq.w	8007646 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ea:	4a94      	ldr	r2, [pc, #592]	; (800763c <UART_SetConfig+0x5c4>)
 80073ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073f0:	461a      	mov	r2, r3
 80073f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80073f8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	685a      	ldr	r2, [r3, #4]
 80073fe:	4613      	mov	r3, r2
 8007400:	005b      	lsls	r3, r3, #1
 8007402:	4413      	add	r3, r2
 8007404:	69ba      	ldr	r2, [r7, #24]
 8007406:	429a      	cmp	r2, r3
 8007408:	d305      	bcc.n	8007416 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007410:	69ba      	ldr	r2, [r7, #24]
 8007412:	429a      	cmp	r2, r3
 8007414:	d903      	bls.n	800741e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800741c:	e113      	b.n	8007646 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800741e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007420:	2200      	movs	r2, #0
 8007422:	60bb      	str	r3, [r7, #8]
 8007424:	60fa      	str	r2, [r7, #12]
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742a:	4a84      	ldr	r2, [pc, #528]	; (800763c <UART_SetConfig+0x5c4>)
 800742c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007430:	b29b      	uxth	r3, r3
 8007432:	2200      	movs	r2, #0
 8007434:	603b      	str	r3, [r7, #0]
 8007436:	607a      	str	r2, [r7, #4]
 8007438:	e9d7 2300 	ldrd	r2, r3, [r7]
 800743c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007440:	f7f9 fc1a 	bl	8000c78 <__aeabi_uldivmod>
 8007444:	4602      	mov	r2, r0
 8007446:	460b      	mov	r3, r1
 8007448:	4610      	mov	r0, r2
 800744a:	4619      	mov	r1, r3
 800744c:	f04f 0200 	mov.w	r2, #0
 8007450:	f04f 0300 	mov.w	r3, #0
 8007454:	020b      	lsls	r3, r1, #8
 8007456:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800745a:	0202      	lsls	r2, r0, #8
 800745c:	6979      	ldr	r1, [r7, #20]
 800745e:	6849      	ldr	r1, [r1, #4]
 8007460:	0849      	lsrs	r1, r1, #1
 8007462:	2000      	movs	r0, #0
 8007464:	460c      	mov	r4, r1
 8007466:	4605      	mov	r5, r0
 8007468:	eb12 0804 	adds.w	r8, r2, r4
 800746c:	eb43 0905 	adc.w	r9, r3, r5
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	469a      	mov	sl, r3
 8007478:	4693      	mov	fp, r2
 800747a:	4652      	mov	r2, sl
 800747c:	465b      	mov	r3, fp
 800747e:	4640      	mov	r0, r8
 8007480:	4649      	mov	r1, r9
 8007482:	f7f9 fbf9 	bl	8000c78 <__aeabi_uldivmod>
 8007486:	4602      	mov	r2, r0
 8007488:	460b      	mov	r3, r1
 800748a:	4613      	mov	r3, r2
 800748c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800748e:	6a3b      	ldr	r3, [r7, #32]
 8007490:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007494:	d308      	bcc.n	80074a8 <UART_SetConfig+0x430>
 8007496:	6a3b      	ldr	r3, [r7, #32]
 8007498:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800749c:	d204      	bcs.n	80074a8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	6a3a      	ldr	r2, [r7, #32]
 80074a4:	60da      	str	r2, [r3, #12]
 80074a6:	e0ce      	b.n	8007646 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80074ae:	e0ca      	b.n	8007646 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	69db      	ldr	r3, [r3, #28]
 80074b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074b8:	d166      	bne.n	8007588 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80074ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80074be:	2b08      	cmp	r3, #8
 80074c0:	d827      	bhi.n	8007512 <UART_SetConfig+0x49a>
 80074c2:	a201      	add	r2, pc, #4	; (adr r2, 80074c8 <UART_SetConfig+0x450>)
 80074c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c8:	080074ed 	.word	0x080074ed
 80074cc:	080074f5 	.word	0x080074f5
 80074d0:	080074fd 	.word	0x080074fd
 80074d4:	08007513 	.word	0x08007513
 80074d8:	08007503 	.word	0x08007503
 80074dc:	08007513 	.word	0x08007513
 80074e0:	08007513 	.word	0x08007513
 80074e4:	08007513 	.word	0x08007513
 80074e8:	0800750b 	.word	0x0800750b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074ec:	f7fd fa6a 	bl	80049c4 <HAL_RCC_GetPCLK1Freq>
 80074f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80074f2:	e014      	b.n	800751e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074f4:	f7fd fa7c 	bl	80049f0 <HAL_RCC_GetPCLK2Freq>
 80074f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80074fa:	e010      	b.n	800751e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074fc:	4b4e      	ldr	r3, [pc, #312]	; (8007638 <UART_SetConfig+0x5c0>)
 80074fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007500:	e00d      	b.n	800751e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007502:	f7fd f9c7 	bl	8004894 <HAL_RCC_GetSysClockFreq>
 8007506:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007508:	e009      	b.n	800751e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800750a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800750e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007510:	e005      	b.n	800751e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007512:	2300      	movs	r3, #0
 8007514:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800751c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800751e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007520:	2b00      	cmp	r3, #0
 8007522:	f000 8090 	beq.w	8007646 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752a:	4a44      	ldr	r2, [pc, #272]	; (800763c <UART_SetConfig+0x5c4>)
 800752c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007530:	461a      	mov	r2, r3
 8007532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007534:	fbb3 f3f2 	udiv	r3, r3, r2
 8007538:	005a      	lsls	r2, r3, #1
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	085b      	lsrs	r3, r3, #1
 8007540:	441a      	add	r2, r3
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	fbb2 f3f3 	udiv	r3, r2, r3
 800754a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800754c:	6a3b      	ldr	r3, [r7, #32]
 800754e:	2b0f      	cmp	r3, #15
 8007550:	d916      	bls.n	8007580 <UART_SetConfig+0x508>
 8007552:	6a3b      	ldr	r3, [r7, #32]
 8007554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007558:	d212      	bcs.n	8007580 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800755a:	6a3b      	ldr	r3, [r7, #32]
 800755c:	b29b      	uxth	r3, r3
 800755e:	f023 030f 	bic.w	r3, r3, #15
 8007562:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007564:	6a3b      	ldr	r3, [r7, #32]
 8007566:	085b      	lsrs	r3, r3, #1
 8007568:	b29b      	uxth	r3, r3
 800756a:	f003 0307 	and.w	r3, r3, #7
 800756e:	b29a      	uxth	r2, r3
 8007570:	8bfb      	ldrh	r3, [r7, #30]
 8007572:	4313      	orrs	r3, r2
 8007574:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	8bfa      	ldrh	r2, [r7, #30]
 800757c:	60da      	str	r2, [r3, #12]
 800757e:	e062      	b.n	8007646 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007586:	e05e      	b.n	8007646 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007588:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800758c:	2b08      	cmp	r3, #8
 800758e:	d828      	bhi.n	80075e2 <UART_SetConfig+0x56a>
 8007590:	a201      	add	r2, pc, #4	; (adr r2, 8007598 <UART_SetConfig+0x520>)
 8007592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007596:	bf00      	nop
 8007598:	080075bd 	.word	0x080075bd
 800759c:	080075c5 	.word	0x080075c5
 80075a0:	080075cd 	.word	0x080075cd
 80075a4:	080075e3 	.word	0x080075e3
 80075a8:	080075d3 	.word	0x080075d3
 80075ac:	080075e3 	.word	0x080075e3
 80075b0:	080075e3 	.word	0x080075e3
 80075b4:	080075e3 	.word	0x080075e3
 80075b8:	080075db 	.word	0x080075db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075bc:	f7fd fa02 	bl	80049c4 <HAL_RCC_GetPCLK1Freq>
 80075c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075c2:	e014      	b.n	80075ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075c4:	f7fd fa14 	bl	80049f0 <HAL_RCC_GetPCLK2Freq>
 80075c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075ca:	e010      	b.n	80075ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075cc:	4b1a      	ldr	r3, [pc, #104]	; (8007638 <UART_SetConfig+0x5c0>)
 80075ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80075d0:	e00d      	b.n	80075ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075d2:	f7fd f95f 	bl	8004894 <HAL_RCC_GetSysClockFreq>
 80075d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075d8:	e009      	b.n	80075ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80075e0:	e005      	b.n	80075ee <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80075e2:	2300      	movs	r3, #0
 80075e4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80075ec:	bf00      	nop
    }

    if (pclk != 0U)
 80075ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d028      	beq.n	8007646 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f8:	4a10      	ldr	r2, [pc, #64]	; (800763c <UART_SetConfig+0x5c4>)
 80075fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075fe:	461a      	mov	r2, r3
 8007600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007602:	fbb3 f2f2 	udiv	r2, r3, r2
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	085b      	lsrs	r3, r3, #1
 800760c:	441a      	add	r2, r3
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	fbb2 f3f3 	udiv	r3, r2, r3
 8007616:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007618:	6a3b      	ldr	r3, [r7, #32]
 800761a:	2b0f      	cmp	r3, #15
 800761c:	d910      	bls.n	8007640 <UART_SetConfig+0x5c8>
 800761e:	6a3b      	ldr	r3, [r7, #32]
 8007620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007624:	d20c      	bcs.n	8007640 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007626:	6a3b      	ldr	r3, [r7, #32]
 8007628:	b29a      	uxth	r2, r3
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	60da      	str	r2, [r3, #12]
 8007630:	e009      	b.n	8007646 <UART_SetConfig+0x5ce>
 8007632:	bf00      	nop
 8007634:	40008000 	.word	0x40008000
 8007638:	00f42400 	.word	0x00f42400
 800763c:	0800b034 	.word	0x0800b034
      }
      else
      {
        ret = HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	2201      	movs	r2, #1
 800764a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	2201      	movs	r2, #1
 8007652:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	2200      	movs	r2, #0
 800765a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	2200      	movs	r2, #0
 8007660:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007662:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007666:	4618      	mov	r0, r3
 8007668:	3730      	adds	r7, #48	; 0x30
 800766a:	46bd      	mov	sp, r7
 800766c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007670 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767c:	f003 0301 	and.w	r3, r3, #1
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00a      	beq.n	800769a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	430a      	orrs	r2, r1
 8007698:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769e:	f003 0302 	and.w	r3, r3, #2
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00a      	beq.n	80076bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	430a      	orrs	r2, r1
 80076ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c0:	f003 0304 	and.w	r3, r3, #4
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00a      	beq.n	80076de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	430a      	orrs	r2, r1
 80076dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e2:	f003 0308 	and.w	r3, r3, #8
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00a      	beq.n	8007700 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	430a      	orrs	r2, r1
 80076fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007704:	f003 0310 	and.w	r3, r3, #16
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00a      	beq.n	8007722 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	430a      	orrs	r2, r1
 8007720:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007726:	f003 0320 	and.w	r3, r3, #32
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00a      	beq.n	8007744 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	430a      	orrs	r2, r1
 8007742:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800774c:	2b00      	cmp	r3, #0
 800774e:	d01a      	beq.n	8007786 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	430a      	orrs	r2, r1
 8007764:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800776a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800776e:	d10a      	bne.n	8007786 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	430a      	orrs	r2, r1
 8007784:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800778a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00a      	beq.n	80077a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	430a      	orrs	r2, r1
 80077a6:	605a      	str	r2, [r3, #4]
  }
}
 80077a8:	bf00      	nop
 80077aa:	370c      	adds	r7, #12
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b086      	sub	sp, #24
 80077b8:	af02      	add	r7, sp, #8
 80077ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80077c4:	f7fa fefa 	bl	80025bc <HAL_GetTick>
 80077c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 0308 	and.w	r3, r3, #8
 80077d4:	2b08      	cmp	r3, #8
 80077d6:	d10e      	bne.n	80077f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077dc:	9300      	str	r3, [sp, #0]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 f82f 	bl	800784a <UART_WaitOnFlagUntilTimeout>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d001      	beq.n	80077f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077f2:	2303      	movs	r3, #3
 80077f4:	e025      	b.n	8007842 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f003 0304 	and.w	r3, r3, #4
 8007800:	2b04      	cmp	r3, #4
 8007802:	d10e      	bne.n	8007822 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007804:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007808:	9300      	str	r3, [sp, #0]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2200      	movs	r2, #0
 800780e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f819 	bl	800784a <UART_WaitOnFlagUntilTimeout>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d001      	beq.n	8007822 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800781e:	2303      	movs	r3, #3
 8007820:	e00f      	b.n	8007842 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2220      	movs	r2, #32
 8007826:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2220      	movs	r2, #32
 800782e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007840:	2300      	movs	r3, #0
}
 8007842:	4618      	mov	r0, r3
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}

0800784a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800784a:	b580      	push	{r7, lr}
 800784c:	b09c      	sub	sp, #112	; 0x70
 800784e:	af00      	add	r7, sp, #0
 8007850:	60f8      	str	r0, [r7, #12]
 8007852:	60b9      	str	r1, [r7, #8]
 8007854:	603b      	str	r3, [r7, #0]
 8007856:	4613      	mov	r3, r2
 8007858:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800785a:	e0a9      	b.n	80079b0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800785c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800785e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007862:	f000 80a5 	beq.w	80079b0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007866:	f7fa fea9 	bl	80025bc <HAL_GetTick>
 800786a:	4602      	mov	r2, r0
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	1ad3      	subs	r3, r2, r3
 8007870:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007872:	429a      	cmp	r2, r3
 8007874:	d302      	bcc.n	800787c <UART_WaitOnFlagUntilTimeout+0x32>
 8007876:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007878:	2b00      	cmp	r3, #0
 800787a:	d140      	bne.n	80078fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007884:	e853 3f00 	ldrex	r3, [r3]
 8007888:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800788a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800788c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007890:	667b      	str	r3, [r7, #100]	; 0x64
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	461a      	mov	r2, r3
 8007898:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800789a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800789c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80078a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80078a2:	e841 2300 	strex	r3, r2, [r1]
 80078a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80078a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d1e6      	bne.n	800787c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	3308      	adds	r3, #8
 80078b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078b8:	e853 3f00 	ldrex	r3, [r3]
 80078bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c0:	f023 0301 	bic.w	r3, r3, #1
 80078c4:	663b      	str	r3, [r7, #96]	; 0x60
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	3308      	adds	r3, #8
 80078cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80078ce:	64ba      	str	r2, [r7, #72]	; 0x48
 80078d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80078d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078d6:	e841 2300 	strex	r3, r2, [r1]
 80078da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80078dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d1e5      	bne.n	80078ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2220      	movs	r2, #32
 80078e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2220      	movs	r2, #32
 80078ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80078fa:	2303      	movs	r3, #3
 80078fc:	e069      	b.n	80079d2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 0304 	and.w	r3, r3, #4
 8007908:	2b00      	cmp	r3, #0
 800790a:	d051      	beq.n	80079b0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	69db      	ldr	r3, [r3, #28]
 8007912:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007916:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800791a:	d149      	bne.n	80079b0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007924:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792e:	e853 3f00 	ldrex	r3, [r3]
 8007932:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007936:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800793a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	461a      	mov	r2, r3
 8007942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007944:	637b      	str	r3, [r7, #52]	; 0x34
 8007946:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007948:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800794a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800794c:	e841 2300 	strex	r3, r2, [r1]
 8007950:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1e6      	bne.n	8007926 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	3308      	adds	r3, #8
 800795e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	e853 3f00 	ldrex	r3, [r3]
 8007966:	613b      	str	r3, [r7, #16]
   return(result);
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	f023 0301 	bic.w	r3, r3, #1
 800796e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	3308      	adds	r3, #8
 8007976:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007978:	623a      	str	r2, [r7, #32]
 800797a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797c:	69f9      	ldr	r1, [r7, #28]
 800797e:	6a3a      	ldr	r2, [r7, #32]
 8007980:	e841 2300 	strex	r3, r2, [r1]
 8007984:	61bb      	str	r3, [r7, #24]
   return(result);
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d1e5      	bne.n	8007958 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2220      	movs	r2, #32
 8007990:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2220      	movs	r2, #32
 8007998:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2220      	movs	r2, #32
 80079a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80079ac:	2303      	movs	r3, #3
 80079ae:	e010      	b.n	80079d2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	69da      	ldr	r2, [r3, #28]
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	4013      	ands	r3, r2
 80079ba:	68ba      	ldr	r2, [r7, #8]
 80079bc:	429a      	cmp	r2, r3
 80079be:	bf0c      	ite	eq
 80079c0:	2301      	moveq	r3, #1
 80079c2:	2300      	movne	r3, #0
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	461a      	mov	r2, r3
 80079c8:	79fb      	ldrb	r3, [r7, #7]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	f43f af46 	beq.w	800785c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3770      	adds	r7, #112	; 0x70
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80079da:	b480      	push	{r7}
 80079dc:	b085      	sub	sp, #20
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d101      	bne.n	80079f0 <HAL_UARTEx_DisableFifoMode+0x16>
 80079ec:	2302      	movs	r3, #2
 80079ee:	e027      	b.n	8007a40 <HAL_UARTEx_DisableFifoMode+0x66>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2224      	movs	r2, #36	; 0x24
 80079fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f022 0201 	bic.w	r2, r2, #1
 8007a16:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007a1e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2220      	movs	r2, #32
 8007a32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3714      	adds	r7, #20
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d101      	bne.n	8007a64 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007a60:	2302      	movs	r3, #2
 8007a62:	e02d      	b.n	8007ac0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2224      	movs	r2, #36	; 0x24
 8007a70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f022 0201 	bic.w	r2, r2, #1
 8007a8a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	683a      	ldr	r2, [r7, #0]
 8007a9c:	430a      	orrs	r2, r1
 8007a9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 f84f 	bl	8007b44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2220      	movs	r2, #32
 8007ab2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3710      	adds	r7, #16
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d101      	bne.n	8007ae0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007adc:	2302      	movs	r3, #2
 8007ade:	e02d      	b.n	8007b3c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2224      	movs	r2, #36	; 0x24
 8007aec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f022 0201 	bic.w	r2, r2, #1
 8007b06:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	683a      	ldr	r2, [r7, #0]
 8007b18:	430a      	orrs	r2, r1
 8007b1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 f811 	bl	8007b44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2220      	movs	r2, #32
 8007b2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d108      	bne.n	8007b66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007b64:	e031      	b.n	8007bca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007b66:	2308      	movs	r3, #8
 8007b68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007b6a:	2308      	movs	r3, #8
 8007b6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	0e5b      	lsrs	r3, r3, #25
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	f003 0307 	and.w	r3, r3, #7
 8007b7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	0f5b      	lsrs	r3, r3, #29
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	f003 0307 	and.w	r3, r3, #7
 8007b8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b8e:	7bbb      	ldrb	r3, [r7, #14]
 8007b90:	7b3a      	ldrb	r2, [r7, #12]
 8007b92:	4911      	ldr	r1, [pc, #68]	; (8007bd8 <UARTEx_SetNbDataToProcess+0x94>)
 8007b94:	5c8a      	ldrb	r2, [r1, r2]
 8007b96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007b9a:	7b3a      	ldrb	r2, [r7, #12]
 8007b9c:	490f      	ldr	r1, [pc, #60]	; (8007bdc <UARTEx_SetNbDataToProcess+0x98>)
 8007b9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ba0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ba4:	b29a      	uxth	r2, r3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bac:	7bfb      	ldrb	r3, [r7, #15]
 8007bae:	7b7a      	ldrb	r2, [r7, #13]
 8007bb0:	4909      	ldr	r1, [pc, #36]	; (8007bd8 <UARTEx_SetNbDataToProcess+0x94>)
 8007bb2:	5c8a      	ldrb	r2, [r1, r2]
 8007bb4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007bb8:	7b7a      	ldrb	r2, [r7, #13]
 8007bba:	4908      	ldr	r1, [pc, #32]	; (8007bdc <UARTEx_SetNbDataToProcess+0x98>)
 8007bbc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bbe:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bc2:	b29a      	uxth	r2, r3
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007bca:	bf00      	nop
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	0800b04c 	.word	0x0800b04c
 8007bdc:	0800b054 	.word	0x0800b054

08007be0 <__errno>:
 8007be0:	4b01      	ldr	r3, [pc, #4]	; (8007be8 <__errno+0x8>)
 8007be2:	6818      	ldr	r0, [r3, #0]
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	2000000c 	.word	0x2000000c

08007bec <__libc_init_array>:
 8007bec:	b570      	push	{r4, r5, r6, lr}
 8007bee:	4d0d      	ldr	r5, [pc, #52]	; (8007c24 <__libc_init_array+0x38>)
 8007bf0:	4c0d      	ldr	r4, [pc, #52]	; (8007c28 <__libc_init_array+0x3c>)
 8007bf2:	1b64      	subs	r4, r4, r5
 8007bf4:	10a4      	asrs	r4, r4, #2
 8007bf6:	2600      	movs	r6, #0
 8007bf8:	42a6      	cmp	r6, r4
 8007bfa:	d109      	bne.n	8007c10 <__libc_init_array+0x24>
 8007bfc:	4d0b      	ldr	r5, [pc, #44]	; (8007c2c <__libc_init_array+0x40>)
 8007bfe:	4c0c      	ldr	r4, [pc, #48]	; (8007c30 <__libc_init_array+0x44>)
 8007c00:	f003 f9d2 	bl	800afa8 <_init>
 8007c04:	1b64      	subs	r4, r4, r5
 8007c06:	10a4      	asrs	r4, r4, #2
 8007c08:	2600      	movs	r6, #0
 8007c0a:	42a6      	cmp	r6, r4
 8007c0c:	d105      	bne.n	8007c1a <__libc_init_array+0x2e>
 8007c0e:	bd70      	pop	{r4, r5, r6, pc}
 8007c10:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c14:	4798      	blx	r3
 8007c16:	3601      	adds	r6, #1
 8007c18:	e7ee      	b.n	8007bf8 <__libc_init_array+0xc>
 8007c1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c1e:	4798      	blx	r3
 8007c20:	3601      	adds	r6, #1
 8007c22:	e7f2      	b.n	8007c0a <__libc_init_array+0x1e>
 8007c24:	0800b470 	.word	0x0800b470
 8007c28:	0800b470 	.word	0x0800b470
 8007c2c:	0800b470 	.word	0x0800b470
 8007c30:	0800b474 	.word	0x0800b474

08007c34 <malloc>:
 8007c34:	4b02      	ldr	r3, [pc, #8]	; (8007c40 <malloc+0xc>)
 8007c36:	4601      	mov	r1, r0
 8007c38:	6818      	ldr	r0, [r3, #0]
 8007c3a:	f000 b877 	b.w	8007d2c <_malloc_r>
 8007c3e:	bf00      	nop
 8007c40:	2000000c 	.word	0x2000000c

08007c44 <memset>:
 8007c44:	4402      	add	r2, r0
 8007c46:	4603      	mov	r3, r0
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d100      	bne.n	8007c4e <memset+0xa>
 8007c4c:	4770      	bx	lr
 8007c4e:	f803 1b01 	strb.w	r1, [r3], #1
 8007c52:	e7f9      	b.n	8007c48 <memset+0x4>

08007c54 <_free_r>:
 8007c54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c56:	2900      	cmp	r1, #0
 8007c58:	d044      	beq.n	8007ce4 <_free_r+0x90>
 8007c5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c5e:	9001      	str	r0, [sp, #4]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f1a1 0404 	sub.w	r4, r1, #4
 8007c66:	bfb8      	it	lt
 8007c68:	18e4      	addlt	r4, r4, r3
 8007c6a:	f001 ff49 	bl	8009b00 <__malloc_lock>
 8007c6e:	4a1e      	ldr	r2, [pc, #120]	; (8007ce8 <_free_r+0x94>)
 8007c70:	9801      	ldr	r0, [sp, #4]
 8007c72:	6813      	ldr	r3, [r2, #0]
 8007c74:	b933      	cbnz	r3, 8007c84 <_free_r+0x30>
 8007c76:	6063      	str	r3, [r4, #4]
 8007c78:	6014      	str	r4, [r2, #0]
 8007c7a:	b003      	add	sp, #12
 8007c7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c80:	f001 bf44 	b.w	8009b0c <__malloc_unlock>
 8007c84:	42a3      	cmp	r3, r4
 8007c86:	d908      	bls.n	8007c9a <_free_r+0x46>
 8007c88:	6825      	ldr	r5, [r4, #0]
 8007c8a:	1961      	adds	r1, r4, r5
 8007c8c:	428b      	cmp	r3, r1
 8007c8e:	bf01      	itttt	eq
 8007c90:	6819      	ldreq	r1, [r3, #0]
 8007c92:	685b      	ldreq	r3, [r3, #4]
 8007c94:	1949      	addeq	r1, r1, r5
 8007c96:	6021      	streq	r1, [r4, #0]
 8007c98:	e7ed      	b.n	8007c76 <_free_r+0x22>
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	b10b      	cbz	r3, 8007ca4 <_free_r+0x50>
 8007ca0:	42a3      	cmp	r3, r4
 8007ca2:	d9fa      	bls.n	8007c9a <_free_r+0x46>
 8007ca4:	6811      	ldr	r1, [r2, #0]
 8007ca6:	1855      	adds	r5, r2, r1
 8007ca8:	42a5      	cmp	r5, r4
 8007caa:	d10b      	bne.n	8007cc4 <_free_r+0x70>
 8007cac:	6824      	ldr	r4, [r4, #0]
 8007cae:	4421      	add	r1, r4
 8007cb0:	1854      	adds	r4, r2, r1
 8007cb2:	42a3      	cmp	r3, r4
 8007cb4:	6011      	str	r1, [r2, #0]
 8007cb6:	d1e0      	bne.n	8007c7a <_free_r+0x26>
 8007cb8:	681c      	ldr	r4, [r3, #0]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	6053      	str	r3, [r2, #4]
 8007cbe:	4421      	add	r1, r4
 8007cc0:	6011      	str	r1, [r2, #0]
 8007cc2:	e7da      	b.n	8007c7a <_free_r+0x26>
 8007cc4:	d902      	bls.n	8007ccc <_free_r+0x78>
 8007cc6:	230c      	movs	r3, #12
 8007cc8:	6003      	str	r3, [r0, #0]
 8007cca:	e7d6      	b.n	8007c7a <_free_r+0x26>
 8007ccc:	6825      	ldr	r5, [r4, #0]
 8007cce:	1961      	adds	r1, r4, r5
 8007cd0:	428b      	cmp	r3, r1
 8007cd2:	bf04      	itt	eq
 8007cd4:	6819      	ldreq	r1, [r3, #0]
 8007cd6:	685b      	ldreq	r3, [r3, #4]
 8007cd8:	6063      	str	r3, [r4, #4]
 8007cda:	bf04      	itt	eq
 8007cdc:	1949      	addeq	r1, r1, r5
 8007cde:	6021      	streq	r1, [r4, #0]
 8007ce0:	6054      	str	r4, [r2, #4]
 8007ce2:	e7ca      	b.n	8007c7a <_free_r+0x26>
 8007ce4:	b003      	add	sp, #12
 8007ce6:	bd30      	pop	{r4, r5, pc}
 8007ce8:	20000464 	.word	0x20000464

08007cec <sbrk_aligned>:
 8007cec:	b570      	push	{r4, r5, r6, lr}
 8007cee:	4e0e      	ldr	r6, [pc, #56]	; (8007d28 <sbrk_aligned+0x3c>)
 8007cf0:	460c      	mov	r4, r1
 8007cf2:	6831      	ldr	r1, [r6, #0]
 8007cf4:	4605      	mov	r5, r0
 8007cf6:	b911      	cbnz	r1, 8007cfe <sbrk_aligned+0x12>
 8007cf8:	f000 fd84 	bl	8008804 <_sbrk_r>
 8007cfc:	6030      	str	r0, [r6, #0]
 8007cfe:	4621      	mov	r1, r4
 8007d00:	4628      	mov	r0, r5
 8007d02:	f000 fd7f 	bl	8008804 <_sbrk_r>
 8007d06:	1c43      	adds	r3, r0, #1
 8007d08:	d00a      	beq.n	8007d20 <sbrk_aligned+0x34>
 8007d0a:	1cc4      	adds	r4, r0, #3
 8007d0c:	f024 0403 	bic.w	r4, r4, #3
 8007d10:	42a0      	cmp	r0, r4
 8007d12:	d007      	beq.n	8007d24 <sbrk_aligned+0x38>
 8007d14:	1a21      	subs	r1, r4, r0
 8007d16:	4628      	mov	r0, r5
 8007d18:	f000 fd74 	bl	8008804 <_sbrk_r>
 8007d1c:	3001      	adds	r0, #1
 8007d1e:	d101      	bne.n	8007d24 <sbrk_aligned+0x38>
 8007d20:	f04f 34ff 	mov.w	r4, #4294967295
 8007d24:	4620      	mov	r0, r4
 8007d26:	bd70      	pop	{r4, r5, r6, pc}
 8007d28:	20000468 	.word	0x20000468

08007d2c <_malloc_r>:
 8007d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d30:	1ccd      	adds	r5, r1, #3
 8007d32:	f025 0503 	bic.w	r5, r5, #3
 8007d36:	3508      	adds	r5, #8
 8007d38:	2d0c      	cmp	r5, #12
 8007d3a:	bf38      	it	cc
 8007d3c:	250c      	movcc	r5, #12
 8007d3e:	2d00      	cmp	r5, #0
 8007d40:	4607      	mov	r7, r0
 8007d42:	db01      	blt.n	8007d48 <_malloc_r+0x1c>
 8007d44:	42a9      	cmp	r1, r5
 8007d46:	d905      	bls.n	8007d54 <_malloc_r+0x28>
 8007d48:	230c      	movs	r3, #12
 8007d4a:	603b      	str	r3, [r7, #0]
 8007d4c:	2600      	movs	r6, #0
 8007d4e:	4630      	mov	r0, r6
 8007d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d54:	4e2e      	ldr	r6, [pc, #184]	; (8007e10 <_malloc_r+0xe4>)
 8007d56:	f001 fed3 	bl	8009b00 <__malloc_lock>
 8007d5a:	6833      	ldr	r3, [r6, #0]
 8007d5c:	461c      	mov	r4, r3
 8007d5e:	bb34      	cbnz	r4, 8007dae <_malloc_r+0x82>
 8007d60:	4629      	mov	r1, r5
 8007d62:	4638      	mov	r0, r7
 8007d64:	f7ff ffc2 	bl	8007cec <sbrk_aligned>
 8007d68:	1c43      	adds	r3, r0, #1
 8007d6a:	4604      	mov	r4, r0
 8007d6c:	d14d      	bne.n	8007e0a <_malloc_r+0xde>
 8007d6e:	6834      	ldr	r4, [r6, #0]
 8007d70:	4626      	mov	r6, r4
 8007d72:	2e00      	cmp	r6, #0
 8007d74:	d140      	bne.n	8007df8 <_malloc_r+0xcc>
 8007d76:	6823      	ldr	r3, [r4, #0]
 8007d78:	4631      	mov	r1, r6
 8007d7a:	4638      	mov	r0, r7
 8007d7c:	eb04 0803 	add.w	r8, r4, r3
 8007d80:	f000 fd40 	bl	8008804 <_sbrk_r>
 8007d84:	4580      	cmp	r8, r0
 8007d86:	d13a      	bne.n	8007dfe <_malloc_r+0xd2>
 8007d88:	6821      	ldr	r1, [r4, #0]
 8007d8a:	3503      	adds	r5, #3
 8007d8c:	1a6d      	subs	r5, r5, r1
 8007d8e:	f025 0503 	bic.w	r5, r5, #3
 8007d92:	3508      	adds	r5, #8
 8007d94:	2d0c      	cmp	r5, #12
 8007d96:	bf38      	it	cc
 8007d98:	250c      	movcc	r5, #12
 8007d9a:	4629      	mov	r1, r5
 8007d9c:	4638      	mov	r0, r7
 8007d9e:	f7ff ffa5 	bl	8007cec <sbrk_aligned>
 8007da2:	3001      	adds	r0, #1
 8007da4:	d02b      	beq.n	8007dfe <_malloc_r+0xd2>
 8007da6:	6823      	ldr	r3, [r4, #0]
 8007da8:	442b      	add	r3, r5
 8007daa:	6023      	str	r3, [r4, #0]
 8007dac:	e00e      	b.n	8007dcc <_malloc_r+0xa0>
 8007dae:	6822      	ldr	r2, [r4, #0]
 8007db0:	1b52      	subs	r2, r2, r5
 8007db2:	d41e      	bmi.n	8007df2 <_malloc_r+0xc6>
 8007db4:	2a0b      	cmp	r2, #11
 8007db6:	d916      	bls.n	8007de6 <_malloc_r+0xba>
 8007db8:	1961      	adds	r1, r4, r5
 8007dba:	42a3      	cmp	r3, r4
 8007dbc:	6025      	str	r5, [r4, #0]
 8007dbe:	bf18      	it	ne
 8007dc0:	6059      	strne	r1, [r3, #4]
 8007dc2:	6863      	ldr	r3, [r4, #4]
 8007dc4:	bf08      	it	eq
 8007dc6:	6031      	streq	r1, [r6, #0]
 8007dc8:	5162      	str	r2, [r4, r5]
 8007dca:	604b      	str	r3, [r1, #4]
 8007dcc:	4638      	mov	r0, r7
 8007dce:	f104 060b 	add.w	r6, r4, #11
 8007dd2:	f001 fe9b 	bl	8009b0c <__malloc_unlock>
 8007dd6:	f026 0607 	bic.w	r6, r6, #7
 8007dda:	1d23      	adds	r3, r4, #4
 8007ddc:	1af2      	subs	r2, r6, r3
 8007dde:	d0b6      	beq.n	8007d4e <_malloc_r+0x22>
 8007de0:	1b9b      	subs	r3, r3, r6
 8007de2:	50a3      	str	r3, [r4, r2]
 8007de4:	e7b3      	b.n	8007d4e <_malloc_r+0x22>
 8007de6:	6862      	ldr	r2, [r4, #4]
 8007de8:	42a3      	cmp	r3, r4
 8007dea:	bf0c      	ite	eq
 8007dec:	6032      	streq	r2, [r6, #0]
 8007dee:	605a      	strne	r2, [r3, #4]
 8007df0:	e7ec      	b.n	8007dcc <_malloc_r+0xa0>
 8007df2:	4623      	mov	r3, r4
 8007df4:	6864      	ldr	r4, [r4, #4]
 8007df6:	e7b2      	b.n	8007d5e <_malloc_r+0x32>
 8007df8:	4634      	mov	r4, r6
 8007dfa:	6876      	ldr	r6, [r6, #4]
 8007dfc:	e7b9      	b.n	8007d72 <_malloc_r+0x46>
 8007dfe:	230c      	movs	r3, #12
 8007e00:	603b      	str	r3, [r7, #0]
 8007e02:	4638      	mov	r0, r7
 8007e04:	f001 fe82 	bl	8009b0c <__malloc_unlock>
 8007e08:	e7a1      	b.n	8007d4e <_malloc_r+0x22>
 8007e0a:	6025      	str	r5, [r4, #0]
 8007e0c:	e7de      	b.n	8007dcc <_malloc_r+0xa0>
 8007e0e:	bf00      	nop
 8007e10:	20000464 	.word	0x20000464

08007e14 <__cvt>:
 8007e14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e18:	ec55 4b10 	vmov	r4, r5, d0
 8007e1c:	2d00      	cmp	r5, #0
 8007e1e:	460e      	mov	r6, r1
 8007e20:	4619      	mov	r1, r3
 8007e22:	462b      	mov	r3, r5
 8007e24:	bfbb      	ittet	lt
 8007e26:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007e2a:	461d      	movlt	r5, r3
 8007e2c:	2300      	movge	r3, #0
 8007e2e:	232d      	movlt	r3, #45	; 0x2d
 8007e30:	700b      	strb	r3, [r1, #0]
 8007e32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e34:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007e38:	4691      	mov	r9, r2
 8007e3a:	f023 0820 	bic.w	r8, r3, #32
 8007e3e:	bfbc      	itt	lt
 8007e40:	4622      	movlt	r2, r4
 8007e42:	4614      	movlt	r4, r2
 8007e44:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007e48:	d005      	beq.n	8007e56 <__cvt+0x42>
 8007e4a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007e4e:	d100      	bne.n	8007e52 <__cvt+0x3e>
 8007e50:	3601      	adds	r6, #1
 8007e52:	2102      	movs	r1, #2
 8007e54:	e000      	b.n	8007e58 <__cvt+0x44>
 8007e56:	2103      	movs	r1, #3
 8007e58:	ab03      	add	r3, sp, #12
 8007e5a:	9301      	str	r3, [sp, #4]
 8007e5c:	ab02      	add	r3, sp, #8
 8007e5e:	9300      	str	r3, [sp, #0]
 8007e60:	ec45 4b10 	vmov	d0, r4, r5
 8007e64:	4653      	mov	r3, sl
 8007e66:	4632      	mov	r2, r6
 8007e68:	f000 fe2a 	bl	8008ac0 <_dtoa_r>
 8007e6c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007e70:	4607      	mov	r7, r0
 8007e72:	d102      	bne.n	8007e7a <__cvt+0x66>
 8007e74:	f019 0f01 	tst.w	r9, #1
 8007e78:	d022      	beq.n	8007ec0 <__cvt+0xac>
 8007e7a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007e7e:	eb07 0906 	add.w	r9, r7, r6
 8007e82:	d110      	bne.n	8007ea6 <__cvt+0x92>
 8007e84:	783b      	ldrb	r3, [r7, #0]
 8007e86:	2b30      	cmp	r3, #48	; 0x30
 8007e88:	d10a      	bne.n	8007ea0 <__cvt+0x8c>
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	4620      	mov	r0, r4
 8007e90:	4629      	mov	r1, r5
 8007e92:	f7f8 fe31 	bl	8000af8 <__aeabi_dcmpeq>
 8007e96:	b918      	cbnz	r0, 8007ea0 <__cvt+0x8c>
 8007e98:	f1c6 0601 	rsb	r6, r6, #1
 8007e9c:	f8ca 6000 	str.w	r6, [sl]
 8007ea0:	f8da 3000 	ldr.w	r3, [sl]
 8007ea4:	4499      	add	r9, r3
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	4620      	mov	r0, r4
 8007eac:	4629      	mov	r1, r5
 8007eae:	f7f8 fe23 	bl	8000af8 <__aeabi_dcmpeq>
 8007eb2:	b108      	cbz	r0, 8007eb8 <__cvt+0xa4>
 8007eb4:	f8cd 900c 	str.w	r9, [sp, #12]
 8007eb8:	2230      	movs	r2, #48	; 0x30
 8007eba:	9b03      	ldr	r3, [sp, #12]
 8007ebc:	454b      	cmp	r3, r9
 8007ebe:	d307      	bcc.n	8007ed0 <__cvt+0xbc>
 8007ec0:	9b03      	ldr	r3, [sp, #12]
 8007ec2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ec4:	1bdb      	subs	r3, r3, r7
 8007ec6:	4638      	mov	r0, r7
 8007ec8:	6013      	str	r3, [r2, #0]
 8007eca:	b004      	add	sp, #16
 8007ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ed0:	1c59      	adds	r1, r3, #1
 8007ed2:	9103      	str	r1, [sp, #12]
 8007ed4:	701a      	strb	r2, [r3, #0]
 8007ed6:	e7f0      	b.n	8007eba <__cvt+0xa6>

08007ed8 <__exponent>:
 8007ed8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007eda:	4603      	mov	r3, r0
 8007edc:	2900      	cmp	r1, #0
 8007ede:	bfb8      	it	lt
 8007ee0:	4249      	neglt	r1, r1
 8007ee2:	f803 2b02 	strb.w	r2, [r3], #2
 8007ee6:	bfb4      	ite	lt
 8007ee8:	222d      	movlt	r2, #45	; 0x2d
 8007eea:	222b      	movge	r2, #43	; 0x2b
 8007eec:	2909      	cmp	r1, #9
 8007eee:	7042      	strb	r2, [r0, #1]
 8007ef0:	dd2a      	ble.n	8007f48 <__exponent+0x70>
 8007ef2:	f10d 0407 	add.w	r4, sp, #7
 8007ef6:	46a4      	mov	ip, r4
 8007ef8:	270a      	movs	r7, #10
 8007efa:	46a6      	mov	lr, r4
 8007efc:	460a      	mov	r2, r1
 8007efe:	fb91 f6f7 	sdiv	r6, r1, r7
 8007f02:	fb07 1516 	mls	r5, r7, r6, r1
 8007f06:	3530      	adds	r5, #48	; 0x30
 8007f08:	2a63      	cmp	r2, #99	; 0x63
 8007f0a:	f104 34ff 	add.w	r4, r4, #4294967295
 8007f0e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007f12:	4631      	mov	r1, r6
 8007f14:	dcf1      	bgt.n	8007efa <__exponent+0x22>
 8007f16:	3130      	adds	r1, #48	; 0x30
 8007f18:	f1ae 0502 	sub.w	r5, lr, #2
 8007f1c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007f20:	1c44      	adds	r4, r0, #1
 8007f22:	4629      	mov	r1, r5
 8007f24:	4561      	cmp	r1, ip
 8007f26:	d30a      	bcc.n	8007f3e <__exponent+0x66>
 8007f28:	f10d 0209 	add.w	r2, sp, #9
 8007f2c:	eba2 020e 	sub.w	r2, r2, lr
 8007f30:	4565      	cmp	r5, ip
 8007f32:	bf88      	it	hi
 8007f34:	2200      	movhi	r2, #0
 8007f36:	4413      	add	r3, r2
 8007f38:	1a18      	subs	r0, r3, r0
 8007f3a:	b003      	add	sp, #12
 8007f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f42:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007f46:	e7ed      	b.n	8007f24 <__exponent+0x4c>
 8007f48:	2330      	movs	r3, #48	; 0x30
 8007f4a:	3130      	adds	r1, #48	; 0x30
 8007f4c:	7083      	strb	r3, [r0, #2]
 8007f4e:	70c1      	strb	r1, [r0, #3]
 8007f50:	1d03      	adds	r3, r0, #4
 8007f52:	e7f1      	b.n	8007f38 <__exponent+0x60>

08007f54 <_printf_float>:
 8007f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f58:	ed2d 8b02 	vpush	{d8}
 8007f5c:	b08d      	sub	sp, #52	; 0x34
 8007f5e:	460c      	mov	r4, r1
 8007f60:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007f64:	4616      	mov	r6, r2
 8007f66:	461f      	mov	r7, r3
 8007f68:	4605      	mov	r5, r0
 8007f6a:	f001 fd4f 	bl	8009a0c <_localeconv_r>
 8007f6e:	f8d0 a000 	ldr.w	sl, [r0]
 8007f72:	4650      	mov	r0, sl
 8007f74:	f7f8 f944 	bl	8000200 <strlen>
 8007f78:	2300      	movs	r3, #0
 8007f7a:	930a      	str	r3, [sp, #40]	; 0x28
 8007f7c:	6823      	ldr	r3, [r4, #0]
 8007f7e:	9305      	str	r3, [sp, #20]
 8007f80:	f8d8 3000 	ldr.w	r3, [r8]
 8007f84:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007f88:	3307      	adds	r3, #7
 8007f8a:	f023 0307 	bic.w	r3, r3, #7
 8007f8e:	f103 0208 	add.w	r2, r3, #8
 8007f92:	f8c8 2000 	str.w	r2, [r8]
 8007f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007f9e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007fa2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007fa6:	9307      	str	r3, [sp, #28]
 8007fa8:	f8cd 8018 	str.w	r8, [sp, #24]
 8007fac:	ee08 0a10 	vmov	s16, r0
 8007fb0:	4b9f      	ldr	r3, [pc, #636]	; (8008230 <_printf_float+0x2dc>)
 8007fb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8007fba:	f7f8 fdcf 	bl	8000b5c <__aeabi_dcmpun>
 8007fbe:	bb88      	cbnz	r0, 8008024 <_printf_float+0xd0>
 8007fc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007fc4:	4b9a      	ldr	r3, [pc, #616]	; (8008230 <_printf_float+0x2dc>)
 8007fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8007fca:	f7f8 fda9 	bl	8000b20 <__aeabi_dcmple>
 8007fce:	bb48      	cbnz	r0, 8008024 <_printf_float+0xd0>
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	4640      	mov	r0, r8
 8007fd6:	4649      	mov	r1, r9
 8007fd8:	f7f8 fd98 	bl	8000b0c <__aeabi_dcmplt>
 8007fdc:	b110      	cbz	r0, 8007fe4 <_printf_float+0x90>
 8007fde:	232d      	movs	r3, #45	; 0x2d
 8007fe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fe4:	4b93      	ldr	r3, [pc, #588]	; (8008234 <_printf_float+0x2e0>)
 8007fe6:	4894      	ldr	r0, [pc, #592]	; (8008238 <_printf_float+0x2e4>)
 8007fe8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007fec:	bf94      	ite	ls
 8007fee:	4698      	movls	r8, r3
 8007ff0:	4680      	movhi	r8, r0
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	6123      	str	r3, [r4, #16]
 8007ff6:	9b05      	ldr	r3, [sp, #20]
 8007ff8:	f023 0204 	bic.w	r2, r3, #4
 8007ffc:	6022      	str	r2, [r4, #0]
 8007ffe:	f04f 0900 	mov.w	r9, #0
 8008002:	9700      	str	r7, [sp, #0]
 8008004:	4633      	mov	r3, r6
 8008006:	aa0b      	add	r2, sp, #44	; 0x2c
 8008008:	4621      	mov	r1, r4
 800800a:	4628      	mov	r0, r5
 800800c:	f000 f9d8 	bl	80083c0 <_printf_common>
 8008010:	3001      	adds	r0, #1
 8008012:	f040 8090 	bne.w	8008136 <_printf_float+0x1e2>
 8008016:	f04f 30ff 	mov.w	r0, #4294967295
 800801a:	b00d      	add	sp, #52	; 0x34
 800801c:	ecbd 8b02 	vpop	{d8}
 8008020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008024:	4642      	mov	r2, r8
 8008026:	464b      	mov	r3, r9
 8008028:	4640      	mov	r0, r8
 800802a:	4649      	mov	r1, r9
 800802c:	f7f8 fd96 	bl	8000b5c <__aeabi_dcmpun>
 8008030:	b140      	cbz	r0, 8008044 <_printf_float+0xf0>
 8008032:	464b      	mov	r3, r9
 8008034:	2b00      	cmp	r3, #0
 8008036:	bfbc      	itt	lt
 8008038:	232d      	movlt	r3, #45	; 0x2d
 800803a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800803e:	487f      	ldr	r0, [pc, #508]	; (800823c <_printf_float+0x2e8>)
 8008040:	4b7f      	ldr	r3, [pc, #508]	; (8008240 <_printf_float+0x2ec>)
 8008042:	e7d1      	b.n	8007fe8 <_printf_float+0x94>
 8008044:	6863      	ldr	r3, [r4, #4]
 8008046:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800804a:	9206      	str	r2, [sp, #24]
 800804c:	1c5a      	adds	r2, r3, #1
 800804e:	d13f      	bne.n	80080d0 <_printf_float+0x17c>
 8008050:	2306      	movs	r3, #6
 8008052:	6063      	str	r3, [r4, #4]
 8008054:	9b05      	ldr	r3, [sp, #20]
 8008056:	6861      	ldr	r1, [r4, #4]
 8008058:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800805c:	2300      	movs	r3, #0
 800805e:	9303      	str	r3, [sp, #12]
 8008060:	ab0a      	add	r3, sp, #40	; 0x28
 8008062:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008066:	ab09      	add	r3, sp, #36	; 0x24
 8008068:	ec49 8b10 	vmov	d0, r8, r9
 800806c:	9300      	str	r3, [sp, #0]
 800806e:	6022      	str	r2, [r4, #0]
 8008070:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008074:	4628      	mov	r0, r5
 8008076:	f7ff fecd 	bl	8007e14 <__cvt>
 800807a:	9b06      	ldr	r3, [sp, #24]
 800807c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800807e:	2b47      	cmp	r3, #71	; 0x47
 8008080:	4680      	mov	r8, r0
 8008082:	d108      	bne.n	8008096 <_printf_float+0x142>
 8008084:	1cc8      	adds	r0, r1, #3
 8008086:	db02      	blt.n	800808e <_printf_float+0x13a>
 8008088:	6863      	ldr	r3, [r4, #4]
 800808a:	4299      	cmp	r1, r3
 800808c:	dd41      	ble.n	8008112 <_printf_float+0x1be>
 800808e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008092:	fa5f fb8b 	uxtb.w	fp, fp
 8008096:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800809a:	d820      	bhi.n	80080de <_printf_float+0x18a>
 800809c:	3901      	subs	r1, #1
 800809e:	465a      	mov	r2, fp
 80080a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80080a4:	9109      	str	r1, [sp, #36]	; 0x24
 80080a6:	f7ff ff17 	bl	8007ed8 <__exponent>
 80080aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080ac:	1813      	adds	r3, r2, r0
 80080ae:	2a01      	cmp	r2, #1
 80080b0:	4681      	mov	r9, r0
 80080b2:	6123      	str	r3, [r4, #16]
 80080b4:	dc02      	bgt.n	80080bc <_printf_float+0x168>
 80080b6:	6822      	ldr	r2, [r4, #0]
 80080b8:	07d2      	lsls	r2, r2, #31
 80080ba:	d501      	bpl.n	80080c0 <_printf_float+0x16c>
 80080bc:	3301      	adds	r3, #1
 80080be:	6123      	str	r3, [r4, #16]
 80080c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d09c      	beq.n	8008002 <_printf_float+0xae>
 80080c8:	232d      	movs	r3, #45	; 0x2d
 80080ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080ce:	e798      	b.n	8008002 <_printf_float+0xae>
 80080d0:	9a06      	ldr	r2, [sp, #24]
 80080d2:	2a47      	cmp	r2, #71	; 0x47
 80080d4:	d1be      	bne.n	8008054 <_printf_float+0x100>
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d1bc      	bne.n	8008054 <_printf_float+0x100>
 80080da:	2301      	movs	r3, #1
 80080dc:	e7b9      	b.n	8008052 <_printf_float+0xfe>
 80080de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80080e2:	d118      	bne.n	8008116 <_printf_float+0x1c2>
 80080e4:	2900      	cmp	r1, #0
 80080e6:	6863      	ldr	r3, [r4, #4]
 80080e8:	dd0b      	ble.n	8008102 <_printf_float+0x1ae>
 80080ea:	6121      	str	r1, [r4, #16]
 80080ec:	b913      	cbnz	r3, 80080f4 <_printf_float+0x1a0>
 80080ee:	6822      	ldr	r2, [r4, #0]
 80080f0:	07d0      	lsls	r0, r2, #31
 80080f2:	d502      	bpl.n	80080fa <_printf_float+0x1a6>
 80080f4:	3301      	adds	r3, #1
 80080f6:	440b      	add	r3, r1
 80080f8:	6123      	str	r3, [r4, #16]
 80080fa:	65a1      	str	r1, [r4, #88]	; 0x58
 80080fc:	f04f 0900 	mov.w	r9, #0
 8008100:	e7de      	b.n	80080c0 <_printf_float+0x16c>
 8008102:	b913      	cbnz	r3, 800810a <_printf_float+0x1b6>
 8008104:	6822      	ldr	r2, [r4, #0]
 8008106:	07d2      	lsls	r2, r2, #31
 8008108:	d501      	bpl.n	800810e <_printf_float+0x1ba>
 800810a:	3302      	adds	r3, #2
 800810c:	e7f4      	b.n	80080f8 <_printf_float+0x1a4>
 800810e:	2301      	movs	r3, #1
 8008110:	e7f2      	b.n	80080f8 <_printf_float+0x1a4>
 8008112:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008118:	4299      	cmp	r1, r3
 800811a:	db05      	blt.n	8008128 <_printf_float+0x1d4>
 800811c:	6823      	ldr	r3, [r4, #0]
 800811e:	6121      	str	r1, [r4, #16]
 8008120:	07d8      	lsls	r0, r3, #31
 8008122:	d5ea      	bpl.n	80080fa <_printf_float+0x1a6>
 8008124:	1c4b      	adds	r3, r1, #1
 8008126:	e7e7      	b.n	80080f8 <_printf_float+0x1a4>
 8008128:	2900      	cmp	r1, #0
 800812a:	bfd4      	ite	le
 800812c:	f1c1 0202 	rsble	r2, r1, #2
 8008130:	2201      	movgt	r2, #1
 8008132:	4413      	add	r3, r2
 8008134:	e7e0      	b.n	80080f8 <_printf_float+0x1a4>
 8008136:	6823      	ldr	r3, [r4, #0]
 8008138:	055a      	lsls	r2, r3, #21
 800813a:	d407      	bmi.n	800814c <_printf_float+0x1f8>
 800813c:	6923      	ldr	r3, [r4, #16]
 800813e:	4642      	mov	r2, r8
 8008140:	4631      	mov	r1, r6
 8008142:	4628      	mov	r0, r5
 8008144:	47b8      	blx	r7
 8008146:	3001      	adds	r0, #1
 8008148:	d12c      	bne.n	80081a4 <_printf_float+0x250>
 800814a:	e764      	b.n	8008016 <_printf_float+0xc2>
 800814c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008150:	f240 80e0 	bls.w	8008314 <_printf_float+0x3c0>
 8008154:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008158:	2200      	movs	r2, #0
 800815a:	2300      	movs	r3, #0
 800815c:	f7f8 fccc 	bl	8000af8 <__aeabi_dcmpeq>
 8008160:	2800      	cmp	r0, #0
 8008162:	d034      	beq.n	80081ce <_printf_float+0x27a>
 8008164:	4a37      	ldr	r2, [pc, #220]	; (8008244 <_printf_float+0x2f0>)
 8008166:	2301      	movs	r3, #1
 8008168:	4631      	mov	r1, r6
 800816a:	4628      	mov	r0, r5
 800816c:	47b8      	blx	r7
 800816e:	3001      	adds	r0, #1
 8008170:	f43f af51 	beq.w	8008016 <_printf_float+0xc2>
 8008174:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008178:	429a      	cmp	r2, r3
 800817a:	db02      	blt.n	8008182 <_printf_float+0x22e>
 800817c:	6823      	ldr	r3, [r4, #0]
 800817e:	07d8      	lsls	r0, r3, #31
 8008180:	d510      	bpl.n	80081a4 <_printf_float+0x250>
 8008182:	ee18 3a10 	vmov	r3, s16
 8008186:	4652      	mov	r2, sl
 8008188:	4631      	mov	r1, r6
 800818a:	4628      	mov	r0, r5
 800818c:	47b8      	blx	r7
 800818e:	3001      	adds	r0, #1
 8008190:	f43f af41 	beq.w	8008016 <_printf_float+0xc2>
 8008194:	f04f 0800 	mov.w	r8, #0
 8008198:	f104 091a 	add.w	r9, r4, #26
 800819c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800819e:	3b01      	subs	r3, #1
 80081a0:	4543      	cmp	r3, r8
 80081a2:	dc09      	bgt.n	80081b8 <_printf_float+0x264>
 80081a4:	6823      	ldr	r3, [r4, #0]
 80081a6:	079b      	lsls	r3, r3, #30
 80081a8:	f100 8105 	bmi.w	80083b6 <_printf_float+0x462>
 80081ac:	68e0      	ldr	r0, [r4, #12]
 80081ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081b0:	4298      	cmp	r0, r3
 80081b2:	bfb8      	it	lt
 80081b4:	4618      	movlt	r0, r3
 80081b6:	e730      	b.n	800801a <_printf_float+0xc6>
 80081b8:	2301      	movs	r3, #1
 80081ba:	464a      	mov	r2, r9
 80081bc:	4631      	mov	r1, r6
 80081be:	4628      	mov	r0, r5
 80081c0:	47b8      	blx	r7
 80081c2:	3001      	adds	r0, #1
 80081c4:	f43f af27 	beq.w	8008016 <_printf_float+0xc2>
 80081c8:	f108 0801 	add.w	r8, r8, #1
 80081cc:	e7e6      	b.n	800819c <_printf_float+0x248>
 80081ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	dc39      	bgt.n	8008248 <_printf_float+0x2f4>
 80081d4:	4a1b      	ldr	r2, [pc, #108]	; (8008244 <_printf_float+0x2f0>)
 80081d6:	2301      	movs	r3, #1
 80081d8:	4631      	mov	r1, r6
 80081da:	4628      	mov	r0, r5
 80081dc:	47b8      	blx	r7
 80081de:	3001      	adds	r0, #1
 80081e0:	f43f af19 	beq.w	8008016 <_printf_float+0xc2>
 80081e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081e8:	4313      	orrs	r3, r2
 80081ea:	d102      	bne.n	80081f2 <_printf_float+0x29e>
 80081ec:	6823      	ldr	r3, [r4, #0]
 80081ee:	07d9      	lsls	r1, r3, #31
 80081f0:	d5d8      	bpl.n	80081a4 <_printf_float+0x250>
 80081f2:	ee18 3a10 	vmov	r3, s16
 80081f6:	4652      	mov	r2, sl
 80081f8:	4631      	mov	r1, r6
 80081fa:	4628      	mov	r0, r5
 80081fc:	47b8      	blx	r7
 80081fe:	3001      	adds	r0, #1
 8008200:	f43f af09 	beq.w	8008016 <_printf_float+0xc2>
 8008204:	f04f 0900 	mov.w	r9, #0
 8008208:	f104 0a1a 	add.w	sl, r4, #26
 800820c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800820e:	425b      	negs	r3, r3
 8008210:	454b      	cmp	r3, r9
 8008212:	dc01      	bgt.n	8008218 <_printf_float+0x2c4>
 8008214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008216:	e792      	b.n	800813e <_printf_float+0x1ea>
 8008218:	2301      	movs	r3, #1
 800821a:	4652      	mov	r2, sl
 800821c:	4631      	mov	r1, r6
 800821e:	4628      	mov	r0, r5
 8008220:	47b8      	blx	r7
 8008222:	3001      	adds	r0, #1
 8008224:	f43f aef7 	beq.w	8008016 <_printf_float+0xc2>
 8008228:	f109 0901 	add.w	r9, r9, #1
 800822c:	e7ee      	b.n	800820c <_printf_float+0x2b8>
 800822e:	bf00      	nop
 8008230:	7fefffff 	.word	0x7fefffff
 8008234:	0800b060 	.word	0x0800b060
 8008238:	0800b064 	.word	0x0800b064
 800823c:	0800b06c 	.word	0x0800b06c
 8008240:	0800b068 	.word	0x0800b068
 8008244:	0800b070 	.word	0x0800b070
 8008248:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800824a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800824c:	429a      	cmp	r2, r3
 800824e:	bfa8      	it	ge
 8008250:	461a      	movge	r2, r3
 8008252:	2a00      	cmp	r2, #0
 8008254:	4691      	mov	r9, r2
 8008256:	dc37      	bgt.n	80082c8 <_printf_float+0x374>
 8008258:	f04f 0b00 	mov.w	fp, #0
 800825c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008260:	f104 021a 	add.w	r2, r4, #26
 8008264:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008266:	9305      	str	r3, [sp, #20]
 8008268:	eba3 0309 	sub.w	r3, r3, r9
 800826c:	455b      	cmp	r3, fp
 800826e:	dc33      	bgt.n	80082d8 <_printf_float+0x384>
 8008270:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008274:	429a      	cmp	r2, r3
 8008276:	db3b      	blt.n	80082f0 <_printf_float+0x39c>
 8008278:	6823      	ldr	r3, [r4, #0]
 800827a:	07da      	lsls	r2, r3, #31
 800827c:	d438      	bmi.n	80082f0 <_printf_float+0x39c>
 800827e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008280:	9a05      	ldr	r2, [sp, #20]
 8008282:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008284:	1a9a      	subs	r2, r3, r2
 8008286:	eba3 0901 	sub.w	r9, r3, r1
 800828a:	4591      	cmp	r9, r2
 800828c:	bfa8      	it	ge
 800828e:	4691      	movge	r9, r2
 8008290:	f1b9 0f00 	cmp.w	r9, #0
 8008294:	dc35      	bgt.n	8008302 <_printf_float+0x3ae>
 8008296:	f04f 0800 	mov.w	r8, #0
 800829a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800829e:	f104 0a1a 	add.w	sl, r4, #26
 80082a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082a6:	1a9b      	subs	r3, r3, r2
 80082a8:	eba3 0309 	sub.w	r3, r3, r9
 80082ac:	4543      	cmp	r3, r8
 80082ae:	f77f af79 	ble.w	80081a4 <_printf_float+0x250>
 80082b2:	2301      	movs	r3, #1
 80082b4:	4652      	mov	r2, sl
 80082b6:	4631      	mov	r1, r6
 80082b8:	4628      	mov	r0, r5
 80082ba:	47b8      	blx	r7
 80082bc:	3001      	adds	r0, #1
 80082be:	f43f aeaa 	beq.w	8008016 <_printf_float+0xc2>
 80082c2:	f108 0801 	add.w	r8, r8, #1
 80082c6:	e7ec      	b.n	80082a2 <_printf_float+0x34e>
 80082c8:	4613      	mov	r3, r2
 80082ca:	4631      	mov	r1, r6
 80082cc:	4642      	mov	r2, r8
 80082ce:	4628      	mov	r0, r5
 80082d0:	47b8      	blx	r7
 80082d2:	3001      	adds	r0, #1
 80082d4:	d1c0      	bne.n	8008258 <_printf_float+0x304>
 80082d6:	e69e      	b.n	8008016 <_printf_float+0xc2>
 80082d8:	2301      	movs	r3, #1
 80082da:	4631      	mov	r1, r6
 80082dc:	4628      	mov	r0, r5
 80082de:	9205      	str	r2, [sp, #20]
 80082e0:	47b8      	blx	r7
 80082e2:	3001      	adds	r0, #1
 80082e4:	f43f ae97 	beq.w	8008016 <_printf_float+0xc2>
 80082e8:	9a05      	ldr	r2, [sp, #20]
 80082ea:	f10b 0b01 	add.w	fp, fp, #1
 80082ee:	e7b9      	b.n	8008264 <_printf_float+0x310>
 80082f0:	ee18 3a10 	vmov	r3, s16
 80082f4:	4652      	mov	r2, sl
 80082f6:	4631      	mov	r1, r6
 80082f8:	4628      	mov	r0, r5
 80082fa:	47b8      	blx	r7
 80082fc:	3001      	adds	r0, #1
 80082fe:	d1be      	bne.n	800827e <_printf_float+0x32a>
 8008300:	e689      	b.n	8008016 <_printf_float+0xc2>
 8008302:	9a05      	ldr	r2, [sp, #20]
 8008304:	464b      	mov	r3, r9
 8008306:	4442      	add	r2, r8
 8008308:	4631      	mov	r1, r6
 800830a:	4628      	mov	r0, r5
 800830c:	47b8      	blx	r7
 800830e:	3001      	adds	r0, #1
 8008310:	d1c1      	bne.n	8008296 <_printf_float+0x342>
 8008312:	e680      	b.n	8008016 <_printf_float+0xc2>
 8008314:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008316:	2a01      	cmp	r2, #1
 8008318:	dc01      	bgt.n	800831e <_printf_float+0x3ca>
 800831a:	07db      	lsls	r3, r3, #31
 800831c:	d538      	bpl.n	8008390 <_printf_float+0x43c>
 800831e:	2301      	movs	r3, #1
 8008320:	4642      	mov	r2, r8
 8008322:	4631      	mov	r1, r6
 8008324:	4628      	mov	r0, r5
 8008326:	47b8      	blx	r7
 8008328:	3001      	adds	r0, #1
 800832a:	f43f ae74 	beq.w	8008016 <_printf_float+0xc2>
 800832e:	ee18 3a10 	vmov	r3, s16
 8008332:	4652      	mov	r2, sl
 8008334:	4631      	mov	r1, r6
 8008336:	4628      	mov	r0, r5
 8008338:	47b8      	blx	r7
 800833a:	3001      	adds	r0, #1
 800833c:	f43f ae6b 	beq.w	8008016 <_printf_float+0xc2>
 8008340:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008344:	2200      	movs	r2, #0
 8008346:	2300      	movs	r3, #0
 8008348:	f7f8 fbd6 	bl	8000af8 <__aeabi_dcmpeq>
 800834c:	b9d8      	cbnz	r0, 8008386 <_printf_float+0x432>
 800834e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008350:	f108 0201 	add.w	r2, r8, #1
 8008354:	3b01      	subs	r3, #1
 8008356:	4631      	mov	r1, r6
 8008358:	4628      	mov	r0, r5
 800835a:	47b8      	blx	r7
 800835c:	3001      	adds	r0, #1
 800835e:	d10e      	bne.n	800837e <_printf_float+0x42a>
 8008360:	e659      	b.n	8008016 <_printf_float+0xc2>
 8008362:	2301      	movs	r3, #1
 8008364:	4652      	mov	r2, sl
 8008366:	4631      	mov	r1, r6
 8008368:	4628      	mov	r0, r5
 800836a:	47b8      	blx	r7
 800836c:	3001      	adds	r0, #1
 800836e:	f43f ae52 	beq.w	8008016 <_printf_float+0xc2>
 8008372:	f108 0801 	add.w	r8, r8, #1
 8008376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008378:	3b01      	subs	r3, #1
 800837a:	4543      	cmp	r3, r8
 800837c:	dcf1      	bgt.n	8008362 <_printf_float+0x40e>
 800837e:	464b      	mov	r3, r9
 8008380:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008384:	e6dc      	b.n	8008140 <_printf_float+0x1ec>
 8008386:	f04f 0800 	mov.w	r8, #0
 800838a:	f104 0a1a 	add.w	sl, r4, #26
 800838e:	e7f2      	b.n	8008376 <_printf_float+0x422>
 8008390:	2301      	movs	r3, #1
 8008392:	4642      	mov	r2, r8
 8008394:	e7df      	b.n	8008356 <_printf_float+0x402>
 8008396:	2301      	movs	r3, #1
 8008398:	464a      	mov	r2, r9
 800839a:	4631      	mov	r1, r6
 800839c:	4628      	mov	r0, r5
 800839e:	47b8      	blx	r7
 80083a0:	3001      	adds	r0, #1
 80083a2:	f43f ae38 	beq.w	8008016 <_printf_float+0xc2>
 80083a6:	f108 0801 	add.w	r8, r8, #1
 80083aa:	68e3      	ldr	r3, [r4, #12]
 80083ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80083ae:	1a5b      	subs	r3, r3, r1
 80083b0:	4543      	cmp	r3, r8
 80083b2:	dcf0      	bgt.n	8008396 <_printf_float+0x442>
 80083b4:	e6fa      	b.n	80081ac <_printf_float+0x258>
 80083b6:	f04f 0800 	mov.w	r8, #0
 80083ba:	f104 0919 	add.w	r9, r4, #25
 80083be:	e7f4      	b.n	80083aa <_printf_float+0x456>

080083c0 <_printf_common>:
 80083c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083c4:	4616      	mov	r6, r2
 80083c6:	4699      	mov	r9, r3
 80083c8:	688a      	ldr	r2, [r1, #8]
 80083ca:	690b      	ldr	r3, [r1, #16]
 80083cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80083d0:	4293      	cmp	r3, r2
 80083d2:	bfb8      	it	lt
 80083d4:	4613      	movlt	r3, r2
 80083d6:	6033      	str	r3, [r6, #0]
 80083d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80083dc:	4607      	mov	r7, r0
 80083de:	460c      	mov	r4, r1
 80083e0:	b10a      	cbz	r2, 80083e6 <_printf_common+0x26>
 80083e2:	3301      	adds	r3, #1
 80083e4:	6033      	str	r3, [r6, #0]
 80083e6:	6823      	ldr	r3, [r4, #0]
 80083e8:	0699      	lsls	r1, r3, #26
 80083ea:	bf42      	ittt	mi
 80083ec:	6833      	ldrmi	r3, [r6, #0]
 80083ee:	3302      	addmi	r3, #2
 80083f0:	6033      	strmi	r3, [r6, #0]
 80083f2:	6825      	ldr	r5, [r4, #0]
 80083f4:	f015 0506 	ands.w	r5, r5, #6
 80083f8:	d106      	bne.n	8008408 <_printf_common+0x48>
 80083fa:	f104 0a19 	add.w	sl, r4, #25
 80083fe:	68e3      	ldr	r3, [r4, #12]
 8008400:	6832      	ldr	r2, [r6, #0]
 8008402:	1a9b      	subs	r3, r3, r2
 8008404:	42ab      	cmp	r3, r5
 8008406:	dc26      	bgt.n	8008456 <_printf_common+0x96>
 8008408:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800840c:	1e13      	subs	r3, r2, #0
 800840e:	6822      	ldr	r2, [r4, #0]
 8008410:	bf18      	it	ne
 8008412:	2301      	movne	r3, #1
 8008414:	0692      	lsls	r2, r2, #26
 8008416:	d42b      	bmi.n	8008470 <_printf_common+0xb0>
 8008418:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800841c:	4649      	mov	r1, r9
 800841e:	4638      	mov	r0, r7
 8008420:	47c0      	blx	r8
 8008422:	3001      	adds	r0, #1
 8008424:	d01e      	beq.n	8008464 <_printf_common+0xa4>
 8008426:	6823      	ldr	r3, [r4, #0]
 8008428:	68e5      	ldr	r5, [r4, #12]
 800842a:	6832      	ldr	r2, [r6, #0]
 800842c:	f003 0306 	and.w	r3, r3, #6
 8008430:	2b04      	cmp	r3, #4
 8008432:	bf08      	it	eq
 8008434:	1aad      	subeq	r5, r5, r2
 8008436:	68a3      	ldr	r3, [r4, #8]
 8008438:	6922      	ldr	r2, [r4, #16]
 800843a:	bf0c      	ite	eq
 800843c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008440:	2500      	movne	r5, #0
 8008442:	4293      	cmp	r3, r2
 8008444:	bfc4      	itt	gt
 8008446:	1a9b      	subgt	r3, r3, r2
 8008448:	18ed      	addgt	r5, r5, r3
 800844a:	2600      	movs	r6, #0
 800844c:	341a      	adds	r4, #26
 800844e:	42b5      	cmp	r5, r6
 8008450:	d11a      	bne.n	8008488 <_printf_common+0xc8>
 8008452:	2000      	movs	r0, #0
 8008454:	e008      	b.n	8008468 <_printf_common+0xa8>
 8008456:	2301      	movs	r3, #1
 8008458:	4652      	mov	r2, sl
 800845a:	4649      	mov	r1, r9
 800845c:	4638      	mov	r0, r7
 800845e:	47c0      	blx	r8
 8008460:	3001      	adds	r0, #1
 8008462:	d103      	bne.n	800846c <_printf_common+0xac>
 8008464:	f04f 30ff 	mov.w	r0, #4294967295
 8008468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800846c:	3501      	adds	r5, #1
 800846e:	e7c6      	b.n	80083fe <_printf_common+0x3e>
 8008470:	18e1      	adds	r1, r4, r3
 8008472:	1c5a      	adds	r2, r3, #1
 8008474:	2030      	movs	r0, #48	; 0x30
 8008476:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800847a:	4422      	add	r2, r4
 800847c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008480:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008484:	3302      	adds	r3, #2
 8008486:	e7c7      	b.n	8008418 <_printf_common+0x58>
 8008488:	2301      	movs	r3, #1
 800848a:	4622      	mov	r2, r4
 800848c:	4649      	mov	r1, r9
 800848e:	4638      	mov	r0, r7
 8008490:	47c0      	blx	r8
 8008492:	3001      	adds	r0, #1
 8008494:	d0e6      	beq.n	8008464 <_printf_common+0xa4>
 8008496:	3601      	adds	r6, #1
 8008498:	e7d9      	b.n	800844e <_printf_common+0x8e>
	...

0800849c <_printf_i>:
 800849c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084a0:	7e0f      	ldrb	r7, [r1, #24]
 80084a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80084a4:	2f78      	cmp	r7, #120	; 0x78
 80084a6:	4691      	mov	r9, r2
 80084a8:	4680      	mov	r8, r0
 80084aa:	460c      	mov	r4, r1
 80084ac:	469a      	mov	sl, r3
 80084ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80084b2:	d807      	bhi.n	80084c4 <_printf_i+0x28>
 80084b4:	2f62      	cmp	r7, #98	; 0x62
 80084b6:	d80a      	bhi.n	80084ce <_printf_i+0x32>
 80084b8:	2f00      	cmp	r7, #0
 80084ba:	f000 80d8 	beq.w	800866e <_printf_i+0x1d2>
 80084be:	2f58      	cmp	r7, #88	; 0x58
 80084c0:	f000 80a3 	beq.w	800860a <_printf_i+0x16e>
 80084c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80084cc:	e03a      	b.n	8008544 <_printf_i+0xa8>
 80084ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80084d2:	2b15      	cmp	r3, #21
 80084d4:	d8f6      	bhi.n	80084c4 <_printf_i+0x28>
 80084d6:	a101      	add	r1, pc, #4	; (adr r1, 80084dc <_printf_i+0x40>)
 80084d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80084dc:	08008535 	.word	0x08008535
 80084e0:	08008549 	.word	0x08008549
 80084e4:	080084c5 	.word	0x080084c5
 80084e8:	080084c5 	.word	0x080084c5
 80084ec:	080084c5 	.word	0x080084c5
 80084f0:	080084c5 	.word	0x080084c5
 80084f4:	08008549 	.word	0x08008549
 80084f8:	080084c5 	.word	0x080084c5
 80084fc:	080084c5 	.word	0x080084c5
 8008500:	080084c5 	.word	0x080084c5
 8008504:	080084c5 	.word	0x080084c5
 8008508:	08008655 	.word	0x08008655
 800850c:	08008579 	.word	0x08008579
 8008510:	08008637 	.word	0x08008637
 8008514:	080084c5 	.word	0x080084c5
 8008518:	080084c5 	.word	0x080084c5
 800851c:	08008677 	.word	0x08008677
 8008520:	080084c5 	.word	0x080084c5
 8008524:	08008579 	.word	0x08008579
 8008528:	080084c5 	.word	0x080084c5
 800852c:	080084c5 	.word	0x080084c5
 8008530:	0800863f 	.word	0x0800863f
 8008534:	682b      	ldr	r3, [r5, #0]
 8008536:	1d1a      	adds	r2, r3, #4
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	602a      	str	r2, [r5, #0]
 800853c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008540:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008544:	2301      	movs	r3, #1
 8008546:	e0a3      	b.n	8008690 <_printf_i+0x1f4>
 8008548:	6820      	ldr	r0, [r4, #0]
 800854a:	6829      	ldr	r1, [r5, #0]
 800854c:	0606      	lsls	r6, r0, #24
 800854e:	f101 0304 	add.w	r3, r1, #4
 8008552:	d50a      	bpl.n	800856a <_printf_i+0xce>
 8008554:	680e      	ldr	r6, [r1, #0]
 8008556:	602b      	str	r3, [r5, #0]
 8008558:	2e00      	cmp	r6, #0
 800855a:	da03      	bge.n	8008564 <_printf_i+0xc8>
 800855c:	232d      	movs	r3, #45	; 0x2d
 800855e:	4276      	negs	r6, r6
 8008560:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008564:	485e      	ldr	r0, [pc, #376]	; (80086e0 <_printf_i+0x244>)
 8008566:	230a      	movs	r3, #10
 8008568:	e019      	b.n	800859e <_printf_i+0x102>
 800856a:	680e      	ldr	r6, [r1, #0]
 800856c:	602b      	str	r3, [r5, #0]
 800856e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008572:	bf18      	it	ne
 8008574:	b236      	sxthne	r6, r6
 8008576:	e7ef      	b.n	8008558 <_printf_i+0xbc>
 8008578:	682b      	ldr	r3, [r5, #0]
 800857a:	6820      	ldr	r0, [r4, #0]
 800857c:	1d19      	adds	r1, r3, #4
 800857e:	6029      	str	r1, [r5, #0]
 8008580:	0601      	lsls	r1, r0, #24
 8008582:	d501      	bpl.n	8008588 <_printf_i+0xec>
 8008584:	681e      	ldr	r6, [r3, #0]
 8008586:	e002      	b.n	800858e <_printf_i+0xf2>
 8008588:	0646      	lsls	r6, r0, #25
 800858a:	d5fb      	bpl.n	8008584 <_printf_i+0xe8>
 800858c:	881e      	ldrh	r6, [r3, #0]
 800858e:	4854      	ldr	r0, [pc, #336]	; (80086e0 <_printf_i+0x244>)
 8008590:	2f6f      	cmp	r7, #111	; 0x6f
 8008592:	bf0c      	ite	eq
 8008594:	2308      	moveq	r3, #8
 8008596:	230a      	movne	r3, #10
 8008598:	2100      	movs	r1, #0
 800859a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800859e:	6865      	ldr	r5, [r4, #4]
 80085a0:	60a5      	str	r5, [r4, #8]
 80085a2:	2d00      	cmp	r5, #0
 80085a4:	bfa2      	ittt	ge
 80085a6:	6821      	ldrge	r1, [r4, #0]
 80085a8:	f021 0104 	bicge.w	r1, r1, #4
 80085ac:	6021      	strge	r1, [r4, #0]
 80085ae:	b90e      	cbnz	r6, 80085b4 <_printf_i+0x118>
 80085b0:	2d00      	cmp	r5, #0
 80085b2:	d04d      	beq.n	8008650 <_printf_i+0x1b4>
 80085b4:	4615      	mov	r5, r2
 80085b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80085ba:	fb03 6711 	mls	r7, r3, r1, r6
 80085be:	5dc7      	ldrb	r7, [r0, r7]
 80085c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80085c4:	4637      	mov	r7, r6
 80085c6:	42bb      	cmp	r3, r7
 80085c8:	460e      	mov	r6, r1
 80085ca:	d9f4      	bls.n	80085b6 <_printf_i+0x11a>
 80085cc:	2b08      	cmp	r3, #8
 80085ce:	d10b      	bne.n	80085e8 <_printf_i+0x14c>
 80085d0:	6823      	ldr	r3, [r4, #0]
 80085d2:	07de      	lsls	r6, r3, #31
 80085d4:	d508      	bpl.n	80085e8 <_printf_i+0x14c>
 80085d6:	6923      	ldr	r3, [r4, #16]
 80085d8:	6861      	ldr	r1, [r4, #4]
 80085da:	4299      	cmp	r1, r3
 80085dc:	bfde      	ittt	le
 80085de:	2330      	movle	r3, #48	; 0x30
 80085e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80085e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80085e8:	1b52      	subs	r2, r2, r5
 80085ea:	6122      	str	r2, [r4, #16]
 80085ec:	f8cd a000 	str.w	sl, [sp]
 80085f0:	464b      	mov	r3, r9
 80085f2:	aa03      	add	r2, sp, #12
 80085f4:	4621      	mov	r1, r4
 80085f6:	4640      	mov	r0, r8
 80085f8:	f7ff fee2 	bl	80083c0 <_printf_common>
 80085fc:	3001      	adds	r0, #1
 80085fe:	d14c      	bne.n	800869a <_printf_i+0x1fe>
 8008600:	f04f 30ff 	mov.w	r0, #4294967295
 8008604:	b004      	add	sp, #16
 8008606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800860a:	4835      	ldr	r0, [pc, #212]	; (80086e0 <_printf_i+0x244>)
 800860c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008610:	6829      	ldr	r1, [r5, #0]
 8008612:	6823      	ldr	r3, [r4, #0]
 8008614:	f851 6b04 	ldr.w	r6, [r1], #4
 8008618:	6029      	str	r1, [r5, #0]
 800861a:	061d      	lsls	r5, r3, #24
 800861c:	d514      	bpl.n	8008648 <_printf_i+0x1ac>
 800861e:	07df      	lsls	r7, r3, #31
 8008620:	bf44      	itt	mi
 8008622:	f043 0320 	orrmi.w	r3, r3, #32
 8008626:	6023      	strmi	r3, [r4, #0]
 8008628:	b91e      	cbnz	r6, 8008632 <_printf_i+0x196>
 800862a:	6823      	ldr	r3, [r4, #0]
 800862c:	f023 0320 	bic.w	r3, r3, #32
 8008630:	6023      	str	r3, [r4, #0]
 8008632:	2310      	movs	r3, #16
 8008634:	e7b0      	b.n	8008598 <_printf_i+0xfc>
 8008636:	6823      	ldr	r3, [r4, #0]
 8008638:	f043 0320 	orr.w	r3, r3, #32
 800863c:	6023      	str	r3, [r4, #0]
 800863e:	2378      	movs	r3, #120	; 0x78
 8008640:	4828      	ldr	r0, [pc, #160]	; (80086e4 <_printf_i+0x248>)
 8008642:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008646:	e7e3      	b.n	8008610 <_printf_i+0x174>
 8008648:	0659      	lsls	r1, r3, #25
 800864a:	bf48      	it	mi
 800864c:	b2b6      	uxthmi	r6, r6
 800864e:	e7e6      	b.n	800861e <_printf_i+0x182>
 8008650:	4615      	mov	r5, r2
 8008652:	e7bb      	b.n	80085cc <_printf_i+0x130>
 8008654:	682b      	ldr	r3, [r5, #0]
 8008656:	6826      	ldr	r6, [r4, #0]
 8008658:	6961      	ldr	r1, [r4, #20]
 800865a:	1d18      	adds	r0, r3, #4
 800865c:	6028      	str	r0, [r5, #0]
 800865e:	0635      	lsls	r5, r6, #24
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	d501      	bpl.n	8008668 <_printf_i+0x1cc>
 8008664:	6019      	str	r1, [r3, #0]
 8008666:	e002      	b.n	800866e <_printf_i+0x1d2>
 8008668:	0670      	lsls	r0, r6, #25
 800866a:	d5fb      	bpl.n	8008664 <_printf_i+0x1c8>
 800866c:	8019      	strh	r1, [r3, #0]
 800866e:	2300      	movs	r3, #0
 8008670:	6123      	str	r3, [r4, #16]
 8008672:	4615      	mov	r5, r2
 8008674:	e7ba      	b.n	80085ec <_printf_i+0x150>
 8008676:	682b      	ldr	r3, [r5, #0]
 8008678:	1d1a      	adds	r2, r3, #4
 800867a:	602a      	str	r2, [r5, #0]
 800867c:	681d      	ldr	r5, [r3, #0]
 800867e:	6862      	ldr	r2, [r4, #4]
 8008680:	2100      	movs	r1, #0
 8008682:	4628      	mov	r0, r5
 8008684:	f7f7 fdc4 	bl	8000210 <memchr>
 8008688:	b108      	cbz	r0, 800868e <_printf_i+0x1f2>
 800868a:	1b40      	subs	r0, r0, r5
 800868c:	6060      	str	r0, [r4, #4]
 800868e:	6863      	ldr	r3, [r4, #4]
 8008690:	6123      	str	r3, [r4, #16]
 8008692:	2300      	movs	r3, #0
 8008694:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008698:	e7a8      	b.n	80085ec <_printf_i+0x150>
 800869a:	6923      	ldr	r3, [r4, #16]
 800869c:	462a      	mov	r2, r5
 800869e:	4649      	mov	r1, r9
 80086a0:	4640      	mov	r0, r8
 80086a2:	47d0      	blx	sl
 80086a4:	3001      	adds	r0, #1
 80086a6:	d0ab      	beq.n	8008600 <_printf_i+0x164>
 80086a8:	6823      	ldr	r3, [r4, #0]
 80086aa:	079b      	lsls	r3, r3, #30
 80086ac:	d413      	bmi.n	80086d6 <_printf_i+0x23a>
 80086ae:	68e0      	ldr	r0, [r4, #12]
 80086b0:	9b03      	ldr	r3, [sp, #12]
 80086b2:	4298      	cmp	r0, r3
 80086b4:	bfb8      	it	lt
 80086b6:	4618      	movlt	r0, r3
 80086b8:	e7a4      	b.n	8008604 <_printf_i+0x168>
 80086ba:	2301      	movs	r3, #1
 80086bc:	4632      	mov	r2, r6
 80086be:	4649      	mov	r1, r9
 80086c0:	4640      	mov	r0, r8
 80086c2:	47d0      	blx	sl
 80086c4:	3001      	adds	r0, #1
 80086c6:	d09b      	beq.n	8008600 <_printf_i+0x164>
 80086c8:	3501      	adds	r5, #1
 80086ca:	68e3      	ldr	r3, [r4, #12]
 80086cc:	9903      	ldr	r1, [sp, #12]
 80086ce:	1a5b      	subs	r3, r3, r1
 80086d0:	42ab      	cmp	r3, r5
 80086d2:	dcf2      	bgt.n	80086ba <_printf_i+0x21e>
 80086d4:	e7eb      	b.n	80086ae <_printf_i+0x212>
 80086d6:	2500      	movs	r5, #0
 80086d8:	f104 0619 	add.w	r6, r4, #25
 80086dc:	e7f5      	b.n	80086ca <_printf_i+0x22e>
 80086de:	bf00      	nop
 80086e0:	0800b072 	.word	0x0800b072
 80086e4:	0800b083 	.word	0x0800b083

080086e8 <iprintf>:
 80086e8:	b40f      	push	{r0, r1, r2, r3}
 80086ea:	4b0a      	ldr	r3, [pc, #40]	; (8008714 <iprintf+0x2c>)
 80086ec:	b513      	push	{r0, r1, r4, lr}
 80086ee:	681c      	ldr	r4, [r3, #0]
 80086f0:	b124      	cbz	r4, 80086fc <iprintf+0x14>
 80086f2:	69a3      	ldr	r3, [r4, #24]
 80086f4:	b913      	cbnz	r3, 80086fc <iprintf+0x14>
 80086f6:	4620      	mov	r0, r4
 80086f8:	f001 f8ea 	bl	80098d0 <__sinit>
 80086fc:	ab05      	add	r3, sp, #20
 80086fe:	9a04      	ldr	r2, [sp, #16]
 8008700:	68a1      	ldr	r1, [r4, #8]
 8008702:	9301      	str	r3, [sp, #4]
 8008704:	4620      	mov	r0, r4
 8008706:	f001 fdcb 	bl	800a2a0 <_vfiprintf_r>
 800870a:	b002      	add	sp, #8
 800870c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008710:	b004      	add	sp, #16
 8008712:	4770      	bx	lr
 8008714:	2000000c 	.word	0x2000000c

08008718 <_puts_r>:
 8008718:	b570      	push	{r4, r5, r6, lr}
 800871a:	460e      	mov	r6, r1
 800871c:	4605      	mov	r5, r0
 800871e:	b118      	cbz	r0, 8008728 <_puts_r+0x10>
 8008720:	6983      	ldr	r3, [r0, #24]
 8008722:	b90b      	cbnz	r3, 8008728 <_puts_r+0x10>
 8008724:	f001 f8d4 	bl	80098d0 <__sinit>
 8008728:	69ab      	ldr	r3, [r5, #24]
 800872a:	68ac      	ldr	r4, [r5, #8]
 800872c:	b913      	cbnz	r3, 8008734 <_puts_r+0x1c>
 800872e:	4628      	mov	r0, r5
 8008730:	f001 f8ce 	bl	80098d0 <__sinit>
 8008734:	4b2c      	ldr	r3, [pc, #176]	; (80087e8 <_puts_r+0xd0>)
 8008736:	429c      	cmp	r4, r3
 8008738:	d120      	bne.n	800877c <_puts_r+0x64>
 800873a:	686c      	ldr	r4, [r5, #4]
 800873c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800873e:	07db      	lsls	r3, r3, #31
 8008740:	d405      	bmi.n	800874e <_puts_r+0x36>
 8008742:	89a3      	ldrh	r3, [r4, #12]
 8008744:	0598      	lsls	r0, r3, #22
 8008746:	d402      	bmi.n	800874e <_puts_r+0x36>
 8008748:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800874a:	f001 f964 	bl	8009a16 <__retarget_lock_acquire_recursive>
 800874e:	89a3      	ldrh	r3, [r4, #12]
 8008750:	0719      	lsls	r1, r3, #28
 8008752:	d51d      	bpl.n	8008790 <_puts_r+0x78>
 8008754:	6923      	ldr	r3, [r4, #16]
 8008756:	b1db      	cbz	r3, 8008790 <_puts_r+0x78>
 8008758:	3e01      	subs	r6, #1
 800875a:	68a3      	ldr	r3, [r4, #8]
 800875c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008760:	3b01      	subs	r3, #1
 8008762:	60a3      	str	r3, [r4, #8]
 8008764:	bb39      	cbnz	r1, 80087b6 <_puts_r+0x9e>
 8008766:	2b00      	cmp	r3, #0
 8008768:	da38      	bge.n	80087dc <_puts_r+0xc4>
 800876a:	4622      	mov	r2, r4
 800876c:	210a      	movs	r1, #10
 800876e:	4628      	mov	r0, r5
 8008770:	f000 f858 	bl	8008824 <__swbuf_r>
 8008774:	3001      	adds	r0, #1
 8008776:	d011      	beq.n	800879c <_puts_r+0x84>
 8008778:	250a      	movs	r5, #10
 800877a:	e011      	b.n	80087a0 <_puts_r+0x88>
 800877c:	4b1b      	ldr	r3, [pc, #108]	; (80087ec <_puts_r+0xd4>)
 800877e:	429c      	cmp	r4, r3
 8008780:	d101      	bne.n	8008786 <_puts_r+0x6e>
 8008782:	68ac      	ldr	r4, [r5, #8]
 8008784:	e7da      	b.n	800873c <_puts_r+0x24>
 8008786:	4b1a      	ldr	r3, [pc, #104]	; (80087f0 <_puts_r+0xd8>)
 8008788:	429c      	cmp	r4, r3
 800878a:	bf08      	it	eq
 800878c:	68ec      	ldreq	r4, [r5, #12]
 800878e:	e7d5      	b.n	800873c <_puts_r+0x24>
 8008790:	4621      	mov	r1, r4
 8008792:	4628      	mov	r0, r5
 8008794:	f000 f898 	bl	80088c8 <__swsetup_r>
 8008798:	2800      	cmp	r0, #0
 800879a:	d0dd      	beq.n	8008758 <_puts_r+0x40>
 800879c:	f04f 35ff 	mov.w	r5, #4294967295
 80087a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087a2:	07da      	lsls	r2, r3, #31
 80087a4:	d405      	bmi.n	80087b2 <_puts_r+0x9a>
 80087a6:	89a3      	ldrh	r3, [r4, #12]
 80087a8:	059b      	lsls	r3, r3, #22
 80087aa:	d402      	bmi.n	80087b2 <_puts_r+0x9a>
 80087ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087ae:	f001 f933 	bl	8009a18 <__retarget_lock_release_recursive>
 80087b2:	4628      	mov	r0, r5
 80087b4:	bd70      	pop	{r4, r5, r6, pc}
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	da04      	bge.n	80087c4 <_puts_r+0xac>
 80087ba:	69a2      	ldr	r2, [r4, #24]
 80087bc:	429a      	cmp	r2, r3
 80087be:	dc06      	bgt.n	80087ce <_puts_r+0xb6>
 80087c0:	290a      	cmp	r1, #10
 80087c2:	d004      	beq.n	80087ce <_puts_r+0xb6>
 80087c4:	6823      	ldr	r3, [r4, #0]
 80087c6:	1c5a      	adds	r2, r3, #1
 80087c8:	6022      	str	r2, [r4, #0]
 80087ca:	7019      	strb	r1, [r3, #0]
 80087cc:	e7c5      	b.n	800875a <_puts_r+0x42>
 80087ce:	4622      	mov	r2, r4
 80087d0:	4628      	mov	r0, r5
 80087d2:	f000 f827 	bl	8008824 <__swbuf_r>
 80087d6:	3001      	adds	r0, #1
 80087d8:	d1bf      	bne.n	800875a <_puts_r+0x42>
 80087da:	e7df      	b.n	800879c <_puts_r+0x84>
 80087dc:	6823      	ldr	r3, [r4, #0]
 80087de:	250a      	movs	r5, #10
 80087e0:	1c5a      	adds	r2, r3, #1
 80087e2:	6022      	str	r2, [r4, #0]
 80087e4:	701d      	strb	r5, [r3, #0]
 80087e6:	e7db      	b.n	80087a0 <_puts_r+0x88>
 80087e8:	0800b144 	.word	0x0800b144
 80087ec:	0800b164 	.word	0x0800b164
 80087f0:	0800b124 	.word	0x0800b124

080087f4 <puts>:
 80087f4:	4b02      	ldr	r3, [pc, #8]	; (8008800 <puts+0xc>)
 80087f6:	4601      	mov	r1, r0
 80087f8:	6818      	ldr	r0, [r3, #0]
 80087fa:	f7ff bf8d 	b.w	8008718 <_puts_r>
 80087fe:	bf00      	nop
 8008800:	2000000c 	.word	0x2000000c

08008804 <_sbrk_r>:
 8008804:	b538      	push	{r3, r4, r5, lr}
 8008806:	4d06      	ldr	r5, [pc, #24]	; (8008820 <_sbrk_r+0x1c>)
 8008808:	2300      	movs	r3, #0
 800880a:	4604      	mov	r4, r0
 800880c:	4608      	mov	r0, r1
 800880e:	602b      	str	r3, [r5, #0]
 8008810:	f7f9 fdfa 	bl	8002408 <_sbrk>
 8008814:	1c43      	adds	r3, r0, #1
 8008816:	d102      	bne.n	800881e <_sbrk_r+0x1a>
 8008818:	682b      	ldr	r3, [r5, #0]
 800881a:	b103      	cbz	r3, 800881e <_sbrk_r+0x1a>
 800881c:	6023      	str	r3, [r4, #0]
 800881e:	bd38      	pop	{r3, r4, r5, pc}
 8008820:	20000470 	.word	0x20000470

08008824 <__swbuf_r>:
 8008824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008826:	460e      	mov	r6, r1
 8008828:	4614      	mov	r4, r2
 800882a:	4605      	mov	r5, r0
 800882c:	b118      	cbz	r0, 8008836 <__swbuf_r+0x12>
 800882e:	6983      	ldr	r3, [r0, #24]
 8008830:	b90b      	cbnz	r3, 8008836 <__swbuf_r+0x12>
 8008832:	f001 f84d 	bl	80098d0 <__sinit>
 8008836:	4b21      	ldr	r3, [pc, #132]	; (80088bc <__swbuf_r+0x98>)
 8008838:	429c      	cmp	r4, r3
 800883a:	d12b      	bne.n	8008894 <__swbuf_r+0x70>
 800883c:	686c      	ldr	r4, [r5, #4]
 800883e:	69a3      	ldr	r3, [r4, #24]
 8008840:	60a3      	str	r3, [r4, #8]
 8008842:	89a3      	ldrh	r3, [r4, #12]
 8008844:	071a      	lsls	r2, r3, #28
 8008846:	d52f      	bpl.n	80088a8 <__swbuf_r+0x84>
 8008848:	6923      	ldr	r3, [r4, #16]
 800884a:	b36b      	cbz	r3, 80088a8 <__swbuf_r+0x84>
 800884c:	6923      	ldr	r3, [r4, #16]
 800884e:	6820      	ldr	r0, [r4, #0]
 8008850:	1ac0      	subs	r0, r0, r3
 8008852:	6963      	ldr	r3, [r4, #20]
 8008854:	b2f6      	uxtb	r6, r6
 8008856:	4283      	cmp	r3, r0
 8008858:	4637      	mov	r7, r6
 800885a:	dc04      	bgt.n	8008866 <__swbuf_r+0x42>
 800885c:	4621      	mov	r1, r4
 800885e:	4628      	mov	r0, r5
 8008860:	f000 ffa2 	bl	80097a8 <_fflush_r>
 8008864:	bb30      	cbnz	r0, 80088b4 <__swbuf_r+0x90>
 8008866:	68a3      	ldr	r3, [r4, #8]
 8008868:	3b01      	subs	r3, #1
 800886a:	60a3      	str	r3, [r4, #8]
 800886c:	6823      	ldr	r3, [r4, #0]
 800886e:	1c5a      	adds	r2, r3, #1
 8008870:	6022      	str	r2, [r4, #0]
 8008872:	701e      	strb	r6, [r3, #0]
 8008874:	6963      	ldr	r3, [r4, #20]
 8008876:	3001      	adds	r0, #1
 8008878:	4283      	cmp	r3, r0
 800887a:	d004      	beq.n	8008886 <__swbuf_r+0x62>
 800887c:	89a3      	ldrh	r3, [r4, #12]
 800887e:	07db      	lsls	r3, r3, #31
 8008880:	d506      	bpl.n	8008890 <__swbuf_r+0x6c>
 8008882:	2e0a      	cmp	r6, #10
 8008884:	d104      	bne.n	8008890 <__swbuf_r+0x6c>
 8008886:	4621      	mov	r1, r4
 8008888:	4628      	mov	r0, r5
 800888a:	f000 ff8d 	bl	80097a8 <_fflush_r>
 800888e:	b988      	cbnz	r0, 80088b4 <__swbuf_r+0x90>
 8008890:	4638      	mov	r0, r7
 8008892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008894:	4b0a      	ldr	r3, [pc, #40]	; (80088c0 <__swbuf_r+0x9c>)
 8008896:	429c      	cmp	r4, r3
 8008898:	d101      	bne.n	800889e <__swbuf_r+0x7a>
 800889a:	68ac      	ldr	r4, [r5, #8]
 800889c:	e7cf      	b.n	800883e <__swbuf_r+0x1a>
 800889e:	4b09      	ldr	r3, [pc, #36]	; (80088c4 <__swbuf_r+0xa0>)
 80088a0:	429c      	cmp	r4, r3
 80088a2:	bf08      	it	eq
 80088a4:	68ec      	ldreq	r4, [r5, #12]
 80088a6:	e7ca      	b.n	800883e <__swbuf_r+0x1a>
 80088a8:	4621      	mov	r1, r4
 80088aa:	4628      	mov	r0, r5
 80088ac:	f000 f80c 	bl	80088c8 <__swsetup_r>
 80088b0:	2800      	cmp	r0, #0
 80088b2:	d0cb      	beq.n	800884c <__swbuf_r+0x28>
 80088b4:	f04f 37ff 	mov.w	r7, #4294967295
 80088b8:	e7ea      	b.n	8008890 <__swbuf_r+0x6c>
 80088ba:	bf00      	nop
 80088bc:	0800b144 	.word	0x0800b144
 80088c0:	0800b164 	.word	0x0800b164
 80088c4:	0800b124 	.word	0x0800b124

080088c8 <__swsetup_r>:
 80088c8:	4b32      	ldr	r3, [pc, #200]	; (8008994 <__swsetup_r+0xcc>)
 80088ca:	b570      	push	{r4, r5, r6, lr}
 80088cc:	681d      	ldr	r5, [r3, #0]
 80088ce:	4606      	mov	r6, r0
 80088d0:	460c      	mov	r4, r1
 80088d2:	b125      	cbz	r5, 80088de <__swsetup_r+0x16>
 80088d4:	69ab      	ldr	r3, [r5, #24]
 80088d6:	b913      	cbnz	r3, 80088de <__swsetup_r+0x16>
 80088d8:	4628      	mov	r0, r5
 80088da:	f000 fff9 	bl	80098d0 <__sinit>
 80088de:	4b2e      	ldr	r3, [pc, #184]	; (8008998 <__swsetup_r+0xd0>)
 80088e0:	429c      	cmp	r4, r3
 80088e2:	d10f      	bne.n	8008904 <__swsetup_r+0x3c>
 80088e4:	686c      	ldr	r4, [r5, #4]
 80088e6:	89a3      	ldrh	r3, [r4, #12]
 80088e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088ec:	0719      	lsls	r1, r3, #28
 80088ee:	d42c      	bmi.n	800894a <__swsetup_r+0x82>
 80088f0:	06dd      	lsls	r5, r3, #27
 80088f2:	d411      	bmi.n	8008918 <__swsetup_r+0x50>
 80088f4:	2309      	movs	r3, #9
 80088f6:	6033      	str	r3, [r6, #0]
 80088f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80088fc:	81a3      	strh	r3, [r4, #12]
 80088fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008902:	e03e      	b.n	8008982 <__swsetup_r+0xba>
 8008904:	4b25      	ldr	r3, [pc, #148]	; (800899c <__swsetup_r+0xd4>)
 8008906:	429c      	cmp	r4, r3
 8008908:	d101      	bne.n	800890e <__swsetup_r+0x46>
 800890a:	68ac      	ldr	r4, [r5, #8]
 800890c:	e7eb      	b.n	80088e6 <__swsetup_r+0x1e>
 800890e:	4b24      	ldr	r3, [pc, #144]	; (80089a0 <__swsetup_r+0xd8>)
 8008910:	429c      	cmp	r4, r3
 8008912:	bf08      	it	eq
 8008914:	68ec      	ldreq	r4, [r5, #12]
 8008916:	e7e6      	b.n	80088e6 <__swsetup_r+0x1e>
 8008918:	0758      	lsls	r0, r3, #29
 800891a:	d512      	bpl.n	8008942 <__swsetup_r+0x7a>
 800891c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800891e:	b141      	cbz	r1, 8008932 <__swsetup_r+0x6a>
 8008920:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008924:	4299      	cmp	r1, r3
 8008926:	d002      	beq.n	800892e <__swsetup_r+0x66>
 8008928:	4630      	mov	r0, r6
 800892a:	f7ff f993 	bl	8007c54 <_free_r>
 800892e:	2300      	movs	r3, #0
 8008930:	6363      	str	r3, [r4, #52]	; 0x34
 8008932:	89a3      	ldrh	r3, [r4, #12]
 8008934:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008938:	81a3      	strh	r3, [r4, #12]
 800893a:	2300      	movs	r3, #0
 800893c:	6063      	str	r3, [r4, #4]
 800893e:	6923      	ldr	r3, [r4, #16]
 8008940:	6023      	str	r3, [r4, #0]
 8008942:	89a3      	ldrh	r3, [r4, #12]
 8008944:	f043 0308 	orr.w	r3, r3, #8
 8008948:	81a3      	strh	r3, [r4, #12]
 800894a:	6923      	ldr	r3, [r4, #16]
 800894c:	b94b      	cbnz	r3, 8008962 <__swsetup_r+0x9a>
 800894e:	89a3      	ldrh	r3, [r4, #12]
 8008950:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008958:	d003      	beq.n	8008962 <__swsetup_r+0x9a>
 800895a:	4621      	mov	r1, r4
 800895c:	4630      	mov	r0, r6
 800895e:	f001 f881 	bl	8009a64 <__smakebuf_r>
 8008962:	89a0      	ldrh	r0, [r4, #12]
 8008964:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008968:	f010 0301 	ands.w	r3, r0, #1
 800896c:	d00a      	beq.n	8008984 <__swsetup_r+0xbc>
 800896e:	2300      	movs	r3, #0
 8008970:	60a3      	str	r3, [r4, #8]
 8008972:	6963      	ldr	r3, [r4, #20]
 8008974:	425b      	negs	r3, r3
 8008976:	61a3      	str	r3, [r4, #24]
 8008978:	6923      	ldr	r3, [r4, #16]
 800897a:	b943      	cbnz	r3, 800898e <__swsetup_r+0xc6>
 800897c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008980:	d1ba      	bne.n	80088f8 <__swsetup_r+0x30>
 8008982:	bd70      	pop	{r4, r5, r6, pc}
 8008984:	0781      	lsls	r1, r0, #30
 8008986:	bf58      	it	pl
 8008988:	6963      	ldrpl	r3, [r4, #20]
 800898a:	60a3      	str	r3, [r4, #8]
 800898c:	e7f4      	b.n	8008978 <__swsetup_r+0xb0>
 800898e:	2000      	movs	r0, #0
 8008990:	e7f7      	b.n	8008982 <__swsetup_r+0xba>
 8008992:	bf00      	nop
 8008994:	2000000c 	.word	0x2000000c
 8008998:	0800b144 	.word	0x0800b144
 800899c:	0800b164 	.word	0x0800b164
 80089a0:	0800b124 	.word	0x0800b124

080089a4 <quorem>:
 80089a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a8:	6903      	ldr	r3, [r0, #16]
 80089aa:	690c      	ldr	r4, [r1, #16]
 80089ac:	42a3      	cmp	r3, r4
 80089ae:	4607      	mov	r7, r0
 80089b0:	f2c0 8081 	blt.w	8008ab6 <quorem+0x112>
 80089b4:	3c01      	subs	r4, #1
 80089b6:	f101 0814 	add.w	r8, r1, #20
 80089ba:	f100 0514 	add.w	r5, r0, #20
 80089be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089c2:	9301      	str	r3, [sp, #4]
 80089c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80089c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089cc:	3301      	adds	r3, #1
 80089ce:	429a      	cmp	r2, r3
 80089d0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80089d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80089d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80089dc:	d331      	bcc.n	8008a42 <quorem+0x9e>
 80089de:	f04f 0e00 	mov.w	lr, #0
 80089e2:	4640      	mov	r0, r8
 80089e4:	46ac      	mov	ip, r5
 80089e6:	46f2      	mov	sl, lr
 80089e8:	f850 2b04 	ldr.w	r2, [r0], #4
 80089ec:	b293      	uxth	r3, r2
 80089ee:	fb06 e303 	mla	r3, r6, r3, lr
 80089f2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	ebaa 0303 	sub.w	r3, sl, r3
 80089fc:	f8dc a000 	ldr.w	sl, [ip]
 8008a00:	0c12      	lsrs	r2, r2, #16
 8008a02:	fa13 f38a 	uxtah	r3, r3, sl
 8008a06:	fb06 e202 	mla	r2, r6, r2, lr
 8008a0a:	9300      	str	r3, [sp, #0]
 8008a0c:	9b00      	ldr	r3, [sp, #0]
 8008a0e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008a12:	b292      	uxth	r2, r2
 8008a14:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008a18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a1c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008a20:	4581      	cmp	r9, r0
 8008a22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a26:	f84c 3b04 	str.w	r3, [ip], #4
 8008a2a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008a2e:	d2db      	bcs.n	80089e8 <quorem+0x44>
 8008a30:	f855 300b 	ldr.w	r3, [r5, fp]
 8008a34:	b92b      	cbnz	r3, 8008a42 <quorem+0x9e>
 8008a36:	9b01      	ldr	r3, [sp, #4]
 8008a38:	3b04      	subs	r3, #4
 8008a3a:	429d      	cmp	r5, r3
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	d32e      	bcc.n	8008a9e <quorem+0xfa>
 8008a40:	613c      	str	r4, [r7, #16]
 8008a42:	4638      	mov	r0, r7
 8008a44:	f001 faea 	bl	800a01c <__mcmp>
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	db24      	blt.n	8008a96 <quorem+0xf2>
 8008a4c:	3601      	adds	r6, #1
 8008a4e:	4628      	mov	r0, r5
 8008a50:	f04f 0c00 	mov.w	ip, #0
 8008a54:	f858 2b04 	ldr.w	r2, [r8], #4
 8008a58:	f8d0 e000 	ldr.w	lr, [r0]
 8008a5c:	b293      	uxth	r3, r2
 8008a5e:	ebac 0303 	sub.w	r3, ip, r3
 8008a62:	0c12      	lsrs	r2, r2, #16
 8008a64:	fa13 f38e 	uxtah	r3, r3, lr
 8008a68:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008a6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a76:	45c1      	cmp	r9, r8
 8008a78:	f840 3b04 	str.w	r3, [r0], #4
 8008a7c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008a80:	d2e8      	bcs.n	8008a54 <quorem+0xb0>
 8008a82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a8a:	b922      	cbnz	r2, 8008a96 <quorem+0xf2>
 8008a8c:	3b04      	subs	r3, #4
 8008a8e:	429d      	cmp	r5, r3
 8008a90:	461a      	mov	r2, r3
 8008a92:	d30a      	bcc.n	8008aaa <quorem+0x106>
 8008a94:	613c      	str	r4, [r7, #16]
 8008a96:	4630      	mov	r0, r6
 8008a98:	b003      	add	sp, #12
 8008a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a9e:	6812      	ldr	r2, [r2, #0]
 8008aa0:	3b04      	subs	r3, #4
 8008aa2:	2a00      	cmp	r2, #0
 8008aa4:	d1cc      	bne.n	8008a40 <quorem+0x9c>
 8008aa6:	3c01      	subs	r4, #1
 8008aa8:	e7c7      	b.n	8008a3a <quorem+0x96>
 8008aaa:	6812      	ldr	r2, [r2, #0]
 8008aac:	3b04      	subs	r3, #4
 8008aae:	2a00      	cmp	r2, #0
 8008ab0:	d1f0      	bne.n	8008a94 <quorem+0xf0>
 8008ab2:	3c01      	subs	r4, #1
 8008ab4:	e7eb      	b.n	8008a8e <quorem+0xea>
 8008ab6:	2000      	movs	r0, #0
 8008ab8:	e7ee      	b.n	8008a98 <quorem+0xf4>
 8008aba:	0000      	movs	r0, r0
 8008abc:	0000      	movs	r0, r0
	...

08008ac0 <_dtoa_r>:
 8008ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac4:	ed2d 8b04 	vpush	{d8-d9}
 8008ac8:	ec57 6b10 	vmov	r6, r7, d0
 8008acc:	b093      	sub	sp, #76	; 0x4c
 8008ace:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008ad0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008ad4:	9106      	str	r1, [sp, #24]
 8008ad6:	ee10 aa10 	vmov	sl, s0
 8008ada:	4604      	mov	r4, r0
 8008adc:	9209      	str	r2, [sp, #36]	; 0x24
 8008ade:	930c      	str	r3, [sp, #48]	; 0x30
 8008ae0:	46bb      	mov	fp, r7
 8008ae2:	b975      	cbnz	r5, 8008b02 <_dtoa_r+0x42>
 8008ae4:	2010      	movs	r0, #16
 8008ae6:	f7ff f8a5 	bl	8007c34 <malloc>
 8008aea:	4602      	mov	r2, r0
 8008aec:	6260      	str	r0, [r4, #36]	; 0x24
 8008aee:	b920      	cbnz	r0, 8008afa <_dtoa_r+0x3a>
 8008af0:	4ba7      	ldr	r3, [pc, #668]	; (8008d90 <_dtoa_r+0x2d0>)
 8008af2:	21ea      	movs	r1, #234	; 0xea
 8008af4:	48a7      	ldr	r0, [pc, #668]	; (8008d94 <_dtoa_r+0x2d4>)
 8008af6:	f001 fd59 	bl	800a5ac <__assert_func>
 8008afa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008afe:	6005      	str	r5, [r0, #0]
 8008b00:	60c5      	str	r5, [r0, #12]
 8008b02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b04:	6819      	ldr	r1, [r3, #0]
 8008b06:	b151      	cbz	r1, 8008b1e <_dtoa_r+0x5e>
 8008b08:	685a      	ldr	r2, [r3, #4]
 8008b0a:	604a      	str	r2, [r1, #4]
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	4093      	lsls	r3, r2
 8008b10:	608b      	str	r3, [r1, #8]
 8008b12:	4620      	mov	r0, r4
 8008b14:	f001 f840 	bl	8009b98 <_Bfree>
 8008b18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	601a      	str	r2, [r3, #0]
 8008b1e:	1e3b      	subs	r3, r7, #0
 8008b20:	bfaa      	itet	ge
 8008b22:	2300      	movge	r3, #0
 8008b24:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008b28:	f8c8 3000 	strge.w	r3, [r8]
 8008b2c:	4b9a      	ldr	r3, [pc, #616]	; (8008d98 <_dtoa_r+0x2d8>)
 8008b2e:	bfbc      	itt	lt
 8008b30:	2201      	movlt	r2, #1
 8008b32:	f8c8 2000 	strlt.w	r2, [r8]
 8008b36:	ea33 030b 	bics.w	r3, r3, fp
 8008b3a:	d11b      	bne.n	8008b74 <_dtoa_r+0xb4>
 8008b3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b3e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008b42:	6013      	str	r3, [r2, #0]
 8008b44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b48:	4333      	orrs	r3, r6
 8008b4a:	f000 8592 	beq.w	8009672 <_dtoa_r+0xbb2>
 8008b4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b50:	b963      	cbnz	r3, 8008b6c <_dtoa_r+0xac>
 8008b52:	4b92      	ldr	r3, [pc, #584]	; (8008d9c <_dtoa_r+0x2dc>)
 8008b54:	e022      	b.n	8008b9c <_dtoa_r+0xdc>
 8008b56:	4b92      	ldr	r3, [pc, #584]	; (8008da0 <_dtoa_r+0x2e0>)
 8008b58:	9301      	str	r3, [sp, #4]
 8008b5a:	3308      	adds	r3, #8
 8008b5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008b5e:	6013      	str	r3, [r2, #0]
 8008b60:	9801      	ldr	r0, [sp, #4]
 8008b62:	b013      	add	sp, #76	; 0x4c
 8008b64:	ecbd 8b04 	vpop	{d8-d9}
 8008b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b6c:	4b8b      	ldr	r3, [pc, #556]	; (8008d9c <_dtoa_r+0x2dc>)
 8008b6e:	9301      	str	r3, [sp, #4]
 8008b70:	3303      	adds	r3, #3
 8008b72:	e7f3      	b.n	8008b5c <_dtoa_r+0x9c>
 8008b74:	2200      	movs	r2, #0
 8008b76:	2300      	movs	r3, #0
 8008b78:	4650      	mov	r0, sl
 8008b7a:	4659      	mov	r1, fp
 8008b7c:	f7f7 ffbc 	bl	8000af8 <__aeabi_dcmpeq>
 8008b80:	ec4b ab19 	vmov	d9, sl, fp
 8008b84:	4680      	mov	r8, r0
 8008b86:	b158      	cbz	r0, 8008ba0 <_dtoa_r+0xe0>
 8008b88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	6013      	str	r3, [r2, #0]
 8008b8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	f000 856b 	beq.w	800966c <_dtoa_r+0xbac>
 8008b96:	4883      	ldr	r0, [pc, #524]	; (8008da4 <_dtoa_r+0x2e4>)
 8008b98:	6018      	str	r0, [r3, #0]
 8008b9a:	1e43      	subs	r3, r0, #1
 8008b9c:	9301      	str	r3, [sp, #4]
 8008b9e:	e7df      	b.n	8008b60 <_dtoa_r+0xa0>
 8008ba0:	ec4b ab10 	vmov	d0, sl, fp
 8008ba4:	aa10      	add	r2, sp, #64	; 0x40
 8008ba6:	a911      	add	r1, sp, #68	; 0x44
 8008ba8:	4620      	mov	r0, r4
 8008baa:	f001 fadd 	bl	800a168 <__d2b>
 8008bae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008bb2:	ee08 0a10 	vmov	s16, r0
 8008bb6:	2d00      	cmp	r5, #0
 8008bb8:	f000 8084 	beq.w	8008cc4 <_dtoa_r+0x204>
 8008bbc:	ee19 3a90 	vmov	r3, s19
 8008bc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008bc4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008bc8:	4656      	mov	r6, sl
 8008bca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008bce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008bd2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008bd6:	4b74      	ldr	r3, [pc, #464]	; (8008da8 <_dtoa_r+0x2e8>)
 8008bd8:	2200      	movs	r2, #0
 8008bda:	4630      	mov	r0, r6
 8008bdc:	4639      	mov	r1, r7
 8008bde:	f7f7 fb6b 	bl	80002b8 <__aeabi_dsub>
 8008be2:	a365      	add	r3, pc, #404	; (adr r3, 8008d78 <_dtoa_r+0x2b8>)
 8008be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be8:	f7f7 fd1e 	bl	8000628 <__aeabi_dmul>
 8008bec:	a364      	add	r3, pc, #400	; (adr r3, 8008d80 <_dtoa_r+0x2c0>)
 8008bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf2:	f7f7 fb63 	bl	80002bc <__adddf3>
 8008bf6:	4606      	mov	r6, r0
 8008bf8:	4628      	mov	r0, r5
 8008bfa:	460f      	mov	r7, r1
 8008bfc:	f7f7 fcaa 	bl	8000554 <__aeabi_i2d>
 8008c00:	a361      	add	r3, pc, #388	; (adr r3, 8008d88 <_dtoa_r+0x2c8>)
 8008c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c06:	f7f7 fd0f 	bl	8000628 <__aeabi_dmul>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	4630      	mov	r0, r6
 8008c10:	4639      	mov	r1, r7
 8008c12:	f7f7 fb53 	bl	80002bc <__adddf3>
 8008c16:	4606      	mov	r6, r0
 8008c18:	460f      	mov	r7, r1
 8008c1a:	f7f7 ffb5 	bl	8000b88 <__aeabi_d2iz>
 8008c1e:	2200      	movs	r2, #0
 8008c20:	9000      	str	r0, [sp, #0]
 8008c22:	2300      	movs	r3, #0
 8008c24:	4630      	mov	r0, r6
 8008c26:	4639      	mov	r1, r7
 8008c28:	f7f7 ff70 	bl	8000b0c <__aeabi_dcmplt>
 8008c2c:	b150      	cbz	r0, 8008c44 <_dtoa_r+0x184>
 8008c2e:	9800      	ldr	r0, [sp, #0]
 8008c30:	f7f7 fc90 	bl	8000554 <__aeabi_i2d>
 8008c34:	4632      	mov	r2, r6
 8008c36:	463b      	mov	r3, r7
 8008c38:	f7f7 ff5e 	bl	8000af8 <__aeabi_dcmpeq>
 8008c3c:	b910      	cbnz	r0, 8008c44 <_dtoa_r+0x184>
 8008c3e:	9b00      	ldr	r3, [sp, #0]
 8008c40:	3b01      	subs	r3, #1
 8008c42:	9300      	str	r3, [sp, #0]
 8008c44:	9b00      	ldr	r3, [sp, #0]
 8008c46:	2b16      	cmp	r3, #22
 8008c48:	d85a      	bhi.n	8008d00 <_dtoa_r+0x240>
 8008c4a:	9a00      	ldr	r2, [sp, #0]
 8008c4c:	4b57      	ldr	r3, [pc, #348]	; (8008dac <_dtoa_r+0x2ec>)
 8008c4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c56:	ec51 0b19 	vmov	r0, r1, d9
 8008c5a:	f7f7 ff57 	bl	8000b0c <__aeabi_dcmplt>
 8008c5e:	2800      	cmp	r0, #0
 8008c60:	d050      	beq.n	8008d04 <_dtoa_r+0x244>
 8008c62:	9b00      	ldr	r3, [sp, #0]
 8008c64:	3b01      	subs	r3, #1
 8008c66:	9300      	str	r3, [sp, #0]
 8008c68:	2300      	movs	r3, #0
 8008c6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c6e:	1b5d      	subs	r5, r3, r5
 8008c70:	1e6b      	subs	r3, r5, #1
 8008c72:	9305      	str	r3, [sp, #20]
 8008c74:	bf45      	ittet	mi
 8008c76:	f1c5 0301 	rsbmi	r3, r5, #1
 8008c7a:	9304      	strmi	r3, [sp, #16]
 8008c7c:	2300      	movpl	r3, #0
 8008c7e:	2300      	movmi	r3, #0
 8008c80:	bf4c      	ite	mi
 8008c82:	9305      	strmi	r3, [sp, #20]
 8008c84:	9304      	strpl	r3, [sp, #16]
 8008c86:	9b00      	ldr	r3, [sp, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	db3d      	blt.n	8008d08 <_dtoa_r+0x248>
 8008c8c:	9b05      	ldr	r3, [sp, #20]
 8008c8e:	9a00      	ldr	r2, [sp, #0]
 8008c90:	920a      	str	r2, [sp, #40]	; 0x28
 8008c92:	4413      	add	r3, r2
 8008c94:	9305      	str	r3, [sp, #20]
 8008c96:	2300      	movs	r3, #0
 8008c98:	9307      	str	r3, [sp, #28]
 8008c9a:	9b06      	ldr	r3, [sp, #24]
 8008c9c:	2b09      	cmp	r3, #9
 8008c9e:	f200 8089 	bhi.w	8008db4 <_dtoa_r+0x2f4>
 8008ca2:	2b05      	cmp	r3, #5
 8008ca4:	bfc4      	itt	gt
 8008ca6:	3b04      	subgt	r3, #4
 8008ca8:	9306      	strgt	r3, [sp, #24]
 8008caa:	9b06      	ldr	r3, [sp, #24]
 8008cac:	f1a3 0302 	sub.w	r3, r3, #2
 8008cb0:	bfcc      	ite	gt
 8008cb2:	2500      	movgt	r5, #0
 8008cb4:	2501      	movle	r5, #1
 8008cb6:	2b03      	cmp	r3, #3
 8008cb8:	f200 8087 	bhi.w	8008dca <_dtoa_r+0x30a>
 8008cbc:	e8df f003 	tbb	[pc, r3]
 8008cc0:	59383a2d 	.word	0x59383a2d
 8008cc4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008cc8:	441d      	add	r5, r3
 8008cca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008cce:	2b20      	cmp	r3, #32
 8008cd0:	bfc1      	itttt	gt
 8008cd2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008cd6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008cda:	fa0b f303 	lslgt.w	r3, fp, r3
 8008cde:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008ce2:	bfda      	itte	le
 8008ce4:	f1c3 0320 	rsble	r3, r3, #32
 8008ce8:	fa06 f003 	lslle.w	r0, r6, r3
 8008cec:	4318      	orrgt	r0, r3
 8008cee:	f7f7 fc21 	bl	8000534 <__aeabi_ui2d>
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	4606      	mov	r6, r0
 8008cf6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008cfa:	3d01      	subs	r5, #1
 8008cfc:	930e      	str	r3, [sp, #56]	; 0x38
 8008cfe:	e76a      	b.n	8008bd6 <_dtoa_r+0x116>
 8008d00:	2301      	movs	r3, #1
 8008d02:	e7b2      	b.n	8008c6a <_dtoa_r+0x1aa>
 8008d04:	900b      	str	r0, [sp, #44]	; 0x2c
 8008d06:	e7b1      	b.n	8008c6c <_dtoa_r+0x1ac>
 8008d08:	9b04      	ldr	r3, [sp, #16]
 8008d0a:	9a00      	ldr	r2, [sp, #0]
 8008d0c:	1a9b      	subs	r3, r3, r2
 8008d0e:	9304      	str	r3, [sp, #16]
 8008d10:	4253      	negs	r3, r2
 8008d12:	9307      	str	r3, [sp, #28]
 8008d14:	2300      	movs	r3, #0
 8008d16:	930a      	str	r3, [sp, #40]	; 0x28
 8008d18:	e7bf      	b.n	8008c9a <_dtoa_r+0x1da>
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	9308      	str	r3, [sp, #32]
 8008d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	dc55      	bgt.n	8008dd0 <_dtoa_r+0x310>
 8008d24:	2301      	movs	r3, #1
 8008d26:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	9209      	str	r2, [sp, #36]	; 0x24
 8008d2e:	e00c      	b.n	8008d4a <_dtoa_r+0x28a>
 8008d30:	2301      	movs	r3, #1
 8008d32:	e7f3      	b.n	8008d1c <_dtoa_r+0x25c>
 8008d34:	2300      	movs	r3, #0
 8008d36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d38:	9308      	str	r3, [sp, #32]
 8008d3a:	9b00      	ldr	r3, [sp, #0]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	9302      	str	r3, [sp, #8]
 8008d40:	3301      	adds	r3, #1
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	9303      	str	r3, [sp, #12]
 8008d46:	bfb8      	it	lt
 8008d48:	2301      	movlt	r3, #1
 8008d4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	6042      	str	r2, [r0, #4]
 8008d50:	2204      	movs	r2, #4
 8008d52:	f102 0614 	add.w	r6, r2, #20
 8008d56:	429e      	cmp	r6, r3
 8008d58:	6841      	ldr	r1, [r0, #4]
 8008d5a:	d93d      	bls.n	8008dd8 <_dtoa_r+0x318>
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	f000 fedb 	bl	8009b18 <_Balloc>
 8008d62:	9001      	str	r0, [sp, #4]
 8008d64:	2800      	cmp	r0, #0
 8008d66:	d13b      	bne.n	8008de0 <_dtoa_r+0x320>
 8008d68:	4b11      	ldr	r3, [pc, #68]	; (8008db0 <_dtoa_r+0x2f0>)
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008d70:	e6c0      	b.n	8008af4 <_dtoa_r+0x34>
 8008d72:	2301      	movs	r3, #1
 8008d74:	e7df      	b.n	8008d36 <_dtoa_r+0x276>
 8008d76:	bf00      	nop
 8008d78:	636f4361 	.word	0x636f4361
 8008d7c:	3fd287a7 	.word	0x3fd287a7
 8008d80:	8b60c8b3 	.word	0x8b60c8b3
 8008d84:	3fc68a28 	.word	0x3fc68a28
 8008d88:	509f79fb 	.word	0x509f79fb
 8008d8c:	3fd34413 	.word	0x3fd34413
 8008d90:	0800b0a1 	.word	0x0800b0a1
 8008d94:	0800b0b8 	.word	0x0800b0b8
 8008d98:	7ff00000 	.word	0x7ff00000
 8008d9c:	0800b09d 	.word	0x0800b09d
 8008da0:	0800b094 	.word	0x0800b094
 8008da4:	0800b071 	.word	0x0800b071
 8008da8:	3ff80000 	.word	0x3ff80000
 8008dac:	0800b208 	.word	0x0800b208
 8008db0:	0800b113 	.word	0x0800b113
 8008db4:	2501      	movs	r5, #1
 8008db6:	2300      	movs	r3, #0
 8008db8:	9306      	str	r3, [sp, #24]
 8008dba:	9508      	str	r5, [sp, #32]
 8008dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8008dc0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	2312      	movs	r3, #18
 8008dc8:	e7b0      	b.n	8008d2c <_dtoa_r+0x26c>
 8008dca:	2301      	movs	r3, #1
 8008dcc:	9308      	str	r3, [sp, #32]
 8008dce:	e7f5      	b.n	8008dbc <_dtoa_r+0x2fc>
 8008dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dd2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008dd6:	e7b8      	b.n	8008d4a <_dtoa_r+0x28a>
 8008dd8:	3101      	adds	r1, #1
 8008dda:	6041      	str	r1, [r0, #4]
 8008ddc:	0052      	lsls	r2, r2, #1
 8008dde:	e7b8      	b.n	8008d52 <_dtoa_r+0x292>
 8008de0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008de2:	9a01      	ldr	r2, [sp, #4]
 8008de4:	601a      	str	r2, [r3, #0]
 8008de6:	9b03      	ldr	r3, [sp, #12]
 8008de8:	2b0e      	cmp	r3, #14
 8008dea:	f200 809d 	bhi.w	8008f28 <_dtoa_r+0x468>
 8008dee:	2d00      	cmp	r5, #0
 8008df0:	f000 809a 	beq.w	8008f28 <_dtoa_r+0x468>
 8008df4:	9b00      	ldr	r3, [sp, #0]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	dd32      	ble.n	8008e60 <_dtoa_r+0x3a0>
 8008dfa:	4ab7      	ldr	r2, [pc, #732]	; (80090d8 <_dtoa_r+0x618>)
 8008dfc:	f003 030f 	and.w	r3, r3, #15
 8008e00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008e04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e08:	9b00      	ldr	r3, [sp, #0]
 8008e0a:	05d8      	lsls	r0, r3, #23
 8008e0c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008e10:	d516      	bpl.n	8008e40 <_dtoa_r+0x380>
 8008e12:	4bb2      	ldr	r3, [pc, #712]	; (80090dc <_dtoa_r+0x61c>)
 8008e14:	ec51 0b19 	vmov	r0, r1, d9
 8008e18:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e1c:	f7f7 fd2e 	bl	800087c <__aeabi_ddiv>
 8008e20:	f007 070f 	and.w	r7, r7, #15
 8008e24:	4682      	mov	sl, r0
 8008e26:	468b      	mov	fp, r1
 8008e28:	2503      	movs	r5, #3
 8008e2a:	4eac      	ldr	r6, [pc, #688]	; (80090dc <_dtoa_r+0x61c>)
 8008e2c:	b957      	cbnz	r7, 8008e44 <_dtoa_r+0x384>
 8008e2e:	4642      	mov	r2, r8
 8008e30:	464b      	mov	r3, r9
 8008e32:	4650      	mov	r0, sl
 8008e34:	4659      	mov	r1, fp
 8008e36:	f7f7 fd21 	bl	800087c <__aeabi_ddiv>
 8008e3a:	4682      	mov	sl, r0
 8008e3c:	468b      	mov	fp, r1
 8008e3e:	e028      	b.n	8008e92 <_dtoa_r+0x3d2>
 8008e40:	2502      	movs	r5, #2
 8008e42:	e7f2      	b.n	8008e2a <_dtoa_r+0x36a>
 8008e44:	07f9      	lsls	r1, r7, #31
 8008e46:	d508      	bpl.n	8008e5a <_dtoa_r+0x39a>
 8008e48:	4640      	mov	r0, r8
 8008e4a:	4649      	mov	r1, r9
 8008e4c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e50:	f7f7 fbea 	bl	8000628 <__aeabi_dmul>
 8008e54:	3501      	adds	r5, #1
 8008e56:	4680      	mov	r8, r0
 8008e58:	4689      	mov	r9, r1
 8008e5a:	107f      	asrs	r7, r7, #1
 8008e5c:	3608      	adds	r6, #8
 8008e5e:	e7e5      	b.n	8008e2c <_dtoa_r+0x36c>
 8008e60:	f000 809b 	beq.w	8008f9a <_dtoa_r+0x4da>
 8008e64:	9b00      	ldr	r3, [sp, #0]
 8008e66:	4f9d      	ldr	r7, [pc, #628]	; (80090dc <_dtoa_r+0x61c>)
 8008e68:	425e      	negs	r6, r3
 8008e6a:	4b9b      	ldr	r3, [pc, #620]	; (80090d8 <_dtoa_r+0x618>)
 8008e6c:	f006 020f 	and.w	r2, r6, #15
 8008e70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e78:	ec51 0b19 	vmov	r0, r1, d9
 8008e7c:	f7f7 fbd4 	bl	8000628 <__aeabi_dmul>
 8008e80:	1136      	asrs	r6, r6, #4
 8008e82:	4682      	mov	sl, r0
 8008e84:	468b      	mov	fp, r1
 8008e86:	2300      	movs	r3, #0
 8008e88:	2502      	movs	r5, #2
 8008e8a:	2e00      	cmp	r6, #0
 8008e8c:	d17a      	bne.n	8008f84 <_dtoa_r+0x4c4>
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d1d3      	bne.n	8008e3a <_dtoa_r+0x37a>
 8008e92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	f000 8082 	beq.w	8008f9e <_dtoa_r+0x4de>
 8008e9a:	4b91      	ldr	r3, [pc, #580]	; (80090e0 <_dtoa_r+0x620>)
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	4650      	mov	r0, sl
 8008ea0:	4659      	mov	r1, fp
 8008ea2:	f7f7 fe33 	bl	8000b0c <__aeabi_dcmplt>
 8008ea6:	2800      	cmp	r0, #0
 8008ea8:	d079      	beq.n	8008f9e <_dtoa_r+0x4de>
 8008eaa:	9b03      	ldr	r3, [sp, #12]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d076      	beq.n	8008f9e <_dtoa_r+0x4de>
 8008eb0:	9b02      	ldr	r3, [sp, #8]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	dd36      	ble.n	8008f24 <_dtoa_r+0x464>
 8008eb6:	9b00      	ldr	r3, [sp, #0]
 8008eb8:	4650      	mov	r0, sl
 8008eba:	4659      	mov	r1, fp
 8008ebc:	1e5f      	subs	r7, r3, #1
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	4b88      	ldr	r3, [pc, #544]	; (80090e4 <_dtoa_r+0x624>)
 8008ec2:	f7f7 fbb1 	bl	8000628 <__aeabi_dmul>
 8008ec6:	9e02      	ldr	r6, [sp, #8]
 8008ec8:	4682      	mov	sl, r0
 8008eca:	468b      	mov	fp, r1
 8008ecc:	3501      	adds	r5, #1
 8008ece:	4628      	mov	r0, r5
 8008ed0:	f7f7 fb40 	bl	8000554 <__aeabi_i2d>
 8008ed4:	4652      	mov	r2, sl
 8008ed6:	465b      	mov	r3, fp
 8008ed8:	f7f7 fba6 	bl	8000628 <__aeabi_dmul>
 8008edc:	4b82      	ldr	r3, [pc, #520]	; (80090e8 <_dtoa_r+0x628>)
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f7f7 f9ec 	bl	80002bc <__adddf3>
 8008ee4:	46d0      	mov	r8, sl
 8008ee6:	46d9      	mov	r9, fp
 8008ee8:	4682      	mov	sl, r0
 8008eea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008eee:	2e00      	cmp	r6, #0
 8008ef0:	d158      	bne.n	8008fa4 <_dtoa_r+0x4e4>
 8008ef2:	4b7e      	ldr	r3, [pc, #504]	; (80090ec <_dtoa_r+0x62c>)
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	4640      	mov	r0, r8
 8008ef8:	4649      	mov	r1, r9
 8008efa:	f7f7 f9dd 	bl	80002b8 <__aeabi_dsub>
 8008efe:	4652      	mov	r2, sl
 8008f00:	465b      	mov	r3, fp
 8008f02:	4680      	mov	r8, r0
 8008f04:	4689      	mov	r9, r1
 8008f06:	f7f7 fe1f 	bl	8000b48 <__aeabi_dcmpgt>
 8008f0a:	2800      	cmp	r0, #0
 8008f0c:	f040 8295 	bne.w	800943a <_dtoa_r+0x97a>
 8008f10:	4652      	mov	r2, sl
 8008f12:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008f16:	4640      	mov	r0, r8
 8008f18:	4649      	mov	r1, r9
 8008f1a:	f7f7 fdf7 	bl	8000b0c <__aeabi_dcmplt>
 8008f1e:	2800      	cmp	r0, #0
 8008f20:	f040 8289 	bne.w	8009436 <_dtoa_r+0x976>
 8008f24:	ec5b ab19 	vmov	sl, fp, d9
 8008f28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	f2c0 8148 	blt.w	80091c0 <_dtoa_r+0x700>
 8008f30:	9a00      	ldr	r2, [sp, #0]
 8008f32:	2a0e      	cmp	r2, #14
 8008f34:	f300 8144 	bgt.w	80091c0 <_dtoa_r+0x700>
 8008f38:	4b67      	ldr	r3, [pc, #412]	; (80090d8 <_dtoa_r+0x618>)
 8008f3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f3e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	f280 80d5 	bge.w	80090f4 <_dtoa_r+0x634>
 8008f4a:	9b03      	ldr	r3, [sp, #12]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	f300 80d1 	bgt.w	80090f4 <_dtoa_r+0x634>
 8008f52:	f040 826f 	bne.w	8009434 <_dtoa_r+0x974>
 8008f56:	4b65      	ldr	r3, [pc, #404]	; (80090ec <_dtoa_r+0x62c>)
 8008f58:	2200      	movs	r2, #0
 8008f5a:	4640      	mov	r0, r8
 8008f5c:	4649      	mov	r1, r9
 8008f5e:	f7f7 fb63 	bl	8000628 <__aeabi_dmul>
 8008f62:	4652      	mov	r2, sl
 8008f64:	465b      	mov	r3, fp
 8008f66:	f7f7 fde5 	bl	8000b34 <__aeabi_dcmpge>
 8008f6a:	9e03      	ldr	r6, [sp, #12]
 8008f6c:	4637      	mov	r7, r6
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	f040 8245 	bne.w	80093fe <_dtoa_r+0x93e>
 8008f74:	9d01      	ldr	r5, [sp, #4]
 8008f76:	2331      	movs	r3, #49	; 0x31
 8008f78:	f805 3b01 	strb.w	r3, [r5], #1
 8008f7c:	9b00      	ldr	r3, [sp, #0]
 8008f7e:	3301      	adds	r3, #1
 8008f80:	9300      	str	r3, [sp, #0]
 8008f82:	e240      	b.n	8009406 <_dtoa_r+0x946>
 8008f84:	07f2      	lsls	r2, r6, #31
 8008f86:	d505      	bpl.n	8008f94 <_dtoa_r+0x4d4>
 8008f88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f8c:	f7f7 fb4c 	bl	8000628 <__aeabi_dmul>
 8008f90:	3501      	adds	r5, #1
 8008f92:	2301      	movs	r3, #1
 8008f94:	1076      	asrs	r6, r6, #1
 8008f96:	3708      	adds	r7, #8
 8008f98:	e777      	b.n	8008e8a <_dtoa_r+0x3ca>
 8008f9a:	2502      	movs	r5, #2
 8008f9c:	e779      	b.n	8008e92 <_dtoa_r+0x3d2>
 8008f9e:	9f00      	ldr	r7, [sp, #0]
 8008fa0:	9e03      	ldr	r6, [sp, #12]
 8008fa2:	e794      	b.n	8008ece <_dtoa_r+0x40e>
 8008fa4:	9901      	ldr	r1, [sp, #4]
 8008fa6:	4b4c      	ldr	r3, [pc, #304]	; (80090d8 <_dtoa_r+0x618>)
 8008fa8:	4431      	add	r1, r6
 8008faa:	910d      	str	r1, [sp, #52]	; 0x34
 8008fac:	9908      	ldr	r1, [sp, #32]
 8008fae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008fb2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008fb6:	2900      	cmp	r1, #0
 8008fb8:	d043      	beq.n	8009042 <_dtoa_r+0x582>
 8008fba:	494d      	ldr	r1, [pc, #308]	; (80090f0 <_dtoa_r+0x630>)
 8008fbc:	2000      	movs	r0, #0
 8008fbe:	f7f7 fc5d 	bl	800087c <__aeabi_ddiv>
 8008fc2:	4652      	mov	r2, sl
 8008fc4:	465b      	mov	r3, fp
 8008fc6:	f7f7 f977 	bl	80002b8 <__aeabi_dsub>
 8008fca:	9d01      	ldr	r5, [sp, #4]
 8008fcc:	4682      	mov	sl, r0
 8008fce:	468b      	mov	fp, r1
 8008fd0:	4649      	mov	r1, r9
 8008fd2:	4640      	mov	r0, r8
 8008fd4:	f7f7 fdd8 	bl	8000b88 <__aeabi_d2iz>
 8008fd8:	4606      	mov	r6, r0
 8008fda:	f7f7 fabb 	bl	8000554 <__aeabi_i2d>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	4640      	mov	r0, r8
 8008fe4:	4649      	mov	r1, r9
 8008fe6:	f7f7 f967 	bl	80002b8 <__aeabi_dsub>
 8008fea:	3630      	adds	r6, #48	; 0x30
 8008fec:	f805 6b01 	strb.w	r6, [r5], #1
 8008ff0:	4652      	mov	r2, sl
 8008ff2:	465b      	mov	r3, fp
 8008ff4:	4680      	mov	r8, r0
 8008ff6:	4689      	mov	r9, r1
 8008ff8:	f7f7 fd88 	bl	8000b0c <__aeabi_dcmplt>
 8008ffc:	2800      	cmp	r0, #0
 8008ffe:	d163      	bne.n	80090c8 <_dtoa_r+0x608>
 8009000:	4642      	mov	r2, r8
 8009002:	464b      	mov	r3, r9
 8009004:	4936      	ldr	r1, [pc, #216]	; (80090e0 <_dtoa_r+0x620>)
 8009006:	2000      	movs	r0, #0
 8009008:	f7f7 f956 	bl	80002b8 <__aeabi_dsub>
 800900c:	4652      	mov	r2, sl
 800900e:	465b      	mov	r3, fp
 8009010:	f7f7 fd7c 	bl	8000b0c <__aeabi_dcmplt>
 8009014:	2800      	cmp	r0, #0
 8009016:	f040 80b5 	bne.w	8009184 <_dtoa_r+0x6c4>
 800901a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800901c:	429d      	cmp	r5, r3
 800901e:	d081      	beq.n	8008f24 <_dtoa_r+0x464>
 8009020:	4b30      	ldr	r3, [pc, #192]	; (80090e4 <_dtoa_r+0x624>)
 8009022:	2200      	movs	r2, #0
 8009024:	4650      	mov	r0, sl
 8009026:	4659      	mov	r1, fp
 8009028:	f7f7 fafe 	bl	8000628 <__aeabi_dmul>
 800902c:	4b2d      	ldr	r3, [pc, #180]	; (80090e4 <_dtoa_r+0x624>)
 800902e:	4682      	mov	sl, r0
 8009030:	468b      	mov	fp, r1
 8009032:	4640      	mov	r0, r8
 8009034:	4649      	mov	r1, r9
 8009036:	2200      	movs	r2, #0
 8009038:	f7f7 faf6 	bl	8000628 <__aeabi_dmul>
 800903c:	4680      	mov	r8, r0
 800903e:	4689      	mov	r9, r1
 8009040:	e7c6      	b.n	8008fd0 <_dtoa_r+0x510>
 8009042:	4650      	mov	r0, sl
 8009044:	4659      	mov	r1, fp
 8009046:	f7f7 faef 	bl	8000628 <__aeabi_dmul>
 800904a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800904c:	9d01      	ldr	r5, [sp, #4]
 800904e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009050:	4682      	mov	sl, r0
 8009052:	468b      	mov	fp, r1
 8009054:	4649      	mov	r1, r9
 8009056:	4640      	mov	r0, r8
 8009058:	f7f7 fd96 	bl	8000b88 <__aeabi_d2iz>
 800905c:	4606      	mov	r6, r0
 800905e:	f7f7 fa79 	bl	8000554 <__aeabi_i2d>
 8009062:	3630      	adds	r6, #48	; 0x30
 8009064:	4602      	mov	r2, r0
 8009066:	460b      	mov	r3, r1
 8009068:	4640      	mov	r0, r8
 800906a:	4649      	mov	r1, r9
 800906c:	f7f7 f924 	bl	80002b8 <__aeabi_dsub>
 8009070:	f805 6b01 	strb.w	r6, [r5], #1
 8009074:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009076:	429d      	cmp	r5, r3
 8009078:	4680      	mov	r8, r0
 800907a:	4689      	mov	r9, r1
 800907c:	f04f 0200 	mov.w	r2, #0
 8009080:	d124      	bne.n	80090cc <_dtoa_r+0x60c>
 8009082:	4b1b      	ldr	r3, [pc, #108]	; (80090f0 <_dtoa_r+0x630>)
 8009084:	4650      	mov	r0, sl
 8009086:	4659      	mov	r1, fp
 8009088:	f7f7 f918 	bl	80002bc <__adddf3>
 800908c:	4602      	mov	r2, r0
 800908e:	460b      	mov	r3, r1
 8009090:	4640      	mov	r0, r8
 8009092:	4649      	mov	r1, r9
 8009094:	f7f7 fd58 	bl	8000b48 <__aeabi_dcmpgt>
 8009098:	2800      	cmp	r0, #0
 800909a:	d173      	bne.n	8009184 <_dtoa_r+0x6c4>
 800909c:	4652      	mov	r2, sl
 800909e:	465b      	mov	r3, fp
 80090a0:	4913      	ldr	r1, [pc, #76]	; (80090f0 <_dtoa_r+0x630>)
 80090a2:	2000      	movs	r0, #0
 80090a4:	f7f7 f908 	bl	80002b8 <__aeabi_dsub>
 80090a8:	4602      	mov	r2, r0
 80090aa:	460b      	mov	r3, r1
 80090ac:	4640      	mov	r0, r8
 80090ae:	4649      	mov	r1, r9
 80090b0:	f7f7 fd2c 	bl	8000b0c <__aeabi_dcmplt>
 80090b4:	2800      	cmp	r0, #0
 80090b6:	f43f af35 	beq.w	8008f24 <_dtoa_r+0x464>
 80090ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80090bc:	1e6b      	subs	r3, r5, #1
 80090be:	930f      	str	r3, [sp, #60]	; 0x3c
 80090c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80090c4:	2b30      	cmp	r3, #48	; 0x30
 80090c6:	d0f8      	beq.n	80090ba <_dtoa_r+0x5fa>
 80090c8:	9700      	str	r7, [sp, #0]
 80090ca:	e049      	b.n	8009160 <_dtoa_r+0x6a0>
 80090cc:	4b05      	ldr	r3, [pc, #20]	; (80090e4 <_dtoa_r+0x624>)
 80090ce:	f7f7 faab 	bl	8000628 <__aeabi_dmul>
 80090d2:	4680      	mov	r8, r0
 80090d4:	4689      	mov	r9, r1
 80090d6:	e7bd      	b.n	8009054 <_dtoa_r+0x594>
 80090d8:	0800b208 	.word	0x0800b208
 80090dc:	0800b1e0 	.word	0x0800b1e0
 80090e0:	3ff00000 	.word	0x3ff00000
 80090e4:	40240000 	.word	0x40240000
 80090e8:	401c0000 	.word	0x401c0000
 80090ec:	40140000 	.word	0x40140000
 80090f0:	3fe00000 	.word	0x3fe00000
 80090f4:	9d01      	ldr	r5, [sp, #4]
 80090f6:	4656      	mov	r6, sl
 80090f8:	465f      	mov	r7, fp
 80090fa:	4642      	mov	r2, r8
 80090fc:	464b      	mov	r3, r9
 80090fe:	4630      	mov	r0, r6
 8009100:	4639      	mov	r1, r7
 8009102:	f7f7 fbbb 	bl	800087c <__aeabi_ddiv>
 8009106:	f7f7 fd3f 	bl	8000b88 <__aeabi_d2iz>
 800910a:	4682      	mov	sl, r0
 800910c:	f7f7 fa22 	bl	8000554 <__aeabi_i2d>
 8009110:	4642      	mov	r2, r8
 8009112:	464b      	mov	r3, r9
 8009114:	f7f7 fa88 	bl	8000628 <__aeabi_dmul>
 8009118:	4602      	mov	r2, r0
 800911a:	460b      	mov	r3, r1
 800911c:	4630      	mov	r0, r6
 800911e:	4639      	mov	r1, r7
 8009120:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009124:	f7f7 f8c8 	bl	80002b8 <__aeabi_dsub>
 8009128:	f805 6b01 	strb.w	r6, [r5], #1
 800912c:	9e01      	ldr	r6, [sp, #4]
 800912e:	9f03      	ldr	r7, [sp, #12]
 8009130:	1bae      	subs	r6, r5, r6
 8009132:	42b7      	cmp	r7, r6
 8009134:	4602      	mov	r2, r0
 8009136:	460b      	mov	r3, r1
 8009138:	d135      	bne.n	80091a6 <_dtoa_r+0x6e6>
 800913a:	f7f7 f8bf 	bl	80002bc <__adddf3>
 800913e:	4642      	mov	r2, r8
 8009140:	464b      	mov	r3, r9
 8009142:	4606      	mov	r6, r0
 8009144:	460f      	mov	r7, r1
 8009146:	f7f7 fcff 	bl	8000b48 <__aeabi_dcmpgt>
 800914a:	b9d0      	cbnz	r0, 8009182 <_dtoa_r+0x6c2>
 800914c:	4642      	mov	r2, r8
 800914e:	464b      	mov	r3, r9
 8009150:	4630      	mov	r0, r6
 8009152:	4639      	mov	r1, r7
 8009154:	f7f7 fcd0 	bl	8000af8 <__aeabi_dcmpeq>
 8009158:	b110      	cbz	r0, 8009160 <_dtoa_r+0x6a0>
 800915a:	f01a 0f01 	tst.w	sl, #1
 800915e:	d110      	bne.n	8009182 <_dtoa_r+0x6c2>
 8009160:	4620      	mov	r0, r4
 8009162:	ee18 1a10 	vmov	r1, s16
 8009166:	f000 fd17 	bl	8009b98 <_Bfree>
 800916a:	2300      	movs	r3, #0
 800916c:	9800      	ldr	r0, [sp, #0]
 800916e:	702b      	strb	r3, [r5, #0]
 8009170:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009172:	3001      	adds	r0, #1
 8009174:	6018      	str	r0, [r3, #0]
 8009176:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009178:	2b00      	cmp	r3, #0
 800917a:	f43f acf1 	beq.w	8008b60 <_dtoa_r+0xa0>
 800917e:	601d      	str	r5, [r3, #0]
 8009180:	e4ee      	b.n	8008b60 <_dtoa_r+0xa0>
 8009182:	9f00      	ldr	r7, [sp, #0]
 8009184:	462b      	mov	r3, r5
 8009186:	461d      	mov	r5, r3
 8009188:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800918c:	2a39      	cmp	r2, #57	; 0x39
 800918e:	d106      	bne.n	800919e <_dtoa_r+0x6de>
 8009190:	9a01      	ldr	r2, [sp, #4]
 8009192:	429a      	cmp	r2, r3
 8009194:	d1f7      	bne.n	8009186 <_dtoa_r+0x6c6>
 8009196:	9901      	ldr	r1, [sp, #4]
 8009198:	2230      	movs	r2, #48	; 0x30
 800919a:	3701      	adds	r7, #1
 800919c:	700a      	strb	r2, [r1, #0]
 800919e:	781a      	ldrb	r2, [r3, #0]
 80091a0:	3201      	adds	r2, #1
 80091a2:	701a      	strb	r2, [r3, #0]
 80091a4:	e790      	b.n	80090c8 <_dtoa_r+0x608>
 80091a6:	4ba6      	ldr	r3, [pc, #664]	; (8009440 <_dtoa_r+0x980>)
 80091a8:	2200      	movs	r2, #0
 80091aa:	f7f7 fa3d 	bl	8000628 <__aeabi_dmul>
 80091ae:	2200      	movs	r2, #0
 80091b0:	2300      	movs	r3, #0
 80091b2:	4606      	mov	r6, r0
 80091b4:	460f      	mov	r7, r1
 80091b6:	f7f7 fc9f 	bl	8000af8 <__aeabi_dcmpeq>
 80091ba:	2800      	cmp	r0, #0
 80091bc:	d09d      	beq.n	80090fa <_dtoa_r+0x63a>
 80091be:	e7cf      	b.n	8009160 <_dtoa_r+0x6a0>
 80091c0:	9a08      	ldr	r2, [sp, #32]
 80091c2:	2a00      	cmp	r2, #0
 80091c4:	f000 80d7 	beq.w	8009376 <_dtoa_r+0x8b6>
 80091c8:	9a06      	ldr	r2, [sp, #24]
 80091ca:	2a01      	cmp	r2, #1
 80091cc:	f300 80ba 	bgt.w	8009344 <_dtoa_r+0x884>
 80091d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80091d2:	2a00      	cmp	r2, #0
 80091d4:	f000 80b2 	beq.w	800933c <_dtoa_r+0x87c>
 80091d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80091dc:	9e07      	ldr	r6, [sp, #28]
 80091de:	9d04      	ldr	r5, [sp, #16]
 80091e0:	9a04      	ldr	r2, [sp, #16]
 80091e2:	441a      	add	r2, r3
 80091e4:	9204      	str	r2, [sp, #16]
 80091e6:	9a05      	ldr	r2, [sp, #20]
 80091e8:	2101      	movs	r1, #1
 80091ea:	441a      	add	r2, r3
 80091ec:	4620      	mov	r0, r4
 80091ee:	9205      	str	r2, [sp, #20]
 80091f0:	f000 fd8a 	bl	8009d08 <__i2b>
 80091f4:	4607      	mov	r7, r0
 80091f6:	2d00      	cmp	r5, #0
 80091f8:	dd0c      	ble.n	8009214 <_dtoa_r+0x754>
 80091fa:	9b05      	ldr	r3, [sp, #20]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	dd09      	ble.n	8009214 <_dtoa_r+0x754>
 8009200:	42ab      	cmp	r3, r5
 8009202:	9a04      	ldr	r2, [sp, #16]
 8009204:	bfa8      	it	ge
 8009206:	462b      	movge	r3, r5
 8009208:	1ad2      	subs	r2, r2, r3
 800920a:	9204      	str	r2, [sp, #16]
 800920c:	9a05      	ldr	r2, [sp, #20]
 800920e:	1aed      	subs	r5, r5, r3
 8009210:	1ad3      	subs	r3, r2, r3
 8009212:	9305      	str	r3, [sp, #20]
 8009214:	9b07      	ldr	r3, [sp, #28]
 8009216:	b31b      	cbz	r3, 8009260 <_dtoa_r+0x7a0>
 8009218:	9b08      	ldr	r3, [sp, #32]
 800921a:	2b00      	cmp	r3, #0
 800921c:	f000 80af 	beq.w	800937e <_dtoa_r+0x8be>
 8009220:	2e00      	cmp	r6, #0
 8009222:	dd13      	ble.n	800924c <_dtoa_r+0x78c>
 8009224:	4639      	mov	r1, r7
 8009226:	4632      	mov	r2, r6
 8009228:	4620      	mov	r0, r4
 800922a:	f000 fe2d 	bl	8009e88 <__pow5mult>
 800922e:	ee18 2a10 	vmov	r2, s16
 8009232:	4601      	mov	r1, r0
 8009234:	4607      	mov	r7, r0
 8009236:	4620      	mov	r0, r4
 8009238:	f000 fd7c 	bl	8009d34 <__multiply>
 800923c:	ee18 1a10 	vmov	r1, s16
 8009240:	4680      	mov	r8, r0
 8009242:	4620      	mov	r0, r4
 8009244:	f000 fca8 	bl	8009b98 <_Bfree>
 8009248:	ee08 8a10 	vmov	s16, r8
 800924c:	9b07      	ldr	r3, [sp, #28]
 800924e:	1b9a      	subs	r2, r3, r6
 8009250:	d006      	beq.n	8009260 <_dtoa_r+0x7a0>
 8009252:	ee18 1a10 	vmov	r1, s16
 8009256:	4620      	mov	r0, r4
 8009258:	f000 fe16 	bl	8009e88 <__pow5mult>
 800925c:	ee08 0a10 	vmov	s16, r0
 8009260:	2101      	movs	r1, #1
 8009262:	4620      	mov	r0, r4
 8009264:	f000 fd50 	bl	8009d08 <__i2b>
 8009268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800926a:	2b00      	cmp	r3, #0
 800926c:	4606      	mov	r6, r0
 800926e:	f340 8088 	ble.w	8009382 <_dtoa_r+0x8c2>
 8009272:	461a      	mov	r2, r3
 8009274:	4601      	mov	r1, r0
 8009276:	4620      	mov	r0, r4
 8009278:	f000 fe06 	bl	8009e88 <__pow5mult>
 800927c:	9b06      	ldr	r3, [sp, #24]
 800927e:	2b01      	cmp	r3, #1
 8009280:	4606      	mov	r6, r0
 8009282:	f340 8081 	ble.w	8009388 <_dtoa_r+0x8c8>
 8009286:	f04f 0800 	mov.w	r8, #0
 800928a:	6933      	ldr	r3, [r6, #16]
 800928c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009290:	6918      	ldr	r0, [r3, #16]
 8009292:	f000 fce9 	bl	8009c68 <__hi0bits>
 8009296:	f1c0 0020 	rsb	r0, r0, #32
 800929a:	9b05      	ldr	r3, [sp, #20]
 800929c:	4418      	add	r0, r3
 800929e:	f010 001f 	ands.w	r0, r0, #31
 80092a2:	f000 8092 	beq.w	80093ca <_dtoa_r+0x90a>
 80092a6:	f1c0 0320 	rsb	r3, r0, #32
 80092aa:	2b04      	cmp	r3, #4
 80092ac:	f340 808a 	ble.w	80093c4 <_dtoa_r+0x904>
 80092b0:	f1c0 001c 	rsb	r0, r0, #28
 80092b4:	9b04      	ldr	r3, [sp, #16]
 80092b6:	4403      	add	r3, r0
 80092b8:	9304      	str	r3, [sp, #16]
 80092ba:	9b05      	ldr	r3, [sp, #20]
 80092bc:	4403      	add	r3, r0
 80092be:	4405      	add	r5, r0
 80092c0:	9305      	str	r3, [sp, #20]
 80092c2:	9b04      	ldr	r3, [sp, #16]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	dd07      	ble.n	80092d8 <_dtoa_r+0x818>
 80092c8:	ee18 1a10 	vmov	r1, s16
 80092cc:	461a      	mov	r2, r3
 80092ce:	4620      	mov	r0, r4
 80092d0:	f000 fe34 	bl	8009f3c <__lshift>
 80092d4:	ee08 0a10 	vmov	s16, r0
 80092d8:	9b05      	ldr	r3, [sp, #20]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	dd05      	ble.n	80092ea <_dtoa_r+0x82a>
 80092de:	4631      	mov	r1, r6
 80092e0:	461a      	mov	r2, r3
 80092e2:	4620      	mov	r0, r4
 80092e4:	f000 fe2a 	bl	8009f3c <__lshift>
 80092e8:	4606      	mov	r6, r0
 80092ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d06e      	beq.n	80093ce <_dtoa_r+0x90e>
 80092f0:	ee18 0a10 	vmov	r0, s16
 80092f4:	4631      	mov	r1, r6
 80092f6:	f000 fe91 	bl	800a01c <__mcmp>
 80092fa:	2800      	cmp	r0, #0
 80092fc:	da67      	bge.n	80093ce <_dtoa_r+0x90e>
 80092fe:	9b00      	ldr	r3, [sp, #0]
 8009300:	3b01      	subs	r3, #1
 8009302:	ee18 1a10 	vmov	r1, s16
 8009306:	9300      	str	r3, [sp, #0]
 8009308:	220a      	movs	r2, #10
 800930a:	2300      	movs	r3, #0
 800930c:	4620      	mov	r0, r4
 800930e:	f000 fc65 	bl	8009bdc <__multadd>
 8009312:	9b08      	ldr	r3, [sp, #32]
 8009314:	ee08 0a10 	vmov	s16, r0
 8009318:	2b00      	cmp	r3, #0
 800931a:	f000 81b1 	beq.w	8009680 <_dtoa_r+0xbc0>
 800931e:	2300      	movs	r3, #0
 8009320:	4639      	mov	r1, r7
 8009322:	220a      	movs	r2, #10
 8009324:	4620      	mov	r0, r4
 8009326:	f000 fc59 	bl	8009bdc <__multadd>
 800932a:	9b02      	ldr	r3, [sp, #8]
 800932c:	2b00      	cmp	r3, #0
 800932e:	4607      	mov	r7, r0
 8009330:	f300 808e 	bgt.w	8009450 <_dtoa_r+0x990>
 8009334:	9b06      	ldr	r3, [sp, #24]
 8009336:	2b02      	cmp	r3, #2
 8009338:	dc51      	bgt.n	80093de <_dtoa_r+0x91e>
 800933a:	e089      	b.n	8009450 <_dtoa_r+0x990>
 800933c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800933e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009342:	e74b      	b.n	80091dc <_dtoa_r+0x71c>
 8009344:	9b03      	ldr	r3, [sp, #12]
 8009346:	1e5e      	subs	r6, r3, #1
 8009348:	9b07      	ldr	r3, [sp, #28]
 800934a:	42b3      	cmp	r3, r6
 800934c:	bfbf      	itttt	lt
 800934e:	9b07      	ldrlt	r3, [sp, #28]
 8009350:	9607      	strlt	r6, [sp, #28]
 8009352:	1af2      	sublt	r2, r6, r3
 8009354:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009356:	bfb6      	itet	lt
 8009358:	189b      	addlt	r3, r3, r2
 800935a:	1b9e      	subge	r6, r3, r6
 800935c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800935e:	9b03      	ldr	r3, [sp, #12]
 8009360:	bfb8      	it	lt
 8009362:	2600      	movlt	r6, #0
 8009364:	2b00      	cmp	r3, #0
 8009366:	bfb7      	itett	lt
 8009368:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800936c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009370:	1a9d      	sublt	r5, r3, r2
 8009372:	2300      	movlt	r3, #0
 8009374:	e734      	b.n	80091e0 <_dtoa_r+0x720>
 8009376:	9e07      	ldr	r6, [sp, #28]
 8009378:	9d04      	ldr	r5, [sp, #16]
 800937a:	9f08      	ldr	r7, [sp, #32]
 800937c:	e73b      	b.n	80091f6 <_dtoa_r+0x736>
 800937e:	9a07      	ldr	r2, [sp, #28]
 8009380:	e767      	b.n	8009252 <_dtoa_r+0x792>
 8009382:	9b06      	ldr	r3, [sp, #24]
 8009384:	2b01      	cmp	r3, #1
 8009386:	dc18      	bgt.n	80093ba <_dtoa_r+0x8fa>
 8009388:	f1ba 0f00 	cmp.w	sl, #0
 800938c:	d115      	bne.n	80093ba <_dtoa_r+0x8fa>
 800938e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009392:	b993      	cbnz	r3, 80093ba <_dtoa_r+0x8fa>
 8009394:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009398:	0d1b      	lsrs	r3, r3, #20
 800939a:	051b      	lsls	r3, r3, #20
 800939c:	b183      	cbz	r3, 80093c0 <_dtoa_r+0x900>
 800939e:	9b04      	ldr	r3, [sp, #16]
 80093a0:	3301      	adds	r3, #1
 80093a2:	9304      	str	r3, [sp, #16]
 80093a4:	9b05      	ldr	r3, [sp, #20]
 80093a6:	3301      	adds	r3, #1
 80093a8:	9305      	str	r3, [sp, #20]
 80093aa:	f04f 0801 	mov.w	r8, #1
 80093ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	f47f af6a 	bne.w	800928a <_dtoa_r+0x7ca>
 80093b6:	2001      	movs	r0, #1
 80093b8:	e76f      	b.n	800929a <_dtoa_r+0x7da>
 80093ba:	f04f 0800 	mov.w	r8, #0
 80093be:	e7f6      	b.n	80093ae <_dtoa_r+0x8ee>
 80093c0:	4698      	mov	r8, r3
 80093c2:	e7f4      	b.n	80093ae <_dtoa_r+0x8ee>
 80093c4:	f43f af7d 	beq.w	80092c2 <_dtoa_r+0x802>
 80093c8:	4618      	mov	r0, r3
 80093ca:	301c      	adds	r0, #28
 80093cc:	e772      	b.n	80092b4 <_dtoa_r+0x7f4>
 80093ce:	9b03      	ldr	r3, [sp, #12]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	dc37      	bgt.n	8009444 <_dtoa_r+0x984>
 80093d4:	9b06      	ldr	r3, [sp, #24]
 80093d6:	2b02      	cmp	r3, #2
 80093d8:	dd34      	ble.n	8009444 <_dtoa_r+0x984>
 80093da:	9b03      	ldr	r3, [sp, #12]
 80093dc:	9302      	str	r3, [sp, #8]
 80093de:	9b02      	ldr	r3, [sp, #8]
 80093e0:	b96b      	cbnz	r3, 80093fe <_dtoa_r+0x93e>
 80093e2:	4631      	mov	r1, r6
 80093e4:	2205      	movs	r2, #5
 80093e6:	4620      	mov	r0, r4
 80093e8:	f000 fbf8 	bl	8009bdc <__multadd>
 80093ec:	4601      	mov	r1, r0
 80093ee:	4606      	mov	r6, r0
 80093f0:	ee18 0a10 	vmov	r0, s16
 80093f4:	f000 fe12 	bl	800a01c <__mcmp>
 80093f8:	2800      	cmp	r0, #0
 80093fa:	f73f adbb 	bgt.w	8008f74 <_dtoa_r+0x4b4>
 80093fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009400:	9d01      	ldr	r5, [sp, #4]
 8009402:	43db      	mvns	r3, r3
 8009404:	9300      	str	r3, [sp, #0]
 8009406:	f04f 0800 	mov.w	r8, #0
 800940a:	4631      	mov	r1, r6
 800940c:	4620      	mov	r0, r4
 800940e:	f000 fbc3 	bl	8009b98 <_Bfree>
 8009412:	2f00      	cmp	r7, #0
 8009414:	f43f aea4 	beq.w	8009160 <_dtoa_r+0x6a0>
 8009418:	f1b8 0f00 	cmp.w	r8, #0
 800941c:	d005      	beq.n	800942a <_dtoa_r+0x96a>
 800941e:	45b8      	cmp	r8, r7
 8009420:	d003      	beq.n	800942a <_dtoa_r+0x96a>
 8009422:	4641      	mov	r1, r8
 8009424:	4620      	mov	r0, r4
 8009426:	f000 fbb7 	bl	8009b98 <_Bfree>
 800942a:	4639      	mov	r1, r7
 800942c:	4620      	mov	r0, r4
 800942e:	f000 fbb3 	bl	8009b98 <_Bfree>
 8009432:	e695      	b.n	8009160 <_dtoa_r+0x6a0>
 8009434:	2600      	movs	r6, #0
 8009436:	4637      	mov	r7, r6
 8009438:	e7e1      	b.n	80093fe <_dtoa_r+0x93e>
 800943a:	9700      	str	r7, [sp, #0]
 800943c:	4637      	mov	r7, r6
 800943e:	e599      	b.n	8008f74 <_dtoa_r+0x4b4>
 8009440:	40240000 	.word	0x40240000
 8009444:	9b08      	ldr	r3, [sp, #32]
 8009446:	2b00      	cmp	r3, #0
 8009448:	f000 80ca 	beq.w	80095e0 <_dtoa_r+0xb20>
 800944c:	9b03      	ldr	r3, [sp, #12]
 800944e:	9302      	str	r3, [sp, #8]
 8009450:	2d00      	cmp	r5, #0
 8009452:	dd05      	ble.n	8009460 <_dtoa_r+0x9a0>
 8009454:	4639      	mov	r1, r7
 8009456:	462a      	mov	r2, r5
 8009458:	4620      	mov	r0, r4
 800945a:	f000 fd6f 	bl	8009f3c <__lshift>
 800945e:	4607      	mov	r7, r0
 8009460:	f1b8 0f00 	cmp.w	r8, #0
 8009464:	d05b      	beq.n	800951e <_dtoa_r+0xa5e>
 8009466:	6879      	ldr	r1, [r7, #4]
 8009468:	4620      	mov	r0, r4
 800946a:	f000 fb55 	bl	8009b18 <_Balloc>
 800946e:	4605      	mov	r5, r0
 8009470:	b928      	cbnz	r0, 800947e <_dtoa_r+0x9be>
 8009472:	4b87      	ldr	r3, [pc, #540]	; (8009690 <_dtoa_r+0xbd0>)
 8009474:	4602      	mov	r2, r0
 8009476:	f240 21ea 	movw	r1, #746	; 0x2ea
 800947a:	f7ff bb3b 	b.w	8008af4 <_dtoa_r+0x34>
 800947e:	693a      	ldr	r2, [r7, #16]
 8009480:	3202      	adds	r2, #2
 8009482:	0092      	lsls	r2, r2, #2
 8009484:	f107 010c 	add.w	r1, r7, #12
 8009488:	300c      	adds	r0, #12
 800948a:	f000 fb2b 	bl	8009ae4 <memcpy>
 800948e:	2201      	movs	r2, #1
 8009490:	4629      	mov	r1, r5
 8009492:	4620      	mov	r0, r4
 8009494:	f000 fd52 	bl	8009f3c <__lshift>
 8009498:	9b01      	ldr	r3, [sp, #4]
 800949a:	f103 0901 	add.w	r9, r3, #1
 800949e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80094a2:	4413      	add	r3, r2
 80094a4:	9305      	str	r3, [sp, #20]
 80094a6:	f00a 0301 	and.w	r3, sl, #1
 80094aa:	46b8      	mov	r8, r7
 80094ac:	9304      	str	r3, [sp, #16]
 80094ae:	4607      	mov	r7, r0
 80094b0:	4631      	mov	r1, r6
 80094b2:	ee18 0a10 	vmov	r0, s16
 80094b6:	f7ff fa75 	bl	80089a4 <quorem>
 80094ba:	4641      	mov	r1, r8
 80094bc:	9002      	str	r0, [sp, #8]
 80094be:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80094c2:	ee18 0a10 	vmov	r0, s16
 80094c6:	f000 fda9 	bl	800a01c <__mcmp>
 80094ca:	463a      	mov	r2, r7
 80094cc:	9003      	str	r0, [sp, #12]
 80094ce:	4631      	mov	r1, r6
 80094d0:	4620      	mov	r0, r4
 80094d2:	f000 fdbf 	bl	800a054 <__mdiff>
 80094d6:	68c2      	ldr	r2, [r0, #12]
 80094d8:	f109 3bff 	add.w	fp, r9, #4294967295
 80094dc:	4605      	mov	r5, r0
 80094de:	bb02      	cbnz	r2, 8009522 <_dtoa_r+0xa62>
 80094e0:	4601      	mov	r1, r0
 80094e2:	ee18 0a10 	vmov	r0, s16
 80094e6:	f000 fd99 	bl	800a01c <__mcmp>
 80094ea:	4602      	mov	r2, r0
 80094ec:	4629      	mov	r1, r5
 80094ee:	4620      	mov	r0, r4
 80094f0:	9207      	str	r2, [sp, #28]
 80094f2:	f000 fb51 	bl	8009b98 <_Bfree>
 80094f6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80094fa:	ea43 0102 	orr.w	r1, r3, r2
 80094fe:	9b04      	ldr	r3, [sp, #16]
 8009500:	430b      	orrs	r3, r1
 8009502:	464d      	mov	r5, r9
 8009504:	d10f      	bne.n	8009526 <_dtoa_r+0xa66>
 8009506:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800950a:	d02a      	beq.n	8009562 <_dtoa_r+0xaa2>
 800950c:	9b03      	ldr	r3, [sp, #12]
 800950e:	2b00      	cmp	r3, #0
 8009510:	dd02      	ble.n	8009518 <_dtoa_r+0xa58>
 8009512:	9b02      	ldr	r3, [sp, #8]
 8009514:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009518:	f88b a000 	strb.w	sl, [fp]
 800951c:	e775      	b.n	800940a <_dtoa_r+0x94a>
 800951e:	4638      	mov	r0, r7
 8009520:	e7ba      	b.n	8009498 <_dtoa_r+0x9d8>
 8009522:	2201      	movs	r2, #1
 8009524:	e7e2      	b.n	80094ec <_dtoa_r+0xa2c>
 8009526:	9b03      	ldr	r3, [sp, #12]
 8009528:	2b00      	cmp	r3, #0
 800952a:	db04      	blt.n	8009536 <_dtoa_r+0xa76>
 800952c:	9906      	ldr	r1, [sp, #24]
 800952e:	430b      	orrs	r3, r1
 8009530:	9904      	ldr	r1, [sp, #16]
 8009532:	430b      	orrs	r3, r1
 8009534:	d122      	bne.n	800957c <_dtoa_r+0xabc>
 8009536:	2a00      	cmp	r2, #0
 8009538:	ddee      	ble.n	8009518 <_dtoa_r+0xa58>
 800953a:	ee18 1a10 	vmov	r1, s16
 800953e:	2201      	movs	r2, #1
 8009540:	4620      	mov	r0, r4
 8009542:	f000 fcfb 	bl	8009f3c <__lshift>
 8009546:	4631      	mov	r1, r6
 8009548:	ee08 0a10 	vmov	s16, r0
 800954c:	f000 fd66 	bl	800a01c <__mcmp>
 8009550:	2800      	cmp	r0, #0
 8009552:	dc03      	bgt.n	800955c <_dtoa_r+0xa9c>
 8009554:	d1e0      	bne.n	8009518 <_dtoa_r+0xa58>
 8009556:	f01a 0f01 	tst.w	sl, #1
 800955a:	d0dd      	beq.n	8009518 <_dtoa_r+0xa58>
 800955c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009560:	d1d7      	bne.n	8009512 <_dtoa_r+0xa52>
 8009562:	2339      	movs	r3, #57	; 0x39
 8009564:	f88b 3000 	strb.w	r3, [fp]
 8009568:	462b      	mov	r3, r5
 800956a:	461d      	mov	r5, r3
 800956c:	3b01      	subs	r3, #1
 800956e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009572:	2a39      	cmp	r2, #57	; 0x39
 8009574:	d071      	beq.n	800965a <_dtoa_r+0xb9a>
 8009576:	3201      	adds	r2, #1
 8009578:	701a      	strb	r2, [r3, #0]
 800957a:	e746      	b.n	800940a <_dtoa_r+0x94a>
 800957c:	2a00      	cmp	r2, #0
 800957e:	dd07      	ble.n	8009590 <_dtoa_r+0xad0>
 8009580:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009584:	d0ed      	beq.n	8009562 <_dtoa_r+0xaa2>
 8009586:	f10a 0301 	add.w	r3, sl, #1
 800958a:	f88b 3000 	strb.w	r3, [fp]
 800958e:	e73c      	b.n	800940a <_dtoa_r+0x94a>
 8009590:	9b05      	ldr	r3, [sp, #20]
 8009592:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009596:	4599      	cmp	r9, r3
 8009598:	d047      	beq.n	800962a <_dtoa_r+0xb6a>
 800959a:	ee18 1a10 	vmov	r1, s16
 800959e:	2300      	movs	r3, #0
 80095a0:	220a      	movs	r2, #10
 80095a2:	4620      	mov	r0, r4
 80095a4:	f000 fb1a 	bl	8009bdc <__multadd>
 80095a8:	45b8      	cmp	r8, r7
 80095aa:	ee08 0a10 	vmov	s16, r0
 80095ae:	f04f 0300 	mov.w	r3, #0
 80095b2:	f04f 020a 	mov.w	r2, #10
 80095b6:	4641      	mov	r1, r8
 80095b8:	4620      	mov	r0, r4
 80095ba:	d106      	bne.n	80095ca <_dtoa_r+0xb0a>
 80095bc:	f000 fb0e 	bl	8009bdc <__multadd>
 80095c0:	4680      	mov	r8, r0
 80095c2:	4607      	mov	r7, r0
 80095c4:	f109 0901 	add.w	r9, r9, #1
 80095c8:	e772      	b.n	80094b0 <_dtoa_r+0x9f0>
 80095ca:	f000 fb07 	bl	8009bdc <__multadd>
 80095ce:	4639      	mov	r1, r7
 80095d0:	4680      	mov	r8, r0
 80095d2:	2300      	movs	r3, #0
 80095d4:	220a      	movs	r2, #10
 80095d6:	4620      	mov	r0, r4
 80095d8:	f000 fb00 	bl	8009bdc <__multadd>
 80095dc:	4607      	mov	r7, r0
 80095de:	e7f1      	b.n	80095c4 <_dtoa_r+0xb04>
 80095e0:	9b03      	ldr	r3, [sp, #12]
 80095e2:	9302      	str	r3, [sp, #8]
 80095e4:	9d01      	ldr	r5, [sp, #4]
 80095e6:	ee18 0a10 	vmov	r0, s16
 80095ea:	4631      	mov	r1, r6
 80095ec:	f7ff f9da 	bl	80089a4 <quorem>
 80095f0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80095f4:	9b01      	ldr	r3, [sp, #4]
 80095f6:	f805 ab01 	strb.w	sl, [r5], #1
 80095fa:	1aea      	subs	r2, r5, r3
 80095fc:	9b02      	ldr	r3, [sp, #8]
 80095fe:	4293      	cmp	r3, r2
 8009600:	dd09      	ble.n	8009616 <_dtoa_r+0xb56>
 8009602:	ee18 1a10 	vmov	r1, s16
 8009606:	2300      	movs	r3, #0
 8009608:	220a      	movs	r2, #10
 800960a:	4620      	mov	r0, r4
 800960c:	f000 fae6 	bl	8009bdc <__multadd>
 8009610:	ee08 0a10 	vmov	s16, r0
 8009614:	e7e7      	b.n	80095e6 <_dtoa_r+0xb26>
 8009616:	9b02      	ldr	r3, [sp, #8]
 8009618:	2b00      	cmp	r3, #0
 800961a:	bfc8      	it	gt
 800961c:	461d      	movgt	r5, r3
 800961e:	9b01      	ldr	r3, [sp, #4]
 8009620:	bfd8      	it	le
 8009622:	2501      	movle	r5, #1
 8009624:	441d      	add	r5, r3
 8009626:	f04f 0800 	mov.w	r8, #0
 800962a:	ee18 1a10 	vmov	r1, s16
 800962e:	2201      	movs	r2, #1
 8009630:	4620      	mov	r0, r4
 8009632:	f000 fc83 	bl	8009f3c <__lshift>
 8009636:	4631      	mov	r1, r6
 8009638:	ee08 0a10 	vmov	s16, r0
 800963c:	f000 fcee 	bl	800a01c <__mcmp>
 8009640:	2800      	cmp	r0, #0
 8009642:	dc91      	bgt.n	8009568 <_dtoa_r+0xaa8>
 8009644:	d102      	bne.n	800964c <_dtoa_r+0xb8c>
 8009646:	f01a 0f01 	tst.w	sl, #1
 800964a:	d18d      	bne.n	8009568 <_dtoa_r+0xaa8>
 800964c:	462b      	mov	r3, r5
 800964e:	461d      	mov	r5, r3
 8009650:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009654:	2a30      	cmp	r2, #48	; 0x30
 8009656:	d0fa      	beq.n	800964e <_dtoa_r+0xb8e>
 8009658:	e6d7      	b.n	800940a <_dtoa_r+0x94a>
 800965a:	9a01      	ldr	r2, [sp, #4]
 800965c:	429a      	cmp	r2, r3
 800965e:	d184      	bne.n	800956a <_dtoa_r+0xaaa>
 8009660:	9b00      	ldr	r3, [sp, #0]
 8009662:	3301      	adds	r3, #1
 8009664:	9300      	str	r3, [sp, #0]
 8009666:	2331      	movs	r3, #49	; 0x31
 8009668:	7013      	strb	r3, [r2, #0]
 800966a:	e6ce      	b.n	800940a <_dtoa_r+0x94a>
 800966c:	4b09      	ldr	r3, [pc, #36]	; (8009694 <_dtoa_r+0xbd4>)
 800966e:	f7ff ba95 	b.w	8008b9c <_dtoa_r+0xdc>
 8009672:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009674:	2b00      	cmp	r3, #0
 8009676:	f47f aa6e 	bne.w	8008b56 <_dtoa_r+0x96>
 800967a:	4b07      	ldr	r3, [pc, #28]	; (8009698 <_dtoa_r+0xbd8>)
 800967c:	f7ff ba8e 	b.w	8008b9c <_dtoa_r+0xdc>
 8009680:	9b02      	ldr	r3, [sp, #8]
 8009682:	2b00      	cmp	r3, #0
 8009684:	dcae      	bgt.n	80095e4 <_dtoa_r+0xb24>
 8009686:	9b06      	ldr	r3, [sp, #24]
 8009688:	2b02      	cmp	r3, #2
 800968a:	f73f aea8 	bgt.w	80093de <_dtoa_r+0x91e>
 800968e:	e7a9      	b.n	80095e4 <_dtoa_r+0xb24>
 8009690:	0800b113 	.word	0x0800b113
 8009694:	0800b070 	.word	0x0800b070
 8009698:	0800b094 	.word	0x0800b094

0800969c <__sflush_r>:
 800969c:	898a      	ldrh	r2, [r1, #12]
 800969e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096a2:	4605      	mov	r5, r0
 80096a4:	0710      	lsls	r0, r2, #28
 80096a6:	460c      	mov	r4, r1
 80096a8:	d458      	bmi.n	800975c <__sflush_r+0xc0>
 80096aa:	684b      	ldr	r3, [r1, #4]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	dc05      	bgt.n	80096bc <__sflush_r+0x20>
 80096b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	dc02      	bgt.n	80096bc <__sflush_r+0x20>
 80096b6:	2000      	movs	r0, #0
 80096b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096be:	2e00      	cmp	r6, #0
 80096c0:	d0f9      	beq.n	80096b6 <__sflush_r+0x1a>
 80096c2:	2300      	movs	r3, #0
 80096c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80096c8:	682f      	ldr	r7, [r5, #0]
 80096ca:	602b      	str	r3, [r5, #0]
 80096cc:	d032      	beq.n	8009734 <__sflush_r+0x98>
 80096ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80096d0:	89a3      	ldrh	r3, [r4, #12]
 80096d2:	075a      	lsls	r2, r3, #29
 80096d4:	d505      	bpl.n	80096e2 <__sflush_r+0x46>
 80096d6:	6863      	ldr	r3, [r4, #4]
 80096d8:	1ac0      	subs	r0, r0, r3
 80096da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80096dc:	b10b      	cbz	r3, 80096e2 <__sflush_r+0x46>
 80096de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096e0:	1ac0      	subs	r0, r0, r3
 80096e2:	2300      	movs	r3, #0
 80096e4:	4602      	mov	r2, r0
 80096e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096e8:	6a21      	ldr	r1, [r4, #32]
 80096ea:	4628      	mov	r0, r5
 80096ec:	47b0      	blx	r6
 80096ee:	1c43      	adds	r3, r0, #1
 80096f0:	89a3      	ldrh	r3, [r4, #12]
 80096f2:	d106      	bne.n	8009702 <__sflush_r+0x66>
 80096f4:	6829      	ldr	r1, [r5, #0]
 80096f6:	291d      	cmp	r1, #29
 80096f8:	d82c      	bhi.n	8009754 <__sflush_r+0xb8>
 80096fa:	4a2a      	ldr	r2, [pc, #168]	; (80097a4 <__sflush_r+0x108>)
 80096fc:	40ca      	lsrs	r2, r1
 80096fe:	07d6      	lsls	r6, r2, #31
 8009700:	d528      	bpl.n	8009754 <__sflush_r+0xb8>
 8009702:	2200      	movs	r2, #0
 8009704:	6062      	str	r2, [r4, #4]
 8009706:	04d9      	lsls	r1, r3, #19
 8009708:	6922      	ldr	r2, [r4, #16]
 800970a:	6022      	str	r2, [r4, #0]
 800970c:	d504      	bpl.n	8009718 <__sflush_r+0x7c>
 800970e:	1c42      	adds	r2, r0, #1
 8009710:	d101      	bne.n	8009716 <__sflush_r+0x7a>
 8009712:	682b      	ldr	r3, [r5, #0]
 8009714:	b903      	cbnz	r3, 8009718 <__sflush_r+0x7c>
 8009716:	6560      	str	r0, [r4, #84]	; 0x54
 8009718:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800971a:	602f      	str	r7, [r5, #0]
 800971c:	2900      	cmp	r1, #0
 800971e:	d0ca      	beq.n	80096b6 <__sflush_r+0x1a>
 8009720:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009724:	4299      	cmp	r1, r3
 8009726:	d002      	beq.n	800972e <__sflush_r+0x92>
 8009728:	4628      	mov	r0, r5
 800972a:	f7fe fa93 	bl	8007c54 <_free_r>
 800972e:	2000      	movs	r0, #0
 8009730:	6360      	str	r0, [r4, #52]	; 0x34
 8009732:	e7c1      	b.n	80096b8 <__sflush_r+0x1c>
 8009734:	6a21      	ldr	r1, [r4, #32]
 8009736:	2301      	movs	r3, #1
 8009738:	4628      	mov	r0, r5
 800973a:	47b0      	blx	r6
 800973c:	1c41      	adds	r1, r0, #1
 800973e:	d1c7      	bne.n	80096d0 <__sflush_r+0x34>
 8009740:	682b      	ldr	r3, [r5, #0]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d0c4      	beq.n	80096d0 <__sflush_r+0x34>
 8009746:	2b1d      	cmp	r3, #29
 8009748:	d001      	beq.n	800974e <__sflush_r+0xb2>
 800974a:	2b16      	cmp	r3, #22
 800974c:	d101      	bne.n	8009752 <__sflush_r+0xb6>
 800974e:	602f      	str	r7, [r5, #0]
 8009750:	e7b1      	b.n	80096b6 <__sflush_r+0x1a>
 8009752:	89a3      	ldrh	r3, [r4, #12]
 8009754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009758:	81a3      	strh	r3, [r4, #12]
 800975a:	e7ad      	b.n	80096b8 <__sflush_r+0x1c>
 800975c:	690f      	ldr	r7, [r1, #16]
 800975e:	2f00      	cmp	r7, #0
 8009760:	d0a9      	beq.n	80096b6 <__sflush_r+0x1a>
 8009762:	0793      	lsls	r3, r2, #30
 8009764:	680e      	ldr	r6, [r1, #0]
 8009766:	bf08      	it	eq
 8009768:	694b      	ldreq	r3, [r1, #20]
 800976a:	600f      	str	r7, [r1, #0]
 800976c:	bf18      	it	ne
 800976e:	2300      	movne	r3, #0
 8009770:	eba6 0807 	sub.w	r8, r6, r7
 8009774:	608b      	str	r3, [r1, #8]
 8009776:	f1b8 0f00 	cmp.w	r8, #0
 800977a:	dd9c      	ble.n	80096b6 <__sflush_r+0x1a>
 800977c:	6a21      	ldr	r1, [r4, #32]
 800977e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009780:	4643      	mov	r3, r8
 8009782:	463a      	mov	r2, r7
 8009784:	4628      	mov	r0, r5
 8009786:	47b0      	blx	r6
 8009788:	2800      	cmp	r0, #0
 800978a:	dc06      	bgt.n	800979a <__sflush_r+0xfe>
 800978c:	89a3      	ldrh	r3, [r4, #12]
 800978e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009792:	81a3      	strh	r3, [r4, #12]
 8009794:	f04f 30ff 	mov.w	r0, #4294967295
 8009798:	e78e      	b.n	80096b8 <__sflush_r+0x1c>
 800979a:	4407      	add	r7, r0
 800979c:	eba8 0800 	sub.w	r8, r8, r0
 80097a0:	e7e9      	b.n	8009776 <__sflush_r+0xda>
 80097a2:	bf00      	nop
 80097a4:	20400001 	.word	0x20400001

080097a8 <_fflush_r>:
 80097a8:	b538      	push	{r3, r4, r5, lr}
 80097aa:	690b      	ldr	r3, [r1, #16]
 80097ac:	4605      	mov	r5, r0
 80097ae:	460c      	mov	r4, r1
 80097b0:	b913      	cbnz	r3, 80097b8 <_fflush_r+0x10>
 80097b2:	2500      	movs	r5, #0
 80097b4:	4628      	mov	r0, r5
 80097b6:	bd38      	pop	{r3, r4, r5, pc}
 80097b8:	b118      	cbz	r0, 80097c2 <_fflush_r+0x1a>
 80097ba:	6983      	ldr	r3, [r0, #24]
 80097bc:	b90b      	cbnz	r3, 80097c2 <_fflush_r+0x1a>
 80097be:	f000 f887 	bl	80098d0 <__sinit>
 80097c2:	4b14      	ldr	r3, [pc, #80]	; (8009814 <_fflush_r+0x6c>)
 80097c4:	429c      	cmp	r4, r3
 80097c6:	d11b      	bne.n	8009800 <_fflush_r+0x58>
 80097c8:	686c      	ldr	r4, [r5, #4]
 80097ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d0ef      	beq.n	80097b2 <_fflush_r+0xa>
 80097d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80097d4:	07d0      	lsls	r0, r2, #31
 80097d6:	d404      	bmi.n	80097e2 <_fflush_r+0x3a>
 80097d8:	0599      	lsls	r1, r3, #22
 80097da:	d402      	bmi.n	80097e2 <_fflush_r+0x3a>
 80097dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097de:	f000 f91a 	bl	8009a16 <__retarget_lock_acquire_recursive>
 80097e2:	4628      	mov	r0, r5
 80097e4:	4621      	mov	r1, r4
 80097e6:	f7ff ff59 	bl	800969c <__sflush_r>
 80097ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097ec:	07da      	lsls	r2, r3, #31
 80097ee:	4605      	mov	r5, r0
 80097f0:	d4e0      	bmi.n	80097b4 <_fflush_r+0xc>
 80097f2:	89a3      	ldrh	r3, [r4, #12]
 80097f4:	059b      	lsls	r3, r3, #22
 80097f6:	d4dd      	bmi.n	80097b4 <_fflush_r+0xc>
 80097f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097fa:	f000 f90d 	bl	8009a18 <__retarget_lock_release_recursive>
 80097fe:	e7d9      	b.n	80097b4 <_fflush_r+0xc>
 8009800:	4b05      	ldr	r3, [pc, #20]	; (8009818 <_fflush_r+0x70>)
 8009802:	429c      	cmp	r4, r3
 8009804:	d101      	bne.n	800980a <_fflush_r+0x62>
 8009806:	68ac      	ldr	r4, [r5, #8]
 8009808:	e7df      	b.n	80097ca <_fflush_r+0x22>
 800980a:	4b04      	ldr	r3, [pc, #16]	; (800981c <_fflush_r+0x74>)
 800980c:	429c      	cmp	r4, r3
 800980e:	bf08      	it	eq
 8009810:	68ec      	ldreq	r4, [r5, #12]
 8009812:	e7da      	b.n	80097ca <_fflush_r+0x22>
 8009814:	0800b144 	.word	0x0800b144
 8009818:	0800b164 	.word	0x0800b164
 800981c:	0800b124 	.word	0x0800b124

08009820 <std>:
 8009820:	2300      	movs	r3, #0
 8009822:	b510      	push	{r4, lr}
 8009824:	4604      	mov	r4, r0
 8009826:	e9c0 3300 	strd	r3, r3, [r0]
 800982a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800982e:	6083      	str	r3, [r0, #8]
 8009830:	8181      	strh	r1, [r0, #12]
 8009832:	6643      	str	r3, [r0, #100]	; 0x64
 8009834:	81c2      	strh	r2, [r0, #14]
 8009836:	6183      	str	r3, [r0, #24]
 8009838:	4619      	mov	r1, r3
 800983a:	2208      	movs	r2, #8
 800983c:	305c      	adds	r0, #92	; 0x5c
 800983e:	f7fe fa01 	bl	8007c44 <memset>
 8009842:	4b05      	ldr	r3, [pc, #20]	; (8009858 <std+0x38>)
 8009844:	6263      	str	r3, [r4, #36]	; 0x24
 8009846:	4b05      	ldr	r3, [pc, #20]	; (800985c <std+0x3c>)
 8009848:	62a3      	str	r3, [r4, #40]	; 0x28
 800984a:	4b05      	ldr	r3, [pc, #20]	; (8009860 <std+0x40>)
 800984c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800984e:	4b05      	ldr	r3, [pc, #20]	; (8009864 <std+0x44>)
 8009850:	6224      	str	r4, [r4, #32]
 8009852:	6323      	str	r3, [r4, #48]	; 0x30
 8009854:	bd10      	pop	{r4, pc}
 8009856:	bf00      	nop
 8009858:	0800a501 	.word	0x0800a501
 800985c:	0800a523 	.word	0x0800a523
 8009860:	0800a55b 	.word	0x0800a55b
 8009864:	0800a57f 	.word	0x0800a57f

08009868 <_cleanup_r>:
 8009868:	4901      	ldr	r1, [pc, #4]	; (8009870 <_cleanup_r+0x8>)
 800986a:	f000 b8af 	b.w	80099cc <_fwalk_reent>
 800986e:	bf00      	nop
 8009870:	080097a9 	.word	0x080097a9

08009874 <__sfmoreglue>:
 8009874:	b570      	push	{r4, r5, r6, lr}
 8009876:	2268      	movs	r2, #104	; 0x68
 8009878:	1e4d      	subs	r5, r1, #1
 800987a:	4355      	muls	r5, r2
 800987c:	460e      	mov	r6, r1
 800987e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009882:	f7fe fa53 	bl	8007d2c <_malloc_r>
 8009886:	4604      	mov	r4, r0
 8009888:	b140      	cbz	r0, 800989c <__sfmoreglue+0x28>
 800988a:	2100      	movs	r1, #0
 800988c:	e9c0 1600 	strd	r1, r6, [r0]
 8009890:	300c      	adds	r0, #12
 8009892:	60a0      	str	r0, [r4, #8]
 8009894:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009898:	f7fe f9d4 	bl	8007c44 <memset>
 800989c:	4620      	mov	r0, r4
 800989e:	bd70      	pop	{r4, r5, r6, pc}

080098a0 <__sfp_lock_acquire>:
 80098a0:	4801      	ldr	r0, [pc, #4]	; (80098a8 <__sfp_lock_acquire+0x8>)
 80098a2:	f000 b8b8 	b.w	8009a16 <__retarget_lock_acquire_recursive>
 80098a6:	bf00      	nop
 80098a8:	2000046d 	.word	0x2000046d

080098ac <__sfp_lock_release>:
 80098ac:	4801      	ldr	r0, [pc, #4]	; (80098b4 <__sfp_lock_release+0x8>)
 80098ae:	f000 b8b3 	b.w	8009a18 <__retarget_lock_release_recursive>
 80098b2:	bf00      	nop
 80098b4:	2000046d 	.word	0x2000046d

080098b8 <__sinit_lock_acquire>:
 80098b8:	4801      	ldr	r0, [pc, #4]	; (80098c0 <__sinit_lock_acquire+0x8>)
 80098ba:	f000 b8ac 	b.w	8009a16 <__retarget_lock_acquire_recursive>
 80098be:	bf00      	nop
 80098c0:	2000046e 	.word	0x2000046e

080098c4 <__sinit_lock_release>:
 80098c4:	4801      	ldr	r0, [pc, #4]	; (80098cc <__sinit_lock_release+0x8>)
 80098c6:	f000 b8a7 	b.w	8009a18 <__retarget_lock_release_recursive>
 80098ca:	bf00      	nop
 80098cc:	2000046e 	.word	0x2000046e

080098d0 <__sinit>:
 80098d0:	b510      	push	{r4, lr}
 80098d2:	4604      	mov	r4, r0
 80098d4:	f7ff fff0 	bl	80098b8 <__sinit_lock_acquire>
 80098d8:	69a3      	ldr	r3, [r4, #24]
 80098da:	b11b      	cbz	r3, 80098e4 <__sinit+0x14>
 80098dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098e0:	f7ff bff0 	b.w	80098c4 <__sinit_lock_release>
 80098e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80098e8:	6523      	str	r3, [r4, #80]	; 0x50
 80098ea:	4b13      	ldr	r3, [pc, #76]	; (8009938 <__sinit+0x68>)
 80098ec:	4a13      	ldr	r2, [pc, #76]	; (800993c <__sinit+0x6c>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80098f2:	42a3      	cmp	r3, r4
 80098f4:	bf04      	itt	eq
 80098f6:	2301      	moveq	r3, #1
 80098f8:	61a3      	streq	r3, [r4, #24]
 80098fa:	4620      	mov	r0, r4
 80098fc:	f000 f820 	bl	8009940 <__sfp>
 8009900:	6060      	str	r0, [r4, #4]
 8009902:	4620      	mov	r0, r4
 8009904:	f000 f81c 	bl	8009940 <__sfp>
 8009908:	60a0      	str	r0, [r4, #8]
 800990a:	4620      	mov	r0, r4
 800990c:	f000 f818 	bl	8009940 <__sfp>
 8009910:	2200      	movs	r2, #0
 8009912:	60e0      	str	r0, [r4, #12]
 8009914:	2104      	movs	r1, #4
 8009916:	6860      	ldr	r0, [r4, #4]
 8009918:	f7ff ff82 	bl	8009820 <std>
 800991c:	68a0      	ldr	r0, [r4, #8]
 800991e:	2201      	movs	r2, #1
 8009920:	2109      	movs	r1, #9
 8009922:	f7ff ff7d 	bl	8009820 <std>
 8009926:	68e0      	ldr	r0, [r4, #12]
 8009928:	2202      	movs	r2, #2
 800992a:	2112      	movs	r1, #18
 800992c:	f7ff ff78 	bl	8009820 <std>
 8009930:	2301      	movs	r3, #1
 8009932:	61a3      	str	r3, [r4, #24]
 8009934:	e7d2      	b.n	80098dc <__sinit+0xc>
 8009936:	bf00      	nop
 8009938:	0800b05c 	.word	0x0800b05c
 800993c:	08009869 	.word	0x08009869

08009940 <__sfp>:
 8009940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009942:	4607      	mov	r7, r0
 8009944:	f7ff ffac 	bl	80098a0 <__sfp_lock_acquire>
 8009948:	4b1e      	ldr	r3, [pc, #120]	; (80099c4 <__sfp+0x84>)
 800994a:	681e      	ldr	r6, [r3, #0]
 800994c:	69b3      	ldr	r3, [r6, #24]
 800994e:	b913      	cbnz	r3, 8009956 <__sfp+0x16>
 8009950:	4630      	mov	r0, r6
 8009952:	f7ff ffbd 	bl	80098d0 <__sinit>
 8009956:	3648      	adds	r6, #72	; 0x48
 8009958:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800995c:	3b01      	subs	r3, #1
 800995e:	d503      	bpl.n	8009968 <__sfp+0x28>
 8009960:	6833      	ldr	r3, [r6, #0]
 8009962:	b30b      	cbz	r3, 80099a8 <__sfp+0x68>
 8009964:	6836      	ldr	r6, [r6, #0]
 8009966:	e7f7      	b.n	8009958 <__sfp+0x18>
 8009968:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800996c:	b9d5      	cbnz	r5, 80099a4 <__sfp+0x64>
 800996e:	4b16      	ldr	r3, [pc, #88]	; (80099c8 <__sfp+0x88>)
 8009970:	60e3      	str	r3, [r4, #12]
 8009972:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009976:	6665      	str	r5, [r4, #100]	; 0x64
 8009978:	f000 f84c 	bl	8009a14 <__retarget_lock_init_recursive>
 800997c:	f7ff ff96 	bl	80098ac <__sfp_lock_release>
 8009980:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009984:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009988:	6025      	str	r5, [r4, #0]
 800998a:	61a5      	str	r5, [r4, #24]
 800998c:	2208      	movs	r2, #8
 800998e:	4629      	mov	r1, r5
 8009990:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009994:	f7fe f956 	bl	8007c44 <memset>
 8009998:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800999c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80099a0:	4620      	mov	r0, r4
 80099a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099a4:	3468      	adds	r4, #104	; 0x68
 80099a6:	e7d9      	b.n	800995c <__sfp+0x1c>
 80099a8:	2104      	movs	r1, #4
 80099aa:	4638      	mov	r0, r7
 80099ac:	f7ff ff62 	bl	8009874 <__sfmoreglue>
 80099b0:	4604      	mov	r4, r0
 80099b2:	6030      	str	r0, [r6, #0]
 80099b4:	2800      	cmp	r0, #0
 80099b6:	d1d5      	bne.n	8009964 <__sfp+0x24>
 80099b8:	f7ff ff78 	bl	80098ac <__sfp_lock_release>
 80099bc:	230c      	movs	r3, #12
 80099be:	603b      	str	r3, [r7, #0]
 80099c0:	e7ee      	b.n	80099a0 <__sfp+0x60>
 80099c2:	bf00      	nop
 80099c4:	0800b05c 	.word	0x0800b05c
 80099c8:	ffff0001 	.word	0xffff0001

080099cc <_fwalk_reent>:
 80099cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099d0:	4606      	mov	r6, r0
 80099d2:	4688      	mov	r8, r1
 80099d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80099d8:	2700      	movs	r7, #0
 80099da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80099de:	f1b9 0901 	subs.w	r9, r9, #1
 80099e2:	d505      	bpl.n	80099f0 <_fwalk_reent+0x24>
 80099e4:	6824      	ldr	r4, [r4, #0]
 80099e6:	2c00      	cmp	r4, #0
 80099e8:	d1f7      	bne.n	80099da <_fwalk_reent+0xe>
 80099ea:	4638      	mov	r0, r7
 80099ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099f0:	89ab      	ldrh	r3, [r5, #12]
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d907      	bls.n	8009a06 <_fwalk_reent+0x3a>
 80099f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80099fa:	3301      	adds	r3, #1
 80099fc:	d003      	beq.n	8009a06 <_fwalk_reent+0x3a>
 80099fe:	4629      	mov	r1, r5
 8009a00:	4630      	mov	r0, r6
 8009a02:	47c0      	blx	r8
 8009a04:	4307      	orrs	r7, r0
 8009a06:	3568      	adds	r5, #104	; 0x68
 8009a08:	e7e9      	b.n	80099de <_fwalk_reent+0x12>
	...

08009a0c <_localeconv_r>:
 8009a0c:	4800      	ldr	r0, [pc, #0]	; (8009a10 <_localeconv_r+0x4>)
 8009a0e:	4770      	bx	lr
 8009a10:	20000160 	.word	0x20000160

08009a14 <__retarget_lock_init_recursive>:
 8009a14:	4770      	bx	lr

08009a16 <__retarget_lock_acquire_recursive>:
 8009a16:	4770      	bx	lr

08009a18 <__retarget_lock_release_recursive>:
 8009a18:	4770      	bx	lr

08009a1a <__swhatbuf_r>:
 8009a1a:	b570      	push	{r4, r5, r6, lr}
 8009a1c:	460e      	mov	r6, r1
 8009a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a22:	2900      	cmp	r1, #0
 8009a24:	b096      	sub	sp, #88	; 0x58
 8009a26:	4614      	mov	r4, r2
 8009a28:	461d      	mov	r5, r3
 8009a2a:	da08      	bge.n	8009a3e <__swhatbuf_r+0x24>
 8009a2c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009a30:	2200      	movs	r2, #0
 8009a32:	602a      	str	r2, [r5, #0]
 8009a34:	061a      	lsls	r2, r3, #24
 8009a36:	d410      	bmi.n	8009a5a <__swhatbuf_r+0x40>
 8009a38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a3c:	e00e      	b.n	8009a5c <__swhatbuf_r+0x42>
 8009a3e:	466a      	mov	r2, sp
 8009a40:	f000 fdf4 	bl	800a62c <_fstat_r>
 8009a44:	2800      	cmp	r0, #0
 8009a46:	dbf1      	blt.n	8009a2c <__swhatbuf_r+0x12>
 8009a48:	9a01      	ldr	r2, [sp, #4]
 8009a4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009a4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009a52:	425a      	negs	r2, r3
 8009a54:	415a      	adcs	r2, r3
 8009a56:	602a      	str	r2, [r5, #0]
 8009a58:	e7ee      	b.n	8009a38 <__swhatbuf_r+0x1e>
 8009a5a:	2340      	movs	r3, #64	; 0x40
 8009a5c:	2000      	movs	r0, #0
 8009a5e:	6023      	str	r3, [r4, #0]
 8009a60:	b016      	add	sp, #88	; 0x58
 8009a62:	bd70      	pop	{r4, r5, r6, pc}

08009a64 <__smakebuf_r>:
 8009a64:	898b      	ldrh	r3, [r1, #12]
 8009a66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a68:	079d      	lsls	r5, r3, #30
 8009a6a:	4606      	mov	r6, r0
 8009a6c:	460c      	mov	r4, r1
 8009a6e:	d507      	bpl.n	8009a80 <__smakebuf_r+0x1c>
 8009a70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a74:	6023      	str	r3, [r4, #0]
 8009a76:	6123      	str	r3, [r4, #16]
 8009a78:	2301      	movs	r3, #1
 8009a7a:	6163      	str	r3, [r4, #20]
 8009a7c:	b002      	add	sp, #8
 8009a7e:	bd70      	pop	{r4, r5, r6, pc}
 8009a80:	ab01      	add	r3, sp, #4
 8009a82:	466a      	mov	r2, sp
 8009a84:	f7ff ffc9 	bl	8009a1a <__swhatbuf_r>
 8009a88:	9900      	ldr	r1, [sp, #0]
 8009a8a:	4605      	mov	r5, r0
 8009a8c:	4630      	mov	r0, r6
 8009a8e:	f7fe f94d 	bl	8007d2c <_malloc_r>
 8009a92:	b948      	cbnz	r0, 8009aa8 <__smakebuf_r+0x44>
 8009a94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a98:	059a      	lsls	r2, r3, #22
 8009a9a:	d4ef      	bmi.n	8009a7c <__smakebuf_r+0x18>
 8009a9c:	f023 0303 	bic.w	r3, r3, #3
 8009aa0:	f043 0302 	orr.w	r3, r3, #2
 8009aa4:	81a3      	strh	r3, [r4, #12]
 8009aa6:	e7e3      	b.n	8009a70 <__smakebuf_r+0xc>
 8009aa8:	4b0d      	ldr	r3, [pc, #52]	; (8009ae0 <__smakebuf_r+0x7c>)
 8009aaa:	62b3      	str	r3, [r6, #40]	; 0x28
 8009aac:	89a3      	ldrh	r3, [r4, #12]
 8009aae:	6020      	str	r0, [r4, #0]
 8009ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ab4:	81a3      	strh	r3, [r4, #12]
 8009ab6:	9b00      	ldr	r3, [sp, #0]
 8009ab8:	6163      	str	r3, [r4, #20]
 8009aba:	9b01      	ldr	r3, [sp, #4]
 8009abc:	6120      	str	r0, [r4, #16]
 8009abe:	b15b      	cbz	r3, 8009ad8 <__smakebuf_r+0x74>
 8009ac0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ac4:	4630      	mov	r0, r6
 8009ac6:	f000 fdc3 	bl	800a650 <_isatty_r>
 8009aca:	b128      	cbz	r0, 8009ad8 <__smakebuf_r+0x74>
 8009acc:	89a3      	ldrh	r3, [r4, #12]
 8009ace:	f023 0303 	bic.w	r3, r3, #3
 8009ad2:	f043 0301 	orr.w	r3, r3, #1
 8009ad6:	81a3      	strh	r3, [r4, #12]
 8009ad8:	89a0      	ldrh	r0, [r4, #12]
 8009ada:	4305      	orrs	r5, r0
 8009adc:	81a5      	strh	r5, [r4, #12]
 8009ade:	e7cd      	b.n	8009a7c <__smakebuf_r+0x18>
 8009ae0:	08009869 	.word	0x08009869

08009ae4 <memcpy>:
 8009ae4:	440a      	add	r2, r1
 8009ae6:	4291      	cmp	r1, r2
 8009ae8:	f100 33ff 	add.w	r3, r0, #4294967295
 8009aec:	d100      	bne.n	8009af0 <memcpy+0xc>
 8009aee:	4770      	bx	lr
 8009af0:	b510      	push	{r4, lr}
 8009af2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009af6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009afa:	4291      	cmp	r1, r2
 8009afc:	d1f9      	bne.n	8009af2 <memcpy+0xe>
 8009afe:	bd10      	pop	{r4, pc}

08009b00 <__malloc_lock>:
 8009b00:	4801      	ldr	r0, [pc, #4]	; (8009b08 <__malloc_lock+0x8>)
 8009b02:	f7ff bf88 	b.w	8009a16 <__retarget_lock_acquire_recursive>
 8009b06:	bf00      	nop
 8009b08:	2000046c 	.word	0x2000046c

08009b0c <__malloc_unlock>:
 8009b0c:	4801      	ldr	r0, [pc, #4]	; (8009b14 <__malloc_unlock+0x8>)
 8009b0e:	f7ff bf83 	b.w	8009a18 <__retarget_lock_release_recursive>
 8009b12:	bf00      	nop
 8009b14:	2000046c 	.word	0x2000046c

08009b18 <_Balloc>:
 8009b18:	b570      	push	{r4, r5, r6, lr}
 8009b1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009b1c:	4604      	mov	r4, r0
 8009b1e:	460d      	mov	r5, r1
 8009b20:	b976      	cbnz	r6, 8009b40 <_Balloc+0x28>
 8009b22:	2010      	movs	r0, #16
 8009b24:	f7fe f886 	bl	8007c34 <malloc>
 8009b28:	4602      	mov	r2, r0
 8009b2a:	6260      	str	r0, [r4, #36]	; 0x24
 8009b2c:	b920      	cbnz	r0, 8009b38 <_Balloc+0x20>
 8009b2e:	4b18      	ldr	r3, [pc, #96]	; (8009b90 <_Balloc+0x78>)
 8009b30:	4818      	ldr	r0, [pc, #96]	; (8009b94 <_Balloc+0x7c>)
 8009b32:	2166      	movs	r1, #102	; 0x66
 8009b34:	f000 fd3a 	bl	800a5ac <__assert_func>
 8009b38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b3c:	6006      	str	r6, [r0, #0]
 8009b3e:	60c6      	str	r6, [r0, #12]
 8009b40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009b42:	68f3      	ldr	r3, [r6, #12]
 8009b44:	b183      	cbz	r3, 8009b68 <_Balloc+0x50>
 8009b46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b48:	68db      	ldr	r3, [r3, #12]
 8009b4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009b4e:	b9b8      	cbnz	r0, 8009b80 <_Balloc+0x68>
 8009b50:	2101      	movs	r1, #1
 8009b52:	fa01 f605 	lsl.w	r6, r1, r5
 8009b56:	1d72      	adds	r2, r6, #5
 8009b58:	0092      	lsls	r2, r2, #2
 8009b5a:	4620      	mov	r0, r4
 8009b5c:	f000 fb60 	bl	800a220 <_calloc_r>
 8009b60:	b160      	cbz	r0, 8009b7c <_Balloc+0x64>
 8009b62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009b66:	e00e      	b.n	8009b86 <_Balloc+0x6e>
 8009b68:	2221      	movs	r2, #33	; 0x21
 8009b6a:	2104      	movs	r1, #4
 8009b6c:	4620      	mov	r0, r4
 8009b6e:	f000 fb57 	bl	800a220 <_calloc_r>
 8009b72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b74:	60f0      	str	r0, [r6, #12]
 8009b76:	68db      	ldr	r3, [r3, #12]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d1e4      	bne.n	8009b46 <_Balloc+0x2e>
 8009b7c:	2000      	movs	r0, #0
 8009b7e:	bd70      	pop	{r4, r5, r6, pc}
 8009b80:	6802      	ldr	r2, [r0, #0]
 8009b82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b86:	2300      	movs	r3, #0
 8009b88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b8c:	e7f7      	b.n	8009b7e <_Balloc+0x66>
 8009b8e:	bf00      	nop
 8009b90:	0800b0a1 	.word	0x0800b0a1
 8009b94:	0800b184 	.word	0x0800b184

08009b98 <_Bfree>:
 8009b98:	b570      	push	{r4, r5, r6, lr}
 8009b9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009b9c:	4605      	mov	r5, r0
 8009b9e:	460c      	mov	r4, r1
 8009ba0:	b976      	cbnz	r6, 8009bc0 <_Bfree+0x28>
 8009ba2:	2010      	movs	r0, #16
 8009ba4:	f7fe f846 	bl	8007c34 <malloc>
 8009ba8:	4602      	mov	r2, r0
 8009baa:	6268      	str	r0, [r5, #36]	; 0x24
 8009bac:	b920      	cbnz	r0, 8009bb8 <_Bfree+0x20>
 8009bae:	4b09      	ldr	r3, [pc, #36]	; (8009bd4 <_Bfree+0x3c>)
 8009bb0:	4809      	ldr	r0, [pc, #36]	; (8009bd8 <_Bfree+0x40>)
 8009bb2:	218a      	movs	r1, #138	; 0x8a
 8009bb4:	f000 fcfa 	bl	800a5ac <__assert_func>
 8009bb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009bbc:	6006      	str	r6, [r0, #0]
 8009bbe:	60c6      	str	r6, [r0, #12]
 8009bc0:	b13c      	cbz	r4, 8009bd2 <_Bfree+0x3a>
 8009bc2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009bc4:	6862      	ldr	r2, [r4, #4]
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009bcc:	6021      	str	r1, [r4, #0]
 8009bce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009bd2:	bd70      	pop	{r4, r5, r6, pc}
 8009bd4:	0800b0a1 	.word	0x0800b0a1
 8009bd8:	0800b184 	.word	0x0800b184

08009bdc <__multadd>:
 8009bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009be0:	690d      	ldr	r5, [r1, #16]
 8009be2:	4607      	mov	r7, r0
 8009be4:	460c      	mov	r4, r1
 8009be6:	461e      	mov	r6, r3
 8009be8:	f101 0c14 	add.w	ip, r1, #20
 8009bec:	2000      	movs	r0, #0
 8009bee:	f8dc 3000 	ldr.w	r3, [ip]
 8009bf2:	b299      	uxth	r1, r3
 8009bf4:	fb02 6101 	mla	r1, r2, r1, r6
 8009bf8:	0c1e      	lsrs	r6, r3, #16
 8009bfa:	0c0b      	lsrs	r3, r1, #16
 8009bfc:	fb02 3306 	mla	r3, r2, r6, r3
 8009c00:	b289      	uxth	r1, r1
 8009c02:	3001      	adds	r0, #1
 8009c04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009c08:	4285      	cmp	r5, r0
 8009c0a:	f84c 1b04 	str.w	r1, [ip], #4
 8009c0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009c12:	dcec      	bgt.n	8009bee <__multadd+0x12>
 8009c14:	b30e      	cbz	r6, 8009c5a <__multadd+0x7e>
 8009c16:	68a3      	ldr	r3, [r4, #8]
 8009c18:	42ab      	cmp	r3, r5
 8009c1a:	dc19      	bgt.n	8009c50 <__multadd+0x74>
 8009c1c:	6861      	ldr	r1, [r4, #4]
 8009c1e:	4638      	mov	r0, r7
 8009c20:	3101      	adds	r1, #1
 8009c22:	f7ff ff79 	bl	8009b18 <_Balloc>
 8009c26:	4680      	mov	r8, r0
 8009c28:	b928      	cbnz	r0, 8009c36 <__multadd+0x5a>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	4b0c      	ldr	r3, [pc, #48]	; (8009c60 <__multadd+0x84>)
 8009c2e:	480d      	ldr	r0, [pc, #52]	; (8009c64 <__multadd+0x88>)
 8009c30:	21b5      	movs	r1, #181	; 0xb5
 8009c32:	f000 fcbb 	bl	800a5ac <__assert_func>
 8009c36:	6922      	ldr	r2, [r4, #16]
 8009c38:	3202      	adds	r2, #2
 8009c3a:	f104 010c 	add.w	r1, r4, #12
 8009c3e:	0092      	lsls	r2, r2, #2
 8009c40:	300c      	adds	r0, #12
 8009c42:	f7ff ff4f 	bl	8009ae4 <memcpy>
 8009c46:	4621      	mov	r1, r4
 8009c48:	4638      	mov	r0, r7
 8009c4a:	f7ff ffa5 	bl	8009b98 <_Bfree>
 8009c4e:	4644      	mov	r4, r8
 8009c50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c54:	3501      	adds	r5, #1
 8009c56:	615e      	str	r6, [r3, #20]
 8009c58:	6125      	str	r5, [r4, #16]
 8009c5a:	4620      	mov	r0, r4
 8009c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c60:	0800b113 	.word	0x0800b113
 8009c64:	0800b184 	.word	0x0800b184

08009c68 <__hi0bits>:
 8009c68:	0c03      	lsrs	r3, r0, #16
 8009c6a:	041b      	lsls	r3, r3, #16
 8009c6c:	b9d3      	cbnz	r3, 8009ca4 <__hi0bits+0x3c>
 8009c6e:	0400      	lsls	r0, r0, #16
 8009c70:	2310      	movs	r3, #16
 8009c72:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009c76:	bf04      	itt	eq
 8009c78:	0200      	lsleq	r0, r0, #8
 8009c7a:	3308      	addeq	r3, #8
 8009c7c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009c80:	bf04      	itt	eq
 8009c82:	0100      	lsleq	r0, r0, #4
 8009c84:	3304      	addeq	r3, #4
 8009c86:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009c8a:	bf04      	itt	eq
 8009c8c:	0080      	lsleq	r0, r0, #2
 8009c8e:	3302      	addeq	r3, #2
 8009c90:	2800      	cmp	r0, #0
 8009c92:	db05      	blt.n	8009ca0 <__hi0bits+0x38>
 8009c94:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009c98:	f103 0301 	add.w	r3, r3, #1
 8009c9c:	bf08      	it	eq
 8009c9e:	2320      	moveq	r3, #32
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	4770      	bx	lr
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	e7e4      	b.n	8009c72 <__hi0bits+0xa>

08009ca8 <__lo0bits>:
 8009ca8:	6803      	ldr	r3, [r0, #0]
 8009caa:	f013 0207 	ands.w	r2, r3, #7
 8009cae:	4601      	mov	r1, r0
 8009cb0:	d00b      	beq.n	8009cca <__lo0bits+0x22>
 8009cb2:	07da      	lsls	r2, r3, #31
 8009cb4:	d423      	bmi.n	8009cfe <__lo0bits+0x56>
 8009cb6:	0798      	lsls	r0, r3, #30
 8009cb8:	bf49      	itett	mi
 8009cba:	085b      	lsrmi	r3, r3, #1
 8009cbc:	089b      	lsrpl	r3, r3, #2
 8009cbe:	2001      	movmi	r0, #1
 8009cc0:	600b      	strmi	r3, [r1, #0]
 8009cc2:	bf5c      	itt	pl
 8009cc4:	600b      	strpl	r3, [r1, #0]
 8009cc6:	2002      	movpl	r0, #2
 8009cc8:	4770      	bx	lr
 8009cca:	b298      	uxth	r0, r3
 8009ccc:	b9a8      	cbnz	r0, 8009cfa <__lo0bits+0x52>
 8009cce:	0c1b      	lsrs	r3, r3, #16
 8009cd0:	2010      	movs	r0, #16
 8009cd2:	b2da      	uxtb	r2, r3
 8009cd4:	b90a      	cbnz	r2, 8009cda <__lo0bits+0x32>
 8009cd6:	3008      	adds	r0, #8
 8009cd8:	0a1b      	lsrs	r3, r3, #8
 8009cda:	071a      	lsls	r2, r3, #28
 8009cdc:	bf04      	itt	eq
 8009cde:	091b      	lsreq	r3, r3, #4
 8009ce0:	3004      	addeq	r0, #4
 8009ce2:	079a      	lsls	r2, r3, #30
 8009ce4:	bf04      	itt	eq
 8009ce6:	089b      	lsreq	r3, r3, #2
 8009ce8:	3002      	addeq	r0, #2
 8009cea:	07da      	lsls	r2, r3, #31
 8009cec:	d403      	bmi.n	8009cf6 <__lo0bits+0x4e>
 8009cee:	085b      	lsrs	r3, r3, #1
 8009cf0:	f100 0001 	add.w	r0, r0, #1
 8009cf4:	d005      	beq.n	8009d02 <__lo0bits+0x5a>
 8009cf6:	600b      	str	r3, [r1, #0]
 8009cf8:	4770      	bx	lr
 8009cfa:	4610      	mov	r0, r2
 8009cfc:	e7e9      	b.n	8009cd2 <__lo0bits+0x2a>
 8009cfe:	2000      	movs	r0, #0
 8009d00:	4770      	bx	lr
 8009d02:	2020      	movs	r0, #32
 8009d04:	4770      	bx	lr
	...

08009d08 <__i2b>:
 8009d08:	b510      	push	{r4, lr}
 8009d0a:	460c      	mov	r4, r1
 8009d0c:	2101      	movs	r1, #1
 8009d0e:	f7ff ff03 	bl	8009b18 <_Balloc>
 8009d12:	4602      	mov	r2, r0
 8009d14:	b928      	cbnz	r0, 8009d22 <__i2b+0x1a>
 8009d16:	4b05      	ldr	r3, [pc, #20]	; (8009d2c <__i2b+0x24>)
 8009d18:	4805      	ldr	r0, [pc, #20]	; (8009d30 <__i2b+0x28>)
 8009d1a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009d1e:	f000 fc45 	bl	800a5ac <__assert_func>
 8009d22:	2301      	movs	r3, #1
 8009d24:	6144      	str	r4, [r0, #20]
 8009d26:	6103      	str	r3, [r0, #16]
 8009d28:	bd10      	pop	{r4, pc}
 8009d2a:	bf00      	nop
 8009d2c:	0800b113 	.word	0x0800b113
 8009d30:	0800b184 	.word	0x0800b184

08009d34 <__multiply>:
 8009d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d38:	4691      	mov	r9, r2
 8009d3a:	690a      	ldr	r2, [r1, #16]
 8009d3c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009d40:	429a      	cmp	r2, r3
 8009d42:	bfb8      	it	lt
 8009d44:	460b      	movlt	r3, r1
 8009d46:	460c      	mov	r4, r1
 8009d48:	bfbc      	itt	lt
 8009d4a:	464c      	movlt	r4, r9
 8009d4c:	4699      	movlt	r9, r3
 8009d4e:	6927      	ldr	r7, [r4, #16]
 8009d50:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009d54:	68a3      	ldr	r3, [r4, #8]
 8009d56:	6861      	ldr	r1, [r4, #4]
 8009d58:	eb07 060a 	add.w	r6, r7, sl
 8009d5c:	42b3      	cmp	r3, r6
 8009d5e:	b085      	sub	sp, #20
 8009d60:	bfb8      	it	lt
 8009d62:	3101      	addlt	r1, #1
 8009d64:	f7ff fed8 	bl	8009b18 <_Balloc>
 8009d68:	b930      	cbnz	r0, 8009d78 <__multiply+0x44>
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	4b44      	ldr	r3, [pc, #272]	; (8009e80 <__multiply+0x14c>)
 8009d6e:	4845      	ldr	r0, [pc, #276]	; (8009e84 <__multiply+0x150>)
 8009d70:	f240 115d 	movw	r1, #349	; 0x15d
 8009d74:	f000 fc1a 	bl	800a5ac <__assert_func>
 8009d78:	f100 0514 	add.w	r5, r0, #20
 8009d7c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009d80:	462b      	mov	r3, r5
 8009d82:	2200      	movs	r2, #0
 8009d84:	4543      	cmp	r3, r8
 8009d86:	d321      	bcc.n	8009dcc <__multiply+0x98>
 8009d88:	f104 0314 	add.w	r3, r4, #20
 8009d8c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009d90:	f109 0314 	add.w	r3, r9, #20
 8009d94:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009d98:	9202      	str	r2, [sp, #8]
 8009d9a:	1b3a      	subs	r2, r7, r4
 8009d9c:	3a15      	subs	r2, #21
 8009d9e:	f022 0203 	bic.w	r2, r2, #3
 8009da2:	3204      	adds	r2, #4
 8009da4:	f104 0115 	add.w	r1, r4, #21
 8009da8:	428f      	cmp	r7, r1
 8009daa:	bf38      	it	cc
 8009dac:	2204      	movcc	r2, #4
 8009dae:	9201      	str	r2, [sp, #4]
 8009db0:	9a02      	ldr	r2, [sp, #8]
 8009db2:	9303      	str	r3, [sp, #12]
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d80c      	bhi.n	8009dd2 <__multiply+0x9e>
 8009db8:	2e00      	cmp	r6, #0
 8009dba:	dd03      	ble.n	8009dc4 <__multiply+0x90>
 8009dbc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d05a      	beq.n	8009e7a <__multiply+0x146>
 8009dc4:	6106      	str	r6, [r0, #16]
 8009dc6:	b005      	add	sp, #20
 8009dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dcc:	f843 2b04 	str.w	r2, [r3], #4
 8009dd0:	e7d8      	b.n	8009d84 <__multiply+0x50>
 8009dd2:	f8b3 a000 	ldrh.w	sl, [r3]
 8009dd6:	f1ba 0f00 	cmp.w	sl, #0
 8009dda:	d024      	beq.n	8009e26 <__multiply+0xf2>
 8009ddc:	f104 0e14 	add.w	lr, r4, #20
 8009de0:	46a9      	mov	r9, r5
 8009de2:	f04f 0c00 	mov.w	ip, #0
 8009de6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009dea:	f8d9 1000 	ldr.w	r1, [r9]
 8009dee:	fa1f fb82 	uxth.w	fp, r2
 8009df2:	b289      	uxth	r1, r1
 8009df4:	fb0a 110b 	mla	r1, sl, fp, r1
 8009df8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009dfc:	f8d9 2000 	ldr.w	r2, [r9]
 8009e00:	4461      	add	r1, ip
 8009e02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009e06:	fb0a c20b 	mla	r2, sl, fp, ip
 8009e0a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009e0e:	b289      	uxth	r1, r1
 8009e10:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009e14:	4577      	cmp	r7, lr
 8009e16:	f849 1b04 	str.w	r1, [r9], #4
 8009e1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009e1e:	d8e2      	bhi.n	8009de6 <__multiply+0xb2>
 8009e20:	9a01      	ldr	r2, [sp, #4]
 8009e22:	f845 c002 	str.w	ip, [r5, r2]
 8009e26:	9a03      	ldr	r2, [sp, #12]
 8009e28:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009e2c:	3304      	adds	r3, #4
 8009e2e:	f1b9 0f00 	cmp.w	r9, #0
 8009e32:	d020      	beq.n	8009e76 <__multiply+0x142>
 8009e34:	6829      	ldr	r1, [r5, #0]
 8009e36:	f104 0c14 	add.w	ip, r4, #20
 8009e3a:	46ae      	mov	lr, r5
 8009e3c:	f04f 0a00 	mov.w	sl, #0
 8009e40:	f8bc b000 	ldrh.w	fp, [ip]
 8009e44:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009e48:	fb09 220b 	mla	r2, r9, fp, r2
 8009e4c:	4492      	add	sl, r2
 8009e4e:	b289      	uxth	r1, r1
 8009e50:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009e54:	f84e 1b04 	str.w	r1, [lr], #4
 8009e58:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009e5c:	f8be 1000 	ldrh.w	r1, [lr]
 8009e60:	0c12      	lsrs	r2, r2, #16
 8009e62:	fb09 1102 	mla	r1, r9, r2, r1
 8009e66:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009e6a:	4567      	cmp	r7, ip
 8009e6c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009e70:	d8e6      	bhi.n	8009e40 <__multiply+0x10c>
 8009e72:	9a01      	ldr	r2, [sp, #4]
 8009e74:	50a9      	str	r1, [r5, r2]
 8009e76:	3504      	adds	r5, #4
 8009e78:	e79a      	b.n	8009db0 <__multiply+0x7c>
 8009e7a:	3e01      	subs	r6, #1
 8009e7c:	e79c      	b.n	8009db8 <__multiply+0x84>
 8009e7e:	bf00      	nop
 8009e80:	0800b113 	.word	0x0800b113
 8009e84:	0800b184 	.word	0x0800b184

08009e88 <__pow5mult>:
 8009e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e8c:	4615      	mov	r5, r2
 8009e8e:	f012 0203 	ands.w	r2, r2, #3
 8009e92:	4606      	mov	r6, r0
 8009e94:	460f      	mov	r7, r1
 8009e96:	d007      	beq.n	8009ea8 <__pow5mult+0x20>
 8009e98:	4c25      	ldr	r4, [pc, #148]	; (8009f30 <__pow5mult+0xa8>)
 8009e9a:	3a01      	subs	r2, #1
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009ea2:	f7ff fe9b 	bl	8009bdc <__multadd>
 8009ea6:	4607      	mov	r7, r0
 8009ea8:	10ad      	asrs	r5, r5, #2
 8009eaa:	d03d      	beq.n	8009f28 <__pow5mult+0xa0>
 8009eac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009eae:	b97c      	cbnz	r4, 8009ed0 <__pow5mult+0x48>
 8009eb0:	2010      	movs	r0, #16
 8009eb2:	f7fd febf 	bl	8007c34 <malloc>
 8009eb6:	4602      	mov	r2, r0
 8009eb8:	6270      	str	r0, [r6, #36]	; 0x24
 8009eba:	b928      	cbnz	r0, 8009ec8 <__pow5mult+0x40>
 8009ebc:	4b1d      	ldr	r3, [pc, #116]	; (8009f34 <__pow5mult+0xac>)
 8009ebe:	481e      	ldr	r0, [pc, #120]	; (8009f38 <__pow5mult+0xb0>)
 8009ec0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009ec4:	f000 fb72 	bl	800a5ac <__assert_func>
 8009ec8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ecc:	6004      	str	r4, [r0, #0]
 8009ece:	60c4      	str	r4, [r0, #12]
 8009ed0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009ed4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ed8:	b94c      	cbnz	r4, 8009eee <__pow5mult+0x66>
 8009eda:	f240 2171 	movw	r1, #625	; 0x271
 8009ede:	4630      	mov	r0, r6
 8009ee0:	f7ff ff12 	bl	8009d08 <__i2b>
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	f8c8 0008 	str.w	r0, [r8, #8]
 8009eea:	4604      	mov	r4, r0
 8009eec:	6003      	str	r3, [r0, #0]
 8009eee:	f04f 0900 	mov.w	r9, #0
 8009ef2:	07eb      	lsls	r3, r5, #31
 8009ef4:	d50a      	bpl.n	8009f0c <__pow5mult+0x84>
 8009ef6:	4639      	mov	r1, r7
 8009ef8:	4622      	mov	r2, r4
 8009efa:	4630      	mov	r0, r6
 8009efc:	f7ff ff1a 	bl	8009d34 <__multiply>
 8009f00:	4639      	mov	r1, r7
 8009f02:	4680      	mov	r8, r0
 8009f04:	4630      	mov	r0, r6
 8009f06:	f7ff fe47 	bl	8009b98 <_Bfree>
 8009f0a:	4647      	mov	r7, r8
 8009f0c:	106d      	asrs	r5, r5, #1
 8009f0e:	d00b      	beq.n	8009f28 <__pow5mult+0xa0>
 8009f10:	6820      	ldr	r0, [r4, #0]
 8009f12:	b938      	cbnz	r0, 8009f24 <__pow5mult+0x9c>
 8009f14:	4622      	mov	r2, r4
 8009f16:	4621      	mov	r1, r4
 8009f18:	4630      	mov	r0, r6
 8009f1a:	f7ff ff0b 	bl	8009d34 <__multiply>
 8009f1e:	6020      	str	r0, [r4, #0]
 8009f20:	f8c0 9000 	str.w	r9, [r0]
 8009f24:	4604      	mov	r4, r0
 8009f26:	e7e4      	b.n	8009ef2 <__pow5mult+0x6a>
 8009f28:	4638      	mov	r0, r7
 8009f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f2e:	bf00      	nop
 8009f30:	0800b2d0 	.word	0x0800b2d0
 8009f34:	0800b0a1 	.word	0x0800b0a1
 8009f38:	0800b184 	.word	0x0800b184

08009f3c <__lshift>:
 8009f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f40:	460c      	mov	r4, r1
 8009f42:	6849      	ldr	r1, [r1, #4]
 8009f44:	6923      	ldr	r3, [r4, #16]
 8009f46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009f4a:	68a3      	ldr	r3, [r4, #8]
 8009f4c:	4607      	mov	r7, r0
 8009f4e:	4691      	mov	r9, r2
 8009f50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f54:	f108 0601 	add.w	r6, r8, #1
 8009f58:	42b3      	cmp	r3, r6
 8009f5a:	db0b      	blt.n	8009f74 <__lshift+0x38>
 8009f5c:	4638      	mov	r0, r7
 8009f5e:	f7ff fddb 	bl	8009b18 <_Balloc>
 8009f62:	4605      	mov	r5, r0
 8009f64:	b948      	cbnz	r0, 8009f7a <__lshift+0x3e>
 8009f66:	4602      	mov	r2, r0
 8009f68:	4b2a      	ldr	r3, [pc, #168]	; (800a014 <__lshift+0xd8>)
 8009f6a:	482b      	ldr	r0, [pc, #172]	; (800a018 <__lshift+0xdc>)
 8009f6c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009f70:	f000 fb1c 	bl	800a5ac <__assert_func>
 8009f74:	3101      	adds	r1, #1
 8009f76:	005b      	lsls	r3, r3, #1
 8009f78:	e7ee      	b.n	8009f58 <__lshift+0x1c>
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	f100 0114 	add.w	r1, r0, #20
 8009f80:	f100 0210 	add.w	r2, r0, #16
 8009f84:	4618      	mov	r0, r3
 8009f86:	4553      	cmp	r3, sl
 8009f88:	db37      	blt.n	8009ffa <__lshift+0xbe>
 8009f8a:	6920      	ldr	r0, [r4, #16]
 8009f8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f90:	f104 0314 	add.w	r3, r4, #20
 8009f94:	f019 091f 	ands.w	r9, r9, #31
 8009f98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f9c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009fa0:	d02f      	beq.n	800a002 <__lshift+0xc6>
 8009fa2:	f1c9 0e20 	rsb	lr, r9, #32
 8009fa6:	468a      	mov	sl, r1
 8009fa8:	f04f 0c00 	mov.w	ip, #0
 8009fac:	681a      	ldr	r2, [r3, #0]
 8009fae:	fa02 f209 	lsl.w	r2, r2, r9
 8009fb2:	ea42 020c 	orr.w	r2, r2, ip
 8009fb6:	f84a 2b04 	str.w	r2, [sl], #4
 8009fba:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fbe:	4298      	cmp	r0, r3
 8009fc0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009fc4:	d8f2      	bhi.n	8009fac <__lshift+0x70>
 8009fc6:	1b03      	subs	r3, r0, r4
 8009fc8:	3b15      	subs	r3, #21
 8009fca:	f023 0303 	bic.w	r3, r3, #3
 8009fce:	3304      	adds	r3, #4
 8009fd0:	f104 0215 	add.w	r2, r4, #21
 8009fd4:	4290      	cmp	r0, r2
 8009fd6:	bf38      	it	cc
 8009fd8:	2304      	movcc	r3, #4
 8009fda:	f841 c003 	str.w	ip, [r1, r3]
 8009fde:	f1bc 0f00 	cmp.w	ip, #0
 8009fe2:	d001      	beq.n	8009fe8 <__lshift+0xac>
 8009fe4:	f108 0602 	add.w	r6, r8, #2
 8009fe8:	3e01      	subs	r6, #1
 8009fea:	4638      	mov	r0, r7
 8009fec:	612e      	str	r6, [r5, #16]
 8009fee:	4621      	mov	r1, r4
 8009ff0:	f7ff fdd2 	bl	8009b98 <_Bfree>
 8009ff4:	4628      	mov	r0, r5
 8009ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ffa:	f842 0f04 	str.w	r0, [r2, #4]!
 8009ffe:	3301      	adds	r3, #1
 800a000:	e7c1      	b.n	8009f86 <__lshift+0x4a>
 800a002:	3904      	subs	r1, #4
 800a004:	f853 2b04 	ldr.w	r2, [r3], #4
 800a008:	f841 2f04 	str.w	r2, [r1, #4]!
 800a00c:	4298      	cmp	r0, r3
 800a00e:	d8f9      	bhi.n	800a004 <__lshift+0xc8>
 800a010:	e7ea      	b.n	8009fe8 <__lshift+0xac>
 800a012:	bf00      	nop
 800a014:	0800b113 	.word	0x0800b113
 800a018:	0800b184 	.word	0x0800b184

0800a01c <__mcmp>:
 800a01c:	b530      	push	{r4, r5, lr}
 800a01e:	6902      	ldr	r2, [r0, #16]
 800a020:	690c      	ldr	r4, [r1, #16]
 800a022:	1b12      	subs	r2, r2, r4
 800a024:	d10e      	bne.n	800a044 <__mcmp+0x28>
 800a026:	f100 0314 	add.w	r3, r0, #20
 800a02a:	3114      	adds	r1, #20
 800a02c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a030:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a034:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a038:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a03c:	42a5      	cmp	r5, r4
 800a03e:	d003      	beq.n	800a048 <__mcmp+0x2c>
 800a040:	d305      	bcc.n	800a04e <__mcmp+0x32>
 800a042:	2201      	movs	r2, #1
 800a044:	4610      	mov	r0, r2
 800a046:	bd30      	pop	{r4, r5, pc}
 800a048:	4283      	cmp	r3, r0
 800a04a:	d3f3      	bcc.n	800a034 <__mcmp+0x18>
 800a04c:	e7fa      	b.n	800a044 <__mcmp+0x28>
 800a04e:	f04f 32ff 	mov.w	r2, #4294967295
 800a052:	e7f7      	b.n	800a044 <__mcmp+0x28>

0800a054 <__mdiff>:
 800a054:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a058:	460c      	mov	r4, r1
 800a05a:	4606      	mov	r6, r0
 800a05c:	4611      	mov	r1, r2
 800a05e:	4620      	mov	r0, r4
 800a060:	4690      	mov	r8, r2
 800a062:	f7ff ffdb 	bl	800a01c <__mcmp>
 800a066:	1e05      	subs	r5, r0, #0
 800a068:	d110      	bne.n	800a08c <__mdiff+0x38>
 800a06a:	4629      	mov	r1, r5
 800a06c:	4630      	mov	r0, r6
 800a06e:	f7ff fd53 	bl	8009b18 <_Balloc>
 800a072:	b930      	cbnz	r0, 800a082 <__mdiff+0x2e>
 800a074:	4b3a      	ldr	r3, [pc, #232]	; (800a160 <__mdiff+0x10c>)
 800a076:	4602      	mov	r2, r0
 800a078:	f240 2132 	movw	r1, #562	; 0x232
 800a07c:	4839      	ldr	r0, [pc, #228]	; (800a164 <__mdiff+0x110>)
 800a07e:	f000 fa95 	bl	800a5ac <__assert_func>
 800a082:	2301      	movs	r3, #1
 800a084:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a088:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a08c:	bfa4      	itt	ge
 800a08e:	4643      	movge	r3, r8
 800a090:	46a0      	movge	r8, r4
 800a092:	4630      	mov	r0, r6
 800a094:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a098:	bfa6      	itte	ge
 800a09a:	461c      	movge	r4, r3
 800a09c:	2500      	movge	r5, #0
 800a09e:	2501      	movlt	r5, #1
 800a0a0:	f7ff fd3a 	bl	8009b18 <_Balloc>
 800a0a4:	b920      	cbnz	r0, 800a0b0 <__mdiff+0x5c>
 800a0a6:	4b2e      	ldr	r3, [pc, #184]	; (800a160 <__mdiff+0x10c>)
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a0ae:	e7e5      	b.n	800a07c <__mdiff+0x28>
 800a0b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a0b4:	6926      	ldr	r6, [r4, #16]
 800a0b6:	60c5      	str	r5, [r0, #12]
 800a0b8:	f104 0914 	add.w	r9, r4, #20
 800a0bc:	f108 0514 	add.w	r5, r8, #20
 800a0c0:	f100 0e14 	add.w	lr, r0, #20
 800a0c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a0c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a0cc:	f108 0210 	add.w	r2, r8, #16
 800a0d0:	46f2      	mov	sl, lr
 800a0d2:	2100      	movs	r1, #0
 800a0d4:	f859 3b04 	ldr.w	r3, [r9], #4
 800a0d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a0dc:	fa1f f883 	uxth.w	r8, r3
 800a0e0:	fa11 f18b 	uxtah	r1, r1, fp
 800a0e4:	0c1b      	lsrs	r3, r3, #16
 800a0e6:	eba1 0808 	sub.w	r8, r1, r8
 800a0ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a0ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a0f2:	fa1f f888 	uxth.w	r8, r8
 800a0f6:	1419      	asrs	r1, r3, #16
 800a0f8:	454e      	cmp	r6, r9
 800a0fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a0fe:	f84a 3b04 	str.w	r3, [sl], #4
 800a102:	d8e7      	bhi.n	800a0d4 <__mdiff+0x80>
 800a104:	1b33      	subs	r3, r6, r4
 800a106:	3b15      	subs	r3, #21
 800a108:	f023 0303 	bic.w	r3, r3, #3
 800a10c:	3304      	adds	r3, #4
 800a10e:	3415      	adds	r4, #21
 800a110:	42a6      	cmp	r6, r4
 800a112:	bf38      	it	cc
 800a114:	2304      	movcc	r3, #4
 800a116:	441d      	add	r5, r3
 800a118:	4473      	add	r3, lr
 800a11a:	469e      	mov	lr, r3
 800a11c:	462e      	mov	r6, r5
 800a11e:	4566      	cmp	r6, ip
 800a120:	d30e      	bcc.n	800a140 <__mdiff+0xec>
 800a122:	f10c 0203 	add.w	r2, ip, #3
 800a126:	1b52      	subs	r2, r2, r5
 800a128:	f022 0203 	bic.w	r2, r2, #3
 800a12c:	3d03      	subs	r5, #3
 800a12e:	45ac      	cmp	ip, r5
 800a130:	bf38      	it	cc
 800a132:	2200      	movcc	r2, #0
 800a134:	441a      	add	r2, r3
 800a136:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a13a:	b17b      	cbz	r3, 800a15c <__mdiff+0x108>
 800a13c:	6107      	str	r7, [r0, #16]
 800a13e:	e7a3      	b.n	800a088 <__mdiff+0x34>
 800a140:	f856 8b04 	ldr.w	r8, [r6], #4
 800a144:	fa11 f288 	uxtah	r2, r1, r8
 800a148:	1414      	asrs	r4, r2, #16
 800a14a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a14e:	b292      	uxth	r2, r2
 800a150:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a154:	f84e 2b04 	str.w	r2, [lr], #4
 800a158:	1421      	asrs	r1, r4, #16
 800a15a:	e7e0      	b.n	800a11e <__mdiff+0xca>
 800a15c:	3f01      	subs	r7, #1
 800a15e:	e7ea      	b.n	800a136 <__mdiff+0xe2>
 800a160:	0800b113 	.word	0x0800b113
 800a164:	0800b184 	.word	0x0800b184

0800a168 <__d2b>:
 800a168:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a16c:	4689      	mov	r9, r1
 800a16e:	2101      	movs	r1, #1
 800a170:	ec57 6b10 	vmov	r6, r7, d0
 800a174:	4690      	mov	r8, r2
 800a176:	f7ff fccf 	bl	8009b18 <_Balloc>
 800a17a:	4604      	mov	r4, r0
 800a17c:	b930      	cbnz	r0, 800a18c <__d2b+0x24>
 800a17e:	4602      	mov	r2, r0
 800a180:	4b25      	ldr	r3, [pc, #148]	; (800a218 <__d2b+0xb0>)
 800a182:	4826      	ldr	r0, [pc, #152]	; (800a21c <__d2b+0xb4>)
 800a184:	f240 310a 	movw	r1, #778	; 0x30a
 800a188:	f000 fa10 	bl	800a5ac <__assert_func>
 800a18c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a190:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a194:	bb35      	cbnz	r5, 800a1e4 <__d2b+0x7c>
 800a196:	2e00      	cmp	r6, #0
 800a198:	9301      	str	r3, [sp, #4]
 800a19a:	d028      	beq.n	800a1ee <__d2b+0x86>
 800a19c:	4668      	mov	r0, sp
 800a19e:	9600      	str	r6, [sp, #0]
 800a1a0:	f7ff fd82 	bl	8009ca8 <__lo0bits>
 800a1a4:	9900      	ldr	r1, [sp, #0]
 800a1a6:	b300      	cbz	r0, 800a1ea <__d2b+0x82>
 800a1a8:	9a01      	ldr	r2, [sp, #4]
 800a1aa:	f1c0 0320 	rsb	r3, r0, #32
 800a1ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a1b2:	430b      	orrs	r3, r1
 800a1b4:	40c2      	lsrs	r2, r0
 800a1b6:	6163      	str	r3, [r4, #20]
 800a1b8:	9201      	str	r2, [sp, #4]
 800a1ba:	9b01      	ldr	r3, [sp, #4]
 800a1bc:	61a3      	str	r3, [r4, #24]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	bf14      	ite	ne
 800a1c2:	2202      	movne	r2, #2
 800a1c4:	2201      	moveq	r2, #1
 800a1c6:	6122      	str	r2, [r4, #16]
 800a1c8:	b1d5      	cbz	r5, 800a200 <__d2b+0x98>
 800a1ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a1ce:	4405      	add	r5, r0
 800a1d0:	f8c9 5000 	str.w	r5, [r9]
 800a1d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a1d8:	f8c8 0000 	str.w	r0, [r8]
 800a1dc:	4620      	mov	r0, r4
 800a1de:	b003      	add	sp, #12
 800a1e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a1e8:	e7d5      	b.n	800a196 <__d2b+0x2e>
 800a1ea:	6161      	str	r1, [r4, #20]
 800a1ec:	e7e5      	b.n	800a1ba <__d2b+0x52>
 800a1ee:	a801      	add	r0, sp, #4
 800a1f0:	f7ff fd5a 	bl	8009ca8 <__lo0bits>
 800a1f4:	9b01      	ldr	r3, [sp, #4]
 800a1f6:	6163      	str	r3, [r4, #20]
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	6122      	str	r2, [r4, #16]
 800a1fc:	3020      	adds	r0, #32
 800a1fe:	e7e3      	b.n	800a1c8 <__d2b+0x60>
 800a200:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a204:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a208:	f8c9 0000 	str.w	r0, [r9]
 800a20c:	6918      	ldr	r0, [r3, #16]
 800a20e:	f7ff fd2b 	bl	8009c68 <__hi0bits>
 800a212:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a216:	e7df      	b.n	800a1d8 <__d2b+0x70>
 800a218:	0800b113 	.word	0x0800b113
 800a21c:	0800b184 	.word	0x0800b184

0800a220 <_calloc_r>:
 800a220:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a222:	fba1 2402 	umull	r2, r4, r1, r2
 800a226:	b94c      	cbnz	r4, 800a23c <_calloc_r+0x1c>
 800a228:	4611      	mov	r1, r2
 800a22a:	9201      	str	r2, [sp, #4]
 800a22c:	f7fd fd7e 	bl	8007d2c <_malloc_r>
 800a230:	9a01      	ldr	r2, [sp, #4]
 800a232:	4605      	mov	r5, r0
 800a234:	b930      	cbnz	r0, 800a244 <_calloc_r+0x24>
 800a236:	4628      	mov	r0, r5
 800a238:	b003      	add	sp, #12
 800a23a:	bd30      	pop	{r4, r5, pc}
 800a23c:	220c      	movs	r2, #12
 800a23e:	6002      	str	r2, [r0, #0]
 800a240:	2500      	movs	r5, #0
 800a242:	e7f8      	b.n	800a236 <_calloc_r+0x16>
 800a244:	4621      	mov	r1, r4
 800a246:	f7fd fcfd 	bl	8007c44 <memset>
 800a24a:	e7f4      	b.n	800a236 <_calloc_r+0x16>

0800a24c <__sfputc_r>:
 800a24c:	6893      	ldr	r3, [r2, #8]
 800a24e:	3b01      	subs	r3, #1
 800a250:	2b00      	cmp	r3, #0
 800a252:	b410      	push	{r4}
 800a254:	6093      	str	r3, [r2, #8]
 800a256:	da08      	bge.n	800a26a <__sfputc_r+0x1e>
 800a258:	6994      	ldr	r4, [r2, #24]
 800a25a:	42a3      	cmp	r3, r4
 800a25c:	db01      	blt.n	800a262 <__sfputc_r+0x16>
 800a25e:	290a      	cmp	r1, #10
 800a260:	d103      	bne.n	800a26a <__sfputc_r+0x1e>
 800a262:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a266:	f7fe badd 	b.w	8008824 <__swbuf_r>
 800a26a:	6813      	ldr	r3, [r2, #0]
 800a26c:	1c58      	adds	r0, r3, #1
 800a26e:	6010      	str	r0, [r2, #0]
 800a270:	7019      	strb	r1, [r3, #0]
 800a272:	4608      	mov	r0, r1
 800a274:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a278:	4770      	bx	lr

0800a27a <__sfputs_r>:
 800a27a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a27c:	4606      	mov	r6, r0
 800a27e:	460f      	mov	r7, r1
 800a280:	4614      	mov	r4, r2
 800a282:	18d5      	adds	r5, r2, r3
 800a284:	42ac      	cmp	r4, r5
 800a286:	d101      	bne.n	800a28c <__sfputs_r+0x12>
 800a288:	2000      	movs	r0, #0
 800a28a:	e007      	b.n	800a29c <__sfputs_r+0x22>
 800a28c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a290:	463a      	mov	r2, r7
 800a292:	4630      	mov	r0, r6
 800a294:	f7ff ffda 	bl	800a24c <__sfputc_r>
 800a298:	1c43      	adds	r3, r0, #1
 800a29a:	d1f3      	bne.n	800a284 <__sfputs_r+0xa>
 800a29c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a2a0 <_vfiprintf_r>:
 800a2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2a4:	460d      	mov	r5, r1
 800a2a6:	b09d      	sub	sp, #116	; 0x74
 800a2a8:	4614      	mov	r4, r2
 800a2aa:	4698      	mov	r8, r3
 800a2ac:	4606      	mov	r6, r0
 800a2ae:	b118      	cbz	r0, 800a2b8 <_vfiprintf_r+0x18>
 800a2b0:	6983      	ldr	r3, [r0, #24]
 800a2b2:	b90b      	cbnz	r3, 800a2b8 <_vfiprintf_r+0x18>
 800a2b4:	f7ff fb0c 	bl	80098d0 <__sinit>
 800a2b8:	4b89      	ldr	r3, [pc, #548]	; (800a4e0 <_vfiprintf_r+0x240>)
 800a2ba:	429d      	cmp	r5, r3
 800a2bc:	d11b      	bne.n	800a2f6 <_vfiprintf_r+0x56>
 800a2be:	6875      	ldr	r5, [r6, #4]
 800a2c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2c2:	07d9      	lsls	r1, r3, #31
 800a2c4:	d405      	bmi.n	800a2d2 <_vfiprintf_r+0x32>
 800a2c6:	89ab      	ldrh	r3, [r5, #12]
 800a2c8:	059a      	lsls	r2, r3, #22
 800a2ca:	d402      	bmi.n	800a2d2 <_vfiprintf_r+0x32>
 800a2cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2ce:	f7ff fba2 	bl	8009a16 <__retarget_lock_acquire_recursive>
 800a2d2:	89ab      	ldrh	r3, [r5, #12]
 800a2d4:	071b      	lsls	r3, r3, #28
 800a2d6:	d501      	bpl.n	800a2dc <_vfiprintf_r+0x3c>
 800a2d8:	692b      	ldr	r3, [r5, #16]
 800a2da:	b9eb      	cbnz	r3, 800a318 <_vfiprintf_r+0x78>
 800a2dc:	4629      	mov	r1, r5
 800a2de:	4630      	mov	r0, r6
 800a2e0:	f7fe faf2 	bl	80088c8 <__swsetup_r>
 800a2e4:	b1c0      	cbz	r0, 800a318 <_vfiprintf_r+0x78>
 800a2e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2e8:	07dc      	lsls	r4, r3, #31
 800a2ea:	d50e      	bpl.n	800a30a <_vfiprintf_r+0x6a>
 800a2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f0:	b01d      	add	sp, #116	; 0x74
 800a2f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2f6:	4b7b      	ldr	r3, [pc, #492]	; (800a4e4 <_vfiprintf_r+0x244>)
 800a2f8:	429d      	cmp	r5, r3
 800a2fa:	d101      	bne.n	800a300 <_vfiprintf_r+0x60>
 800a2fc:	68b5      	ldr	r5, [r6, #8]
 800a2fe:	e7df      	b.n	800a2c0 <_vfiprintf_r+0x20>
 800a300:	4b79      	ldr	r3, [pc, #484]	; (800a4e8 <_vfiprintf_r+0x248>)
 800a302:	429d      	cmp	r5, r3
 800a304:	bf08      	it	eq
 800a306:	68f5      	ldreq	r5, [r6, #12]
 800a308:	e7da      	b.n	800a2c0 <_vfiprintf_r+0x20>
 800a30a:	89ab      	ldrh	r3, [r5, #12]
 800a30c:	0598      	lsls	r0, r3, #22
 800a30e:	d4ed      	bmi.n	800a2ec <_vfiprintf_r+0x4c>
 800a310:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a312:	f7ff fb81 	bl	8009a18 <__retarget_lock_release_recursive>
 800a316:	e7e9      	b.n	800a2ec <_vfiprintf_r+0x4c>
 800a318:	2300      	movs	r3, #0
 800a31a:	9309      	str	r3, [sp, #36]	; 0x24
 800a31c:	2320      	movs	r3, #32
 800a31e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a322:	f8cd 800c 	str.w	r8, [sp, #12]
 800a326:	2330      	movs	r3, #48	; 0x30
 800a328:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a4ec <_vfiprintf_r+0x24c>
 800a32c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a330:	f04f 0901 	mov.w	r9, #1
 800a334:	4623      	mov	r3, r4
 800a336:	469a      	mov	sl, r3
 800a338:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a33c:	b10a      	cbz	r2, 800a342 <_vfiprintf_r+0xa2>
 800a33e:	2a25      	cmp	r2, #37	; 0x25
 800a340:	d1f9      	bne.n	800a336 <_vfiprintf_r+0x96>
 800a342:	ebba 0b04 	subs.w	fp, sl, r4
 800a346:	d00b      	beq.n	800a360 <_vfiprintf_r+0xc0>
 800a348:	465b      	mov	r3, fp
 800a34a:	4622      	mov	r2, r4
 800a34c:	4629      	mov	r1, r5
 800a34e:	4630      	mov	r0, r6
 800a350:	f7ff ff93 	bl	800a27a <__sfputs_r>
 800a354:	3001      	adds	r0, #1
 800a356:	f000 80aa 	beq.w	800a4ae <_vfiprintf_r+0x20e>
 800a35a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a35c:	445a      	add	r2, fp
 800a35e:	9209      	str	r2, [sp, #36]	; 0x24
 800a360:	f89a 3000 	ldrb.w	r3, [sl]
 800a364:	2b00      	cmp	r3, #0
 800a366:	f000 80a2 	beq.w	800a4ae <_vfiprintf_r+0x20e>
 800a36a:	2300      	movs	r3, #0
 800a36c:	f04f 32ff 	mov.w	r2, #4294967295
 800a370:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a374:	f10a 0a01 	add.w	sl, sl, #1
 800a378:	9304      	str	r3, [sp, #16]
 800a37a:	9307      	str	r3, [sp, #28]
 800a37c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a380:	931a      	str	r3, [sp, #104]	; 0x68
 800a382:	4654      	mov	r4, sl
 800a384:	2205      	movs	r2, #5
 800a386:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a38a:	4858      	ldr	r0, [pc, #352]	; (800a4ec <_vfiprintf_r+0x24c>)
 800a38c:	f7f5 ff40 	bl	8000210 <memchr>
 800a390:	9a04      	ldr	r2, [sp, #16]
 800a392:	b9d8      	cbnz	r0, 800a3cc <_vfiprintf_r+0x12c>
 800a394:	06d1      	lsls	r1, r2, #27
 800a396:	bf44      	itt	mi
 800a398:	2320      	movmi	r3, #32
 800a39a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a39e:	0713      	lsls	r3, r2, #28
 800a3a0:	bf44      	itt	mi
 800a3a2:	232b      	movmi	r3, #43	; 0x2b
 800a3a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3a8:	f89a 3000 	ldrb.w	r3, [sl]
 800a3ac:	2b2a      	cmp	r3, #42	; 0x2a
 800a3ae:	d015      	beq.n	800a3dc <_vfiprintf_r+0x13c>
 800a3b0:	9a07      	ldr	r2, [sp, #28]
 800a3b2:	4654      	mov	r4, sl
 800a3b4:	2000      	movs	r0, #0
 800a3b6:	f04f 0c0a 	mov.w	ip, #10
 800a3ba:	4621      	mov	r1, r4
 800a3bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3c0:	3b30      	subs	r3, #48	; 0x30
 800a3c2:	2b09      	cmp	r3, #9
 800a3c4:	d94e      	bls.n	800a464 <_vfiprintf_r+0x1c4>
 800a3c6:	b1b0      	cbz	r0, 800a3f6 <_vfiprintf_r+0x156>
 800a3c8:	9207      	str	r2, [sp, #28]
 800a3ca:	e014      	b.n	800a3f6 <_vfiprintf_r+0x156>
 800a3cc:	eba0 0308 	sub.w	r3, r0, r8
 800a3d0:	fa09 f303 	lsl.w	r3, r9, r3
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	9304      	str	r3, [sp, #16]
 800a3d8:	46a2      	mov	sl, r4
 800a3da:	e7d2      	b.n	800a382 <_vfiprintf_r+0xe2>
 800a3dc:	9b03      	ldr	r3, [sp, #12]
 800a3de:	1d19      	adds	r1, r3, #4
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	9103      	str	r1, [sp, #12]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	bfbb      	ittet	lt
 800a3e8:	425b      	neglt	r3, r3
 800a3ea:	f042 0202 	orrlt.w	r2, r2, #2
 800a3ee:	9307      	strge	r3, [sp, #28]
 800a3f0:	9307      	strlt	r3, [sp, #28]
 800a3f2:	bfb8      	it	lt
 800a3f4:	9204      	strlt	r2, [sp, #16]
 800a3f6:	7823      	ldrb	r3, [r4, #0]
 800a3f8:	2b2e      	cmp	r3, #46	; 0x2e
 800a3fa:	d10c      	bne.n	800a416 <_vfiprintf_r+0x176>
 800a3fc:	7863      	ldrb	r3, [r4, #1]
 800a3fe:	2b2a      	cmp	r3, #42	; 0x2a
 800a400:	d135      	bne.n	800a46e <_vfiprintf_r+0x1ce>
 800a402:	9b03      	ldr	r3, [sp, #12]
 800a404:	1d1a      	adds	r2, r3, #4
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	9203      	str	r2, [sp, #12]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	bfb8      	it	lt
 800a40e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a412:	3402      	adds	r4, #2
 800a414:	9305      	str	r3, [sp, #20]
 800a416:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a4fc <_vfiprintf_r+0x25c>
 800a41a:	7821      	ldrb	r1, [r4, #0]
 800a41c:	2203      	movs	r2, #3
 800a41e:	4650      	mov	r0, sl
 800a420:	f7f5 fef6 	bl	8000210 <memchr>
 800a424:	b140      	cbz	r0, 800a438 <_vfiprintf_r+0x198>
 800a426:	2340      	movs	r3, #64	; 0x40
 800a428:	eba0 000a 	sub.w	r0, r0, sl
 800a42c:	fa03 f000 	lsl.w	r0, r3, r0
 800a430:	9b04      	ldr	r3, [sp, #16]
 800a432:	4303      	orrs	r3, r0
 800a434:	3401      	adds	r4, #1
 800a436:	9304      	str	r3, [sp, #16]
 800a438:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a43c:	482c      	ldr	r0, [pc, #176]	; (800a4f0 <_vfiprintf_r+0x250>)
 800a43e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a442:	2206      	movs	r2, #6
 800a444:	f7f5 fee4 	bl	8000210 <memchr>
 800a448:	2800      	cmp	r0, #0
 800a44a:	d03f      	beq.n	800a4cc <_vfiprintf_r+0x22c>
 800a44c:	4b29      	ldr	r3, [pc, #164]	; (800a4f4 <_vfiprintf_r+0x254>)
 800a44e:	bb1b      	cbnz	r3, 800a498 <_vfiprintf_r+0x1f8>
 800a450:	9b03      	ldr	r3, [sp, #12]
 800a452:	3307      	adds	r3, #7
 800a454:	f023 0307 	bic.w	r3, r3, #7
 800a458:	3308      	adds	r3, #8
 800a45a:	9303      	str	r3, [sp, #12]
 800a45c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a45e:	443b      	add	r3, r7
 800a460:	9309      	str	r3, [sp, #36]	; 0x24
 800a462:	e767      	b.n	800a334 <_vfiprintf_r+0x94>
 800a464:	fb0c 3202 	mla	r2, ip, r2, r3
 800a468:	460c      	mov	r4, r1
 800a46a:	2001      	movs	r0, #1
 800a46c:	e7a5      	b.n	800a3ba <_vfiprintf_r+0x11a>
 800a46e:	2300      	movs	r3, #0
 800a470:	3401      	adds	r4, #1
 800a472:	9305      	str	r3, [sp, #20]
 800a474:	4619      	mov	r1, r3
 800a476:	f04f 0c0a 	mov.w	ip, #10
 800a47a:	4620      	mov	r0, r4
 800a47c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a480:	3a30      	subs	r2, #48	; 0x30
 800a482:	2a09      	cmp	r2, #9
 800a484:	d903      	bls.n	800a48e <_vfiprintf_r+0x1ee>
 800a486:	2b00      	cmp	r3, #0
 800a488:	d0c5      	beq.n	800a416 <_vfiprintf_r+0x176>
 800a48a:	9105      	str	r1, [sp, #20]
 800a48c:	e7c3      	b.n	800a416 <_vfiprintf_r+0x176>
 800a48e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a492:	4604      	mov	r4, r0
 800a494:	2301      	movs	r3, #1
 800a496:	e7f0      	b.n	800a47a <_vfiprintf_r+0x1da>
 800a498:	ab03      	add	r3, sp, #12
 800a49a:	9300      	str	r3, [sp, #0]
 800a49c:	462a      	mov	r2, r5
 800a49e:	4b16      	ldr	r3, [pc, #88]	; (800a4f8 <_vfiprintf_r+0x258>)
 800a4a0:	a904      	add	r1, sp, #16
 800a4a2:	4630      	mov	r0, r6
 800a4a4:	f7fd fd56 	bl	8007f54 <_printf_float>
 800a4a8:	4607      	mov	r7, r0
 800a4aa:	1c78      	adds	r0, r7, #1
 800a4ac:	d1d6      	bne.n	800a45c <_vfiprintf_r+0x1bc>
 800a4ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4b0:	07d9      	lsls	r1, r3, #31
 800a4b2:	d405      	bmi.n	800a4c0 <_vfiprintf_r+0x220>
 800a4b4:	89ab      	ldrh	r3, [r5, #12]
 800a4b6:	059a      	lsls	r2, r3, #22
 800a4b8:	d402      	bmi.n	800a4c0 <_vfiprintf_r+0x220>
 800a4ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4bc:	f7ff faac 	bl	8009a18 <__retarget_lock_release_recursive>
 800a4c0:	89ab      	ldrh	r3, [r5, #12]
 800a4c2:	065b      	lsls	r3, r3, #25
 800a4c4:	f53f af12 	bmi.w	800a2ec <_vfiprintf_r+0x4c>
 800a4c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4ca:	e711      	b.n	800a2f0 <_vfiprintf_r+0x50>
 800a4cc:	ab03      	add	r3, sp, #12
 800a4ce:	9300      	str	r3, [sp, #0]
 800a4d0:	462a      	mov	r2, r5
 800a4d2:	4b09      	ldr	r3, [pc, #36]	; (800a4f8 <_vfiprintf_r+0x258>)
 800a4d4:	a904      	add	r1, sp, #16
 800a4d6:	4630      	mov	r0, r6
 800a4d8:	f7fd ffe0 	bl	800849c <_printf_i>
 800a4dc:	e7e4      	b.n	800a4a8 <_vfiprintf_r+0x208>
 800a4de:	bf00      	nop
 800a4e0:	0800b144 	.word	0x0800b144
 800a4e4:	0800b164 	.word	0x0800b164
 800a4e8:	0800b124 	.word	0x0800b124
 800a4ec:	0800b2dc 	.word	0x0800b2dc
 800a4f0:	0800b2e6 	.word	0x0800b2e6
 800a4f4:	08007f55 	.word	0x08007f55
 800a4f8:	0800a27b 	.word	0x0800a27b
 800a4fc:	0800b2e2 	.word	0x0800b2e2

0800a500 <__sread>:
 800a500:	b510      	push	{r4, lr}
 800a502:	460c      	mov	r4, r1
 800a504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a508:	f000 f8d6 	bl	800a6b8 <_read_r>
 800a50c:	2800      	cmp	r0, #0
 800a50e:	bfab      	itete	ge
 800a510:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a512:	89a3      	ldrhlt	r3, [r4, #12]
 800a514:	181b      	addge	r3, r3, r0
 800a516:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a51a:	bfac      	ite	ge
 800a51c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a51e:	81a3      	strhlt	r3, [r4, #12]
 800a520:	bd10      	pop	{r4, pc}

0800a522 <__swrite>:
 800a522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a526:	461f      	mov	r7, r3
 800a528:	898b      	ldrh	r3, [r1, #12]
 800a52a:	05db      	lsls	r3, r3, #23
 800a52c:	4605      	mov	r5, r0
 800a52e:	460c      	mov	r4, r1
 800a530:	4616      	mov	r6, r2
 800a532:	d505      	bpl.n	800a540 <__swrite+0x1e>
 800a534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a538:	2302      	movs	r3, #2
 800a53a:	2200      	movs	r2, #0
 800a53c:	f000 f898 	bl	800a670 <_lseek_r>
 800a540:	89a3      	ldrh	r3, [r4, #12]
 800a542:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a546:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a54a:	81a3      	strh	r3, [r4, #12]
 800a54c:	4632      	mov	r2, r6
 800a54e:	463b      	mov	r3, r7
 800a550:	4628      	mov	r0, r5
 800a552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a556:	f000 b817 	b.w	800a588 <_write_r>

0800a55a <__sseek>:
 800a55a:	b510      	push	{r4, lr}
 800a55c:	460c      	mov	r4, r1
 800a55e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a562:	f000 f885 	bl	800a670 <_lseek_r>
 800a566:	1c43      	adds	r3, r0, #1
 800a568:	89a3      	ldrh	r3, [r4, #12]
 800a56a:	bf15      	itete	ne
 800a56c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a56e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a572:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a576:	81a3      	strheq	r3, [r4, #12]
 800a578:	bf18      	it	ne
 800a57a:	81a3      	strhne	r3, [r4, #12]
 800a57c:	bd10      	pop	{r4, pc}

0800a57e <__sclose>:
 800a57e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a582:	f000 b831 	b.w	800a5e8 <_close_r>
	...

0800a588 <_write_r>:
 800a588:	b538      	push	{r3, r4, r5, lr}
 800a58a:	4d07      	ldr	r5, [pc, #28]	; (800a5a8 <_write_r+0x20>)
 800a58c:	4604      	mov	r4, r0
 800a58e:	4608      	mov	r0, r1
 800a590:	4611      	mov	r1, r2
 800a592:	2200      	movs	r2, #0
 800a594:	602a      	str	r2, [r5, #0]
 800a596:	461a      	mov	r2, r3
 800a598:	f7f7 fee5 	bl	8002366 <_write>
 800a59c:	1c43      	adds	r3, r0, #1
 800a59e:	d102      	bne.n	800a5a6 <_write_r+0x1e>
 800a5a0:	682b      	ldr	r3, [r5, #0]
 800a5a2:	b103      	cbz	r3, 800a5a6 <_write_r+0x1e>
 800a5a4:	6023      	str	r3, [r4, #0]
 800a5a6:	bd38      	pop	{r3, r4, r5, pc}
 800a5a8:	20000470 	.word	0x20000470

0800a5ac <__assert_func>:
 800a5ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a5ae:	4614      	mov	r4, r2
 800a5b0:	461a      	mov	r2, r3
 800a5b2:	4b09      	ldr	r3, [pc, #36]	; (800a5d8 <__assert_func+0x2c>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	4605      	mov	r5, r0
 800a5b8:	68d8      	ldr	r0, [r3, #12]
 800a5ba:	b14c      	cbz	r4, 800a5d0 <__assert_func+0x24>
 800a5bc:	4b07      	ldr	r3, [pc, #28]	; (800a5dc <__assert_func+0x30>)
 800a5be:	9100      	str	r1, [sp, #0]
 800a5c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a5c4:	4906      	ldr	r1, [pc, #24]	; (800a5e0 <__assert_func+0x34>)
 800a5c6:	462b      	mov	r3, r5
 800a5c8:	f000 f81e 	bl	800a608 <fiprintf>
 800a5cc:	f000 f893 	bl	800a6f6 <abort>
 800a5d0:	4b04      	ldr	r3, [pc, #16]	; (800a5e4 <__assert_func+0x38>)
 800a5d2:	461c      	mov	r4, r3
 800a5d4:	e7f3      	b.n	800a5be <__assert_func+0x12>
 800a5d6:	bf00      	nop
 800a5d8:	2000000c 	.word	0x2000000c
 800a5dc:	0800b2ed 	.word	0x0800b2ed
 800a5e0:	0800b2fa 	.word	0x0800b2fa
 800a5e4:	0800b328 	.word	0x0800b328

0800a5e8 <_close_r>:
 800a5e8:	b538      	push	{r3, r4, r5, lr}
 800a5ea:	4d06      	ldr	r5, [pc, #24]	; (800a604 <_close_r+0x1c>)
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	4604      	mov	r4, r0
 800a5f0:	4608      	mov	r0, r1
 800a5f2:	602b      	str	r3, [r5, #0]
 800a5f4:	f7f7 fed3 	bl	800239e <_close>
 800a5f8:	1c43      	adds	r3, r0, #1
 800a5fa:	d102      	bne.n	800a602 <_close_r+0x1a>
 800a5fc:	682b      	ldr	r3, [r5, #0]
 800a5fe:	b103      	cbz	r3, 800a602 <_close_r+0x1a>
 800a600:	6023      	str	r3, [r4, #0]
 800a602:	bd38      	pop	{r3, r4, r5, pc}
 800a604:	20000470 	.word	0x20000470

0800a608 <fiprintf>:
 800a608:	b40e      	push	{r1, r2, r3}
 800a60a:	b503      	push	{r0, r1, lr}
 800a60c:	4601      	mov	r1, r0
 800a60e:	ab03      	add	r3, sp, #12
 800a610:	4805      	ldr	r0, [pc, #20]	; (800a628 <fiprintf+0x20>)
 800a612:	f853 2b04 	ldr.w	r2, [r3], #4
 800a616:	6800      	ldr	r0, [r0, #0]
 800a618:	9301      	str	r3, [sp, #4]
 800a61a:	f7ff fe41 	bl	800a2a0 <_vfiprintf_r>
 800a61e:	b002      	add	sp, #8
 800a620:	f85d eb04 	ldr.w	lr, [sp], #4
 800a624:	b003      	add	sp, #12
 800a626:	4770      	bx	lr
 800a628:	2000000c 	.word	0x2000000c

0800a62c <_fstat_r>:
 800a62c:	b538      	push	{r3, r4, r5, lr}
 800a62e:	4d07      	ldr	r5, [pc, #28]	; (800a64c <_fstat_r+0x20>)
 800a630:	2300      	movs	r3, #0
 800a632:	4604      	mov	r4, r0
 800a634:	4608      	mov	r0, r1
 800a636:	4611      	mov	r1, r2
 800a638:	602b      	str	r3, [r5, #0]
 800a63a:	f7f7 febc 	bl	80023b6 <_fstat>
 800a63e:	1c43      	adds	r3, r0, #1
 800a640:	d102      	bne.n	800a648 <_fstat_r+0x1c>
 800a642:	682b      	ldr	r3, [r5, #0]
 800a644:	b103      	cbz	r3, 800a648 <_fstat_r+0x1c>
 800a646:	6023      	str	r3, [r4, #0]
 800a648:	bd38      	pop	{r3, r4, r5, pc}
 800a64a:	bf00      	nop
 800a64c:	20000470 	.word	0x20000470

0800a650 <_isatty_r>:
 800a650:	b538      	push	{r3, r4, r5, lr}
 800a652:	4d06      	ldr	r5, [pc, #24]	; (800a66c <_isatty_r+0x1c>)
 800a654:	2300      	movs	r3, #0
 800a656:	4604      	mov	r4, r0
 800a658:	4608      	mov	r0, r1
 800a65a:	602b      	str	r3, [r5, #0]
 800a65c:	f7f7 febb 	bl	80023d6 <_isatty>
 800a660:	1c43      	adds	r3, r0, #1
 800a662:	d102      	bne.n	800a66a <_isatty_r+0x1a>
 800a664:	682b      	ldr	r3, [r5, #0]
 800a666:	b103      	cbz	r3, 800a66a <_isatty_r+0x1a>
 800a668:	6023      	str	r3, [r4, #0]
 800a66a:	bd38      	pop	{r3, r4, r5, pc}
 800a66c:	20000470 	.word	0x20000470

0800a670 <_lseek_r>:
 800a670:	b538      	push	{r3, r4, r5, lr}
 800a672:	4d07      	ldr	r5, [pc, #28]	; (800a690 <_lseek_r+0x20>)
 800a674:	4604      	mov	r4, r0
 800a676:	4608      	mov	r0, r1
 800a678:	4611      	mov	r1, r2
 800a67a:	2200      	movs	r2, #0
 800a67c:	602a      	str	r2, [r5, #0]
 800a67e:	461a      	mov	r2, r3
 800a680:	f7f7 feb4 	bl	80023ec <_lseek>
 800a684:	1c43      	adds	r3, r0, #1
 800a686:	d102      	bne.n	800a68e <_lseek_r+0x1e>
 800a688:	682b      	ldr	r3, [r5, #0]
 800a68a:	b103      	cbz	r3, 800a68e <_lseek_r+0x1e>
 800a68c:	6023      	str	r3, [r4, #0]
 800a68e:	bd38      	pop	{r3, r4, r5, pc}
 800a690:	20000470 	.word	0x20000470

0800a694 <__ascii_mbtowc>:
 800a694:	b082      	sub	sp, #8
 800a696:	b901      	cbnz	r1, 800a69a <__ascii_mbtowc+0x6>
 800a698:	a901      	add	r1, sp, #4
 800a69a:	b142      	cbz	r2, 800a6ae <__ascii_mbtowc+0x1a>
 800a69c:	b14b      	cbz	r3, 800a6b2 <__ascii_mbtowc+0x1e>
 800a69e:	7813      	ldrb	r3, [r2, #0]
 800a6a0:	600b      	str	r3, [r1, #0]
 800a6a2:	7812      	ldrb	r2, [r2, #0]
 800a6a4:	1e10      	subs	r0, r2, #0
 800a6a6:	bf18      	it	ne
 800a6a8:	2001      	movne	r0, #1
 800a6aa:	b002      	add	sp, #8
 800a6ac:	4770      	bx	lr
 800a6ae:	4610      	mov	r0, r2
 800a6b0:	e7fb      	b.n	800a6aa <__ascii_mbtowc+0x16>
 800a6b2:	f06f 0001 	mvn.w	r0, #1
 800a6b6:	e7f8      	b.n	800a6aa <__ascii_mbtowc+0x16>

0800a6b8 <_read_r>:
 800a6b8:	b538      	push	{r3, r4, r5, lr}
 800a6ba:	4d07      	ldr	r5, [pc, #28]	; (800a6d8 <_read_r+0x20>)
 800a6bc:	4604      	mov	r4, r0
 800a6be:	4608      	mov	r0, r1
 800a6c0:	4611      	mov	r1, r2
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	602a      	str	r2, [r5, #0]
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	f7f7 fe30 	bl	800232c <_read>
 800a6cc:	1c43      	adds	r3, r0, #1
 800a6ce:	d102      	bne.n	800a6d6 <_read_r+0x1e>
 800a6d0:	682b      	ldr	r3, [r5, #0]
 800a6d2:	b103      	cbz	r3, 800a6d6 <_read_r+0x1e>
 800a6d4:	6023      	str	r3, [r4, #0]
 800a6d6:	bd38      	pop	{r3, r4, r5, pc}
 800a6d8:	20000470 	.word	0x20000470

0800a6dc <__ascii_wctomb>:
 800a6dc:	b149      	cbz	r1, 800a6f2 <__ascii_wctomb+0x16>
 800a6de:	2aff      	cmp	r2, #255	; 0xff
 800a6e0:	bf85      	ittet	hi
 800a6e2:	238a      	movhi	r3, #138	; 0x8a
 800a6e4:	6003      	strhi	r3, [r0, #0]
 800a6e6:	700a      	strbls	r2, [r1, #0]
 800a6e8:	f04f 30ff 	movhi.w	r0, #4294967295
 800a6ec:	bf98      	it	ls
 800a6ee:	2001      	movls	r0, #1
 800a6f0:	4770      	bx	lr
 800a6f2:	4608      	mov	r0, r1
 800a6f4:	4770      	bx	lr

0800a6f6 <abort>:
 800a6f6:	b508      	push	{r3, lr}
 800a6f8:	2006      	movs	r0, #6
 800a6fa:	f000 f82b 	bl	800a754 <raise>
 800a6fe:	2001      	movs	r0, #1
 800a700:	f7f7 fe0a 	bl	8002318 <_exit>

0800a704 <_raise_r>:
 800a704:	291f      	cmp	r1, #31
 800a706:	b538      	push	{r3, r4, r5, lr}
 800a708:	4604      	mov	r4, r0
 800a70a:	460d      	mov	r5, r1
 800a70c:	d904      	bls.n	800a718 <_raise_r+0x14>
 800a70e:	2316      	movs	r3, #22
 800a710:	6003      	str	r3, [r0, #0]
 800a712:	f04f 30ff 	mov.w	r0, #4294967295
 800a716:	bd38      	pop	{r3, r4, r5, pc}
 800a718:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a71a:	b112      	cbz	r2, 800a722 <_raise_r+0x1e>
 800a71c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a720:	b94b      	cbnz	r3, 800a736 <_raise_r+0x32>
 800a722:	4620      	mov	r0, r4
 800a724:	f000 f830 	bl	800a788 <_getpid_r>
 800a728:	462a      	mov	r2, r5
 800a72a:	4601      	mov	r1, r0
 800a72c:	4620      	mov	r0, r4
 800a72e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a732:	f000 b817 	b.w	800a764 <_kill_r>
 800a736:	2b01      	cmp	r3, #1
 800a738:	d00a      	beq.n	800a750 <_raise_r+0x4c>
 800a73a:	1c59      	adds	r1, r3, #1
 800a73c:	d103      	bne.n	800a746 <_raise_r+0x42>
 800a73e:	2316      	movs	r3, #22
 800a740:	6003      	str	r3, [r0, #0]
 800a742:	2001      	movs	r0, #1
 800a744:	e7e7      	b.n	800a716 <_raise_r+0x12>
 800a746:	2400      	movs	r4, #0
 800a748:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a74c:	4628      	mov	r0, r5
 800a74e:	4798      	blx	r3
 800a750:	2000      	movs	r0, #0
 800a752:	e7e0      	b.n	800a716 <_raise_r+0x12>

0800a754 <raise>:
 800a754:	4b02      	ldr	r3, [pc, #8]	; (800a760 <raise+0xc>)
 800a756:	4601      	mov	r1, r0
 800a758:	6818      	ldr	r0, [r3, #0]
 800a75a:	f7ff bfd3 	b.w	800a704 <_raise_r>
 800a75e:	bf00      	nop
 800a760:	2000000c 	.word	0x2000000c

0800a764 <_kill_r>:
 800a764:	b538      	push	{r3, r4, r5, lr}
 800a766:	4d07      	ldr	r5, [pc, #28]	; (800a784 <_kill_r+0x20>)
 800a768:	2300      	movs	r3, #0
 800a76a:	4604      	mov	r4, r0
 800a76c:	4608      	mov	r0, r1
 800a76e:	4611      	mov	r1, r2
 800a770:	602b      	str	r3, [r5, #0]
 800a772:	f7f7 fdc1 	bl	80022f8 <_kill>
 800a776:	1c43      	adds	r3, r0, #1
 800a778:	d102      	bne.n	800a780 <_kill_r+0x1c>
 800a77a:	682b      	ldr	r3, [r5, #0]
 800a77c:	b103      	cbz	r3, 800a780 <_kill_r+0x1c>
 800a77e:	6023      	str	r3, [r4, #0]
 800a780:	bd38      	pop	{r3, r4, r5, pc}
 800a782:	bf00      	nop
 800a784:	20000470 	.word	0x20000470

0800a788 <_getpid_r>:
 800a788:	f7f7 bdae 	b.w	80022e8 <_getpid>
 800a78c:	0000      	movs	r0, r0
	...

0800a790 <exp>:
 800a790:	b538      	push	{r3, r4, r5, lr}
 800a792:	ed2d 8b02 	vpush	{d8}
 800a796:	ec55 4b10 	vmov	r4, r5, d0
 800a79a:	f000 f881 	bl	800a8a0 <__ieee754_exp>
 800a79e:	eeb0 8a40 	vmov.f32	s16, s0
 800a7a2:	eef0 8a60 	vmov.f32	s17, s1
 800a7a6:	ec45 4b10 	vmov	d0, r4, r5
 800a7aa:	f000 fbe7 	bl	800af7c <finite>
 800a7ae:	b168      	cbz	r0, 800a7cc <exp+0x3c>
 800a7b0:	a317      	add	r3, pc, #92	; (adr r3, 800a810 <exp+0x80>)
 800a7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b6:	4620      	mov	r0, r4
 800a7b8:	4629      	mov	r1, r5
 800a7ba:	f7f6 f9c5 	bl	8000b48 <__aeabi_dcmpgt>
 800a7be:	b160      	cbz	r0, 800a7da <exp+0x4a>
 800a7c0:	f7fd fa0e 	bl	8007be0 <__errno>
 800a7c4:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 800a800 <exp+0x70>
 800a7c8:	2322      	movs	r3, #34	; 0x22
 800a7ca:	6003      	str	r3, [r0, #0]
 800a7cc:	eeb0 0a48 	vmov.f32	s0, s16
 800a7d0:	eef0 0a68 	vmov.f32	s1, s17
 800a7d4:	ecbd 8b02 	vpop	{d8}
 800a7d8:	bd38      	pop	{r3, r4, r5, pc}
 800a7da:	a30f      	add	r3, pc, #60	; (adr r3, 800a818 <exp+0x88>)
 800a7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e0:	4620      	mov	r0, r4
 800a7e2:	4629      	mov	r1, r5
 800a7e4:	f7f6 f992 	bl	8000b0c <__aeabi_dcmplt>
 800a7e8:	2800      	cmp	r0, #0
 800a7ea:	d0ef      	beq.n	800a7cc <exp+0x3c>
 800a7ec:	f7fd f9f8 	bl	8007be0 <__errno>
 800a7f0:	2322      	movs	r3, #34	; 0x22
 800a7f2:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800a808 <exp+0x78>
 800a7f6:	6003      	str	r3, [r0, #0]
 800a7f8:	e7e8      	b.n	800a7cc <exp+0x3c>
 800a7fa:	bf00      	nop
 800a7fc:	f3af 8000 	nop.w
 800a800:	00000000 	.word	0x00000000
 800a804:	7ff00000 	.word	0x7ff00000
	...
 800a810:	fefa39ef 	.word	0xfefa39ef
 800a814:	40862e42 	.word	0x40862e42
 800a818:	d52d3051 	.word	0xd52d3051
 800a81c:	c0874910 	.word	0xc0874910

0800a820 <log>:
 800a820:	b538      	push	{r3, r4, r5, lr}
 800a822:	ed2d 8b02 	vpush	{d8}
 800a826:	ec55 4b10 	vmov	r4, r5, d0
 800a82a:	f000 f9bd 	bl	800aba8 <__ieee754_log>
 800a82e:	4622      	mov	r2, r4
 800a830:	462b      	mov	r3, r5
 800a832:	4620      	mov	r0, r4
 800a834:	4629      	mov	r1, r5
 800a836:	eeb0 8a40 	vmov.f32	s16, s0
 800a83a:	eef0 8a60 	vmov.f32	s17, s1
 800a83e:	f7f6 f98d 	bl	8000b5c <__aeabi_dcmpun>
 800a842:	b998      	cbnz	r0, 800a86c <log+0x4c>
 800a844:	2200      	movs	r2, #0
 800a846:	2300      	movs	r3, #0
 800a848:	4620      	mov	r0, r4
 800a84a:	4629      	mov	r1, r5
 800a84c:	f7f6 f97c 	bl	8000b48 <__aeabi_dcmpgt>
 800a850:	b960      	cbnz	r0, 800a86c <log+0x4c>
 800a852:	2200      	movs	r2, #0
 800a854:	2300      	movs	r3, #0
 800a856:	4620      	mov	r0, r4
 800a858:	4629      	mov	r1, r5
 800a85a:	f7f6 f94d 	bl	8000af8 <__aeabi_dcmpeq>
 800a85e:	b160      	cbz	r0, 800a87a <log+0x5a>
 800a860:	f7fd f9be 	bl	8007be0 <__errno>
 800a864:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800a890 <log+0x70>
 800a868:	2322      	movs	r3, #34	; 0x22
 800a86a:	6003      	str	r3, [r0, #0]
 800a86c:	eeb0 0a48 	vmov.f32	s0, s16
 800a870:	eef0 0a68 	vmov.f32	s1, s17
 800a874:	ecbd 8b02 	vpop	{d8}
 800a878:	bd38      	pop	{r3, r4, r5, pc}
 800a87a:	f7fd f9b1 	bl	8007be0 <__errno>
 800a87e:	ecbd 8b02 	vpop	{d8}
 800a882:	2321      	movs	r3, #33	; 0x21
 800a884:	6003      	str	r3, [r0, #0]
 800a886:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a88a:	4803      	ldr	r0, [pc, #12]	; (800a898 <log+0x78>)
 800a88c:	f000 bb84 	b.w	800af98 <nan>
 800a890:	00000000 	.word	0x00000000
 800a894:	fff00000 	.word	0xfff00000
 800a898:	0800b328 	.word	0x0800b328
 800a89c:	00000000 	.word	0x00000000

0800a8a0 <__ieee754_exp>:
 800a8a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8a4:	ec55 4b10 	vmov	r4, r5, d0
 800a8a8:	49b5      	ldr	r1, [pc, #724]	; (800ab80 <__ieee754_exp+0x2e0>)
 800a8aa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a8ae:	428b      	cmp	r3, r1
 800a8b0:	ed2d 8b04 	vpush	{d8-d9}
 800a8b4:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800a8b8:	d93d      	bls.n	800a936 <__ieee754_exp+0x96>
 800a8ba:	49b2      	ldr	r1, [pc, #712]	; (800ab84 <__ieee754_exp+0x2e4>)
 800a8bc:	428b      	cmp	r3, r1
 800a8be:	d918      	bls.n	800a8f2 <__ieee754_exp+0x52>
 800a8c0:	ee10 3a10 	vmov	r3, s0
 800a8c4:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800a8c8:	4313      	orrs	r3, r2
 800a8ca:	d009      	beq.n	800a8e0 <__ieee754_exp+0x40>
 800a8cc:	ee10 2a10 	vmov	r2, s0
 800a8d0:	462b      	mov	r3, r5
 800a8d2:	4620      	mov	r0, r4
 800a8d4:	4629      	mov	r1, r5
 800a8d6:	f7f5 fcf1 	bl	80002bc <__adddf3>
 800a8da:	4604      	mov	r4, r0
 800a8dc:	460d      	mov	r5, r1
 800a8de:	e002      	b.n	800a8e6 <__ieee754_exp+0x46>
 800a8e0:	b10e      	cbz	r6, 800a8e6 <__ieee754_exp+0x46>
 800a8e2:	2400      	movs	r4, #0
 800a8e4:	2500      	movs	r5, #0
 800a8e6:	ecbd 8b04 	vpop	{d8-d9}
 800a8ea:	ec45 4b10 	vmov	d0, r4, r5
 800a8ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8f2:	a38d      	add	r3, pc, #564	; (adr r3, 800ab28 <__ieee754_exp+0x288>)
 800a8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f8:	ee10 0a10 	vmov	r0, s0
 800a8fc:	4629      	mov	r1, r5
 800a8fe:	f7f6 f923 	bl	8000b48 <__aeabi_dcmpgt>
 800a902:	4607      	mov	r7, r0
 800a904:	b130      	cbz	r0, 800a914 <__ieee754_exp+0x74>
 800a906:	ecbd 8b04 	vpop	{d8-d9}
 800a90a:	2000      	movs	r0, #0
 800a90c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a910:	f000 bb2b 	b.w	800af6a <__math_oflow>
 800a914:	a386      	add	r3, pc, #536	; (adr r3, 800ab30 <__ieee754_exp+0x290>)
 800a916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91a:	4620      	mov	r0, r4
 800a91c:	4629      	mov	r1, r5
 800a91e:	f7f6 f8f5 	bl	8000b0c <__aeabi_dcmplt>
 800a922:	2800      	cmp	r0, #0
 800a924:	f000 808b 	beq.w	800aa3e <__ieee754_exp+0x19e>
 800a928:	ecbd 8b04 	vpop	{d8-d9}
 800a92c:	4638      	mov	r0, r7
 800a92e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a932:	f000 bb11 	b.w	800af58 <__math_uflow>
 800a936:	4a94      	ldr	r2, [pc, #592]	; (800ab88 <__ieee754_exp+0x2e8>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	f240 80ac 	bls.w	800aa96 <__ieee754_exp+0x1f6>
 800a93e:	4a93      	ldr	r2, [pc, #588]	; (800ab8c <__ieee754_exp+0x2ec>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d87c      	bhi.n	800aa3e <__ieee754_exp+0x19e>
 800a944:	4b92      	ldr	r3, [pc, #584]	; (800ab90 <__ieee754_exp+0x2f0>)
 800a946:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94e:	ee10 0a10 	vmov	r0, s0
 800a952:	4629      	mov	r1, r5
 800a954:	f7f5 fcb0 	bl	80002b8 <__aeabi_dsub>
 800a958:	4b8e      	ldr	r3, [pc, #568]	; (800ab94 <__ieee754_exp+0x2f4>)
 800a95a:	00f7      	lsls	r7, r6, #3
 800a95c:	443b      	add	r3, r7
 800a95e:	ed93 7b00 	vldr	d7, [r3]
 800a962:	f1c6 0a01 	rsb	sl, r6, #1
 800a966:	4680      	mov	r8, r0
 800a968:	4689      	mov	r9, r1
 800a96a:	ebaa 0a06 	sub.w	sl, sl, r6
 800a96e:	eeb0 8a47 	vmov.f32	s16, s14
 800a972:	eef0 8a67 	vmov.f32	s17, s15
 800a976:	ec53 2b18 	vmov	r2, r3, d8
 800a97a:	4640      	mov	r0, r8
 800a97c:	4649      	mov	r1, r9
 800a97e:	f7f5 fc9b 	bl	80002b8 <__aeabi_dsub>
 800a982:	4604      	mov	r4, r0
 800a984:	460d      	mov	r5, r1
 800a986:	4622      	mov	r2, r4
 800a988:	462b      	mov	r3, r5
 800a98a:	4620      	mov	r0, r4
 800a98c:	4629      	mov	r1, r5
 800a98e:	f7f5 fe4b 	bl	8000628 <__aeabi_dmul>
 800a992:	a369      	add	r3, pc, #420	; (adr r3, 800ab38 <__ieee754_exp+0x298>)
 800a994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a998:	4606      	mov	r6, r0
 800a99a:	460f      	mov	r7, r1
 800a99c:	f7f5 fe44 	bl	8000628 <__aeabi_dmul>
 800a9a0:	a367      	add	r3, pc, #412	; (adr r3, 800ab40 <__ieee754_exp+0x2a0>)
 800a9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a6:	f7f5 fc87 	bl	80002b8 <__aeabi_dsub>
 800a9aa:	4632      	mov	r2, r6
 800a9ac:	463b      	mov	r3, r7
 800a9ae:	f7f5 fe3b 	bl	8000628 <__aeabi_dmul>
 800a9b2:	a365      	add	r3, pc, #404	; (adr r3, 800ab48 <__ieee754_exp+0x2a8>)
 800a9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b8:	f7f5 fc80 	bl	80002bc <__adddf3>
 800a9bc:	4632      	mov	r2, r6
 800a9be:	463b      	mov	r3, r7
 800a9c0:	f7f5 fe32 	bl	8000628 <__aeabi_dmul>
 800a9c4:	a362      	add	r3, pc, #392	; (adr r3, 800ab50 <__ieee754_exp+0x2b0>)
 800a9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ca:	f7f5 fc75 	bl	80002b8 <__aeabi_dsub>
 800a9ce:	4632      	mov	r2, r6
 800a9d0:	463b      	mov	r3, r7
 800a9d2:	f7f5 fe29 	bl	8000628 <__aeabi_dmul>
 800a9d6:	a360      	add	r3, pc, #384	; (adr r3, 800ab58 <__ieee754_exp+0x2b8>)
 800a9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9dc:	f7f5 fc6e 	bl	80002bc <__adddf3>
 800a9e0:	4632      	mov	r2, r6
 800a9e2:	463b      	mov	r3, r7
 800a9e4:	f7f5 fe20 	bl	8000628 <__aeabi_dmul>
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	460b      	mov	r3, r1
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	4629      	mov	r1, r5
 800a9f0:	f7f5 fc62 	bl	80002b8 <__aeabi_dsub>
 800a9f4:	4602      	mov	r2, r0
 800a9f6:	460b      	mov	r3, r1
 800a9f8:	4606      	mov	r6, r0
 800a9fa:	460f      	mov	r7, r1
 800a9fc:	4620      	mov	r0, r4
 800a9fe:	4629      	mov	r1, r5
 800aa00:	f7f5 fe12 	bl	8000628 <__aeabi_dmul>
 800aa04:	ec41 0b19 	vmov	d9, r0, r1
 800aa08:	f1ba 0f00 	cmp.w	sl, #0
 800aa0c:	d15d      	bne.n	800aaca <__ieee754_exp+0x22a>
 800aa0e:	2200      	movs	r2, #0
 800aa10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aa14:	4630      	mov	r0, r6
 800aa16:	4639      	mov	r1, r7
 800aa18:	f7f5 fc4e 	bl	80002b8 <__aeabi_dsub>
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	460b      	mov	r3, r1
 800aa20:	ec51 0b19 	vmov	r0, r1, d9
 800aa24:	f7f5 ff2a 	bl	800087c <__aeabi_ddiv>
 800aa28:	4622      	mov	r2, r4
 800aa2a:	462b      	mov	r3, r5
 800aa2c:	f7f5 fc44 	bl	80002b8 <__aeabi_dsub>
 800aa30:	4602      	mov	r2, r0
 800aa32:	460b      	mov	r3, r1
 800aa34:	2000      	movs	r0, #0
 800aa36:	4958      	ldr	r1, [pc, #352]	; (800ab98 <__ieee754_exp+0x2f8>)
 800aa38:	f7f5 fc3e 	bl	80002b8 <__aeabi_dsub>
 800aa3c:	e74d      	b.n	800a8da <__ieee754_exp+0x3a>
 800aa3e:	4857      	ldr	r0, [pc, #348]	; (800ab9c <__ieee754_exp+0x2fc>)
 800aa40:	a347      	add	r3, pc, #284	; (adr r3, 800ab60 <__ieee754_exp+0x2c0>)
 800aa42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa46:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800aa4a:	4629      	mov	r1, r5
 800aa4c:	4620      	mov	r0, r4
 800aa4e:	f7f5 fdeb 	bl	8000628 <__aeabi_dmul>
 800aa52:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aa56:	f7f5 fc31 	bl	80002bc <__adddf3>
 800aa5a:	f7f6 f895 	bl	8000b88 <__aeabi_d2iz>
 800aa5e:	4682      	mov	sl, r0
 800aa60:	f7f5 fd78 	bl	8000554 <__aeabi_i2d>
 800aa64:	a340      	add	r3, pc, #256	; (adr r3, 800ab68 <__ieee754_exp+0x2c8>)
 800aa66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa6a:	4606      	mov	r6, r0
 800aa6c:	460f      	mov	r7, r1
 800aa6e:	f7f5 fddb 	bl	8000628 <__aeabi_dmul>
 800aa72:	4602      	mov	r2, r0
 800aa74:	460b      	mov	r3, r1
 800aa76:	4620      	mov	r0, r4
 800aa78:	4629      	mov	r1, r5
 800aa7a:	f7f5 fc1d 	bl	80002b8 <__aeabi_dsub>
 800aa7e:	a33c      	add	r3, pc, #240	; (adr r3, 800ab70 <__ieee754_exp+0x2d0>)
 800aa80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa84:	4680      	mov	r8, r0
 800aa86:	4689      	mov	r9, r1
 800aa88:	4630      	mov	r0, r6
 800aa8a:	4639      	mov	r1, r7
 800aa8c:	f7f5 fdcc 	bl	8000628 <__aeabi_dmul>
 800aa90:	ec41 0b18 	vmov	d8, r0, r1
 800aa94:	e76f      	b.n	800a976 <__ieee754_exp+0xd6>
 800aa96:	4a42      	ldr	r2, [pc, #264]	; (800aba0 <__ieee754_exp+0x300>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d811      	bhi.n	800aac0 <__ieee754_exp+0x220>
 800aa9c:	a336      	add	r3, pc, #216	; (adr r3, 800ab78 <__ieee754_exp+0x2d8>)
 800aa9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa2:	ee10 0a10 	vmov	r0, s0
 800aaa6:	4629      	mov	r1, r5
 800aaa8:	f7f5 fc08 	bl	80002bc <__adddf3>
 800aaac:	4b3a      	ldr	r3, [pc, #232]	; (800ab98 <__ieee754_exp+0x2f8>)
 800aaae:	2200      	movs	r2, #0
 800aab0:	f7f6 f84a 	bl	8000b48 <__aeabi_dcmpgt>
 800aab4:	b138      	cbz	r0, 800aac6 <__ieee754_exp+0x226>
 800aab6:	4b38      	ldr	r3, [pc, #224]	; (800ab98 <__ieee754_exp+0x2f8>)
 800aab8:	2200      	movs	r2, #0
 800aaba:	4620      	mov	r0, r4
 800aabc:	4629      	mov	r1, r5
 800aabe:	e70a      	b.n	800a8d6 <__ieee754_exp+0x36>
 800aac0:	f04f 0a00 	mov.w	sl, #0
 800aac4:	e75f      	b.n	800a986 <__ieee754_exp+0xe6>
 800aac6:	4682      	mov	sl, r0
 800aac8:	e75d      	b.n	800a986 <__ieee754_exp+0xe6>
 800aaca:	4632      	mov	r2, r6
 800aacc:	463b      	mov	r3, r7
 800aace:	2000      	movs	r0, #0
 800aad0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800aad4:	f7f5 fbf0 	bl	80002b8 <__aeabi_dsub>
 800aad8:	4602      	mov	r2, r0
 800aada:	460b      	mov	r3, r1
 800aadc:	ec51 0b19 	vmov	r0, r1, d9
 800aae0:	f7f5 fecc 	bl	800087c <__aeabi_ddiv>
 800aae4:	4602      	mov	r2, r0
 800aae6:	460b      	mov	r3, r1
 800aae8:	ec51 0b18 	vmov	r0, r1, d8
 800aaec:	f7f5 fbe4 	bl	80002b8 <__aeabi_dsub>
 800aaf0:	4642      	mov	r2, r8
 800aaf2:	464b      	mov	r3, r9
 800aaf4:	f7f5 fbe0 	bl	80002b8 <__aeabi_dsub>
 800aaf8:	4602      	mov	r2, r0
 800aafa:	460b      	mov	r3, r1
 800aafc:	2000      	movs	r0, #0
 800aafe:	4926      	ldr	r1, [pc, #152]	; (800ab98 <__ieee754_exp+0x2f8>)
 800ab00:	f7f5 fbda 	bl	80002b8 <__aeabi_dsub>
 800ab04:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800ab08:	4592      	cmp	sl, r2
 800ab0a:	db02      	blt.n	800ab12 <__ieee754_exp+0x272>
 800ab0c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800ab10:	e6e3      	b.n	800a8da <__ieee754_exp+0x3a>
 800ab12:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800ab16:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800ab20:	f7f5 fd82 	bl	8000628 <__aeabi_dmul>
 800ab24:	e6d9      	b.n	800a8da <__ieee754_exp+0x3a>
 800ab26:	bf00      	nop
 800ab28:	fefa39ef 	.word	0xfefa39ef
 800ab2c:	40862e42 	.word	0x40862e42
 800ab30:	d52d3051 	.word	0xd52d3051
 800ab34:	c0874910 	.word	0xc0874910
 800ab38:	72bea4d0 	.word	0x72bea4d0
 800ab3c:	3e663769 	.word	0x3e663769
 800ab40:	c5d26bf1 	.word	0xc5d26bf1
 800ab44:	3ebbbd41 	.word	0x3ebbbd41
 800ab48:	af25de2c 	.word	0xaf25de2c
 800ab4c:	3f11566a 	.word	0x3f11566a
 800ab50:	16bebd93 	.word	0x16bebd93
 800ab54:	3f66c16c 	.word	0x3f66c16c
 800ab58:	5555553e 	.word	0x5555553e
 800ab5c:	3fc55555 	.word	0x3fc55555
 800ab60:	652b82fe 	.word	0x652b82fe
 800ab64:	3ff71547 	.word	0x3ff71547
 800ab68:	fee00000 	.word	0xfee00000
 800ab6c:	3fe62e42 	.word	0x3fe62e42
 800ab70:	35793c76 	.word	0x35793c76
 800ab74:	3dea39ef 	.word	0x3dea39ef
 800ab78:	8800759c 	.word	0x8800759c
 800ab7c:	7e37e43c 	.word	0x7e37e43c
 800ab80:	40862e41 	.word	0x40862e41
 800ab84:	7fefffff 	.word	0x7fefffff
 800ab88:	3fd62e42 	.word	0x3fd62e42
 800ab8c:	3ff0a2b1 	.word	0x3ff0a2b1
 800ab90:	0800b448 	.word	0x0800b448
 800ab94:	0800b458 	.word	0x0800b458
 800ab98:	3ff00000 	.word	0x3ff00000
 800ab9c:	0800b438 	.word	0x0800b438
 800aba0:	3defffff 	.word	0x3defffff
 800aba4:	00000000 	.word	0x00000000

0800aba8 <__ieee754_log>:
 800aba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abac:	ec51 0b10 	vmov	r0, r1, d0
 800abb0:	ed2d 8b04 	vpush	{d8-d9}
 800abb4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800abb8:	b083      	sub	sp, #12
 800abba:	460d      	mov	r5, r1
 800abbc:	da29      	bge.n	800ac12 <__ieee754_log+0x6a>
 800abbe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800abc2:	4303      	orrs	r3, r0
 800abc4:	ee10 2a10 	vmov	r2, s0
 800abc8:	d10c      	bne.n	800abe4 <__ieee754_log+0x3c>
 800abca:	49cf      	ldr	r1, [pc, #828]	; (800af08 <__ieee754_log+0x360>)
 800abcc:	2200      	movs	r2, #0
 800abce:	2300      	movs	r3, #0
 800abd0:	2000      	movs	r0, #0
 800abd2:	f7f5 fe53 	bl	800087c <__aeabi_ddiv>
 800abd6:	ec41 0b10 	vmov	d0, r0, r1
 800abda:	b003      	add	sp, #12
 800abdc:	ecbd 8b04 	vpop	{d8-d9}
 800abe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abe4:	2900      	cmp	r1, #0
 800abe6:	da05      	bge.n	800abf4 <__ieee754_log+0x4c>
 800abe8:	460b      	mov	r3, r1
 800abea:	f7f5 fb65 	bl	80002b8 <__aeabi_dsub>
 800abee:	2200      	movs	r2, #0
 800abf0:	2300      	movs	r3, #0
 800abf2:	e7ee      	b.n	800abd2 <__ieee754_log+0x2a>
 800abf4:	4bc5      	ldr	r3, [pc, #788]	; (800af0c <__ieee754_log+0x364>)
 800abf6:	2200      	movs	r2, #0
 800abf8:	f7f5 fd16 	bl	8000628 <__aeabi_dmul>
 800abfc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800ac00:	460d      	mov	r5, r1
 800ac02:	4ac3      	ldr	r2, [pc, #780]	; (800af10 <__ieee754_log+0x368>)
 800ac04:	4295      	cmp	r5, r2
 800ac06:	dd06      	ble.n	800ac16 <__ieee754_log+0x6e>
 800ac08:	4602      	mov	r2, r0
 800ac0a:	460b      	mov	r3, r1
 800ac0c:	f7f5 fb56 	bl	80002bc <__adddf3>
 800ac10:	e7e1      	b.n	800abd6 <__ieee754_log+0x2e>
 800ac12:	2300      	movs	r3, #0
 800ac14:	e7f5      	b.n	800ac02 <__ieee754_log+0x5a>
 800ac16:	152c      	asrs	r4, r5, #20
 800ac18:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ac1c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800ac20:	441c      	add	r4, r3
 800ac22:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800ac26:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800ac2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ac2e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800ac32:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800ac36:	ea42 0105 	orr.w	r1, r2, r5
 800ac3a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800ac3e:	2200      	movs	r2, #0
 800ac40:	4bb4      	ldr	r3, [pc, #720]	; (800af14 <__ieee754_log+0x36c>)
 800ac42:	f7f5 fb39 	bl	80002b8 <__aeabi_dsub>
 800ac46:	1cab      	adds	r3, r5, #2
 800ac48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac4c:	2b02      	cmp	r3, #2
 800ac4e:	4682      	mov	sl, r0
 800ac50:	468b      	mov	fp, r1
 800ac52:	f04f 0200 	mov.w	r2, #0
 800ac56:	dc53      	bgt.n	800ad00 <__ieee754_log+0x158>
 800ac58:	2300      	movs	r3, #0
 800ac5a:	f7f5 ff4d 	bl	8000af8 <__aeabi_dcmpeq>
 800ac5e:	b1d0      	cbz	r0, 800ac96 <__ieee754_log+0xee>
 800ac60:	2c00      	cmp	r4, #0
 800ac62:	f000 8122 	beq.w	800aeaa <__ieee754_log+0x302>
 800ac66:	4620      	mov	r0, r4
 800ac68:	f7f5 fc74 	bl	8000554 <__aeabi_i2d>
 800ac6c:	a390      	add	r3, pc, #576	; (adr r3, 800aeb0 <__ieee754_log+0x308>)
 800ac6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac72:	4606      	mov	r6, r0
 800ac74:	460f      	mov	r7, r1
 800ac76:	f7f5 fcd7 	bl	8000628 <__aeabi_dmul>
 800ac7a:	a38f      	add	r3, pc, #572	; (adr r3, 800aeb8 <__ieee754_log+0x310>)
 800ac7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac80:	4604      	mov	r4, r0
 800ac82:	460d      	mov	r5, r1
 800ac84:	4630      	mov	r0, r6
 800ac86:	4639      	mov	r1, r7
 800ac88:	f7f5 fcce 	bl	8000628 <__aeabi_dmul>
 800ac8c:	4602      	mov	r2, r0
 800ac8e:	460b      	mov	r3, r1
 800ac90:	4620      	mov	r0, r4
 800ac92:	4629      	mov	r1, r5
 800ac94:	e7ba      	b.n	800ac0c <__ieee754_log+0x64>
 800ac96:	a38a      	add	r3, pc, #552	; (adr r3, 800aec0 <__ieee754_log+0x318>)
 800ac98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac9c:	4650      	mov	r0, sl
 800ac9e:	4659      	mov	r1, fp
 800aca0:	f7f5 fcc2 	bl	8000628 <__aeabi_dmul>
 800aca4:	4602      	mov	r2, r0
 800aca6:	460b      	mov	r3, r1
 800aca8:	2000      	movs	r0, #0
 800acaa:	499b      	ldr	r1, [pc, #620]	; (800af18 <__ieee754_log+0x370>)
 800acac:	f7f5 fb04 	bl	80002b8 <__aeabi_dsub>
 800acb0:	4652      	mov	r2, sl
 800acb2:	4606      	mov	r6, r0
 800acb4:	460f      	mov	r7, r1
 800acb6:	465b      	mov	r3, fp
 800acb8:	4650      	mov	r0, sl
 800acba:	4659      	mov	r1, fp
 800acbc:	f7f5 fcb4 	bl	8000628 <__aeabi_dmul>
 800acc0:	4602      	mov	r2, r0
 800acc2:	460b      	mov	r3, r1
 800acc4:	4630      	mov	r0, r6
 800acc6:	4639      	mov	r1, r7
 800acc8:	f7f5 fcae 	bl	8000628 <__aeabi_dmul>
 800accc:	4606      	mov	r6, r0
 800acce:	460f      	mov	r7, r1
 800acd0:	b914      	cbnz	r4, 800acd8 <__ieee754_log+0x130>
 800acd2:	4632      	mov	r2, r6
 800acd4:	463b      	mov	r3, r7
 800acd6:	e0a2      	b.n	800ae1e <__ieee754_log+0x276>
 800acd8:	4620      	mov	r0, r4
 800acda:	f7f5 fc3b 	bl	8000554 <__aeabi_i2d>
 800acde:	a374      	add	r3, pc, #464	; (adr r3, 800aeb0 <__ieee754_log+0x308>)
 800ace0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace4:	4680      	mov	r8, r0
 800ace6:	4689      	mov	r9, r1
 800ace8:	f7f5 fc9e 	bl	8000628 <__aeabi_dmul>
 800acec:	a372      	add	r3, pc, #456	; (adr r3, 800aeb8 <__ieee754_log+0x310>)
 800acee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf2:	4604      	mov	r4, r0
 800acf4:	460d      	mov	r5, r1
 800acf6:	4640      	mov	r0, r8
 800acf8:	4649      	mov	r1, r9
 800acfa:	f7f5 fc95 	bl	8000628 <__aeabi_dmul>
 800acfe:	e0a7      	b.n	800ae50 <__ieee754_log+0x2a8>
 800ad00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ad04:	f7f5 fada 	bl	80002bc <__adddf3>
 800ad08:	4602      	mov	r2, r0
 800ad0a:	460b      	mov	r3, r1
 800ad0c:	4650      	mov	r0, sl
 800ad0e:	4659      	mov	r1, fp
 800ad10:	f7f5 fdb4 	bl	800087c <__aeabi_ddiv>
 800ad14:	ec41 0b18 	vmov	d8, r0, r1
 800ad18:	4620      	mov	r0, r4
 800ad1a:	f7f5 fc1b 	bl	8000554 <__aeabi_i2d>
 800ad1e:	ec53 2b18 	vmov	r2, r3, d8
 800ad22:	ec41 0b19 	vmov	d9, r0, r1
 800ad26:	ec51 0b18 	vmov	r0, r1, d8
 800ad2a:	f7f5 fc7d 	bl	8000628 <__aeabi_dmul>
 800ad2e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800ad32:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800ad36:	9301      	str	r3, [sp, #4]
 800ad38:	4602      	mov	r2, r0
 800ad3a:	460b      	mov	r3, r1
 800ad3c:	4680      	mov	r8, r0
 800ad3e:	4689      	mov	r9, r1
 800ad40:	f7f5 fc72 	bl	8000628 <__aeabi_dmul>
 800ad44:	a360      	add	r3, pc, #384	; (adr r3, 800aec8 <__ieee754_log+0x320>)
 800ad46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad4a:	4606      	mov	r6, r0
 800ad4c:	460f      	mov	r7, r1
 800ad4e:	f7f5 fc6b 	bl	8000628 <__aeabi_dmul>
 800ad52:	a35f      	add	r3, pc, #380	; (adr r3, 800aed0 <__ieee754_log+0x328>)
 800ad54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad58:	f7f5 fab0 	bl	80002bc <__adddf3>
 800ad5c:	4632      	mov	r2, r6
 800ad5e:	463b      	mov	r3, r7
 800ad60:	f7f5 fc62 	bl	8000628 <__aeabi_dmul>
 800ad64:	a35c      	add	r3, pc, #368	; (adr r3, 800aed8 <__ieee754_log+0x330>)
 800ad66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad6a:	f7f5 faa7 	bl	80002bc <__adddf3>
 800ad6e:	4632      	mov	r2, r6
 800ad70:	463b      	mov	r3, r7
 800ad72:	f7f5 fc59 	bl	8000628 <__aeabi_dmul>
 800ad76:	a35a      	add	r3, pc, #360	; (adr r3, 800aee0 <__ieee754_log+0x338>)
 800ad78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad7c:	f7f5 fa9e 	bl	80002bc <__adddf3>
 800ad80:	4642      	mov	r2, r8
 800ad82:	464b      	mov	r3, r9
 800ad84:	f7f5 fc50 	bl	8000628 <__aeabi_dmul>
 800ad88:	a357      	add	r3, pc, #348	; (adr r3, 800aee8 <__ieee754_log+0x340>)
 800ad8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad8e:	4680      	mov	r8, r0
 800ad90:	4689      	mov	r9, r1
 800ad92:	4630      	mov	r0, r6
 800ad94:	4639      	mov	r1, r7
 800ad96:	f7f5 fc47 	bl	8000628 <__aeabi_dmul>
 800ad9a:	a355      	add	r3, pc, #340	; (adr r3, 800aef0 <__ieee754_log+0x348>)
 800ad9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada0:	f7f5 fa8c 	bl	80002bc <__adddf3>
 800ada4:	4632      	mov	r2, r6
 800ada6:	463b      	mov	r3, r7
 800ada8:	f7f5 fc3e 	bl	8000628 <__aeabi_dmul>
 800adac:	a352      	add	r3, pc, #328	; (adr r3, 800aef8 <__ieee754_log+0x350>)
 800adae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb2:	f7f5 fa83 	bl	80002bc <__adddf3>
 800adb6:	4632      	mov	r2, r6
 800adb8:	463b      	mov	r3, r7
 800adba:	f7f5 fc35 	bl	8000628 <__aeabi_dmul>
 800adbe:	460b      	mov	r3, r1
 800adc0:	4602      	mov	r2, r0
 800adc2:	4649      	mov	r1, r9
 800adc4:	4640      	mov	r0, r8
 800adc6:	f7f5 fa79 	bl	80002bc <__adddf3>
 800adca:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800adce:	9b01      	ldr	r3, [sp, #4]
 800add0:	3551      	adds	r5, #81	; 0x51
 800add2:	431d      	orrs	r5, r3
 800add4:	2d00      	cmp	r5, #0
 800add6:	4680      	mov	r8, r0
 800add8:	4689      	mov	r9, r1
 800adda:	dd48      	ble.n	800ae6e <__ieee754_log+0x2c6>
 800addc:	4b4e      	ldr	r3, [pc, #312]	; (800af18 <__ieee754_log+0x370>)
 800adde:	2200      	movs	r2, #0
 800ade0:	4650      	mov	r0, sl
 800ade2:	4659      	mov	r1, fp
 800ade4:	f7f5 fc20 	bl	8000628 <__aeabi_dmul>
 800ade8:	4652      	mov	r2, sl
 800adea:	465b      	mov	r3, fp
 800adec:	f7f5 fc1c 	bl	8000628 <__aeabi_dmul>
 800adf0:	4602      	mov	r2, r0
 800adf2:	460b      	mov	r3, r1
 800adf4:	4606      	mov	r6, r0
 800adf6:	460f      	mov	r7, r1
 800adf8:	4640      	mov	r0, r8
 800adfa:	4649      	mov	r1, r9
 800adfc:	f7f5 fa5e 	bl	80002bc <__adddf3>
 800ae00:	ec53 2b18 	vmov	r2, r3, d8
 800ae04:	f7f5 fc10 	bl	8000628 <__aeabi_dmul>
 800ae08:	4680      	mov	r8, r0
 800ae0a:	4689      	mov	r9, r1
 800ae0c:	b964      	cbnz	r4, 800ae28 <__ieee754_log+0x280>
 800ae0e:	4602      	mov	r2, r0
 800ae10:	460b      	mov	r3, r1
 800ae12:	4630      	mov	r0, r6
 800ae14:	4639      	mov	r1, r7
 800ae16:	f7f5 fa4f 	bl	80002b8 <__aeabi_dsub>
 800ae1a:	4602      	mov	r2, r0
 800ae1c:	460b      	mov	r3, r1
 800ae1e:	4650      	mov	r0, sl
 800ae20:	4659      	mov	r1, fp
 800ae22:	f7f5 fa49 	bl	80002b8 <__aeabi_dsub>
 800ae26:	e6d6      	b.n	800abd6 <__ieee754_log+0x2e>
 800ae28:	a321      	add	r3, pc, #132	; (adr r3, 800aeb0 <__ieee754_log+0x308>)
 800ae2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2e:	ec51 0b19 	vmov	r0, r1, d9
 800ae32:	f7f5 fbf9 	bl	8000628 <__aeabi_dmul>
 800ae36:	a320      	add	r3, pc, #128	; (adr r3, 800aeb8 <__ieee754_log+0x310>)
 800ae38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3c:	4604      	mov	r4, r0
 800ae3e:	460d      	mov	r5, r1
 800ae40:	ec51 0b19 	vmov	r0, r1, d9
 800ae44:	f7f5 fbf0 	bl	8000628 <__aeabi_dmul>
 800ae48:	4642      	mov	r2, r8
 800ae4a:	464b      	mov	r3, r9
 800ae4c:	f7f5 fa36 	bl	80002bc <__adddf3>
 800ae50:	4602      	mov	r2, r0
 800ae52:	460b      	mov	r3, r1
 800ae54:	4630      	mov	r0, r6
 800ae56:	4639      	mov	r1, r7
 800ae58:	f7f5 fa2e 	bl	80002b8 <__aeabi_dsub>
 800ae5c:	4652      	mov	r2, sl
 800ae5e:	465b      	mov	r3, fp
 800ae60:	f7f5 fa2a 	bl	80002b8 <__aeabi_dsub>
 800ae64:	4602      	mov	r2, r0
 800ae66:	460b      	mov	r3, r1
 800ae68:	4620      	mov	r0, r4
 800ae6a:	4629      	mov	r1, r5
 800ae6c:	e7d9      	b.n	800ae22 <__ieee754_log+0x27a>
 800ae6e:	4602      	mov	r2, r0
 800ae70:	460b      	mov	r3, r1
 800ae72:	4650      	mov	r0, sl
 800ae74:	4659      	mov	r1, fp
 800ae76:	f7f5 fa1f 	bl	80002b8 <__aeabi_dsub>
 800ae7a:	ec53 2b18 	vmov	r2, r3, d8
 800ae7e:	f7f5 fbd3 	bl	8000628 <__aeabi_dmul>
 800ae82:	4606      	mov	r6, r0
 800ae84:	460f      	mov	r7, r1
 800ae86:	2c00      	cmp	r4, #0
 800ae88:	f43f af23 	beq.w	800acd2 <__ieee754_log+0x12a>
 800ae8c:	a308      	add	r3, pc, #32	; (adr r3, 800aeb0 <__ieee754_log+0x308>)
 800ae8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae92:	ec51 0b19 	vmov	r0, r1, d9
 800ae96:	f7f5 fbc7 	bl	8000628 <__aeabi_dmul>
 800ae9a:	a307      	add	r3, pc, #28	; (adr r3, 800aeb8 <__ieee754_log+0x310>)
 800ae9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea0:	4604      	mov	r4, r0
 800aea2:	460d      	mov	r5, r1
 800aea4:	ec51 0b19 	vmov	r0, r1, d9
 800aea8:	e727      	b.n	800acfa <__ieee754_log+0x152>
 800aeaa:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800af00 <__ieee754_log+0x358>
 800aeae:	e694      	b.n	800abda <__ieee754_log+0x32>
 800aeb0:	fee00000 	.word	0xfee00000
 800aeb4:	3fe62e42 	.word	0x3fe62e42
 800aeb8:	35793c76 	.word	0x35793c76
 800aebc:	3dea39ef 	.word	0x3dea39ef
 800aec0:	55555555 	.word	0x55555555
 800aec4:	3fd55555 	.word	0x3fd55555
 800aec8:	df3e5244 	.word	0xdf3e5244
 800aecc:	3fc2f112 	.word	0x3fc2f112
 800aed0:	96cb03de 	.word	0x96cb03de
 800aed4:	3fc74664 	.word	0x3fc74664
 800aed8:	94229359 	.word	0x94229359
 800aedc:	3fd24924 	.word	0x3fd24924
 800aee0:	55555593 	.word	0x55555593
 800aee4:	3fe55555 	.word	0x3fe55555
 800aee8:	d078c69f 	.word	0xd078c69f
 800aeec:	3fc39a09 	.word	0x3fc39a09
 800aef0:	1d8e78af 	.word	0x1d8e78af
 800aef4:	3fcc71c5 	.word	0x3fcc71c5
 800aef8:	9997fa04 	.word	0x9997fa04
 800aefc:	3fd99999 	.word	0x3fd99999
	...
 800af08:	c3500000 	.word	0xc3500000
 800af0c:	43500000 	.word	0x43500000
 800af10:	7fefffff 	.word	0x7fefffff
 800af14:	3ff00000 	.word	0x3ff00000
 800af18:	3fe00000 	.word	0x3fe00000

0800af1c <with_errno>:
 800af1c:	b570      	push	{r4, r5, r6, lr}
 800af1e:	4604      	mov	r4, r0
 800af20:	460d      	mov	r5, r1
 800af22:	4616      	mov	r6, r2
 800af24:	f7fc fe5c 	bl	8007be0 <__errno>
 800af28:	4629      	mov	r1, r5
 800af2a:	6006      	str	r6, [r0, #0]
 800af2c:	4620      	mov	r0, r4
 800af2e:	bd70      	pop	{r4, r5, r6, pc}

0800af30 <xflow>:
 800af30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af32:	4614      	mov	r4, r2
 800af34:	461d      	mov	r5, r3
 800af36:	b108      	cbz	r0, 800af3c <xflow+0xc>
 800af38:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800af3c:	e9cd 2300 	strd	r2, r3, [sp]
 800af40:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af44:	4620      	mov	r0, r4
 800af46:	4629      	mov	r1, r5
 800af48:	f7f5 fb6e 	bl	8000628 <__aeabi_dmul>
 800af4c:	2222      	movs	r2, #34	; 0x22
 800af4e:	b003      	add	sp, #12
 800af50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af54:	f7ff bfe2 	b.w	800af1c <with_errno>

0800af58 <__math_uflow>:
 800af58:	b508      	push	{r3, lr}
 800af5a:	2200      	movs	r2, #0
 800af5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800af60:	f7ff ffe6 	bl	800af30 <xflow>
 800af64:	ec41 0b10 	vmov	d0, r0, r1
 800af68:	bd08      	pop	{r3, pc}

0800af6a <__math_oflow>:
 800af6a:	b508      	push	{r3, lr}
 800af6c:	2200      	movs	r2, #0
 800af6e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800af72:	f7ff ffdd 	bl	800af30 <xflow>
 800af76:	ec41 0b10 	vmov	d0, r0, r1
 800af7a:	bd08      	pop	{r3, pc}

0800af7c <finite>:
 800af7c:	b082      	sub	sp, #8
 800af7e:	ed8d 0b00 	vstr	d0, [sp]
 800af82:	9801      	ldr	r0, [sp, #4]
 800af84:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800af88:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800af8c:	0fc0      	lsrs	r0, r0, #31
 800af8e:	b002      	add	sp, #8
 800af90:	4770      	bx	lr
 800af92:	0000      	movs	r0, r0
 800af94:	0000      	movs	r0, r0
	...

0800af98 <nan>:
 800af98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800afa0 <nan+0x8>
 800af9c:	4770      	bx	lr
 800af9e:	bf00      	nop
 800afa0:	00000000 	.word	0x00000000
 800afa4:	7ff80000 	.word	0x7ff80000

0800afa8 <_init>:
 800afa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afaa:	bf00      	nop
 800afac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afae:	bc08      	pop	{r3}
 800afb0:	469e      	mov	lr, r3
 800afb2:	4770      	bx	lr

0800afb4 <_fini>:
 800afb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afb6:	bf00      	nop
 800afb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afba:	bc08      	pop	{r3}
 800afbc:	469e      	mov	lr, r3
 800afbe:	4770      	bx	lr
