
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000927c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  08009440  08009440  00019440  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098ac  080098ac  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080098ac  080098ac  000198ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098b4  080098b4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098b4  080098b4  000198b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098b8  080098b8  000198b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080098bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  200001dc  08009a98  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  08009a98  00020454  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017315  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002812  00000000  00000000  00037521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001480  00000000  00000000  00039d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001388  00000000  00000000  0003b1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d4c4  00000000  00000000  0003c540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017360  00000000  00000000  00069a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011dcce  00000000  00000000  00080d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019ea32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068fc  00000000  00000000  0019ea84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08009424 	.word	0x08009424

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	08009424 	.word	0x08009424

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <pixy_init>:
      return blockCount;
  }
}

void pixy_init()
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  g_blocks = (Block *)malloc(sizeof(Block)*PIXY_ARRAYSIZE);
 8000ee0:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000ee4:	f005 fd6a 	bl	80069bc <malloc>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	461a      	mov	r2, r3
 8000eec:	4b01      	ldr	r3, [pc, #4]	; (8000ef4 <pixy_init+0x18>)
 8000eee:	601a      	str	r2, [r3, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000438 	.word	0x20000438

08000ef8 <SetPWM>:
	xVals[xValsIndex] = newX;
	xValsIndex = (xValsIndex + 1) % 4;
}

void SetPWM(uint16_t timerIndex, uint16_t pwmVal)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	460a      	mov	r2, r1
 8000f02:	80fb      	strh	r3, [r7, #6]
 8000f04:	4613      	mov	r3, r2
 8000f06:	80bb      	strh	r3, [r7, #4]
	TIM_TypeDef* timer;

	switch (timerIndex)
 8000f08:	88fb      	ldrh	r3, [r7, #6]
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d002      	beq.n	8000f14 <SetPWM+0x1c>
 8000f0e:	2b03      	cmp	r3, #3
 8000f10:	d004      	beq.n	8000f1c <SetPWM+0x24>
		break;
	case 3:
		timer = TIM3;
		break;
	default:
		return; // just in case.
 8000f12:	e009      	b.n	8000f28 <SetPWM+0x30>
		timer = TIM2;
 8000f14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f18:	60fb      	str	r3, [r7, #12]
		break;
 8000f1a:	e002      	b.n	8000f22 <SetPWM+0x2a>
		timer = TIM3;
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <SetPWM+0x3c>)
 8000f1e:	60fb      	str	r3, [r7, #12]
		break;
 8000f20:	bf00      	nop
	}

	timer->CCR3 = pwmVal;
 8000f22:	88ba      	ldrh	r2, [r7, #4]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40000400 	.word	0x40000400

08000f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3e:	f000 fece 	bl	8001cde <HAL_Init>

  /* USER CODE BEGIN Init */
  //int i = 0, curr = 0, prev = 0, iteration = 0;
  pixy_init();
 8000f42:	f7ff ffcb 	bl	8000edc <pixy_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f46:	f000 f85d 	bl	8001004 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4a:	f000 faf1 	bl	8001530 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000f4e:	f000 f94f 	bl	80011f0 <MX_SPI1_Init>
  MX_LPUART1_UART_Init();
 8000f52:	f000 f901 	bl	8001158 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000f56:	f000 f89b 	bl	8001090 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000f5a:	f000 f987 	bl	800126c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f5e:	f000 f9fb 	bl	8001358 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f62:	f000 fa6f 	bl	8001444 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000f66:	2108      	movs	r1, #8
 8000f68:	4822      	ldr	r0, [pc, #136]	; (8000ff4 <main+0xbc>)
 8000f6a:	f003 fec5 	bl	8004cf8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000f6e:	2108      	movs	r1, #8
 8000f70:	4821      	ldr	r0, [pc, #132]	; (8000ff8 <main+0xc0>)
 8000f72:	f003 fec1 	bl	8004cf8 <HAL_TIM_PWM_Start>

  uint16_t tim2PWMCCR = 79;
 8000f76:	234f      	movs	r3, #79	; 0x4f
 8000f78:	81fb      	strh	r3, [r7, #14]
  uint16_t tim3PWMCCR = 79;
 8000f7a:	234f      	movs	r3, #79	; 0x4f
 8000f7c:	81bb      	strh	r3, [r7, #12]

  uint16_t addition = 1;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	817b      	strh	r3, [r7, #10]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000f82:	2201      	movs	r2, #1
 8000f84:	2102      	movs	r1, #2
 8000f86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f8a:	f002 f87d 	bl	8003088 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f94:	4819      	ldr	r0, [pc, #100]	; (8000ffc <main+0xc4>)
 8000f96:	f002 f877 	bl	8003088 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //GetNextBallX();
	  printf("avg: %d\n", tim2PWMCCR);
 8000f9a:	89fb      	ldrh	r3, [r7, #14]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4818      	ldr	r0, [pc, #96]	; (8001000 <main+0xc8>)
 8000fa0:	f006 fa66 	bl	8007470 <iprintf>

	  SetPWM(2, tim2PWMCCR);
 8000fa4:	89fb      	ldrh	r3, [r7, #14]
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	2002      	movs	r0, #2
 8000faa:	f7ff ffa5 	bl	8000ef8 <SetPWM>
	  SetPWM(3, tim3PWMCCR);
 8000fae:	89bb      	ldrh	r3, [r7, #12]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	2003      	movs	r0, #3
 8000fb4:	f7ff ffa0 	bl	8000ef8 <SetPWM>

	  tim2PWMCCR += addition;
 8000fb8:	89fa      	ldrh	r2, [r7, #14]
 8000fba:	897b      	ldrh	r3, [r7, #10]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	81fb      	strh	r3, [r7, #14]
	  tim3PWMCCR = tim2PWMCCR;
 8000fc0:	89fb      	ldrh	r3, [r7, #14]
 8000fc2:	81bb      	strh	r3, [r7, #12]
	  if (tim2PWMCCR == 139)
 8000fc4:	89fb      	ldrh	r3, [r7, #14]
 8000fc6:	2b8b      	cmp	r3, #139	; 0x8b
 8000fc8:	d102      	bne.n	8000fd0 <main+0x98>
		  addition = -1;
 8000fca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fce:	817b      	strh	r3, [r7, #10]
	  if (tim2PWMCCR == 19)
 8000fd0:	89fb      	ldrh	r3, [r7, #14]
 8000fd2:	2b13      	cmp	r3, #19
 8000fd4:	d101      	bne.n	8000fda <main+0xa2>
		  addition = 1;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	817b      	strh	r3, [r7, #10]

	  for (int i = 0; i < 50000; i++);
 8000fda:	2300      	movs	r3, #0
 8000fdc:	607b      	str	r3, [r7, #4]
 8000fde:	e002      	b.n	8000fe6 <main+0xae>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000fec:	4293      	cmp	r3, r2
 8000fee:	ddf7      	ble.n	8000fe0 <main+0xa8>
	  printf("avg: %d\n", tim2PWMCCR);
 8000ff0:	e7d3      	b.n	8000f9a <main+0x62>
 8000ff2:	bf00      	nop
 8000ff4:	20000354 	.word	0x20000354
 8000ff8:	200003a0 	.word	0x200003a0
 8000ffc:	48001000 	.word	0x48001000
 8001000:	08009458 	.word	0x08009458

08001004 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b096      	sub	sp, #88	; 0x58
 8001008:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800100a:	f107 0314 	add.w	r3, r7, #20
 800100e:	2244      	movs	r2, #68	; 0x44
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f005 fcda 	bl	80069cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001018:	463b      	mov	r3, r7
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
 8001024:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001026:	f44f 7000 	mov.w	r0, #512	; 0x200
 800102a:	f002 f865 	bl	80030f8 <HAL_PWREx_ControlVoltageScaling>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001034:	f000 fb2a 	bl	800168c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001038:	2310      	movs	r3, #16
 800103a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800103c:	2301      	movs	r3, #1
 800103e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001044:	2360      	movs	r3, #96	; 0x60
 8001046:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001048:	2300      	movs	r3, #0
 800104a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	4618      	mov	r0, r3
 8001052:	f002 f905 	bl	8003260 <HAL_RCC_OscConfig>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800105c:	f000 fb16 	bl	800168c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001060:	230f      	movs	r3, #15
 8001062:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001064:	2300      	movs	r3, #0
 8001066:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001068:	2300      	movs	r3, #0
 800106a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800106c:	2300      	movs	r3, #0
 800106e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001070:	2300      	movs	r3, #0
 8001072:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001074:	463b      	mov	r3, r7
 8001076:	2100      	movs	r1, #0
 8001078:	4618      	mov	r0, r3
 800107a:	f002 fd0b 	bl	8003a94 <HAL_RCC_ClockConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001084:	f000 fb02 	bl	800168c <Error_Handler>
  }
}
 8001088:	bf00      	nop
 800108a:	3758      	adds	r7, #88	; 0x58
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001096:	463b      	mov	r3, r7
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
 80010a4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010a6:	4b29      	ldr	r3, [pc, #164]	; (800114c <MX_ADC1_Init+0xbc>)
 80010a8:	4a29      	ldr	r2, [pc, #164]	; (8001150 <MX_ADC1_Init+0xc0>)
 80010aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 80010ac:	4b27      	ldr	r3, [pc, #156]	; (800114c <MX_ADC1_Init+0xbc>)
 80010ae:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80010b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010b4:	4b25      	ldr	r3, [pc, #148]	; (800114c <MX_ADC1_Init+0xbc>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ba:	4b24      	ldr	r3, [pc, #144]	; (800114c <MX_ADC1_Init+0xbc>)
 80010bc:	2200      	movs	r2, #0
 80010be:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010c0:	4b22      	ldr	r3, [pc, #136]	; (800114c <MX_ADC1_Init+0xbc>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010c6:	4b21      	ldr	r3, [pc, #132]	; (800114c <MX_ADC1_Init+0xbc>)
 80010c8:	2204      	movs	r2, #4
 80010ca:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010cc:	4b1f      	ldr	r3, [pc, #124]	; (800114c <MX_ADC1_Init+0xbc>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010d2:	4b1e      	ldr	r3, [pc, #120]	; (800114c <MX_ADC1_Init+0xbc>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80010d8:	4b1c      	ldr	r3, [pc, #112]	; (800114c <MX_ADC1_Init+0xbc>)
 80010da:	2201      	movs	r2, #1
 80010dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010de:	4b1b      	ldr	r3, [pc, #108]	; (800114c <MX_ADC1_Init+0xbc>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010e6:	4b19      	ldr	r3, [pc, #100]	; (800114c <MX_ADC1_Init+0xbc>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ec:	4b17      	ldr	r3, [pc, #92]	; (800114c <MX_ADC1_Init+0xbc>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010f2:	4b16      	ldr	r3, [pc, #88]	; (800114c <MX_ADC1_Init+0xbc>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010fa:	4b14      	ldr	r3, [pc, #80]	; (800114c <MX_ADC1_Init+0xbc>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <MX_ADC1_Init+0xbc>)
 8001102:	2200      	movs	r2, #0
 8001104:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001108:	4810      	ldr	r0, [pc, #64]	; (800114c <MX_ADC1_Init+0xbc>)
 800110a:	f000 fffd 	bl	8002108 <HAL_ADC_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8001114:	f000 faba 	bl	800168c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001118:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <MX_ADC1_Init+0xc4>)
 800111a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800111c:	2306      	movs	r3, #6
 800111e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001120:	2307      	movs	r3, #7
 8001122:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001124:	237f      	movs	r3, #127	; 0x7f
 8001126:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001128:	2304      	movs	r3, #4
 800112a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001130:	463b      	mov	r3, r7
 8001132:	4619      	mov	r1, r3
 8001134:	4805      	ldr	r0, [pc, #20]	; (800114c <MX_ADC1_Init+0xbc>)
 8001136:	f001 f933 	bl	80023a0 <HAL_ADC_ConfigChannel>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001140:	f000 faa4 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	200001f8 	.word	0x200001f8
 8001150:	50040000 	.word	0x50040000
 8001154:	04300002 	.word	0x04300002

08001158 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800115c:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <MX_LPUART1_UART_Init+0x90>)
 800115e:	4a23      	ldr	r2, [pc, #140]	; (80011ec <MX_LPUART1_UART_Init+0x94>)
 8001160:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001162:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <MX_LPUART1_UART_Init+0x90>)
 8001164:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001168:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800116a:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <MX_LPUART1_UART_Init+0x90>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001170:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <MX_LPUART1_UART_Init+0x90>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001176:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <MX_LPUART1_UART_Init+0x90>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <MX_LPUART1_UART_Init+0x90>)
 800117e:	220c      	movs	r2, #12
 8001180:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <MX_LPUART1_UART_Init+0x90>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001188:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <MX_LPUART1_UART_Init+0x90>)
 800118a:	2200      	movs	r2, #0
 800118c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800118e:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <MX_LPUART1_UART_Init+0x90>)
 8001190:	2200      	movs	r2, #0
 8001192:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <MX_LPUART1_UART_Init+0x90>)
 8001196:	2200      	movs	r2, #0
 8001198:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800119a:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <MX_LPUART1_UART_Init+0x90>)
 800119c:	2200      	movs	r2, #0
 800119e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80011a0:	4811      	ldr	r0, [pc, #68]	; (80011e8 <MX_LPUART1_UART_Init+0x90>)
 80011a2:	f004 fd45 	bl	8005c30 <HAL_UART_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80011ac:	f000 fa6e 	bl	800168c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011b0:	2100      	movs	r1, #0
 80011b2:	480d      	ldr	r0, [pc, #52]	; (80011e8 <MX_LPUART1_UART_Init+0x90>)
 80011b4:	f005 fb0e 	bl	80067d4 <HAL_UARTEx_SetTxFifoThreshold>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80011be:	f000 fa65 	bl	800168c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011c2:	2100      	movs	r1, #0
 80011c4:	4808      	ldr	r0, [pc, #32]	; (80011e8 <MX_LPUART1_UART_Init+0x90>)
 80011c6:	f005 fb43 	bl	8006850 <HAL_UARTEx_SetRxFifoThreshold>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80011d0:	f000 fa5c 	bl	800168c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80011d4:	4804      	ldr	r0, [pc, #16]	; (80011e8 <MX_LPUART1_UART_Init+0x90>)
 80011d6:	f005 fac4 	bl	8006762 <HAL_UARTEx_DisableFifoMode>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80011e0:	f000 fa54 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000260 	.word	0x20000260
 80011ec:	40008000 	.word	0x40008000

080011f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <MX_SPI1_Init+0x74>)
 80011f6:	4a1c      	ldr	r2, [pc, #112]	; (8001268 <MX_SPI1_Init+0x78>)
 80011f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011fa:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <MX_SPI1_Init+0x74>)
 80011fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001200:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <MX_SPI1_Init+0x74>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001208:	4b16      	ldr	r3, [pc, #88]	; (8001264 <MX_SPI1_Init+0x74>)
 800120a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800120e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001210:	4b14      	ldr	r3, [pc, #80]	; (8001264 <MX_SPI1_Init+0x74>)
 8001212:	2200      	movs	r2, #0
 8001214:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001216:	4b13      	ldr	r3, [pc, #76]	; (8001264 <MX_SPI1_Init+0x74>)
 8001218:	2200      	movs	r2, #0
 800121a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800121c:	4b11      	ldr	r3, [pc, #68]	; (8001264 <MX_SPI1_Init+0x74>)
 800121e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001222:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <MX_SPI1_Init+0x74>)
 8001226:	2208      	movs	r2, #8
 8001228:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <MX_SPI1_Init+0x74>)
 800122c:	2200      	movs	r2, #0
 800122e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <MX_SPI1_Init+0x74>)
 8001232:	2200      	movs	r2, #0
 8001234:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001236:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <MX_SPI1_Init+0x74>)
 8001238:	2200      	movs	r2, #0
 800123a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800123c:	4b09      	ldr	r3, [pc, #36]	; (8001264 <MX_SPI1_Init+0x74>)
 800123e:	2207      	movs	r2, #7
 8001240:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001242:	4b08      	ldr	r3, [pc, #32]	; (8001264 <MX_SPI1_Init+0x74>)
 8001244:	2200      	movs	r2, #0
 8001246:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <MX_SPI1_Init+0x74>)
 800124a:	2208      	movs	r2, #8
 800124c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800124e:	4805      	ldr	r0, [pc, #20]	; (8001264 <MX_SPI1_Init+0x74>)
 8001250:	f003 fbf6 	bl	8004a40 <HAL_SPI_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800125a:	f000 fa17 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	200002f0 	.word	0x200002f0
 8001268:	40013000 	.word	0x40013000

0800126c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08e      	sub	sp, #56	; 0x38
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001272:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001280:	f107 031c 	add.w	r3, r7, #28
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800128c:	463b      	mov	r3, r7
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	611a      	str	r2, [r3, #16]
 800129a:	615a      	str	r2, [r3, #20]
 800129c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800129e:	4b2d      	ldr	r3, [pc, #180]	; (8001354 <MX_TIM2_Init+0xe8>)
 80012a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012a6:	4b2b      	ldr	r3, [pc, #172]	; (8001354 <MX_TIM2_Init+0xe8>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ac:	4b29      	ldr	r3, [pc, #164]	; (8001354 <MX_TIM2_Init+0xe8>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 159;
 80012b2:	4b28      	ldr	r3, [pc, #160]	; (8001354 <MX_TIM2_Init+0xe8>)
 80012b4:	229f      	movs	r2, #159	; 0x9f
 80012b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b8:	4b26      	ldr	r3, [pc, #152]	; (8001354 <MX_TIM2_Init+0xe8>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012be:	4b25      	ldr	r3, [pc, #148]	; (8001354 <MX_TIM2_Init+0xe8>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012c4:	4823      	ldr	r0, [pc, #140]	; (8001354 <MX_TIM2_Init+0xe8>)
 80012c6:	f003 fc5e 	bl	8004b86 <HAL_TIM_Base_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80012d0:	f000 f9dc 	bl	800168c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012de:	4619      	mov	r1, r3
 80012e0:	481c      	ldr	r0, [pc, #112]	; (8001354 <MX_TIM2_Init+0xe8>)
 80012e2:	f003 ff23 	bl	800512c <HAL_TIM_ConfigClockSource>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80012ec:	f000 f9ce 	bl	800168c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012f0:	4818      	ldr	r0, [pc, #96]	; (8001354 <MX_TIM2_Init+0xe8>)
 80012f2:	f003 fc9f 	bl	8004c34 <HAL_TIM_PWM_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80012fc:	f000 f9c6 	bl	800168c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001304:	2300      	movs	r3, #0
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001308:	f107 031c 	add.w	r3, r7, #28
 800130c:	4619      	mov	r1, r3
 800130e:	4811      	ldr	r0, [pc, #68]	; (8001354 <MX_TIM2_Init+0xe8>)
 8001310:	f004 fc06 	bl	8005b20 <HAL_TIMEx_MasterConfigSynchronization>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800131a:	f000 f9b7 	bl	800168c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800131e:	2360      	movs	r3, #96	; 0x60
 8001320:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 79;
 8001322:	234f      	movs	r3, #79	; 0x4f
 8001324:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001326:	2300      	movs	r3, #0
 8001328:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800132e:	463b      	mov	r3, r7
 8001330:	2208      	movs	r2, #8
 8001332:	4619      	mov	r1, r3
 8001334:	4807      	ldr	r0, [pc, #28]	; (8001354 <MX_TIM2_Init+0xe8>)
 8001336:	f003 fde5 	bl	8004f04 <HAL_TIM_PWM_ConfigChannel>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001340:	f000 f9a4 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001344:	4803      	ldr	r0, [pc, #12]	; (8001354 <MX_TIM2_Init+0xe8>)
 8001346:	f000 fb1d 	bl	8001984 <HAL_TIM_MspPostInit>

}
 800134a:	bf00      	nop
 800134c:	3738      	adds	r7, #56	; 0x38
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000354 	.word	0x20000354

08001358 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08e      	sub	sp, #56	; 0x38
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800135e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001378:	463b      	mov	r3, r7
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]
 8001384:	611a      	str	r2, [r3, #16]
 8001386:	615a      	str	r2, [r3, #20]
 8001388:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800138a:	4b2c      	ldr	r3, [pc, #176]	; (800143c <MX_TIM3_Init+0xe4>)
 800138c:	4a2c      	ldr	r2, [pc, #176]	; (8001440 <MX_TIM3_Init+0xe8>)
 800138e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001390:	4b2a      	ldr	r3, [pc, #168]	; (800143c <MX_TIM3_Init+0xe4>)
 8001392:	2200      	movs	r2, #0
 8001394:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001396:	4b29      	ldr	r3, [pc, #164]	; (800143c <MX_TIM3_Init+0xe4>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 159;
 800139c:	4b27      	ldr	r3, [pc, #156]	; (800143c <MX_TIM3_Init+0xe4>)
 800139e:	229f      	movs	r2, #159	; 0x9f
 80013a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a2:	4b26      	ldr	r3, [pc, #152]	; (800143c <MX_TIM3_Init+0xe4>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a8:	4b24      	ldr	r3, [pc, #144]	; (800143c <MX_TIM3_Init+0xe4>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013ae:	4823      	ldr	r0, [pc, #140]	; (800143c <MX_TIM3_Init+0xe4>)
 80013b0:	f003 fbe9 	bl	8004b86 <HAL_TIM_Base_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80013ba:	f000 f967 	bl	800168c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013c8:	4619      	mov	r1, r3
 80013ca:	481c      	ldr	r0, [pc, #112]	; (800143c <MX_TIM3_Init+0xe4>)
 80013cc:	f003 feae 	bl	800512c <HAL_TIM_ConfigClockSource>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80013d6:	f000 f959 	bl	800168c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013da:	4818      	ldr	r0, [pc, #96]	; (800143c <MX_TIM3_Init+0xe4>)
 80013dc:	f003 fc2a 	bl	8004c34 <HAL_TIM_PWM_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80013e6:	f000 f951 	bl	800168c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013f2:	f107 031c 	add.w	r3, r7, #28
 80013f6:	4619      	mov	r1, r3
 80013f8:	4810      	ldr	r0, [pc, #64]	; (800143c <MX_TIM3_Init+0xe4>)
 80013fa:	f004 fb91 	bl	8005b20 <HAL_TIMEx_MasterConfigSynchronization>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001404:	f000 f942 	bl	800168c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001408:	2360      	movs	r3, #96	; 0x60
 800140a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 79;
 800140c:	234f      	movs	r3, #79	; 0x4f
 800140e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001410:	2300      	movs	r3, #0
 8001412:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001418:	463b      	mov	r3, r7
 800141a:	2208      	movs	r2, #8
 800141c:	4619      	mov	r1, r3
 800141e:	4807      	ldr	r0, [pc, #28]	; (800143c <MX_TIM3_Init+0xe4>)
 8001420:	f003 fd70 	bl	8004f04 <HAL_TIM_PWM_ConfigChannel>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800142a:	f000 f92f 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800142e:	4803      	ldr	r0, [pc, #12]	; (800143c <MX_TIM3_Init+0xe4>)
 8001430:	f000 faa8 	bl	8001984 <HAL_TIM_MspPostInit>

}
 8001434:	bf00      	nop
 8001436:	3738      	adds	r7, #56	; 0x38
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	200003a0 	.word	0x200003a0
 8001440:	40000400 	.word	0x40000400

08001444 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08e      	sub	sp, #56	; 0x38
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800144a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001458:	f107 031c 	add.w	r3, r7, #28
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001464:	463b      	mov	r3, r7
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
 8001470:	611a      	str	r2, [r3, #16]
 8001472:	615a      	str	r2, [r3, #20]
 8001474:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001476:	4b2c      	ldr	r3, [pc, #176]	; (8001528 <MX_TIM4_Init+0xe4>)
 8001478:	4a2c      	ldr	r2, [pc, #176]	; (800152c <MX_TIM4_Init+0xe8>)
 800147a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800147c:	4b2a      	ldr	r3, [pc, #168]	; (8001528 <MX_TIM4_Init+0xe4>)
 800147e:	2200      	movs	r2, #0
 8001480:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001482:	4b29      	ldr	r3, [pc, #164]	; (8001528 <MX_TIM4_Init+0xe4>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 159;
 8001488:	4b27      	ldr	r3, [pc, #156]	; (8001528 <MX_TIM4_Init+0xe4>)
 800148a:	229f      	movs	r2, #159	; 0x9f
 800148c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800148e:	4b26      	ldr	r3, [pc, #152]	; (8001528 <MX_TIM4_Init+0xe4>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001494:	4b24      	ldr	r3, [pc, #144]	; (8001528 <MX_TIM4_Init+0xe4>)
 8001496:	2200      	movs	r2, #0
 8001498:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800149a:	4823      	ldr	r0, [pc, #140]	; (8001528 <MX_TIM4_Init+0xe4>)
 800149c:	f003 fb73 	bl	8004b86 <HAL_TIM_Base_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80014a6:	f000 f8f1 	bl	800168c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80014b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014b4:	4619      	mov	r1, r3
 80014b6:	481c      	ldr	r0, [pc, #112]	; (8001528 <MX_TIM4_Init+0xe4>)
 80014b8:	f003 fe38 	bl	800512c <HAL_TIM_ConfigClockSource>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80014c2:	f000 f8e3 	bl	800168c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014c6:	4818      	ldr	r0, [pc, #96]	; (8001528 <MX_TIM4_Init+0xe4>)
 80014c8:	f003 fbb4 	bl	8004c34 <HAL_TIM_PWM_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80014d2:	f000 f8db 	bl	800168c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014da:	2300      	movs	r3, #0
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014de:	f107 031c 	add.w	r3, r7, #28
 80014e2:	4619      	mov	r1, r3
 80014e4:	4810      	ldr	r0, [pc, #64]	; (8001528 <MX_TIM4_Init+0xe4>)
 80014e6:	f004 fb1b 	bl	8005b20 <HAL_TIMEx_MasterConfigSynchronization>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80014f0:	f000 f8cc 	bl	800168c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014f4:	2360      	movs	r3, #96	; 0x60
 80014f6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 79;
 80014f8:	234f      	movs	r3, #79	; 0x4f
 80014fa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001500:	2300      	movs	r3, #0
 8001502:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001504:	463b      	mov	r3, r7
 8001506:	2208      	movs	r2, #8
 8001508:	4619      	mov	r1, r3
 800150a:	4807      	ldr	r0, [pc, #28]	; (8001528 <MX_TIM4_Init+0xe4>)
 800150c:	f003 fcfa 	bl	8004f04 <HAL_TIM_PWM_ConfigChannel>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001516:	f000 f8b9 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800151a:	4803      	ldr	r0, [pc, #12]	; (8001528 <MX_TIM4_Init+0xe4>)
 800151c:	f000 fa32 	bl	8001984 <HAL_TIM_MspPostInit>

}
 8001520:	bf00      	nop
 8001522:	3738      	adds	r7, #56	; 0x38
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	200003ec 	.word	0x200003ec
 800152c:	40000800 	.word	0x40000800

08001530 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08c      	sub	sp, #48	; 0x30
 8001534:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001536:	f107 031c 	add.w	r3, r7, #28
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	60da      	str	r2, [r3, #12]
 8001544:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001546:	4b45      	ldr	r3, [pc, #276]	; (800165c <MX_GPIO_Init+0x12c>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154a:	4a44      	ldr	r2, [pc, #272]	; (800165c <MX_GPIO_Init+0x12c>)
 800154c:	f043 0304 	orr.w	r3, r3, #4
 8001550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001552:	4b42      	ldr	r3, [pc, #264]	; (800165c <MX_GPIO_Init+0x12c>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001556:	f003 0304 	and.w	r3, r3, #4
 800155a:	61bb      	str	r3, [r7, #24]
 800155c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155e:	4b3f      	ldr	r3, [pc, #252]	; (800165c <MX_GPIO_Init+0x12c>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001562:	4a3e      	ldr	r2, [pc, #248]	; (800165c <MX_GPIO_Init+0x12c>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800156a:	4b3c      	ldr	r3, [pc, #240]	; (800165c <MX_GPIO_Init+0x12c>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001576:	4b39      	ldr	r3, [pc, #228]	; (800165c <MX_GPIO_Init+0x12c>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157a:	4a38      	ldr	r2, [pc, #224]	; (800165c <MX_GPIO_Init+0x12c>)
 800157c:	f043 0302 	orr.w	r3, r3, #2
 8001580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001582:	4b36      	ldr	r3, [pc, #216]	; (800165c <MX_GPIO_Init+0x12c>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800158e:	4b33      	ldr	r3, [pc, #204]	; (800165c <MX_GPIO_Init+0x12c>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001592:	4a32      	ldr	r2, [pc, #200]	; (800165c <MX_GPIO_Init+0x12c>)
 8001594:	f043 0310 	orr.w	r3, r3, #16
 8001598:	64d3      	str	r3, [r2, #76]	; 0x4c
 800159a:	4b30      	ldr	r3, [pc, #192]	; (800165c <MX_GPIO_Init+0x12c>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159e:	f003 0310 	and.w	r3, r3, #16
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a6:	4b2d      	ldr	r3, [pc, #180]	; (800165c <MX_GPIO_Init+0x12c>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015aa:	4a2c      	ldr	r2, [pc, #176]	; (800165c <MX_GPIO_Init+0x12c>)
 80015ac:	f043 0308 	orr.w	r3, r3, #8
 80015b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b2:	4b2a      	ldr	r3, [pc, #168]	; (800165c <MX_GPIO_Init+0x12c>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b6:	f003 0308 	and.w	r3, r3, #8
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015be:	4b27      	ldr	r3, [pc, #156]	; (800165c <MX_GPIO_Init+0x12c>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c2:	4a26      	ldr	r2, [pc, #152]	; (800165c <MX_GPIO_Init+0x12c>)
 80015c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ca:	4b24      	ldr	r3, [pc, #144]	; (800165c <MX_GPIO_Init+0x12c>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80015d6:	f001 fe33 	bl	8003240 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80015da:	2200      	movs	r2, #0
 80015dc:	2102      	movs	r1, #2
 80015de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e2:	f001 fd51 	bl	8003088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 80015e6:	2200      	movs	r2, #0
 80015e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015ec:	481c      	ldr	r0, [pc, #112]	; (8001660 <MX_GPIO_Init+0x130>)
 80015ee:	f001 fd4b 	bl	8003088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2140      	movs	r1, #64	; 0x40
 80015f6:	481b      	ldr	r0, [pc, #108]	; (8001664 <MX_GPIO_Init+0x134>)
 80015f8:	f001 fd46 	bl	8003088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015fc:	2302      	movs	r3, #2
 80015fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001600:	2301      	movs	r3, #1
 8001602:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	2300      	movs	r3, #0
 800160a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	4619      	mov	r1, r3
 8001612:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001616:	f001 fba5 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800161a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800161e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001620:	2301      	movs	r3, #1
 8001622:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001628:	2300      	movs	r3, #0
 800162a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800162c:	f107 031c 	add.w	r3, r7, #28
 8001630:	4619      	mov	r1, r3
 8001632:	480b      	ldr	r0, [pc, #44]	; (8001660 <MX_GPIO_Init+0x130>)
 8001634:	f001 fb96 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001638:	2340      	movs	r3, #64	; 0x40
 800163a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163c:	2301      	movs	r3, #1
 800163e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001644:	2300      	movs	r3, #0
 8001646:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001648:	f107 031c 	add.w	r3, r7, #28
 800164c:	4619      	mov	r1, r3
 800164e:	4805      	ldr	r0, [pc, #20]	; (8001664 <MX_GPIO_Init+0x134>)
 8001650:	f001 fb88 	bl	8002d64 <HAL_GPIO_Init>

}
 8001654:	bf00      	nop
 8001656:	3730      	adds	r7, #48	; 0x30
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40021000 	.word	0x40021000
 8001660:	48001000 	.word	0x48001000
 8001664:	48000400 	.word	0x48000400

08001668 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)&ch, 1, 0xFFFF);
 8001670:	1d39      	adds	r1, r7, #4
 8001672:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001676:	2201      	movs	r2, #1
 8001678:	4803      	ldr	r0, [pc, #12]	; (8001688 <__io_putchar+0x20>)
 800167a:	f004 fb29 	bl	8005cd0 <HAL_UART_Transmit>
	return ch;
 800167e:	687b      	ldr	r3, [r7, #4]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000260 	.word	0x20000260

0800168c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001690:	b672      	cpsid	i
}
 8001692:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001694:	e7fe      	b.n	8001694 <Error_Handler+0x8>
	...

08001698 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169e:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <HAL_MspInit+0x44>)
 80016a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016a2:	4a0e      	ldr	r2, [pc, #56]	; (80016dc <HAL_MspInit+0x44>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6613      	str	r3, [r2, #96]	; 0x60
 80016aa:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <HAL_MspInit+0x44>)
 80016ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <HAL_MspInit+0x44>)
 80016b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ba:	4a08      	ldr	r2, [pc, #32]	; (80016dc <HAL_MspInit+0x44>)
 80016bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c0:	6593      	str	r3, [r2, #88]	; 0x58
 80016c2:	4b06      	ldr	r3, [pc, #24]	; (80016dc <HAL_MspInit+0x44>)
 80016c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ca:	603b      	str	r3, [r7, #0]
 80016cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40021000 	.word	0x40021000

080016e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b0ae      	sub	sp, #184	; 0xb8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016f8:	f107 0310 	add.w	r3, r7, #16
 80016fc:	2294      	movs	r2, #148	; 0x94
 80016fe:	2100      	movs	r1, #0
 8001700:	4618      	mov	r0, r3
 8001702:	f005 f963 	bl	80069cc <memset>
  if(hadc->Instance==ADC1)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a27      	ldr	r2, [pc, #156]	; (80017a8 <HAL_ADC_MspInit+0xc8>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d146      	bne.n	800179e <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001710:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001714:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001716:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800171a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800171e:	2301      	movs	r3, #1
 8001720:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001722:	2301      	movs	r3, #1
 8001724:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001726:	2310      	movs	r3, #16
 8001728:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800172a:	2302      	movs	r3, #2
 800172c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800172e:	2302      	movs	r3, #2
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001732:	2302      	movs	r3, #2
 8001734:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001736:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800173a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800173c:	f107 0310 	add.w	r3, r7, #16
 8001740:	4618      	mov	r0, r3
 8001742:	f002 fc65 	bl	8004010 <HAL_RCCEx_PeriphCLKConfig>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800174c:	f7ff ff9e 	bl	800168c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001750:	4b16      	ldr	r3, [pc, #88]	; (80017ac <HAL_ADC_MspInit+0xcc>)
 8001752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001754:	4a15      	ldr	r2, [pc, #84]	; (80017ac <HAL_ADC_MspInit+0xcc>)
 8001756:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800175a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800175c:	4b13      	ldr	r3, [pc, #76]	; (80017ac <HAL_ADC_MspInit+0xcc>)
 800175e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001760:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001768:	4b10      	ldr	r3, [pc, #64]	; (80017ac <HAL_ADC_MspInit+0xcc>)
 800176a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176c:	4a0f      	ldr	r2, [pc, #60]	; (80017ac <HAL_ADC_MspInit+0xcc>)
 800176e:	f043 0304 	orr.w	r3, r3, #4
 8001772:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001774:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <HAL_ADC_MspInit+0xcc>)
 8001776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001780:	2301      	movs	r3, #1
 8001782:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001786:	230b      	movs	r3, #11
 8001788:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001792:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001796:	4619      	mov	r1, r3
 8001798:	4805      	ldr	r0, [pc, #20]	; (80017b0 <HAL_ADC_MspInit+0xd0>)
 800179a:	f001 fae3 	bl	8002d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800179e:	bf00      	nop
 80017a0:	37b8      	adds	r7, #184	; 0xb8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	50040000 	.word	0x50040000
 80017ac:	40021000 	.word	0x40021000
 80017b0:	48000800 	.word	0x48000800

080017b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b0ae      	sub	sp, #184	; 0xb8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017cc:	f107 0310 	add.w	r3, r7, #16
 80017d0:	2294      	movs	r2, #148	; 0x94
 80017d2:	2100      	movs	r1, #0
 80017d4:	4618      	mov	r0, r3
 80017d6:	f005 f8f9 	bl	80069cc <memset>
  if(huart->Instance==LPUART1)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a22      	ldr	r2, [pc, #136]	; (8001868 <HAL_UART_MspInit+0xb4>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d13d      	bne.n	8001860 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80017e4:	2320      	movs	r3, #32
 80017e6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80017e8:	2300      	movs	r3, #0
 80017ea:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017ec:	f107 0310 	add.w	r3, r7, #16
 80017f0:	4618      	mov	r0, r3
 80017f2:	f002 fc0d 	bl	8004010 <HAL_RCCEx_PeriphCLKConfig>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017fc:	f7ff ff46 	bl	800168c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001800:	4b1a      	ldr	r3, [pc, #104]	; (800186c <HAL_UART_MspInit+0xb8>)
 8001802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001804:	4a19      	ldr	r2, [pc, #100]	; (800186c <HAL_UART_MspInit+0xb8>)
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800180c:	4b17      	ldr	r3, [pc, #92]	; (800186c <HAL_UART_MspInit+0xb8>)
 800180e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001818:	4b14      	ldr	r3, [pc, #80]	; (800186c <HAL_UART_MspInit+0xb8>)
 800181a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181c:	4a13      	ldr	r2, [pc, #76]	; (800186c <HAL_UART_MspInit+0xb8>)
 800181e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001822:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001824:	4b11      	ldr	r3, [pc, #68]	; (800186c <HAL_UART_MspInit+0xb8>)
 8001826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8001830:	f001 fd06 	bl	8003240 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001834:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001838:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183c:	2302      	movs	r3, #2
 800183e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001848:	2303      	movs	r3, #3
 800184a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800184e:	2308      	movs	r3, #8
 8001850:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001854:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001858:	4619      	mov	r1, r3
 800185a:	4805      	ldr	r0, [pc, #20]	; (8001870 <HAL_UART_MspInit+0xbc>)
 800185c:	f001 fa82 	bl	8002d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001860:	bf00      	nop
 8001862:	37b8      	adds	r7, #184	; 0xb8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40008000 	.word	0x40008000
 800186c:	40021000 	.word	0x40021000
 8001870:	48001800 	.word	0x48001800

08001874 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08a      	sub	sp, #40	; 0x28
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a17      	ldr	r2, [pc, #92]	; (80018f0 <HAL_SPI_MspInit+0x7c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d128      	bne.n	80018e8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001896:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <HAL_SPI_MspInit+0x80>)
 8001898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800189a:	4a16      	ldr	r2, [pc, #88]	; (80018f4 <HAL_SPI_MspInit+0x80>)
 800189c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018a0:	6613      	str	r3, [r2, #96]	; 0x60
 80018a2:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <HAL_SPI_MspInit+0x80>)
 80018a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018aa:	613b      	str	r3, [r7, #16]
 80018ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ae:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <HAL_SPI_MspInit+0x80>)
 80018b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b2:	4a10      	ldr	r2, [pc, #64]	; (80018f4 <HAL_SPI_MspInit+0x80>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ba:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <HAL_SPI_MspInit+0x80>)
 80018bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80018c6:	23e0      	movs	r3, #224	; 0xe0
 80018c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ca:	2302      	movs	r3, #2
 80018cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d2:	2303      	movs	r3, #3
 80018d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018d6:	2305      	movs	r3, #5
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018da:	f107 0314 	add.w	r3, r7, #20
 80018de:	4619      	mov	r1, r3
 80018e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018e4:	f001 fa3e 	bl	8002d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80018e8:	bf00      	nop
 80018ea:	3728      	adds	r7, #40	; 0x28
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40013000 	.word	0x40013000
 80018f4:	40021000 	.word	0x40021000

080018f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b087      	sub	sp, #28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001908:	d10c      	bne.n	8001924 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800190a:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <HAL_TIM_Base_MspInit+0x80>)
 800190c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190e:	4a1a      	ldr	r2, [pc, #104]	; (8001978 <HAL_TIM_Base_MspInit+0x80>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	6593      	str	r3, [r2, #88]	; 0x58
 8001916:	4b18      	ldr	r3, [pc, #96]	; (8001978 <HAL_TIM_Base_MspInit+0x80>)
 8001918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001922:	e022      	b.n	800196a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a14      	ldr	r2, [pc, #80]	; (800197c <HAL_TIM_Base_MspInit+0x84>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d10c      	bne.n	8001948 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800192e:	4b12      	ldr	r3, [pc, #72]	; (8001978 <HAL_TIM_Base_MspInit+0x80>)
 8001930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001932:	4a11      	ldr	r2, [pc, #68]	; (8001978 <HAL_TIM_Base_MspInit+0x80>)
 8001934:	f043 0302 	orr.w	r3, r3, #2
 8001938:	6593      	str	r3, [r2, #88]	; 0x58
 800193a:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <HAL_TIM_Base_MspInit+0x80>)
 800193c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	693b      	ldr	r3, [r7, #16]
}
 8001946:	e010      	b.n	800196a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a0c      	ldr	r2, [pc, #48]	; (8001980 <HAL_TIM_Base_MspInit+0x88>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d10b      	bne.n	800196a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001952:	4b09      	ldr	r3, [pc, #36]	; (8001978 <HAL_TIM_Base_MspInit+0x80>)
 8001954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001956:	4a08      	ldr	r2, [pc, #32]	; (8001978 <HAL_TIM_Base_MspInit+0x80>)
 8001958:	f043 0304 	orr.w	r3, r3, #4
 800195c:	6593      	str	r3, [r2, #88]	; 0x58
 800195e:	4b06      	ldr	r3, [pc, #24]	; (8001978 <HAL_TIM_Base_MspInit+0x80>)
 8001960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001962:	f003 0304 	and.w	r3, r3, #4
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
}
 800196a:	bf00      	nop
 800196c:	371c      	adds	r7, #28
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40021000 	.word	0x40021000
 800197c:	40000400 	.word	0x40000400
 8001980:	40000800 	.word	0x40000800

08001984 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	; 0x28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019a4:	d11d      	bne.n	80019e2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a6:	4b33      	ldr	r3, [pc, #204]	; (8001a74 <HAL_TIM_MspPostInit+0xf0>)
 80019a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019aa:	4a32      	ldr	r2, [pc, #200]	; (8001a74 <HAL_TIM_MspPostInit+0xf0>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019b2:	4b30      	ldr	r3, [pc, #192]	; (8001a74 <HAL_TIM_MspPostInit+0xf0>)
 80019b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019be:	2304      	movs	r3, #4
 80019c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c2:	2302      	movs	r3, #2
 80019c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ca:	2300      	movs	r3, #0
 80019cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019ce:	2301      	movs	r3, #1
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d2:	f107 0314 	add.w	r3, r7, #20
 80019d6:	4619      	mov	r1, r3
 80019d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019dc:	f001 f9c2 	bl	8002d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80019e0:	e043      	b.n	8001a6a <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM3)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a24      	ldr	r2, [pc, #144]	; (8001a78 <HAL_TIM_MspPostInit+0xf4>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d11c      	bne.n	8001a26 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ec:	4b21      	ldr	r3, [pc, #132]	; (8001a74 <HAL_TIM_MspPostInit+0xf0>)
 80019ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f0:	4a20      	ldr	r2, [pc, #128]	; (8001a74 <HAL_TIM_MspPostInit+0xf0>)
 80019f2:	f043 0302 	orr.w	r3, r3, #2
 80019f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019f8:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <HAL_TIM_MspPostInit+0xf0>)
 80019fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a04:	2301      	movs	r3, #1
 8001a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a10:	2300      	movs	r3, #0
 8001a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a14:	2302      	movs	r3, #2
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4817      	ldr	r0, [pc, #92]	; (8001a7c <HAL_TIM_MspPostInit+0xf8>)
 8001a20:	f001 f9a0 	bl	8002d64 <HAL_GPIO_Init>
}
 8001a24:	e021      	b.n	8001a6a <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM4)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a15      	ldr	r2, [pc, #84]	; (8001a80 <HAL_TIM_MspPostInit+0xfc>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d11c      	bne.n	8001a6a <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a30:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <HAL_TIM_MspPostInit+0xf0>)
 8001a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a34:	4a0f      	ldr	r2, [pc, #60]	; (8001a74 <HAL_TIM_MspPostInit+0xf0>)
 8001a36:	f043 0308 	orr.w	r3, r3, #8
 8001a3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a3c:	4b0d      	ldr	r3, [pc, #52]	; (8001a74 <HAL_TIM_MspPostInit+0xf0>)
 8001a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a40:	f003 0308 	and.w	r3, r3, #8
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001a48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a56:	2300      	movs	r3, #0
 8001a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a5e:	f107 0314 	add.w	r3, r7, #20
 8001a62:	4619      	mov	r1, r3
 8001a64:	4807      	ldr	r0, [pc, #28]	; (8001a84 <HAL_TIM_MspPostInit+0x100>)
 8001a66:	f001 f97d 	bl	8002d64 <HAL_GPIO_Init>
}
 8001a6a:	bf00      	nop
 8001a6c:	3728      	adds	r7, #40	; 0x28
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40021000 	.word	0x40021000
 8001a78:	40000400 	.word	0x40000400
 8001a7c:	48000400 	.word	0x48000400
 8001a80:	40000800 	.word	0x40000800
 8001a84:	48000c00 	.word	0x48000c00

08001a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <NMI_Handler+0x4>

08001a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a92:	e7fe      	b.n	8001a92 <HardFault_Handler+0x4>

08001a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <MemManage_Handler+0x4>

08001a9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a9e:	e7fe      	b.n	8001a9e <BusFault_Handler+0x4>

08001aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <UsageFault_Handler+0x4>

08001aa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ad4:	f000 f958 	bl	8001d88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ad8:	bf00      	nop
 8001ada:	bd80      	pop	{r7, pc}

08001adc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
	return 1;
 8001ae0:	2301      	movs	r3, #1
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <_kill>:

int _kill(int pid, int sig)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001af6:	f004 ff37 	bl	8006968 <__errno>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2216      	movs	r2, #22
 8001afe:	601a      	str	r2, [r3, #0]
	return -1;
 8001b00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <_exit>:

void _exit (int status)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b14:	f04f 31ff 	mov.w	r1, #4294967295
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff ffe7 	bl	8001aec <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b1e:	e7fe      	b.n	8001b1e <_exit+0x12>

08001b20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	e00a      	b.n	8001b48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b32:	f3af 8000 	nop.w
 8001b36:	4601      	mov	r1, r0
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	1c5a      	adds	r2, r3, #1
 8001b3c:	60ba      	str	r2, [r7, #8]
 8001b3e:	b2ca      	uxtb	r2, r1
 8001b40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	3301      	adds	r3, #1
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	dbf0      	blt.n	8001b32 <_read+0x12>
	}

return len;
 8001b50:	687b      	ldr	r3, [r7, #4]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b086      	sub	sp, #24
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	60f8      	str	r0, [r7, #12]
 8001b62:	60b9      	str	r1, [r7, #8]
 8001b64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	e009      	b.n	8001b80 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	1c5a      	adds	r2, r3, #1
 8001b70:	60ba      	str	r2, [r7, #8]
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fd77 	bl	8001668 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	dbf1      	blt.n	8001b6c <_write+0x12>
	}
	return len;
 8001b88:	687b      	ldr	r3, [r7, #4]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <_close>:

int _close(int file)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
	return -1;
 8001b9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bba:	605a      	str	r2, [r3, #4]
	return 0;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <_isatty>:

int _isatty(int file)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
	return 1;
 8001bd2:	2301      	movs	r3, #1
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
	return 0;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3714      	adds	r7, #20
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
	...

08001bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c04:	4a14      	ldr	r2, [pc, #80]	; (8001c58 <_sbrk+0x5c>)
 8001c06:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <_sbrk+0x60>)
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c10:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <_sbrk+0x64>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d102      	bne.n	8001c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c18:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <_sbrk+0x64>)
 8001c1a:	4a12      	ldr	r2, [pc, #72]	; (8001c64 <_sbrk+0x68>)
 8001c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c1e:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <_sbrk+0x64>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4413      	add	r3, r2
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d207      	bcs.n	8001c3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c2c:	f004 fe9c 	bl	8006968 <__errno>
 8001c30:	4603      	mov	r3, r0
 8001c32:	220c      	movs	r2, #12
 8001c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c36:	f04f 33ff 	mov.w	r3, #4294967295
 8001c3a:	e009      	b.n	8001c50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c3c:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <_sbrk+0x64>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c42:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <_sbrk+0x64>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	4a05      	ldr	r2, [pc, #20]	; (8001c60 <_sbrk+0x64>)
 8001c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	200a0000 	.word	0x200a0000
 8001c5c:	00000400 	.word	0x00000400
 8001c60:	2000043c 	.word	0x2000043c
 8001c64:	20000458 	.word	0x20000458

08001c68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c6c:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <SystemInit+0x20>)
 8001c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c72:	4a05      	ldr	r2, [pc, #20]	; (8001c88 <SystemInit+0x20>)
 8001c74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cc4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c90:	f7ff ffea 	bl	8001c68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c94:	480c      	ldr	r0, [pc, #48]	; (8001cc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c96:	490d      	ldr	r1, [pc, #52]	; (8001ccc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c98:	4a0d      	ldr	r2, [pc, #52]	; (8001cd0 <LoopForever+0xe>)
  movs r3, #0
 8001c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c9c:	e002      	b.n	8001ca4 <LoopCopyDataInit>

08001c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ca2:	3304      	adds	r3, #4

08001ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ca8:	d3f9      	bcc.n	8001c9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001caa:	4a0a      	ldr	r2, [pc, #40]	; (8001cd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cac:	4c0a      	ldr	r4, [pc, #40]	; (8001cd8 <LoopForever+0x16>)
  movs r3, #0
 8001cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cb0:	e001      	b.n	8001cb6 <LoopFillZerobss>

08001cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cb4:	3204      	adds	r2, #4

08001cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cb8:	d3fb      	bcc.n	8001cb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cba:	f004 fe5b 	bl	8006974 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cbe:	f7ff f93b 	bl	8000f38 <main>

08001cc2 <LoopForever>:

LoopForever:
    b LoopForever
 8001cc2:	e7fe      	b.n	8001cc2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001cc4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ccc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001cd0:	080098bc 	.word	0x080098bc
  ldr r2, =_sbss
 8001cd4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001cd8:	20000454 	.word	0x20000454

08001cdc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cdc:	e7fe      	b.n	8001cdc <ADC1_IRQHandler>

08001cde <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ce8:	2003      	movs	r0, #3
 8001cea:	f001 f807 	bl	8002cfc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cee:	200f      	movs	r0, #15
 8001cf0:	f000 f80e 	bl	8001d10 <HAL_InitTick>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d002      	beq.n	8001d00 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	71fb      	strb	r3, [r7, #7]
 8001cfe:	e001      	b.n	8001d04 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d00:	f7ff fcca 	bl	8001698 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d04:	79fb      	ldrb	r3, [r7, #7]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
	...

08001d10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d1c:	4b17      	ldr	r3, [pc, #92]	; (8001d7c <HAL_InitTick+0x6c>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d023      	beq.n	8001d6c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d24:	4b16      	ldr	r3, [pc, #88]	; (8001d80 <HAL_InitTick+0x70>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	4b14      	ldr	r3, [pc, #80]	; (8001d7c <HAL_InitTick+0x6c>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f001 f805 	bl	8002d4a <HAL_SYSTICK_Config>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10f      	bne.n	8001d66 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b0f      	cmp	r3, #15
 8001d4a:	d809      	bhi.n	8001d60 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	f04f 30ff 	mov.w	r0, #4294967295
 8001d54:	f000 ffdd 	bl	8002d12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d58:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <HAL_InitTick+0x74>)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	e007      	b.n	8001d70 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	73fb      	strb	r3, [r7, #15]
 8001d64:	e004      	b.n	8001d70 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	73fb      	strb	r3, [r7, #15]
 8001d6a:	e001      	b.n	8001d70 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000008 	.word	0x20000008
 8001d80:	20000000 	.word	0x20000000
 8001d84:	20000004 	.word	0x20000004

08001d88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <HAL_IncTick+0x20>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	461a      	mov	r2, r3
 8001d92:	4b06      	ldr	r3, [pc, #24]	; (8001dac <HAL_IncTick+0x24>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4413      	add	r3, r2
 8001d98:	4a04      	ldr	r2, [pc, #16]	; (8001dac <HAL_IncTick+0x24>)
 8001d9a:	6013      	str	r3, [r2, #0]
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	20000008 	.word	0x20000008
 8001dac:	20000440 	.word	0x20000440

08001db0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  return uwTick;
 8001db4:	4b03      	ldr	r3, [pc, #12]	; (8001dc4 <HAL_GetTick+0x14>)
 8001db6:	681b      	ldr	r3, [r3, #0]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	20000440 	.word	0x20000440

08001dc8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	609a      	str	r2, [r3, #8]
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	609a      	str	r2, [r3, #8]
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b087      	sub	sp, #28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
 8001e3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	3360      	adds	r3, #96	; 0x60
 8001e42:	461a      	mov	r2, r3
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <LL_ADC_SetOffset+0x44>)
 8001e52:	4013      	ands	r3, r2
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e68:	bf00      	nop
 8001e6a:	371c      	adds	r7, #28
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	03fff000 	.word	0x03fff000

08001e78 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	3360      	adds	r3, #96	; 0x60
 8001e86:	461a      	mov	r2, r3
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b087      	sub	sp, #28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	3360      	adds	r3, #96	; 0x60
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001ece:	bf00      	nop
 8001ed0:	371c      	adds	r7, #28
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
 8001ee2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	615a      	str	r2, [r3, #20]
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b087      	sub	sp, #28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	3330      	adds	r3, #48	; 0x30
 8001f10:	461a      	mov	r2, r3
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	0a1b      	lsrs	r3, r3, #8
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	f003 030c 	and.w	r3, r3, #12
 8001f1c:	4413      	add	r3, r2
 8001f1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	f003 031f 	and.w	r3, r3, #31
 8001f2a:	211f      	movs	r1, #31
 8001f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	401a      	ands	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	0e9b      	lsrs	r3, r3, #26
 8001f38:	f003 011f 	and.w	r1, r3, #31
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f003 031f 	and.w	r3, r3, #31
 8001f42:	fa01 f303 	lsl.w	r3, r1, r3
 8001f46:	431a      	orrs	r2, r3
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f4c:	bf00      	nop
 8001f4e:	371c      	adds	r7, #28
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b087      	sub	sp, #28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	3314      	adds	r3, #20
 8001f68:	461a      	mov	r2, r3
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	0e5b      	lsrs	r3, r3, #25
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	4413      	add	r3, r2
 8001f76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	0d1b      	lsrs	r3, r3, #20
 8001f80:	f003 031f 	and.w	r3, r3, #31
 8001f84:	2107      	movs	r1, #7
 8001f86:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	401a      	ands	r2, r3
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	0d1b      	lsrs	r3, r3, #20
 8001f92:	f003 031f 	and.w	r3, r3, #31
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001fa2:	bf00      	nop
 8001fa4:	371c      	adds	r7, #28
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	401a      	ands	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f003 0318 	and.w	r3, r3, #24
 8001fd2:	4908      	ldr	r1, [pc, #32]	; (8001ff4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001fd4:	40d9      	lsrs	r1, r3
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	400b      	ands	r3, r1
 8001fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001fe6:	bf00      	nop
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	0007ffff 	.word	0x0007ffff

08001ff8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002008:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6093      	str	r3, [r2, #8]
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800202c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002030:	d101      	bne.n	8002036 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002032:	2301      	movs	r3, #1
 8002034:	e000      	b.n	8002038 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002054:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002058:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002080:	d101      	bne.n	8002086 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002082:	2301      	movs	r3, #1
 8002084:	e000      	b.n	8002088 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d101      	bne.n	80020ac <LL_ADC_IsEnabled+0x18>
 80020a8:	2301      	movs	r3, #1
 80020aa:	e000      	b.n	80020ae <LL_ADC_IsEnabled+0x1a>
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 0304 	and.w	r3, r3, #4
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	d101      	bne.n	80020d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80020ce:	2301      	movs	r3, #1
 80020d0:	e000      	b.n	80020d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 0308 	and.w	r3, r3, #8
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	d101      	bne.n	80020f8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020f4:	2301      	movs	r3, #1
 80020f6:	e000      	b.n	80020fa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
	...

08002108 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b088      	sub	sp, #32
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002114:	2300      	movs	r3, #0
 8002116:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e12f      	b.n	8002382 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212c:	2b00      	cmp	r3, #0
 800212e:	d109      	bne.n	8002144 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7ff fad5 	bl	80016e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff ff67 	bl	800201c <LL_ADC_IsDeepPowerDownEnabled>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d004      	beq.n	800215e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ff4d 	bl	8001ff8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff ff82 	bl	800206c <LL_ADC_IsInternalRegulatorEnabled>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d115      	bne.n	800219a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff ff66 	bl	8002044 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002178:	4b84      	ldr	r3, [pc, #528]	; (800238c <HAL_ADC_Init+0x284>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	099b      	lsrs	r3, r3, #6
 800217e:	4a84      	ldr	r2, [pc, #528]	; (8002390 <HAL_ADC_Init+0x288>)
 8002180:	fba2 2303 	umull	r2, r3, r2, r3
 8002184:	099b      	lsrs	r3, r3, #6
 8002186:	3301      	adds	r3, #1
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800218c:	e002      	b.n	8002194 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	3b01      	subs	r3, #1
 8002192:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f9      	bne.n	800218e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff ff64 	bl	800206c <LL_ADC_IsInternalRegulatorEnabled>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10d      	bne.n	80021c6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ae:	f043 0210 	orr.w	r2, r3, #16
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ba:	f043 0201 	orr.w	r2, r3, #1
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff ff75 	bl	80020ba <LL_ADC_REG_IsConversionOngoing>
 80021d0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d6:	f003 0310 	and.w	r3, r3, #16
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f040 80c8 	bne.w	8002370 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f040 80c4 	bne.w	8002370 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80021f0:	f043 0202 	orr.w	r2, r3, #2
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff ff49 	bl	8002094 <LL_ADC_IsEnabled>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d10b      	bne.n	8002220 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002208:	4862      	ldr	r0, [pc, #392]	; (8002394 <HAL_ADC_Init+0x28c>)
 800220a:	f7ff ff43 	bl	8002094 <LL_ADC_IsEnabled>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d105      	bne.n	8002220 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	4619      	mov	r1, r3
 800221a:	485f      	ldr	r0, [pc, #380]	; (8002398 <HAL_ADC_Init+0x290>)
 800221c:	f7ff fdd4 	bl	8001dc8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	7e5b      	ldrb	r3, [r3, #25]
 8002224:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800222a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002230:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002236:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800223e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002240:	4313      	orrs	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 3020 	ldrb.w	r3, [r3, #32]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d106      	bne.n	800225c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	3b01      	subs	r3, #1
 8002254:	045b      	lsls	r3, r3, #17
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4313      	orrs	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002260:	2b00      	cmp	r3, #0
 8002262:	d009      	beq.n	8002278 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002268:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002270:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4313      	orrs	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	4b47      	ldr	r3, [pc, #284]	; (800239c <HAL_ADC_Init+0x294>)
 8002280:	4013      	ands	r3, r2
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	6812      	ldr	r2, [r2, #0]
 8002286:	69b9      	ldr	r1, [r7, #24]
 8002288:	430b      	orrs	r3, r1
 800228a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff ff12 	bl	80020ba <LL_ADC_REG_IsConversionOngoing>
 8002296:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff ff1f 	bl	80020e0 <LL_ADC_INJ_IsConversionOngoing>
 80022a2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d140      	bne.n	800232c <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d13d      	bne.n	800232c <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	7e1b      	ldrb	r3, [r3, #24]
 80022b8:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80022ba:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022c2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022d2:	f023 0306 	bic.w	r3, r3, #6
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6812      	ldr	r2, [r2, #0]
 80022da:	69b9      	ldr	r1, [r7, #24]
 80022dc:	430b      	orrs	r3, r1
 80022de:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d118      	bne.n	800231c <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80022f4:	f023 0304 	bic.w	r3, r3, #4
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002300:	4311      	orrs	r1, r2
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002306:	4311      	orrs	r1, r2
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800230c:	430a      	orrs	r2, r1
 800230e:	431a      	orrs	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f042 0201 	orr.w	r2, r2, #1
 8002318:	611a      	str	r2, [r3, #16]
 800231a:	e007      	b.n	800232c <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0201 	bic.w	r2, r2, #1
 800232a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d10c      	bne.n	800234e <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	f023 010f 	bic.w	r1, r3, #15
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	1e5a      	subs	r2, r3, #1
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	631a      	str	r2, [r3, #48]	; 0x30
 800234c:	e007      	b.n	800235e <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 020f 	bic.w	r2, r2, #15
 800235c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002362:	f023 0303 	bic.w	r3, r3, #3
 8002366:	f043 0201 	orr.w	r2, r3, #1
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	659a      	str	r2, [r3, #88]	; 0x58
 800236e:	e007      	b.n	8002380 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002374:	f043 0210 	orr.w	r2, r3, #16
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002380:	7ffb      	ldrb	r3, [r7, #31]
}
 8002382:	4618      	mov	r0, r3
 8002384:	3720      	adds	r7, #32
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20000000 	.word	0x20000000
 8002390:	053e2d63 	.word	0x053e2d63
 8002394:	50040000 	.word	0x50040000
 8002398:	50040300 	.word	0x50040300
 800239c:	fff0c007 	.word	0xfff0c007

080023a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b0b6      	sub	sp, #216	; 0xd8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023aa:	2300      	movs	r3, #0
 80023ac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80023b0:	2300      	movs	r3, #0
 80023b2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d101      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x22>
 80023be:	2302      	movs	r3, #2
 80023c0:	e3d5      	b.n	8002b6e <HAL_ADC_ConfigChannel+0x7ce>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff fe73 	bl	80020ba <LL_ADC_REG_IsConversionOngoing>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f040 83ba 	bne.w	8002b50 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b05      	cmp	r3, #5
 80023e2:	d824      	bhi.n	800242e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	3b02      	subs	r3, #2
 80023ea:	2b03      	cmp	r3, #3
 80023ec:	d81b      	bhi.n	8002426 <HAL_ADC_ConfigChannel+0x86>
 80023ee:	a201      	add	r2, pc, #4	; (adr r2, 80023f4 <HAL_ADC_ConfigChannel+0x54>)
 80023f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f4:	08002405 	.word	0x08002405
 80023f8:	0800240d 	.word	0x0800240d
 80023fc:	08002415 	.word	0x08002415
 8002400:	0800241d 	.word	0x0800241d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	220c      	movs	r2, #12
 8002408:	605a      	str	r2, [r3, #4]
          break;
 800240a:	e011      	b.n	8002430 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	2212      	movs	r2, #18
 8002410:	605a      	str	r2, [r3, #4]
          break;
 8002412:	e00d      	b.n	8002430 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	2218      	movs	r2, #24
 8002418:	605a      	str	r2, [r3, #4]
          break;
 800241a:	e009      	b.n	8002430 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002422:	605a      	str	r2, [r3, #4]
          break;
 8002424:	e004      	b.n	8002430 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	2206      	movs	r2, #6
 800242a:	605a      	str	r2, [r3, #4]
          break;
 800242c:	e000      	b.n	8002430 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800242e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6818      	ldr	r0, [r3, #0]
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	6859      	ldr	r1, [r3, #4]
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	461a      	mov	r2, r3
 800243e:	f7ff fd5f 	bl	8001f00 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff fe37 	bl	80020ba <LL_ADC_REG_IsConversionOngoing>
 800244c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff fe43 	bl	80020e0 <LL_ADC_INJ_IsConversionOngoing>
 800245a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800245e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002462:	2b00      	cmp	r3, #0
 8002464:	f040 81c1 	bne.w	80027ea <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002468:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800246c:	2b00      	cmp	r3, #0
 800246e:	f040 81bc 	bne.w	80027ea <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800247a:	d10f      	bne.n	800249c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6818      	ldr	r0, [r3, #0]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2200      	movs	r2, #0
 8002486:	4619      	mov	r1, r3
 8002488:	f7ff fd66 	bl	8001f58 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff fd20 	bl	8001eda <LL_ADC_SetSamplingTimeCommonConfig>
 800249a:	e00e      	b.n	80024ba <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6818      	ldr	r0, [r3, #0]
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	6819      	ldr	r1, [r3, #0]
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	461a      	mov	r2, r3
 80024aa:	f7ff fd55 	bl	8001f58 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2100      	movs	r1, #0
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff fd10 	bl	8001eda <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	695a      	ldr	r2, [r3, #20]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	08db      	lsrs	r3, r3, #3
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d00a      	beq.n	80024f2 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6818      	ldr	r0, [r3, #0]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	6919      	ldr	r1, [r3, #16]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80024ec:	f7ff fca0 	bl	8001e30 <LL_ADC_SetOffset>
 80024f0:	e17b      	b.n	80027ea <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2100      	movs	r1, #0
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff fcbd 	bl	8001e78 <LL_ADC_GetOffsetChannel>
 80024fe:	4603      	mov	r3, r0
 8002500:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10a      	bne.n	800251e <HAL_ADC_ConfigChannel+0x17e>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2100      	movs	r1, #0
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff fcb2 	bl	8001e78 <LL_ADC_GetOffsetChannel>
 8002514:	4603      	mov	r3, r0
 8002516:	0e9b      	lsrs	r3, r3, #26
 8002518:	f003 021f 	and.w	r2, r3, #31
 800251c:	e01e      	b.n	800255c <HAL_ADC_ConfigChannel+0x1bc>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2100      	movs	r1, #0
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff fca7 	bl	8001e78 <LL_ADC_GetOffsetChannel>
 800252a:	4603      	mov	r3, r0
 800252c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002530:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002534:	fa93 f3a3 	rbit	r3, r3
 8002538:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800253c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002540:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002544:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 800254c:	2320      	movs	r3, #32
 800254e:	e004      	b.n	800255a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002550:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002554:	fab3 f383 	clz	r3, r3
 8002558:	b2db      	uxtb	r3, r3
 800255a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002564:	2b00      	cmp	r3, #0
 8002566:	d105      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x1d4>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	0e9b      	lsrs	r3, r3, #26
 800256e:	f003 031f 	and.w	r3, r3, #31
 8002572:	e018      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x206>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002580:	fa93 f3a3 	rbit	r3, r3
 8002584:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002588:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800258c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002590:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002598:	2320      	movs	r3, #32
 800259a:	e004      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 800259c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80025a0:	fab3 f383 	clz	r3, r3
 80025a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d106      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2200      	movs	r2, #0
 80025b0:	2100      	movs	r1, #0
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff fc76 	bl	8001ea4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2101      	movs	r1, #1
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff fc5a 	bl	8001e78 <LL_ADC_GetOffsetChannel>
 80025c4:	4603      	mov	r3, r0
 80025c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10a      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x244>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2101      	movs	r1, #1
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff fc4f 	bl	8001e78 <LL_ADC_GetOffsetChannel>
 80025da:	4603      	mov	r3, r0
 80025dc:	0e9b      	lsrs	r3, r3, #26
 80025de:	f003 021f 	and.w	r2, r3, #31
 80025e2:	e01e      	b.n	8002622 <HAL_ADC_ConfigChannel+0x282>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2101      	movs	r1, #1
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff fc44 	bl	8001e78 <LL_ADC_GetOffsetChannel>
 80025f0:	4603      	mov	r3, r0
 80025f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80025fa:	fa93 f3a3 	rbit	r3, r3
 80025fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002602:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002606:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800260a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002612:	2320      	movs	r3, #32
 8002614:	e004      	b.n	8002620 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002616:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800261a:	fab3 f383 	clz	r3, r3
 800261e:	b2db      	uxtb	r3, r3
 8002620:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800262a:	2b00      	cmp	r3, #0
 800262c:	d105      	bne.n	800263a <HAL_ADC_ConfigChannel+0x29a>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	0e9b      	lsrs	r3, r3, #26
 8002634:	f003 031f 	and.w	r3, r3, #31
 8002638:	e018      	b.n	800266c <HAL_ADC_ConfigChannel+0x2cc>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002642:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002646:	fa93 f3a3 	rbit	r3, r3
 800264a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800264e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002652:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002656:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800265e:	2320      	movs	r3, #32
 8002660:	e004      	b.n	800266c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8002662:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002666:	fab3 f383 	clz	r3, r3
 800266a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800266c:	429a      	cmp	r2, r3
 800266e:	d106      	bne.n	800267e <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2200      	movs	r2, #0
 8002676:	2101      	movs	r1, #1
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff fc13 	bl	8001ea4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2102      	movs	r1, #2
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff fbf7 	bl	8001e78 <LL_ADC_GetOffsetChannel>
 800268a:	4603      	mov	r3, r0
 800268c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10a      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x30a>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2102      	movs	r1, #2
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff fbec 	bl	8001e78 <LL_ADC_GetOffsetChannel>
 80026a0:	4603      	mov	r3, r0
 80026a2:	0e9b      	lsrs	r3, r3, #26
 80026a4:	f003 021f 	and.w	r2, r3, #31
 80026a8:	e01e      	b.n	80026e8 <HAL_ADC_ConfigChannel+0x348>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2102      	movs	r1, #2
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff fbe1 	bl	8001e78 <LL_ADC_GetOffsetChannel>
 80026b6:	4603      	mov	r3, r0
 80026b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026c0:	fa93 f3a3 	rbit	r3, r3
 80026c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80026c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80026d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80026d8:	2320      	movs	r3, #32
 80026da:	e004      	b.n	80026e6 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80026dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026e0:	fab3 f383 	clz	r3, r3
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d105      	bne.n	8002700 <HAL_ADC_ConfigChannel+0x360>
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	0e9b      	lsrs	r3, r3, #26
 80026fa:	f003 031f 	and.w	r3, r3, #31
 80026fe:	e016      	b.n	800272e <HAL_ADC_ConfigChannel+0x38e>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002708:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800270c:	fa93 f3a3 	rbit	r3, r3
 8002710:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002712:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002714:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002718:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002720:	2320      	movs	r3, #32
 8002722:	e004      	b.n	800272e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002724:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002728:	fab3 f383 	clz	r3, r3
 800272c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800272e:	429a      	cmp	r2, r3
 8002730:	d106      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2200      	movs	r2, #0
 8002738:	2102      	movs	r1, #2
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff fbb2 	bl	8001ea4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2103      	movs	r1, #3
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff fb96 	bl	8001e78 <LL_ADC_GetOffsetChannel>
 800274c:	4603      	mov	r3, r0
 800274e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10a      	bne.n	800276c <HAL_ADC_ConfigChannel+0x3cc>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2103      	movs	r1, #3
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff fb8b 	bl	8001e78 <LL_ADC_GetOffsetChannel>
 8002762:	4603      	mov	r3, r0
 8002764:	0e9b      	lsrs	r3, r3, #26
 8002766:	f003 021f 	and.w	r2, r3, #31
 800276a:	e017      	b.n	800279c <HAL_ADC_ConfigChannel+0x3fc>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2103      	movs	r1, #3
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff fb80 	bl	8001e78 <LL_ADC_GetOffsetChannel>
 8002778:	4603      	mov	r3, r0
 800277a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800277e:	fa93 f3a3 	rbit	r3, r3
 8002782:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002784:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002786:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002788:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800278e:	2320      	movs	r3, #32
 8002790:	e003      	b.n	800279a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002792:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002794:	fab3 f383 	clz	r3, r3
 8002798:	b2db      	uxtb	r3, r3
 800279a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d105      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x414>
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	0e9b      	lsrs	r3, r3, #26
 80027ae:	f003 031f 	and.w	r3, r3, #31
 80027b2:	e011      	b.n	80027d8 <HAL_ADC_ConfigChannel+0x438>
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027bc:	fa93 f3a3 	rbit	r3, r3
 80027c0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80027c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80027c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80027cc:	2320      	movs	r3, #32
 80027ce:	e003      	b.n	80027d8 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80027d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027d2:	fab3 f383 	clz	r3, r3
 80027d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027d8:	429a      	cmp	r2, r3
 80027da:	d106      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2200      	movs	r2, #0
 80027e2:	2103      	movs	r1, #3
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff fb5d 	bl	8001ea4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff fc50 	bl	8002094 <LL_ADC_IsEnabled>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f040 8140 	bne.w	8002a7c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6818      	ldr	r0, [r3, #0]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	6819      	ldr	r1, [r3, #0]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	461a      	mov	r2, r3
 800280a:	f7ff fbd1 	bl	8001fb0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	4a8f      	ldr	r2, [pc, #572]	; (8002a50 <HAL_ADC_ConfigChannel+0x6b0>)
 8002814:	4293      	cmp	r3, r2
 8002816:	f040 8131 	bne.w	8002a7c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10b      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x4a2>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	0e9b      	lsrs	r3, r3, #26
 8002830:	3301      	adds	r3, #1
 8002832:	f003 031f 	and.w	r3, r3, #31
 8002836:	2b09      	cmp	r3, #9
 8002838:	bf94      	ite	ls
 800283a:	2301      	movls	r3, #1
 800283c:	2300      	movhi	r3, #0
 800283e:	b2db      	uxtb	r3, r3
 8002840:	e019      	b.n	8002876 <HAL_ADC_ConfigChannel+0x4d6>
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002848:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800284a:	fa93 f3a3 	rbit	r3, r3
 800284e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002850:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002852:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002854:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800285a:	2320      	movs	r3, #32
 800285c:	e003      	b.n	8002866 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800285e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002860:	fab3 f383 	clz	r3, r3
 8002864:	b2db      	uxtb	r3, r3
 8002866:	3301      	adds	r3, #1
 8002868:	f003 031f 	and.w	r3, r3, #31
 800286c:	2b09      	cmp	r3, #9
 800286e:	bf94      	ite	ls
 8002870:	2301      	movls	r3, #1
 8002872:	2300      	movhi	r3, #0
 8002874:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002876:	2b00      	cmp	r3, #0
 8002878:	d079      	beq.n	800296e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002882:	2b00      	cmp	r3, #0
 8002884:	d107      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x4f6>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	0e9b      	lsrs	r3, r3, #26
 800288c:	3301      	adds	r3, #1
 800288e:	069b      	lsls	r3, r3, #26
 8002890:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002894:	e015      	b.n	80028c2 <HAL_ADC_ConfigChannel+0x522>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800289e:	fa93 f3a3 	rbit	r3, r3
 80028a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80028a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028a6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80028a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80028ae:	2320      	movs	r3, #32
 80028b0:	e003      	b.n	80028ba <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80028b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028b4:	fab3 f383 	clz	r3, r3
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	3301      	adds	r3, #1
 80028bc:	069b      	lsls	r3, r3, #26
 80028be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d109      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x542>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	0e9b      	lsrs	r3, r3, #26
 80028d4:	3301      	adds	r3, #1
 80028d6:	f003 031f 	and.w	r3, r3, #31
 80028da:	2101      	movs	r1, #1
 80028dc:	fa01 f303 	lsl.w	r3, r1, r3
 80028e0:	e017      	b.n	8002912 <HAL_ADC_ConfigChannel+0x572>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028ea:	fa93 f3a3 	rbit	r3, r3
 80028ee:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80028f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028f2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80028f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80028fa:	2320      	movs	r3, #32
 80028fc:	e003      	b.n	8002906 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80028fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002900:	fab3 f383 	clz	r3, r3
 8002904:	b2db      	uxtb	r3, r3
 8002906:	3301      	adds	r3, #1
 8002908:	f003 031f 	and.w	r3, r3, #31
 800290c:	2101      	movs	r1, #1
 800290e:	fa01 f303 	lsl.w	r3, r1, r3
 8002912:	ea42 0103 	orr.w	r1, r2, r3
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10a      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x598>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	0e9b      	lsrs	r3, r3, #26
 8002928:	3301      	adds	r3, #1
 800292a:	f003 021f 	and.w	r2, r3, #31
 800292e:	4613      	mov	r3, r2
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	4413      	add	r3, r2
 8002934:	051b      	lsls	r3, r3, #20
 8002936:	e018      	b.n	800296a <HAL_ADC_ConfigChannel+0x5ca>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002940:	fa93 f3a3 	rbit	r3, r3
 8002944:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002948:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800294a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002950:	2320      	movs	r3, #32
 8002952:	e003      	b.n	800295c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002956:	fab3 f383 	clz	r3, r3
 800295a:	b2db      	uxtb	r3, r3
 800295c:	3301      	adds	r3, #1
 800295e:	f003 021f 	and.w	r2, r3, #31
 8002962:	4613      	mov	r3, r2
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	4413      	add	r3, r2
 8002968:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800296a:	430b      	orrs	r3, r1
 800296c:	e081      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002976:	2b00      	cmp	r3, #0
 8002978:	d107      	bne.n	800298a <HAL_ADC_ConfigChannel+0x5ea>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	0e9b      	lsrs	r3, r3, #26
 8002980:	3301      	adds	r3, #1
 8002982:	069b      	lsls	r3, r3, #26
 8002984:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002988:	e015      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x616>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002992:	fa93 f3a3 	rbit	r3, r3
 8002996:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800299a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800299c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80029a2:	2320      	movs	r3, #32
 80029a4:	e003      	b.n	80029ae <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80029a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a8:	fab3 f383 	clz	r3, r3
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	3301      	adds	r3, #1
 80029b0:	069b      	lsls	r3, r3, #26
 80029b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d109      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x636>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	0e9b      	lsrs	r3, r3, #26
 80029c8:	3301      	adds	r3, #1
 80029ca:	f003 031f 	and.w	r3, r3, #31
 80029ce:	2101      	movs	r1, #1
 80029d0:	fa01 f303 	lsl.w	r3, r1, r3
 80029d4:	e017      	b.n	8002a06 <HAL_ADC_ConfigChannel+0x666>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	fa93 f3a3 	rbit	r3, r3
 80029e2:	61fb      	str	r3, [r7, #28]
  return result;
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80029ee:	2320      	movs	r3, #32
 80029f0:	e003      	b.n	80029fa <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	fab3 f383 	clz	r3, r3
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	3301      	adds	r3, #1
 80029fc:	f003 031f 	and.w	r3, r3, #31
 8002a00:	2101      	movs	r1, #1
 8002a02:	fa01 f303 	lsl.w	r3, r1, r3
 8002a06:	ea42 0103 	orr.w	r1, r2, r3
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10d      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x692>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	0e9b      	lsrs	r3, r3, #26
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	f003 021f 	and.w	r2, r3, #31
 8002a22:	4613      	mov	r3, r2
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	4413      	add	r3, r2
 8002a28:	3b1e      	subs	r3, #30
 8002a2a:	051b      	lsls	r3, r3, #20
 8002a2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a30:	e01e      	b.n	8002a70 <HAL_ADC_ConfigChannel+0x6d0>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	fa93 f3a3 	rbit	r3, r3
 8002a3e:	613b      	str	r3, [r7, #16]
  return result;
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d104      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002a4a:	2320      	movs	r3, #32
 8002a4c:	e006      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x6bc>
 8002a4e:	bf00      	nop
 8002a50:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	fab3 f383 	clz	r3, r3
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	f003 021f 	and.w	r2, r3, #31
 8002a62:	4613      	mov	r3, r2
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	4413      	add	r3, r2
 8002a68:	3b1e      	subs	r3, #30
 8002a6a:	051b      	lsls	r3, r3, #20
 8002a6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a70:	430b      	orrs	r3, r1
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	6892      	ldr	r2, [r2, #8]
 8002a76:	4619      	mov	r1, r3
 8002a78:	f7ff fa6e 	bl	8001f58 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4b3d      	ldr	r3, [pc, #244]	; (8002b78 <HAL_ADC_ConfigChannel+0x7d8>)
 8002a82:	4013      	ands	r3, r2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d06c      	beq.n	8002b62 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a88:	483c      	ldr	r0, [pc, #240]	; (8002b7c <HAL_ADC_ConfigChannel+0x7dc>)
 8002a8a:	f7ff f9c3 	bl	8001e14 <LL_ADC_GetCommonPathInternalCh>
 8002a8e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a3a      	ldr	r2, [pc, #232]	; (8002b80 <HAL_ADC_ConfigChannel+0x7e0>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d127      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002aa0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d121      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a35      	ldr	r2, [pc, #212]	; (8002b84 <HAL_ADC_ConfigChannel+0x7e4>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d157      	bne.n	8002b62 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ab2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ab6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002aba:	4619      	mov	r1, r3
 8002abc:	482f      	ldr	r0, [pc, #188]	; (8002b7c <HAL_ADC_ConfigChannel+0x7dc>)
 8002abe:	f7ff f996 	bl	8001dee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ac2:	4b31      	ldr	r3, [pc, #196]	; (8002b88 <HAL_ADC_ConfigChannel+0x7e8>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	099b      	lsrs	r3, r3, #6
 8002ac8:	4a30      	ldr	r2, [pc, #192]	; (8002b8c <HAL_ADC_ConfigChannel+0x7ec>)
 8002aca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ace:	099b      	lsrs	r3, r3, #6
 8002ad0:	1c5a      	adds	r2, r3, #1
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	4413      	add	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002adc:	e002      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1f9      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002aea:	e03a      	b.n	8002b62 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a27      	ldr	r2, [pc, #156]	; (8002b90 <HAL_ADC_ConfigChannel+0x7f0>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d113      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x77e>
 8002af6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002afa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10d      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a1f      	ldr	r2, [pc, #124]	; (8002b84 <HAL_ADC_ConfigChannel+0x7e4>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d12a      	bne.n	8002b62 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b14:	4619      	mov	r1, r3
 8002b16:	4819      	ldr	r0, [pc, #100]	; (8002b7c <HAL_ADC_ConfigChannel+0x7dc>)
 8002b18:	f7ff f969 	bl	8001dee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b1c:	e021      	b.n	8002b62 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a1c      	ldr	r2, [pc, #112]	; (8002b94 <HAL_ADC_ConfigChannel+0x7f4>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d11c      	bne.n	8002b62 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d116      	bne.n	8002b62 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a12      	ldr	r2, [pc, #72]	; (8002b84 <HAL_ADC_ConfigChannel+0x7e4>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d111      	bne.n	8002b62 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b46:	4619      	mov	r1, r3
 8002b48:	480c      	ldr	r0, [pc, #48]	; (8002b7c <HAL_ADC_ConfigChannel+0x7dc>)
 8002b4a:	f7ff f950 	bl	8001dee <LL_ADC_SetCommonPathInternalCh>
 8002b4e:	e008      	b.n	8002b62 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b54:	f043 0220 	orr.w	r2, r3, #32
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002b6a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	37d8      	adds	r7, #216	; 0xd8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	80080000 	.word	0x80080000
 8002b7c:	50040300 	.word	0x50040300
 8002b80:	c7520000 	.word	0xc7520000
 8002b84:	50040000 	.word	0x50040000
 8002b88:	20000000 	.word	0x20000000
 8002b8c:	053e2d63 	.word	0x053e2d63
 8002b90:	cb840000 	.word	0xcb840000
 8002b94:	80000001 	.word	0x80000001

08002b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ba8:	4b0c      	ldr	r3, [pc, #48]	; (8002bdc <__NVIC_SetPriorityGrouping+0x44>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bca:	4a04      	ldr	r2, [pc, #16]	; (8002bdc <__NVIC_SetPriorityGrouping+0x44>)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	60d3      	str	r3, [r2, #12]
}
 8002bd0:	bf00      	nop
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	e000ed00 	.word	0xe000ed00

08002be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002be4:	4b04      	ldr	r3, [pc, #16]	; (8002bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	0a1b      	lsrs	r3, r3, #8
 8002bea:	f003 0307 	and.w	r3, r3, #7
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	e000ed00 	.word	0xe000ed00

08002bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	4603      	mov	r3, r0
 8002c04:	6039      	str	r1, [r7, #0]
 8002c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	db0a      	blt.n	8002c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	490c      	ldr	r1, [pc, #48]	; (8002c48 <__NVIC_SetPriority+0x4c>)
 8002c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1a:	0112      	lsls	r2, r2, #4
 8002c1c:	b2d2      	uxtb	r2, r2
 8002c1e:	440b      	add	r3, r1
 8002c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c24:	e00a      	b.n	8002c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	4908      	ldr	r1, [pc, #32]	; (8002c4c <__NVIC_SetPriority+0x50>)
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	3b04      	subs	r3, #4
 8002c34:	0112      	lsls	r2, r2, #4
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	440b      	add	r3, r1
 8002c3a:	761a      	strb	r2, [r3, #24]
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	e000e100 	.word	0xe000e100
 8002c4c:	e000ed00 	.word	0xe000ed00

08002c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b089      	sub	sp, #36	; 0x24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	f1c3 0307 	rsb	r3, r3, #7
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	bf28      	it	cs
 8002c6e:	2304      	movcs	r3, #4
 8002c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	3304      	adds	r3, #4
 8002c76:	2b06      	cmp	r3, #6
 8002c78:	d902      	bls.n	8002c80 <NVIC_EncodePriority+0x30>
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	3b03      	subs	r3, #3
 8002c7e:	e000      	b.n	8002c82 <NVIC_EncodePriority+0x32>
 8002c80:	2300      	movs	r3, #0
 8002c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c84:	f04f 32ff 	mov.w	r2, #4294967295
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8e:	43da      	mvns	r2, r3
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	401a      	ands	r2, r3
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c98:	f04f 31ff 	mov.w	r1, #4294967295
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca2:	43d9      	mvns	r1, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca8:	4313      	orrs	r3, r2
         );
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3724      	adds	r7, #36	; 0x24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
	...

08002cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cc8:	d301      	bcc.n	8002cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e00f      	b.n	8002cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cce:	4a0a      	ldr	r2, [pc, #40]	; (8002cf8 <SysTick_Config+0x40>)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cd6:	210f      	movs	r1, #15
 8002cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cdc:	f7ff ff8e 	bl	8002bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ce0:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <SysTick_Config+0x40>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ce6:	4b04      	ldr	r3, [pc, #16]	; (8002cf8 <SysTick_Config+0x40>)
 8002ce8:	2207      	movs	r2, #7
 8002cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	e000e010 	.word	0xe000e010

08002cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f7ff ff47 	bl	8002b98 <__NVIC_SetPriorityGrouping>
}
 8002d0a:	bf00      	nop
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b086      	sub	sp, #24
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	4603      	mov	r3, r0
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	607a      	str	r2, [r7, #4]
 8002d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d20:	2300      	movs	r3, #0
 8002d22:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d24:	f7ff ff5c 	bl	8002be0 <__NVIC_GetPriorityGrouping>
 8002d28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	68b9      	ldr	r1, [r7, #8]
 8002d2e:	6978      	ldr	r0, [r7, #20]
 8002d30:	f7ff ff8e 	bl	8002c50 <NVIC_EncodePriority>
 8002d34:	4602      	mov	r2, r0
 8002d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff ff5d 	bl	8002bfc <__NVIC_SetPriority>
}
 8002d42:	bf00      	nop
 8002d44:	3718      	adds	r7, #24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b082      	sub	sp, #8
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7ff ffb0 	bl	8002cb8 <SysTick_Config>
 8002d58:	4603      	mov	r3, r0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
	...

08002d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b087      	sub	sp, #28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d72:	e166      	b.n	8003042 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	2101      	movs	r1, #1
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d80:	4013      	ands	r3, r2
 8002d82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 8158 	beq.w	800303c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f003 0303 	and.w	r3, r3, #3
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d005      	beq.n	8002da4 <HAL_GPIO_Init+0x40>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f003 0303 	and.w	r3, r3, #3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d130      	bne.n	8002e06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	2203      	movs	r2, #3
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	4013      	ands	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	68da      	ldr	r2, [r3, #12]
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dda:	2201      	movs	r2, #1
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	43db      	mvns	r3, r3
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	4013      	ands	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	091b      	lsrs	r3, r3, #4
 8002df0:	f003 0201 	and.w	r2, r3, #1
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	2b03      	cmp	r3, #3
 8002e10:	d017      	beq.n	8002e42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	2203      	movs	r2, #3
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	43db      	mvns	r3, r3
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	4013      	ands	r3, r2
 8002e28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d123      	bne.n	8002e96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	08da      	lsrs	r2, r3, #3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	3208      	adds	r2, #8
 8002e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	220f      	movs	r2, #15
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	691a      	ldr	r2, [r3, #16]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	08da      	lsrs	r2, r3, #3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3208      	adds	r2, #8
 8002e90:	6939      	ldr	r1, [r7, #16]
 8002e92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	2203      	movs	r2, #3
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f003 0203 	and.w	r2, r3, #3
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 80b2 	beq.w	800303c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ed8:	4b61      	ldr	r3, [pc, #388]	; (8003060 <HAL_GPIO_Init+0x2fc>)
 8002eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002edc:	4a60      	ldr	r2, [pc, #384]	; (8003060 <HAL_GPIO_Init+0x2fc>)
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	6613      	str	r3, [r2, #96]	; 0x60
 8002ee4:	4b5e      	ldr	r3, [pc, #376]	; (8003060 <HAL_GPIO_Init+0x2fc>)
 8002ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	60bb      	str	r3, [r7, #8]
 8002eee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ef0:	4a5c      	ldr	r2, [pc, #368]	; (8003064 <HAL_GPIO_Init+0x300>)
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	089b      	lsrs	r3, r3, #2
 8002ef6:	3302      	adds	r3, #2
 8002ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002efc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	f003 0303 	and.w	r3, r3, #3
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	220f      	movs	r2, #15
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	4013      	ands	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f1a:	d02b      	beq.n	8002f74 <HAL_GPIO_Init+0x210>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a52      	ldr	r2, [pc, #328]	; (8003068 <HAL_GPIO_Init+0x304>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d025      	beq.n	8002f70 <HAL_GPIO_Init+0x20c>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a51      	ldr	r2, [pc, #324]	; (800306c <HAL_GPIO_Init+0x308>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d01f      	beq.n	8002f6c <HAL_GPIO_Init+0x208>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a50      	ldr	r2, [pc, #320]	; (8003070 <HAL_GPIO_Init+0x30c>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d019      	beq.n	8002f68 <HAL_GPIO_Init+0x204>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a4f      	ldr	r2, [pc, #316]	; (8003074 <HAL_GPIO_Init+0x310>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d013      	beq.n	8002f64 <HAL_GPIO_Init+0x200>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a4e      	ldr	r2, [pc, #312]	; (8003078 <HAL_GPIO_Init+0x314>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d00d      	beq.n	8002f60 <HAL_GPIO_Init+0x1fc>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a4d      	ldr	r2, [pc, #308]	; (800307c <HAL_GPIO_Init+0x318>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d007      	beq.n	8002f5c <HAL_GPIO_Init+0x1f8>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a4c      	ldr	r2, [pc, #304]	; (8003080 <HAL_GPIO_Init+0x31c>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d101      	bne.n	8002f58 <HAL_GPIO_Init+0x1f4>
 8002f54:	2307      	movs	r3, #7
 8002f56:	e00e      	b.n	8002f76 <HAL_GPIO_Init+0x212>
 8002f58:	2308      	movs	r3, #8
 8002f5a:	e00c      	b.n	8002f76 <HAL_GPIO_Init+0x212>
 8002f5c:	2306      	movs	r3, #6
 8002f5e:	e00a      	b.n	8002f76 <HAL_GPIO_Init+0x212>
 8002f60:	2305      	movs	r3, #5
 8002f62:	e008      	b.n	8002f76 <HAL_GPIO_Init+0x212>
 8002f64:	2304      	movs	r3, #4
 8002f66:	e006      	b.n	8002f76 <HAL_GPIO_Init+0x212>
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e004      	b.n	8002f76 <HAL_GPIO_Init+0x212>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e002      	b.n	8002f76 <HAL_GPIO_Init+0x212>
 8002f70:	2301      	movs	r3, #1
 8002f72:	e000      	b.n	8002f76 <HAL_GPIO_Init+0x212>
 8002f74:	2300      	movs	r3, #0
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	f002 0203 	and.w	r2, r2, #3
 8002f7c:	0092      	lsls	r2, r2, #2
 8002f7e:	4093      	lsls	r3, r2
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f86:	4937      	ldr	r1, [pc, #220]	; (8003064 <HAL_GPIO_Init+0x300>)
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	089b      	lsrs	r3, r3, #2
 8002f8c:	3302      	adds	r3, #2
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f94:	4b3b      	ldr	r3, [pc, #236]	; (8003084 <HAL_GPIO_Init+0x320>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002fb8:	4a32      	ldr	r2, [pc, #200]	; (8003084 <HAL_GPIO_Init+0x320>)
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002fbe:	4b31      	ldr	r3, [pc, #196]	; (8003084 <HAL_GPIO_Init+0x320>)
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002fe2:	4a28      	ldr	r2, [pc, #160]	; (8003084 <HAL_GPIO_Init+0x320>)
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002fe8:	4b26      	ldr	r3, [pc, #152]	; (8003084 <HAL_GPIO_Init+0x320>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	4313      	orrs	r3, r2
 800300a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800300c:	4a1d      	ldr	r2, [pc, #116]	; (8003084 <HAL_GPIO_Init+0x320>)
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003012:	4b1c      	ldr	r3, [pc, #112]	; (8003084 <HAL_GPIO_Init+0x320>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	43db      	mvns	r3, r3
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	4013      	ands	r3, r2
 8003020:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4313      	orrs	r3, r2
 8003034:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003036:	4a13      	ldr	r2, [pc, #76]	; (8003084 <HAL_GPIO_Init+0x320>)
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	3301      	adds	r3, #1
 8003040:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	fa22 f303 	lsr.w	r3, r2, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	f47f ae91 	bne.w	8002d74 <HAL_GPIO_Init+0x10>
  }
}
 8003052:	bf00      	nop
 8003054:	bf00      	nop
 8003056:	371c      	adds	r7, #28
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	40021000 	.word	0x40021000
 8003064:	40010000 	.word	0x40010000
 8003068:	48000400 	.word	0x48000400
 800306c:	48000800 	.word	0x48000800
 8003070:	48000c00 	.word	0x48000c00
 8003074:	48001000 	.word	0x48001000
 8003078:	48001400 	.word	0x48001400
 800307c:	48001800 	.word	0x48001800
 8003080:	48001c00 	.word	0x48001c00
 8003084:	40010400 	.word	0x40010400

08003088 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	460b      	mov	r3, r1
 8003092:	807b      	strh	r3, [r7, #2]
 8003094:	4613      	mov	r3, r2
 8003096:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003098:	787b      	ldrb	r3, [r7, #1]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800309e:	887a      	ldrh	r2, [r7, #2]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030a4:	e002      	b.n	80030ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030a6:	887a      	ldrh	r2, [r7, #2]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80030bc:	4b0d      	ldr	r3, [pc, #52]	; (80030f4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030c8:	d102      	bne.n	80030d0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80030ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030ce:	e00b      	b.n	80030e8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80030d0:	4b08      	ldr	r3, [pc, #32]	; (80030f4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80030d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030de:	d102      	bne.n	80030e6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80030e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030e4:	e000      	b.n	80030e8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80030e6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	40007000 	.word	0x40007000

080030f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d141      	bne.n	800318a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003106:	4b4b      	ldr	r3, [pc, #300]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800310e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003112:	d131      	bne.n	8003178 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003114:	4b47      	ldr	r3, [pc, #284]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003116:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800311a:	4a46      	ldr	r2, [pc, #280]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800311c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003120:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003124:	4b43      	ldr	r3, [pc, #268]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800312c:	4a41      	ldr	r2, [pc, #260]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800312e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003132:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003134:	4b40      	ldr	r3, [pc, #256]	; (8003238 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2232      	movs	r2, #50	; 0x32
 800313a:	fb02 f303 	mul.w	r3, r2, r3
 800313e:	4a3f      	ldr	r2, [pc, #252]	; (800323c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003140:	fba2 2303 	umull	r2, r3, r2, r3
 8003144:	0c9b      	lsrs	r3, r3, #18
 8003146:	3301      	adds	r3, #1
 8003148:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800314a:	e002      	b.n	8003152 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	3b01      	subs	r3, #1
 8003150:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003152:	4b38      	ldr	r3, [pc, #224]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800315a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800315e:	d102      	bne.n	8003166 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f2      	bne.n	800314c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003166:	4b33      	ldr	r3, [pc, #204]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800316e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003172:	d158      	bne.n	8003226 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e057      	b.n	8003228 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003178:	4b2e      	ldr	r3, [pc, #184]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800317a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800317e:	4a2d      	ldr	r2, [pc, #180]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003180:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003184:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003188:	e04d      	b.n	8003226 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003190:	d141      	bne.n	8003216 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003192:	4b28      	ldr	r3, [pc, #160]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800319a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800319e:	d131      	bne.n	8003204 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031a0:	4b24      	ldr	r3, [pc, #144]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031a6:	4a23      	ldr	r2, [pc, #140]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031b0:	4b20      	ldr	r3, [pc, #128]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031b8:	4a1e      	ldr	r2, [pc, #120]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80031c0:	4b1d      	ldr	r3, [pc, #116]	; (8003238 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2232      	movs	r2, #50	; 0x32
 80031c6:	fb02 f303 	mul.w	r3, r2, r3
 80031ca:	4a1c      	ldr	r2, [pc, #112]	; (800323c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80031cc:	fba2 2303 	umull	r2, r3, r2, r3
 80031d0:	0c9b      	lsrs	r3, r3, #18
 80031d2:	3301      	adds	r3, #1
 80031d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031d6:	e002      	b.n	80031de <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	3b01      	subs	r3, #1
 80031dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031de:	4b15      	ldr	r3, [pc, #84]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ea:	d102      	bne.n	80031f2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1f2      	bne.n	80031d8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031f2:	4b10      	ldr	r3, [pc, #64]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031fe:	d112      	bne.n	8003226 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e011      	b.n	8003228 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003204:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003206:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800320a:	4a0a      	ldr	r2, [pc, #40]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800320c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003210:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003214:	e007      	b.n	8003226 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003216:	4b07      	ldr	r3, [pc, #28]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800321e:	4a05      	ldr	r2, [pc, #20]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003220:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003224:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	40007000 	.word	0x40007000
 8003238:	20000000 	.word	0x20000000
 800323c:	431bde83 	.word	0x431bde83

08003240 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003244:	4b05      	ldr	r3, [pc, #20]	; (800325c <HAL_PWREx_EnableVddIO2+0x1c>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	4a04      	ldr	r2, [pc, #16]	; (800325c <HAL_PWREx_EnableVddIO2+0x1c>)
 800324a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800324e:	6053      	str	r3, [r2, #4]
}
 8003250:	bf00      	nop
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	40007000 	.word	0x40007000

08003260 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b088      	sub	sp, #32
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d102      	bne.n	8003274 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	f000 bc08 	b.w	8003a84 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003274:	4b96      	ldr	r3, [pc, #600]	; (80034d0 <HAL_RCC_OscConfig+0x270>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 030c 	and.w	r3, r3, #12
 800327c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800327e:	4b94      	ldr	r3, [pc, #592]	; (80034d0 <HAL_RCC_OscConfig+0x270>)
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	f003 0303 	and.w	r3, r3, #3
 8003286:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0310 	and.w	r3, r3, #16
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 80e4 	beq.w	800345e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d007      	beq.n	80032ac <HAL_RCC_OscConfig+0x4c>
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	2b0c      	cmp	r3, #12
 80032a0:	f040 808b 	bne.w	80033ba <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	f040 8087 	bne.w	80033ba <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032ac:	4b88      	ldr	r3, [pc, #544]	; (80034d0 <HAL_RCC_OscConfig+0x270>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d005      	beq.n	80032c4 <HAL_RCC_OscConfig+0x64>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d101      	bne.n	80032c4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e3df      	b.n	8003a84 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a1a      	ldr	r2, [r3, #32]
 80032c8:	4b81      	ldr	r3, [pc, #516]	; (80034d0 <HAL_RCC_OscConfig+0x270>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0308 	and.w	r3, r3, #8
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d004      	beq.n	80032de <HAL_RCC_OscConfig+0x7e>
 80032d4:	4b7e      	ldr	r3, [pc, #504]	; (80034d0 <HAL_RCC_OscConfig+0x270>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032dc:	e005      	b.n	80032ea <HAL_RCC_OscConfig+0x8a>
 80032de:	4b7c      	ldr	r3, [pc, #496]	; (80034d0 <HAL_RCC_OscConfig+0x270>)
 80032e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032e4:	091b      	lsrs	r3, r3, #4
 80032e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d223      	bcs.n	8003336 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 fdcc 	bl	8003e90 <RCC_SetFlashLatencyFromMSIRange>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e3c0      	b.n	8003a84 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003302:	4b73      	ldr	r3, [pc, #460]	; (80034d0 <HAL_RCC_OscConfig+0x270>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a72      	ldr	r2, [pc, #456]	; (80034d0 <HAL_RCC_OscConfig+0x270>)
 8003308:	f043 0308 	orr.w	r3, r3, #8
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	4b70      	ldr	r3, [pc, #448]	; (80034d0 <HAL_RCC_OscConfig+0x270>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	496d      	ldr	r1, [pc, #436]	; (80034d0 <HAL_RCC_OscConfig+0x270>)
 800331c:	4313      	orrs	r3, r2
 800331e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003320:	4b6b      	ldr	r3, [pc, #428]	; (80034d0 <HAL_RCC_OscConfig+0x270>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	021b      	lsls	r3, r3, #8
 800332e:	4968      	ldr	r1, [pc, #416]	; (80034d0 <HAL_RCC_OscConfig+0x270>)
 8003330:	4313      	orrs	r3, r2
 8003332:	604b      	str	r3, [r1, #4]
 8003334:	e025      	b.n	8003382 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003336:	4b66      	ldr	r3, [pc, #408]	; (80034d0 <HAL_RCC_OscConfig+0x270>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a65      	ldr	r2, [pc, #404]	; (80034d0 <HAL_RCC_OscConfig+0x270>)
 800333c:	f043 0308 	orr.w	r3, r3, #8
 8003340:	6013      	str	r3, [r2, #0]
 8003342:	4b63      	ldr	r3, [pc, #396]	; (80034d0 <HAL_RCC_OscConfig+0x270>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	4960      	ldr	r1, [pc, #384]	; (80034d0 <HAL_RCC_OscConfig+0x270>)
 8003350:	4313      	orrs	r3, r2
 8003352:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003354:	4b5e      	ldr	r3, [pc, #376]	; (80034d0 <HAL_RCC_OscConfig+0x270>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	69db      	ldr	r3, [r3, #28]
 8003360:	021b      	lsls	r3, r3, #8
 8003362:	495b      	ldr	r1, [pc, #364]	; (80034d0 <HAL_RCC_OscConfig+0x270>)
 8003364:	4313      	orrs	r3, r2
 8003366:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d109      	bne.n	8003382 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	4618      	mov	r0, r3
 8003374:	f000 fd8c 	bl	8003e90 <RCC_SetFlashLatencyFromMSIRange>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e380      	b.n	8003a84 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003382:	f000 fcc1 	bl	8003d08 <HAL_RCC_GetSysClockFreq>
 8003386:	4602      	mov	r2, r0
 8003388:	4b51      	ldr	r3, [pc, #324]	; (80034d0 <HAL_RCC_OscConfig+0x270>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	091b      	lsrs	r3, r3, #4
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	4950      	ldr	r1, [pc, #320]	; (80034d4 <HAL_RCC_OscConfig+0x274>)
 8003394:	5ccb      	ldrb	r3, [r1, r3]
 8003396:	f003 031f 	and.w	r3, r3, #31
 800339a:	fa22 f303 	lsr.w	r3, r2, r3
 800339e:	4a4e      	ldr	r2, [pc, #312]	; (80034d8 <HAL_RCC_OscConfig+0x278>)
 80033a0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80033a2:	4b4e      	ldr	r3, [pc, #312]	; (80034dc <HAL_RCC_OscConfig+0x27c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fe fcb2 	bl	8001d10 <HAL_InitTick>
 80033ac:	4603      	mov	r3, r0
 80033ae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80033b0:	7bfb      	ldrb	r3, [r7, #15]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d052      	beq.n	800345c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
 80033b8:	e364      	b.n	8003a84 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d032      	beq.n	8003428 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80033c2:	4b43      	ldr	r3, [pc, #268]	; (80034d0 <HAL_RCC_OscConfig+0x270>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a42      	ldr	r2, [pc, #264]	; (80034d0 <HAL_RCC_OscConfig+0x270>)
 80033c8:	f043 0301 	orr.w	r3, r3, #1
 80033cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033ce:	f7fe fcef 	bl	8001db0 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033d6:	f7fe fceb 	bl	8001db0 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e34d      	b.n	8003a84 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033e8:	4b39      	ldr	r3, [pc, #228]	; (80034d0 <HAL_RCC_OscConfig+0x270>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0f0      	beq.n	80033d6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033f4:	4b36      	ldr	r3, [pc, #216]	; (80034d0 <HAL_RCC_OscConfig+0x270>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a35      	ldr	r2, [pc, #212]	; (80034d0 <HAL_RCC_OscConfig+0x270>)
 80033fa:	f043 0308 	orr.w	r3, r3, #8
 80033fe:	6013      	str	r3, [r2, #0]
 8003400:	4b33      	ldr	r3, [pc, #204]	; (80034d0 <HAL_RCC_OscConfig+0x270>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	4930      	ldr	r1, [pc, #192]	; (80034d0 <HAL_RCC_OscConfig+0x270>)
 800340e:	4313      	orrs	r3, r2
 8003410:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003412:	4b2f      	ldr	r3, [pc, #188]	; (80034d0 <HAL_RCC_OscConfig+0x270>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	021b      	lsls	r3, r3, #8
 8003420:	492b      	ldr	r1, [pc, #172]	; (80034d0 <HAL_RCC_OscConfig+0x270>)
 8003422:	4313      	orrs	r3, r2
 8003424:	604b      	str	r3, [r1, #4]
 8003426:	e01a      	b.n	800345e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003428:	4b29      	ldr	r3, [pc, #164]	; (80034d0 <HAL_RCC_OscConfig+0x270>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a28      	ldr	r2, [pc, #160]	; (80034d0 <HAL_RCC_OscConfig+0x270>)
 800342e:	f023 0301 	bic.w	r3, r3, #1
 8003432:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003434:	f7fe fcbc 	bl	8001db0 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800343c:	f7fe fcb8 	bl	8001db0 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e31a      	b.n	8003a84 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800344e:	4b20      	ldr	r3, [pc, #128]	; (80034d0 <HAL_RCC_OscConfig+0x270>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f0      	bne.n	800343c <HAL_RCC_OscConfig+0x1dc>
 800345a:	e000      	b.n	800345e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800345c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d073      	beq.n	8003552 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	2b08      	cmp	r3, #8
 800346e:	d005      	beq.n	800347c <HAL_RCC_OscConfig+0x21c>
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	2b0c      	cmp	r3, #12
 8003474:	d10e      	bne.n	8003494 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	2b03      	cmp	r3, #3
 800347a:	d10b      	bne.n	8003494 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800347c:	4b14      	ldr	r3, [pc, #80]	; (80034d0 <HAL_RCC_OscConfig+0x270>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d063      	beq.n	8003550 <HAL_RCC_OscConfig+0x2f0>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d15f      	bne.n	8003550 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e2f7      	b.n	8003a84 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800349c:	d106      	bne.n	80034ac <HAL_RCC_OscConfig+0x24c>
 800349e:	4b0c      	ldr	r3, [pc, #48]	; (80034d0 <HAL_RCC_OscConfig+0x270>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a0b      	ldr	r2, [pc, #44]	; (80034d0 <HAL_RCC_OscConfig+0x270>)
 80034a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a8:	6013      	str	r3, [r2, #0]
 80034aa:	e025      	b.n	80034f8 <HAL_RCC_OscConfig+0x298>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034b4:	d114      	bne.n	80034e0 <HAL_RCC_OscConfig+0x280>
 80034b6:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <HAL_RCC_OscConfig+0x270>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a05      	ldr	r2, [pc, #20]	; (80034d0 <HAL_RCC_OscConfig+0x270>)
 80034bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034c0:	6013      	str	r3, [r2, #0]
 80034c2:	4b03      	ldr	r3, [pc, #12]	; (80034d0 <HAL_RCC_OscConfig+0x270>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a02      	ldr	r2, [pc, #8]	; (80034d0 <HAL_RCC_OscConfig+0x270>)
 80034c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	e013      	b.n	80034f8 <HAL_RCC_OscConfig+0x298>
 80034d0:	40021000 	.word	0x40021000
 80034d4:	08009464 	.word	0x08009464
 80034d8:	20000000 	.word	0x20000000
 80034dc:	20000004 	.word	0x20000004
 80034e0:	4ba0      	ldr	r3, [pc, #640]	; (8003764 <HAL_RCC_OscConfig+0x504>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a9f      	ldr	r2, [pc, #636]	; (8003764 <HAL_RCC_OscConfig+0x504>)
 80034e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ea:	6013      	str	r3, [r2, #0]
 80034ec:	4b9d      	ldr	r3, [pc, #628]	; (8003764 <HAL_RCC_OscConfig+0x504>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a9c      	ldr	r2, [pc, #624]	; (8003764 <HAL_RCC_OscConfig+0x504>)
 80034f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d013      	beq.n	8003528 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003500:	f7fe fc56 	bl	8001db0 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003508:	f7fe fc52 	bl	8001db0 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b64      	cmp	r3, #100	; 0x64
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e2b4      	b.n	8003a84 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800351a:	4b92      	ldr	r3, [pc, #584]	; (8003764 <HAL_RCC_OscConfig+0x504>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0f0      	beq.n	8003508 <HAL_RCC_OscConfig+0x2a8>
 8003526:	e014      	b.n	8003552 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003528:	f7fe fc42 	bl	8001db0 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003530:	f7fe fc3e 	bl	8001db0 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b64      	cmp	r3, #100	; 0x64
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e2a0      	b.n	8003a84 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003542:	4b88      	ldr	r3, [pc, #544]	; (8003764 <HAL_RCC_OscConfig+0x504>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1f0      	bne.n	8003530 <HAL_RCC_OscConfig+0x2d0>
 800354e:	e000      	b.n	8003552 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d060      	beq.n	8003620 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	2b04      	cmp	r3, #4
 8003562:	d005      	beq.n	8003570 <HAL_RCC_OscConfig+0x310>
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	2b0c      	cmp	r3, #12
 8003568:	d119      	bne.n	800359e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	2b02      	cmp	r3, #2
 800356e:	d116      	bne.n	800359e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003570:	4b7c      	ldr	r3, [pc, #496]	; (8003764 <HAL_RCC_OscConfig+0x504>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003578:	2b00      	cmp	r3, #0
 800357a:	d005      	beq.n	8003588 <HAL_RCC_OscConfig+0x328>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e27d      	b.n	8003a84 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003588:	4b76      	ldr	r3, [pc, #472]	; (8003764 <HAL_RCC_OscConfig+0x504>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	061b      	lsls	r3, r3, #24
 8003596:	4973      	ldr	r1, [pc, #460]	; (8003764 <HAL_RCC_OscConfig+0x504>)
 8003598:	4313      	orrs	r3, r2
 800359a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800359c:	e040      	b.n	8003620 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d023      	beq.n	80035ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035a6:	4b6f      	ldr	r3, [pc, #444]	; (8003764 <HAL_RCC_OscConfig+0x504>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a6e      	ldr	r2, [pc, #440]	; (8003764 <HAL_RCC_OscConfig+0x504>)
 80035ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b2:	f7fe fbfd 	bl	8001db0 <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035b8:	e008      	b.n	80035cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035ba:	f7fe fbf9 	bl	8001db0 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d901      	bls.n	80035cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e25b      	b.n	8003a84 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035cc:	4b65      	ldr	r3, [pc, #404]	; (8003764 <HAL_RCC_OscConfig+0x504>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d0f0      	beq.n	80035ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035d8:	4b62      	ldr	r3, [pc, #392]	; (8003764 <HAL_RCC_OscConfig+0x504>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	061b      	lsls	r3, r3, #24
 80035e6:	495f      	ldr	r1, [pc, #380]	; (8003764 <HAL_RCC_OscConfig+0x504>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	604b      	str	r3, [r1, #4]
 80035ec:	e018      	b.n	8003620 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035ee:	4b5d      	ldr	r3, [pc, #372]	; (8003764 <HAL_RCC_OscConfig+0x504>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a5c      	ldr	r2, [pc, #368]	; (8003764 <HAL_RCC_OscConfig+0x504>)
 80035f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fa:	f7fe fbd9 	bl	8001db0 <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003600:	e008      	b.n	8003614 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003602:	f7fe fbd5 	bl	8001db0 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d901      	bls.n	8003614 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e237      	b.n	8003a84 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003614:	4b53      	ldr	r3, [pc, #332]	; (8003764 <HAL_RCC_OscConfig+0x504>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1f0      	bne.n	8003602 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0308 	and.w	r3, r3, #8
 8003628:	2b00      	cmp	r3, #0
 800362a:	d03c      	beq.n	80036a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d01c      	beq.n	800366e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003634:	4b4b      	ldr	r3, [pc, #300]	; (8003764 <HAL_RCC_OscConfig+0x504>)
 8003636:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800363a:	4a4a      	ldr	r2, [pc, #296]	; (8003764 <HAL_RCC_OscConfig+0x504>)
 800363c:	f043 0301 	orr.w	r3, r3, #1
 8003640:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003644:	f7fe fbb4 	bl	8001db0 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800364c:	f7fe fbb0 	bl	8001db0 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e212      	b.n	8003a84 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800365e:	4b41      	ldr	r3, [pc, #260]	; (8003764 <HAL_RCC_OscConfig+0x504>)
 8003660:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d0ef      	beq.n	800364c <HAL_RCC_OscConfig+0x3ec>
 800366c:	e01b      	b.n	80036a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800366e:	4b3d      	ldr	r3, [pc, #244]	; (8003764 <HAL_RCC_OscConfig+0x504>)
 8003670:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003674:	4a3b      	ldr	r2, [pc, #236]	; (8003764 <HAL_RCC_OscConfig+0x504>)
 8003676:	f023 0301 	bic.w	r3, r3, #1
 800367a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367e:	f7fe fb97 	bl	8001db0 <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003686:	f7fe fb93 	bl	8001db0 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e1f5      	b.n	8003a84 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003698:	4b32      	ldr	r3, [pc, #200]	; (8003764 <HAL_RCC_OscConfig+0x504>)
 800369a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1ef      	bne.n	8003686 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0304 	and.w	r3, r3, #4
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f000 80a6 	beq.w	8003800 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036b4:	2300      	movs	r3, #0
 80036b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80036b8:	4b2a      	ldr	r3, [pc, #168]	; (8003764 <HAL_RCC_OscConfig+0x504>)
 80036ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10d      	bne.n	80036e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036c4:	4b27      	ldr	r3, [pc, #156]	; (8003764 <HAL_RCC_OscConfig+0x504>)
 80036c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c8:	4a26      	ldr	r2, [pc, #152]	; (8003764 <HAL_RCC_OscConfig+0x504>)
 80036ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ce:	6593      	str	r3, [r2, #88]	; 0x58
 80036d0:	4b24      	ldr	r3, [pc, #144]	; (8003764 <HAL_RCC_OscConfig+0x504>)
 80036d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d8:	60bb      	str	r3, [r7, #8]
 80036da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036dc:	2301      	movs	r3, #1
 80036de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036e0:	4b21      	ldr	r3, [pc, #132]	; (8003768 <HAL_RCC_OscConfig+0x508>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d118      	bne.n	800371e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036ec:	4b1e      	ldr	r3, [pc, #120]	; (8003768 <HAL_RCC_OscConfig+0x508>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a1d      	ldr	r2, [pc, #116]	; (8003768 <HAL_RCC_OscConfig+0x508>)
 80036f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036f8:	f7fe fb5a 	bl	8001db0 <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003700:	f7fe fb56 	bl	8001db0 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e1b8      	b.n	8003a84 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003712:	4b15      	ldr	r3, [pc, #84]	; (8003768 <HAL_RCC_OscConfig+0x508>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371a:	2b00      	cmp	r3, #0
 800371c:	d0f0      	beq.n	8003700 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d108      	bne.n	8003738 <HAL_RCC_OscConfig+0x4d8>
 8003726:	4b0f      	ldr	r3, [pc, #60]	; (8003764 <HAL_RCC_OscConfig+0x504>)
 8003728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372c:	4a0d      	ldr	r2, [pc, #52]	; (8003764 <HAL_RCC_OscConfig+0x504>)
 800372e:	f043 0301 	orr.w	r3, r3, #1
 8003732:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003736:	e029      	b.n	800378c <HAL_RCC_OscConfig+0x52c>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	2b05      	cmp	r3, #5
 800373e:	d115      	bne.n	800376c <HAL_RCC_OscConfig+0x50c>
 8003740:	4b08      	ldr	r3, [pc, #32]	; (8003764 <HAL_RCC_OscConfig+0x504>)
 8003742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003746:	4a07      	ldr	r2, [pc, #28]	; (8003764 <HAL_RCC_OscConfig+0x504>)
 8003748:	f043 0304 	orr.w	r3, r3, #4
 800374c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003750:	4b04      	ldr	r3, [pc, #16]	; (8003764 <HAL_RCC_OscConfig+0x504>)
 8003752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003756:	4a03      	ldr	r2, [pc, #12]	; (8003764 <HAL_RCC_OscConfig+0x504>)
 8003758:	f043 0301 	orr.w	r3, r3, #1
 800375c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003760:	e014      	b.n	800378c <HAL_RCC_OscConfig+0x52c>
 8003762:	bf00      	nop
 8003764:	40021000 	.word	0x40021000
 8003768:	40007000 	.word	0x40007000
 800376c:	4b9d      	ldr	r3, [pc, #628]	; (80039e4 <HAL_RCC_OscConfig+0x784>)
 800376e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003772:	4a9c      	ldr	r2, [pc, #624]	; (80039e4 <HAL_RCC_OscConfig+0x784>)
 8003774:	f023 0301 	bic.w	r3, r3, #1
 8003778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800377c:	4b99      	ldr	r3, [pc, #612]	; (80039e4 <HAL_RCC_OscConfig+0x784>)
 800377e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003782:	4a98      	ldr	r2, [pc, #608]	; (80039e4 <HAL_RCC_OscConfig+0x784>)
 8003784:	f023 0304 	bic.w	r3, r3, #4
 8003788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d016      	beq.n	80037c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003794:	f7fe fb0c 	bl	8001db0 <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800379a:	e00a      	b.n	80037b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800379c:	f7fe fb08 	bl	8001db0 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e168      	b.n	8003a84 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037b2:	4b8c      	ldr	r3, [pc, #560]	; (80039e4 <HAL_RCC_OscConfig+0x784>)
 80037b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0ed      	beq.n	800379c <HAL_RCC_OscConfig+0x53c>
 80037c0:	e015      	b.n	80037ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c2:	f7fe faf5 	bl	8001db0 <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037c8:	e00a      	b.n	80037e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ca:	f7fe faf1 	bl	8001db0 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d8:	4293      	cmp	r3, r2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e151      	b.n	8003a84 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037e0:	4b80      	ldr	r3, [pc, #512]	; (80039e4 <HAL_RCC_OscConfig+0x784>)
 80037e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1ed      	bne.n	80037ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037ee:	7ffb      	ldrb	r3, [r7, #31]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d105      	bne.n	8003800 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037f4:	4b7b      	ldr	r3, [pc, #492]	; (80039e4 <HAL_RCC_OscConfig+0x784>)
 80037f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f8:	4a7a      	ldr	r2, [pc, #488]	; (80039e4 <HAL_RCC_OscConfig+0x784>)
 80037fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0320 	and.w	r3, r3, #32
 8003808:	2b00      	cmp	r3, #0
 800380a:	d03c      	beq.n	8003886 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	2b00      	cmp	r3, #0
 8003812:	d01c      	beq.n	800384e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003814:	4b73      	ldr	r3, [pc, #460]	; (80039e4 <HAL_RCC_OscConfig+0x784>)
 8003816:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800381a:	4a72      	ldr	r2, [pc, #456]	; (80039e4 <HAL_RCC_OscConfig+0x784>)
 800381c:	f043 0301 	orr.w	r3, r3, #1
 8003820:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003824:	f7fe fac4 	bl	8001db0 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800382c:	f7fe fac0 	bl	8001db0 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e122      	b.n	8003a84 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800383e:	4b69      	ldr	r3, [pc, #420]	; (80039e4 <HAL_RCC_OscConfig+0x784>)
 8003840:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d0ef      	beq.n	800382c <HAL_RCC_OscConfig+0x5cc>
 800384c:	e01b      	b.n	8003886 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800384e:	4b65      	ldr	r3, [pc, #404]	; (80039e4 <HAL_RCC_OscConfig+0x784>)
 8003850:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003854:	4a63      	ldr	r2, [pc, #396]	; (80039e4 <HAL_RCC_OscConfig+0x784>)
 8003856:	f023 0301 	bic.w	r3, r3, #1
 800385a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385e:	f7fe faa7 	bl	8001db0 <HAL_GetTick>
 8003862:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003864:	e008      	b.n	8003878 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003866:	f7fe faa3 	bl	8001db0 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e105      	b.n	8003a84 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003878:	4b5a      	ldr	r3, [pc, #360]	; (80039e4 <HAL_RCC_OscConfig+0x784>)
 800387a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1ef      	bne.n	8003866 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388a:	2b00      	cmp	r3, #0
 800388c:	f000 80f9 	beq.w	8003a82 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003894:	2b02      	cmp	r3, #2
 8003896:	f040 80cf 	bne.w	8003a38 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800389a:	4b52      	ldr	r3, [pc, #328]	; (80039e4 <HAL_RCC_OscConfig+0x784>)
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	f003 0203 	and.w	r2, r3, #3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d12c      	bne.n	8003908 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b8:	3b01      	subs	r3, #1
 80038ba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038bc:	429a      	cmp	r2, r3
 80038be:	d123      	bne.n	8003908 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d11b      	bne.n	8003908 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038da:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038dc:	429a      	cmp	r2, r3
 80038de:	d113      	bne.n	8003908 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ea:	085b      	lsrs	r3, r3, #1
 80038ec:	3b01      	subs	r3, #1
 80038ee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d109      	bne.n	8003908 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	085b      	lsrs	r3, r3, #1
 8003900:	3b01      	subs	r3, #1
 8003902:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003904:	429a      	cmp	r2, r3
 8003906:	d071      	beq.n	80039ec <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	2b0c      	cmp	r3, #12
 800390c:	d068      	beq.n	80039e0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800390e:	4b35      	ldr	r3, [pc, #212]	; (80039e4 <HAL_RCC_OscConfig+0x784>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d105      	bne.n	8003926 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800391a:	4b32      	ldr	r3, [pc, #200]	; (80039e4 <HAL_RCC_OscConfig+0x784>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e0ac      	b.n	8003a84 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800392a:	4b2e      	ldr	r3, [pc, #184]	; (80039e4 <HAL_RCC_OscConfig+0x784>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a2d      	ldr	r2, [pc, #180]	; (80039e4 <HAL_RCC_OscConfig+0x784>)
 8003930:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003934:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003936:	f7fe fa3b 	bl	8001db0 <HAL_GetTick>
 800393a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800393c:	e008      	b.n	8003950 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800393e:	f7fe fa37 	bl	8001db0 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e099      	b.n	8003a84 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003950:	4b24      	ldr	r3, [pc, #144]	; (80039e4 <HAL_RCC_OscConfig+0x784>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1f0      	bne.n	800393e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800395c:	4b21      	ldr	r3, [pc, #132]	; (80039e4 <HAL_RCC_OscConfig+0x784>)
 800395e:	68da      	ldr	r2, [r3, #12]
 8003960:	4b21      	ldr	r3, [pc, #132]	; (80039e8 <HAL_RCC_OscConfig+0x788>)
 8003962:	4013      	ands	r3, r2
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800396c:	3a01      	subs	r2, #1
 800396e:	0112      	lsls	r2, r2, #4
 8003970:	4311      	orrs	r1, r2
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003976:	0212      	lsls	r2, r2, #8
 8003978:	4311      	orrs	r1, r2
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800397e:	0852      	lsrs	r2, r2, #1
 8003980:	3a01      	subs	r2, #1
 8003982:	0552      	lsls	r2, r2, #21
 8003984:	4311      	orrs	r1, r2
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800398a:	0852      	lsrs	r2, r2, #1
 800398c:	3a01      	subs	r2, #1
 800398e:	0652      	lsls	r2, r2, #25
 8003990:	4311      	orrs	r1, r2
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003996:	06d2      	lsls	r2, r2, #27
 8003998:	430a      	orrs	r2, r1
 800399a:	4912      	ldr	r1, [pc, #72]	; (80039e4 <HAL_RCC_OscConfig+0x784>)
 800399c:	4313      	orrs	r3, r2
 800399e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80039a0:	4b10      	ldr	r3, [pc, #64]	; (80039e4 <HAL_RCC_OscConfig+0x784>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a0f      	ldr	r2, [pc, #60]	; (80039e4 <HAL_RCC_OscConfig+0x784>)
 80039a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039ac:	4b0d      	ldr	r3, [pc, #52]	; (80039e4 <HAL_RCC_OscConfig+0x784>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	4a0c      	ldr	r2, [pc, #48]	; (80039e4 <HAL_RCC_OscConfig+0x784>)
 80039b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039b8:	f7fe f9fa 	bl	8001db0 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c0:	f7fe f9f6 	bl	8001db0 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e058      	b.n	8003a84 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039d2:	4b04      	ldr	r3, [pc, #16]	; (80039e4 <HAL_RCC_OscConfig+0x784>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0f0      	beq.n	80039c0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039de:	e050      	b.n	8003a82 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e04f      	b.n	8003a84 <HAL_RCC_OscConfig+0x824>
 80039e4:	40021000 	.word	0x40021000
 80039e8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ec:	4b27      	ldr	r3, [pc, #156]	; (8003a8c <HAL_RCC_OscConfig+0x82c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d144      	bne.n	8003a82 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80039f8:	4b24      	ldr	r3, [pc, #144]	; (8003a8c <HAL_RCC_OscConfig+0x82c>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a23      	ldr	r2, [pc, #140]	; (8003a8c <HAL_RCC_OscConfig+0x82c>)
 80039fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a02:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a04:	4b21      	ldr	r3, [pc, #132]	; (8003a8c <HAL_RCC_OscConfig+0x82c>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	4a20      	ldr	r2, [pc, #128]	; (8003a8c <HAL_RCC_OscConfig+0x82c>)
 8003a0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a0e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a10:	f7fe f9ce 	bl	8001db0 <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a18:	f7fe f9ca 	bl	8001db0 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e02c      	b.n	8003a84 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a2a:	4b18      	ldr	r3, [pc, #96]	; (8003a8c <HAL_RCC_OscConfig+0x82c>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0f0      	beq.n	8003a18 <HAL_RCC_OscConfig+0x7b8>
 8003a36:	e024      	b.n	8003a82 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	2b0c      	cmp	r3, #12
 8003a3c:	d01f      	beq.n	8003a7e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a3e:	4b13      	ldr	r3, [pc, #76]	; (8003a8c <HAL_RCC_OscConfig+0x82c>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a12      	ldr	r2, [pc, #72]	; (8003a8c <HAL_RCC_OscConfig+0x82c>)
 8003a44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4a:	f7fe f9b1 	bl	8001db0 <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a50:	e008      	b.n	8003a64 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a52:	f7fe f9ad 	bl	8001db0 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e00f      	b.n	8003a84 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a64:	4b09      	ldr	r3, [pc, #36]	; (8003a8c <HAL_RCC_OscConfig+0x82c>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1f0      	bne.n	8003a52 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a70:	4b06      	ldr	r3, [pc, #24]	; (8003a8c <HAL_RCC_OscConfig+0x82c>)
 8003a72:	68da      	ldr	r2, [r3, #12]
 8003a74:	4905      	ldr	r1, [pc, #20]	; (8003a8c <HAL_RCC_OscConfig+0x82c>)
 8003a76:	4b06      	ldr	r3, [pc, #24]	; (8003a90 <HAL_RCC_OscConfig+0x830>)
 8003a78:	4013      	ands	r3, r2
 8003a7a:	60cb      	str	r3, [r1, #12]
 8003a7c:	e001      	b.n	8003a82 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3720      	adds	r7, #32
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	feeefffc 	.word	0xfeeefffc

08003a94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d101      	bne.n	8003aac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e11d      	b.n	8003ce8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003aac:	4b90      	ldr	r3, [pc, #576]	; (8003cf0 <HAL_RCC_ClockConfig+0x25c>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 030f 	and.w	r3, r3, #15
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d910      	bls.n	8003adc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aba:	4b8d      	ldr	r3, [pc, #564]	; (8003cf0 <HAL_RCC_ClockConfig+0x25c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f023 020f 	bic.w	r2, r3, #15
 8003ac2:	498b      	ldr	r1, [pc, #556]	; (8003cf0 <HAL_RCC_ClockConfig+0x25c>)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aca:	4b89      	ldr	r3, [pc, #548]	; (8003cf0 <HAL_RCC_ClockConfig+0x25c>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 030f 	and.w	r3, r3, #15
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d001      	beq.n	8003adc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e105      	b.n	8003ce8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d010      	beq.n	8003b0a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	4b81      	ldr	r3, [pc, #516]	; (8003cf4 <HAL_RCC_ClockConfig+0x260>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d908      	bls.n	8003b0a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003af8:	4b7e      	ldr	r3, [pc, #504]	; (8003cf4 <HAL_RCC_ClockConfig+0x260>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	497b      	ldr	r1, [pc, #492]	; (8003cf4 <HAL_RCC_ClockConfig+0x260>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d079      	beq.n	8003c0a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	2b03      	cmp	r3, #3
 8003b1c:	d11e      	bne.n	8003b5c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b1e:	4b75      	ldr	r3, [pc, #468]	; (8003cf4 <HAL_RCC_ClockConfig+0x260>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e0dc      	b.n	8003ce8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003b2e:	f000 fa09 	bl	8003f44 <RCC_GetSysClockFreqFromPLLSource>
 8003b32:	4603      	mov	r3, r0
 8003b34:	4a70      	ldr	r2, [pc, #448]	; (8003cf8 <HAL_RCC_ClockConfig+0x264>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d946      	bls.n	8003bc8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003b3a:	4b6e      	ldr	r3, [pc, #440]	; (8003cf4 <HAL_RCC_ClockConfig+0x260>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d140      	bne.n	8003bc8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b46:	4b6b      	ldr	r3, [pc, #428]	; (8003cf4 <HAL_RCC_ClockConfig+0x260>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b4e:	4a69      	ldr	r2, [pc, #420]	; (8003cf4 <HAL_RCC_ClockConfig+0x260>)
 8003b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b54:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003b56:	2380      	movs	r3, #128	; 0x80
 8003b58:	617b      	str	r3, [r7, #20]
 8003b5a:	e035      	b.n	8003bc8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d107      	bne.n	8003b74 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b64:	4b63      	ldr	r3, [pc, #396]	; (8003cf4 <HAL_RCC_ClockConfig+0x260>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d115      	bne.n	8003b9c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e0b9      	b.n	8003ce8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d107      	bne.n	8003b8c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b7c:	4b5d      	ldr	r3, [pc, #372]	; (8003cf4 <HAL_RCC_ClockConfig+0x260>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d109      	bne.n	8003b9c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e0ad      	b.n	8003ce8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b8c:	4b59      	ldr	r3, [pc, #356]	; (8003cf4 <HAL_RCC_ClockConfig+0x260>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e0a5      	b.n	8003ce8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003b9c:	f000 f8b4 	bl	8003d08 <HAL_RCC_GetSysClockFreq>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	4a55      	ldr	r2, [pc, #340]	; (8003cf8 <HAL_RCC_ClockConfig+0x264>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d90f      	bls.n	8003bc8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003ba8:	4b52      	ldr	r3, [pc, #328]	; (8003cf4 <HAL_RCC_ClockConfig+0x260>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d109      	bne.n	8003bc8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003bb4:	4b4f      	ldr	r3, [pc, #316]	; (8003cf4 <HAL_RCC_ClockConfig+0x260>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bbc:	4a4d      	ldr	r2, [pc, #308]	; (8003cf4 <HAL_RCC_ClockConfig+0x260>)
 8003bbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bc2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003bc4:	2380      	movs	r3, #128	; 0x80
 8003bc6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bc8:	4b4a      	ldr	r3, [pc, #296]	; (8003cf4 <HAL_RCC_ClockConfig+0x260>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f023 0203 	bic.w	r2, r3, #3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	4947      	ldr	r1, [pc, #284]	; (8003cf4 <HAL_RCC_ClockConfig+0x260>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bda:	f7fe f8e9 	bl	8001db0 <HAL_GetTick>
 8003bde:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003be0:	e00a      	b.n	8003bf8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003be2:	f7fe f8e5 	bl	8001db0 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e077      	b.n	8003ce8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bf8:	4b3e      	ldr	r3, [pc, #248]	; (8003cf4 <HAL_RCC_ClockConfig+0x260>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f003 020c 	and.w	r2, r3, #12
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d1eb      	bne.n	8003be2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	2b80      	cmp	r3, #128	; 0x80
 8003c0e:	d105      	bne.n	8003c1c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003c10:	4b38      	ldr	r3, [pc, #224]	; (8003cf4 <HAL_RCC_ClockConfig+0x260>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	4a37      	ldr	r2, [pc, #220]	; (8003cf4 <HAL_RCC_ClockConfig+0x260>)
 8003c16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c1a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d010      	beq.n	8003c4a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689a      	ldr	r2, [r3, #8]
 8003c2c:	4b31      	ldr	r3, [pc, #196]	; (8003cf4 <HAL_RCC_ClockConfig+0x260>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d208      	bcs.n	8003c4a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c38:	4b2e      	ldr	r3, [pc, #184]	; (8003cf4 <HAL_RCC_ClockConfig+0x260>)
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	492b      	ldr	r1, [pc, #172]	; (8003cf4 <HAL_RCC_ClockConfig+0x260>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c4a:	4b29      	ldr	r3, [pc, #164]	; (8003cf0 <HAL_RCC_ClockConfig+0x25c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d210      	bcs.n	8003c7a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c58:	4b25      	ldr	r3, [pc, #148]	; (8003cf0 <HAL_RCC_ClockConfig+0x25c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f023 020f 	bic.w	r2, r3, #15
 8003c60:	4923      	ldr	r1, [pc, #140]	; (8003cf0 <HAL_RCC_ClockConfig+0x25c>)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c68:	4b21      	ldr	r3, [pc, #132]	; (8003cf0 <HAL_RCC_ClockConfig+0x25c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 030f 	and.w	r3, r3, #15
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d001      	beq.n	8003c7a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e036      	b.n	8003ce8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0304 	and.w	r3, r3, #4
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d008      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c86:	4b1b      	ldr	r3, [pc, #108]	; (8003cf4 <HAL_RCC_ClockConfig+0x260>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	4918      	ldr	r1, [pc, #96]	; (8003cf4 <HAL_RCC_ClockConfig+0x260>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0308 	and.w	r3, r3, #8
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d009      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ca4:	4b13      	ldr	r3, [pc, #76]	; (8003cf4 <HAL_RCC_ClockConfig+0x260>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	4910      	ldr	r1, [pc, #64]	; (8003cf4 <HAL_RCC_ClockConfig+0x260>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003cb8:	f000 f826 	bl	8003d08 <HAL_RCC_GetSysClockFreq>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	4b0d      	ldr	r3, [pc, #52]	; (8003cf4 <HAL_RCC_ClockConfig+0x260>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	091b      	lsrs	r3, r3, #4
 8003cc4:	f003 030f 	and.w	r3, r3, #15
 8003cc8:	490c      	ldr	r1, [pc, #48]	; (8003cfc <HAL_RCC_ClockConfig+0x268>)
 8003cca:	5ccb      	ldrb	r3, [r1, r3]
 8003ccc:	f003 031f 	and.w	r3, r3, #31
 8003cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd4:	4a0a      	ldr	r2, [pc, #40]	; (8003d00 <HAL_RCC_ClockConfig+0x26c>)
 8003cd6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003cd8:	4b0a      	ldr	r3, [pc, #40]	; (8003d04 <HAL_RCC_ClockConfig+0x270>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7fe f817 	bl	8001d10 <HAL_InitTick>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	73fb      	strb	r3, [r7, #15]

  return status;
 8003ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3718      	adds	r7, #24
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40022000 	.word	0x40022000
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	04c4b400 	.word	0x04c4b400
 8003cfc:	08009464 	.word	0x08009464
 8003d00:	20000000 	.word	0x20000000
 8003d04:	20000004 	.word	0x20000004

08003d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b089      	sub	sp, #36	; 0x24
 8003d0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	61fb      	str	r3, [r7, #28]
 8003d12:	2300      	movs	r3, #0
 8003d14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d16:	4b3e      	ldr	r3, [pc, #248]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 030c 	and.w	r3, r3, #12
 8003d1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d20:	4b3b      	ldr	r3, [pc, #236]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f003 0303 	and.w	r3, r3, #3
 8003d28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d005      	beq.n	8003d3c <HAL_RCC_GetSysClockFreq+0x34>
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	2b0c      	cmp	r3, #12
 8003d34:	d121      	bne.n	8003d7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d11e      	bne.n	8003d7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d3c:	4b34      	ldr	r3, [pc, #208]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0308 	and.w	r3, r3, #8
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d107      	bne.n	8003d58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d48:	4b31      	ldr	r3, [pc, #196]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d4e:	0a1b      	lsrs	r3, r3, #8
 8003d50:	f003 030f 	and.w	r3, r3, #15
 8003d54:	61fb      	str	r3, [r7, #28]
 8003d56:	e005      	b.n	8003d64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d58:	4b2d      	ldr	r3, [pc, #180]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	091b      	lsrs	r3, r3, #4
 8003d5e:	f003 030f 	and.w	r3, r3, #15
 8003d62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d64:	4a2b      	ldr	r2, [pc, #172]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10d      	bne.n	8003d90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d78:	e00a      	b.n	8003d90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	2b04      	cmp	r3, #4
 8003d7e:	d102      	bne.n	8003d86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d80:	4b25      	ldr	r3, [pc, #148]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d82:	61bb      	str	r3, [r7, #24]
 8003d84:	e004      	b.n	8003d90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	2b08      	cmp	r3, #8
 8003d8a:	d101      	bne.n	8003d90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d8c:	4b23      	ldr	r3, [pc, #140]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x114>)
 8003d8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	2b0c      	cmp	r3, #12
 8003d94:	d134      	bne.n	8003e00 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d96:	4b1e      	ldr	r3, [pc, #120]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f003 0303 	and.w	r3, r3, #3
 8003d9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d003      	beq.n	8003dae <HAL_RCC_GetSysClockFreq+0xa6>
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	2b03      	cmp	r3, #3
 8003daa:	d003      	beq.n	8003db4 <HAL_RCC_GetSysClockFreq+0xac>
 8003dac:	e005      	b.n	8003dba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003dae:	4b1a      	ldr	r3, [pc, #104]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x110>)
 8003db0:	617b      	str	r3, [r7, #20]
      break;
 8003db2:	e005      	b.n	8003dc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003db4:	4b19      	ldr	r3, [pc, #100]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x114>)
 8003db6:	617b      	str	r3, [r7, #20]
      break;
 8003db8:	e002      	b.n	8003dc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	617b      	str	r3, [r7, #20]
      break;
 8003dbe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003dc0:	4b13      	ldr	r3, [pc, #76]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	091b      	lsrs	r3, r3, #4
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	3301      	adds	r3, #1
 8003dcc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003dce:	4b10      	ldr	r3, [pc, #64]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	0a1b      	lsrs	r3, r3, #8
 8003dd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	fb03 f202 	mul.w	r2, r3, r2
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003de6:	4b0a      	ldr	r3, [pc, #40]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	0e5b      	lsrs	r3, r3, #25
 8003dec:	f003 0303 	and.w	r3, r3, #3
 8003df0:	3301      	adds	r3, #1
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e00:	69bb      	ldr	r3, [r7, #24]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3724      	adds	r7, #36	; 0x24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	40021000 	.word	0x40021000
 8003e14:	0800947c 	.word	0x0800947c
 8003e18:	00f42400 	.word	0x00f42400
 8003e1c:	007a1200 	.word	0x007a1200

08003e20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e20:	b480      	push	{r7}
 8003e22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e24:	4b03      	ldr	r3, [pc, #12]	; (8003e34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e26:	681b      	ldr	r3, [r3, #0]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	20000000 	.word	0x20000000

08003e38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e3c:	f7ff fff0 	bl	8003e20 <HAL_RCC_GetHCLKFreq>
 8003e40:	4602      	mov	r2, r0
 8003e42:	4b06      	ldr	r3, [pc, #24]	; (8003e5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	0a1b      	lsrs	r3, r3, #8
 8003e48:	f003 0307 	and.w	r3, r3, #7
 8003e4c:	4904      	ldr	r1, [pc, #16]	; (8003e60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e4e:	5ccb      	ldrb	r3, [r1, r3]
 8003e50:	f003 031f 	and.w	r3, r3, #31
 8003e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	08009474 	.word	0x08009474

08003e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e68:	f7ff ffda 	bl	8003e20 <HAL_RCC_GetHCLKFreq>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	4b06      	ldr	r3, [pc, #24]	; (8003e88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	0adb      	lsrs	r3, r3, #11
 8003e74:	f003 0307 	and.w	r3, r3, #7
 8003e78:	4904      	ldr	r1, [pc, #16]	; (8003e8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e7a:	5ccb      	ldrb	r3, [r1, r3]
 8003e7c:	f003 031f 	and.w	r3, r3, #31
 8003e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	40021000 	.word	0x40021000
 8003e8c:	08009474 	.word	0x08009474

08003e90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e98:	2300      	movs	r3, #0
 8003e9a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e9c:	4b27      	ldr	r3, [pc, #156]	; (8003f3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d003      	beq.n	8003eb0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ea8:	f7ff f906 	bl	80030b8 <HAL_PWREx_GetVoltageRange>
 8003eac:	6178      	str	r0, [r7, #20]
 8003eae:	e014      	b.n	8003eda <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003eb0:	4b22      	ldr	r3, [pc, #136]	; (8003f3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb4:	4a21      	ldr	r2, [pc, #132]	; (8003f3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003eb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eba:	6593      	str	r3, [r2, #88]	; 0x58
 8003ebc:	4b1f      	ldr	r3, [pc, #124]	; (8003f3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ec8:	f7ff f8f6 	bl	80030b8 <HAL_PWREx_GetVoltageRange>
 8003ecc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ece:	4b1b      	ldr	r3, [pc, #108]	; (8003f3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed2:	4a1a      	ldr	r2, [pc, #104]	; (8003f3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ed4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ed8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ee0:	d10b      	bne.n	8003efa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2b80      	cmp	r3, #128	; 0x80
 8003ee6:	d913      	bls.n	8003f10 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2ba0      	cmp	r3, #160	; 0xa0
 8003eec:	d902      	bls.n	8003ef4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003eee:	2302      	movs	r3, #2
 8003ef0:	613b      	str	r3, [r7, #16]
 8003ef2:	e00d      	b.n	8003f10 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	613b      	str	r3, [r7, #16]
 8003ef8:	e00a      	b.n	8003f10 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2b7f      	cmp	r3, #127	; 0x7f
 8003efe:	d902      	bls.n	8003f06 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003f00:	2302      	movs	r3, #2
 8003f02:	613b      	str	r3, [r7, #16]
 8003f04:	e004      	b.n	8003f10 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b70      	cmp	r3, #112	; 0x70
 8003f0a:	d101      	bne.n	8003f10 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f10:	4b0b      	ldr	r3, [pc, #44]	; (8003f40 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f023 020f 	bic.w	r2, r3, #15
 8003f18:	4909      	ldr	r1, [pc, #36]	; (8003f40 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003f20:	4b07      	ldr	r3, [pc, #28]	; (8003f40 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 030f 	and.w	r3, r3, #15
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d001      	beq.n	8003f32 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e000      	b.n	8003f34 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3718      	adds	r7, #24
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	40022000 	.word	0x40022000

08003f44 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b087      	sub	sp, #28
 8003f48:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f4a:	4b2d      	ldr	r3, [pc, #180]	; (8004000 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f003 0303 	and.w	r3, r3, #3
 8003f52:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2b03      	cmp	r3, #3
 8003f58:	d00b      	beq.n	8003f72 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2b03      	cmp	r3, #3
 8003f5e:	d825      	bhi.n	8003fac <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d008      	beq.n	8003f78 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d11f      	bne.n	8003fac <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003f6c:	4b25      	ldr	r3, [pc, #148]	; (8004004 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003f6e:	613b      	str	r3, [r7, #16]
    break;
 8003f70:	e01f      	b.n	8003fb2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003f72:	4b25      	ldr	r3, [pc, #148]	; (8004008 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003f74:	613b      	str	r3, [r7, #16]
    break;
 8003f76:	e01c      	b.n	8003fb2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f78:	4b21      	ldr	r3, [pc, #132]	; (8004000 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0308 	and.w	r3, r3, #8
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d107      	bne.n	8003f94 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f84:	4b1e      	ldr	r3, [pc, #120]	; (8004000 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f8a:	0a1b      	lsrs	r3, r3, #8
 8003f8c:	f003 030f 	and.w	r3, r3, #15
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	e005      	b.n	8003fa0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f94:	4b1a      	ldr	r3, [pc, #104]	; (8004000 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	091b      	lsrs	r3, r3, #4
 8003f9a:	f003 030f 	and.w	r3, r3, #15
 8003f9e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003fa0:	4a1a      	ldr	r2, [pc, #104]	; (800400c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fa8:	613b      	str	r3, [r7, #16]
    break;
 8003faa:	e002      	b.n	8003fb2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003fac:	2300      	movs	r3, #0
 8003fae:	613b      	str	r3, [r7, #16]
    break;
 8003fb0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003fb2:	4b13      	ldr	r3, [pc, #76]	; (8004000 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	091b      	lsrs	r3, r3, #4
 8003fb8:	f003 030f 	and.w	r3, r3, #15
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003fc0:	4b0f      	ldr	r3, [pc, #60]	; (8004000 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	0a1b      	lsrs	r3, r3, #8
 8003fc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	fb03 f202 	mul.w	r2, r3, r2
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003fd8:	4b09      	ldr	r3, [pc, #36]	; (8004000 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	0e5b      	lsrs	r3, r3, #25
 8003fde:	f003 0303 	and.w	r3, r3, #3
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003ff2:	683b      	ldr	r3, [r7, #0]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	371c      	adds	r7, #28
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	40021000 	.word	0x40021000
 8004004:	00f42400 	.word	0x00f42400
 8004008:	007a1200 	.word	0x007a1200
 800400c:	0800947c 	.word	0x0800947c

08004010 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004018:	2300      	movs	r3, #0
 800401a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800401c:	2300      	movs	r3, #0
 800401e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004028:	2b00      	cmp	r3, #0
 800402a:	d040      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004030:	2b80      	cmp	r3, #128	; 0x80
 8004032:	d02a      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004034:	2b80      	cmp	r3, #128	; 0x80
 8004036:	d825      	bhi.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004038:	2b60      	cmp	r3, #96	; 0x60
 800403a:	d026      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800403c:	2b60      	cmp	r3, #96	; 0x60
 800403e:	d821      	bhi.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004040:	2b40      	cmp	r3, #64	; 0x40
 8004042:	d006      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004044:	2b40      	cmp	r3, #64	; 0x40
 8004046:	d81d      	bhi.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004048:	2b00      	cmp	r3, #0
 800404a:	d009      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800404c:	2b20      	cmp	r3, #32
 800404e:	d010      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004050:	e018      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004052:	4b89      	ldr	r3, [pc, #548]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	4a88      	ldr	r2, [pc, #544]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800405c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800405e:	e015      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3304      	adds	r3, #4
 8004064:	2100      	movs	r1, #0
 8004066:	4618      	mov	r0, r3
 8004068:	f000 fb02 	bl	8004670 <RCCEx_PLLSAI1_Config>
 800406c:	4603      	mov	r3, r0
 800406e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004070:	e00c      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	3320      	adds	r3, #32
 8004076:	2100      	movs	r1, #0
 8004078:	4618      	mov	r0, r3
 800407a:	f000 fbed 	bl	8004858 <RCCEx_PLLSAI2_Config>
 800407e:	4603      	mov	r3, r0
 8004080:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004082:	e003      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	74fb      	strb	r3, [r7, #19]
      break;
 8004088:	e000      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800408a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800408c:	7cfb      	ldrb	r3, [r7, #19]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10b      	bne.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004092:	4b79      	ldr	r3, [pc, #484]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004094:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004098:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040a0:	4975      	ldr	r1, [pc, #468]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80040a8:	e001      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040aa:	7cfb      	ldrb	r3, [r7, #19]
 80040ac:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d047      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040c2:	d030      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80040c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040c8:	d82a      	bhi.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80040ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040ce:	d02a      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80040d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040d4:	d824      	bhi.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80040d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040da:	d008      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xde>
 80040dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040e0:	d81e      	bhi.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00a      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xec>
 80040e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ea:	d010      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80040ec:	e018      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040ee:	4b62      	ldr	r3, [pc, #392]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	4a61      	ldr	r2, [pc, #388]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040fa:	e015      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3304      	adds	r3, #4
 8004100:	2100      	movs	r1, #0
 8004102:	4618      	mov	r0, r3
 8004104:	f000 fab4 	bl	8004670 <RCCEx_PLLSAI1_Config>
 8004108:	4603      	mov	r3, r0
 800410a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800410c:	e00c      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	3320      	adds	r3, #32
 8004112:	2100      	movs	r1, #0
 8004114:	4618      	mov	r0, r3
 8004116:	f000 fb9f 	bl	8004858 <RCCEx_PLLSAI2_Config>
 800411a:	4603      	mov	r3, r0
 800411c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800411e:	e003      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	74fb      	strb	r3, [r7, #19]
      break;
 8004124:	e000      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004126:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004128:	7cfb      	ldrb	r3, [r7, #19]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10b      	bne.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800412e:	4b52      	ldr	r3, [pc, #328]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004130:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004134:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800413c:	494e      	ldr	r1, [pc, #312]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800413e:	4313      	orrs	r3, r2
 8004140:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004144:	e001      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004146:	7cfb      	ldrb	r3, [r7, #19]
 8004148:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004152:	2b00      	cmp	r3, #0
 8004154:	f000 809f 	beq.w	8004296 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004158:	2300      	movs	r3, #0
 800415a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800415c:	4b46      	ldr	r3, [pc, #280]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800415e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004168:	2301      	movs	r3, #1
 800416a:	e000      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800416c:	2300      	movs	r3, #0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00d      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004172:	4b41      	ldr	r3, [pc, #260]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004176:	4a40      	ldr	r2, [pc, #256]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800417c:	6593      	str	r3, [r2, #88]	; 0x58
 800417e:	4b3e      	ldr	r3, [pc, #248]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004186:	60bb      	str	r3, [r7, #8]
 8004188:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800418a:	2301      	movs	r3, #1
 800418c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800418e:	4b3b      	ldr	r3, [pc, #236]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a3a      	ldr	r2, [pc, #232]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004198:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800419a:	f7fd fe09 	bl	8001db0 <HAL_GetTick>
 800419e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041a0:	e009      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041a2:	f7fd fe05 	bl	8001db0 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d902      	bls.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	74fb      	strb	r3, [r7, #19]
        break;
 80041b4:	e005      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041b6:	4b31      	ldr	r3, [pc, #196]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d0ef      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80041c2:	7cfb      	ldrb	r3, [r7, #19]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d15b      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041c8:	4b2b      	ldr	r3, [pc, #172]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041d2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d01f      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d019      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041e6:	4b24      	ldr	r3, [pc, #144]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041f0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041f2:	4b21      	ldr	r3, [pc, #132]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f8:	4a1f      	ldr	r2, [pc, #124]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004202:	4b1d      	ldr	r3, [pc, #116]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004208:	4a1b      	ldr	r2, [pc, #108]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800420a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800420e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004212:	4a19      	ldr	r2, [pc, #100]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b00      	cmp	r3, #0
 8004222:	d016      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004224:	f7fd fdc4 	bl	8001db0 <HAL_GetTick>
 8004228:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800422a:	e00b      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800422c:	f7fd fdc0 	bl	8001db0 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	f241 3288 	movw	r2, #5000	; 0x1388
 800423a:	4293      	cmp	r3, r2
 800423c:	d902      	bls.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	74fb      	strb	r3, [r7, #19]
            break;
 8004242:	e006      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004244:	4b0c      	ldr	r3, [pc, #48]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0ec      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004252:	7cfb      	ldrb	r3, [r7, #19]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10c      	bne.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004258:	4b07      	ldr	r3, [pc, #28]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800425a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800425e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004268:	4903      	ldr	r1, [pc, #12]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800426a:	4313      	orrs	r3, r2
 800426c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004270:	e008      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004272:	7cfb      	ldrb	r3, [r7, #19]
 8004274:	74bb      	strb	r3, [r7, #18]
 8004276:	e005      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004278:	40021000 	.word	0x40021000
 800427c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004280:	7cfb      	ldrb	r3, [r7, #19]
 8004282:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004284:	7c7b      	ldrb	r3, [r7, #17]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d105      	bne.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800428a:	4ba0      	ldr	r3, [pc, #640]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800428c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428e:	4a9f      	ldr	r2, [pc, #636]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004290:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004294:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00a      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042a2:	4b9a      	ldr	r3, [pc, #616]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a8:	f023 0203 	bic.w	r2, r3, #3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b0:	4996      	ldr	r1, [pc, #600]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00a      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042c4:	4b91      	ldr	r3, [pc, #580]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ca:	f023 020c 	bic.w	r2, r3, #12
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d2:	498e      	ldr	r1, [pc, #568]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0304 	and.w	r3, r3, #4
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00a      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042e6:	4b89      	ldr	r3, [pc, #548]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f4:	4985      	ldr	r1, [pc, #532]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0308 	and.w	r3, r3, #8
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00a      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004308:	4b80      	ldr	r3, [pc, #512]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800430a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004316:	497d      	ldr	r1, [pc, #500]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004318:	4313      	orrs	r3, r2
 800431a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0310 	and.w	r3, r3, #16
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00a      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800432a:	4b78      	ldr	r3, [pc, #480]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800432c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004330:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004338:	4974      	ldr	r1, [pc, #464]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800433a:	4313      	orrs	r3, r2
 800433c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0320 	and.w	r3, r3, #32
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00a      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800434c:	4b6f      	ldr	r3, [pc, #444]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800434e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004352:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800435a:	496c      	ldr	r1, [pc, #432]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800435c:	4313      	orrs	r3, r2
 800435e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00a      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800436e:	4b67      	ldr	r3, [pc, #412]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004374:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800437c:	4963      	ldr	r1, [pc, #396]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800437e:	4313      	orrs	r3, r2
 8004380:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00a      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004390:	4b5e      	ldr	r3, [pc, #376]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004396:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800439e:	495b      	ldr	r1, [pc, #364]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00a      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043b2:	4b56      	ldr	r3, [pc, #344]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c0:	4952      	ldr	r1, [pc, #328]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00a      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043d4:	4b4d      	ldr	r3, [pc, #308]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e2:	494a      	ldr	r1, [pc, #296]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00a      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043f6:	4b45      	ldr	r3, [pc, #276]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004404:	4941      	ldr	r1, [pc, #260]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004406:	4313      	orrs	r3, r2
 8004408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00a      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004418:	4b3c      	ldr	r3, [pc, #240]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800441a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800441e:	f023 0203 	bic.w	r2, r3, #3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004426:	4939      	ldr	r1, [pc, #228]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004428:	4313      	orrs	r3, r2
 800442a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d028      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800443a:	4b34      	ldr	r3, [pc, #208]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800443c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004440:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004448:	4930      	ldr	r1, [pc, #192]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800444a:	4313      	orrs	r3, r2
 800444c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004454:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004458:	d106      	bne.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800445a:	4b2c      	ldr	r3, [pc, #176]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	4a2b      	ldr	r2, [pc, #172]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004460:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004464:	60d3      	str	r3, [r2, #12]
 8004466:	e011      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800446c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004470:	d10c      	bne.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	3304      	adds	r3, #4
 8004476:	2101      	movs	r1, #1
 8004478:	4618      	mov	r0, r3
 800447a:	f000 f8f9 	bl	8004670 <RCCEx_PLLSAI1_Config>
 800447e:	4603      	mov	r3, r0
 8004480:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004482:	7cfb      	ldrb	r3, [r7, #19]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d001      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004488:	7cfb      	ldrb	r3, [r7, #19]
 800448a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d04d      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800449c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044a0:	d108      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80044a2:	4b1a      	ldr	r3, [pc, #104]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044a8:	4a18      	ldr	r2, [pc, #96]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044ae:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80044b2:	e012      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80044b4:	4b15      	ldr	r3, [pc, #84]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044ba:	4a14      	ldr	r2, [pc, #80]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044c0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80044c4:	4b11      	ldr	r3, [pc, #68]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044d2:	490e      	ldr	r1, [pc, #56]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044e2:	d106      	bne.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044e4:	4b09      	ldr	r3, [pc, #36]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	4a08      	ldr	r2, [pc, #32]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044ee:	60d3      	str	r3, [r2, #12]
 80044f0:	e020      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044fa:	d109      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80044fc:	4b03      	ldr	r3, [pc, #12]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	4a02      	ldr	r2, [pc, #8]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004506:	60d3      	str	r3, [r2, #12]
 8004508:	e014      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800450a:	bf00      	nop
 800450c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004514:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004518:	d10c      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	3304      	adds	r3, #4
 800451e:	2101      	movs	r1, #1
 8004520:	4618      	mov	r0, r3
 8004522:	f000 f8a5 	bl	8004670 <RCCEx_PLLSAI1_Config>
 8004526:	4603      	mov	r3, r0
 8004528:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800452a:	7cfb      	ldrb	r3, [r7, #19]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d001      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004530:	7cfb      	ldrb	r3, [r7, #19]
 8004532:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d028      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004540:	4b4a      	ldr	r3, [pc, #296]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004546:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800454e:	4947      	ldr	r1, [pc, #284]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004550:	4313      	orrs	r3, r2
 8004552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800455a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800455e:	d106      	bne.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004560:	4b42      	ldr	r3, [pc, #264]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	4a41      	ldr	r2, [pc, #260]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004566:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800456a:	60d3      	str	r3, [r2, #12]
 800456c:	e011      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004572:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004576:	d10c      	bne.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	3304      	adds	r3, #4
 800457c:	2101      	movs	r1, #1
 800457e:	4618      	mov	r0, r3
 8004580:	f000 f876 	bl	8004670 <RCCEx_PLLSAI1_Config>
 8004584:	4603      	mov	r3, r0
 8004586:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004588:	7cfb      	ldrb	r3, [r7, #19]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800458e:	7cfb      	ldrb	r3, [r7, #19]
 8004590:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d01e      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800459e:	4b33      	ldr	r3, [pc, #204]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045ae:	492f      	ldr	r1, [pc, #188]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045c0:	d10c      	bne.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	3304      	adds	r3, #4
 80045c6:	2102      	movs	r1, #2
 80045c8:	4618      	mov	r0, r3
 80045ca:	f000 f851 	bl	8004670 <RCCEx_PLLSAI1_Config>
 80045ce:	4603      	mov	r3, r0
 80045d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045d2:	7cfb      	ldrb	r3, [r7, #19]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d001      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80045d8:	7cfb      	ldrb	r3, [r7, #19]
 80045da:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00b      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045e8:	4b20      	ldr	r3, [pc, #128]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045ee:	f023 0204 	bic.w	r2, r3, #4
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045f8:	491c      	ldr	r1, [pc, #112]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00b      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800460c:	4b17      	ldr	r3, [pc, #92]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800460e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004612:	f023 0218 	bic.w	r2, r3, #24
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461c:	4913      	ldr	r1, [pc, #76]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800461e:	4313      	orrs	r3, r2
 8004620:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d017      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004630:	4b0e      	ldr	r3, [pc, #56]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004632:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004636:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004640:	490a      	ldr	r1, [pc, #40]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004642:	4313      	orrs	r3, r2
 8004644:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800464e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004652:	d105      	bne.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004654:	4b05      	ldr	r3, [pc, #20]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	4a04      	ldr	r2, [pc, #16]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800465a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800465e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004660:	7cbb      	ldrb	r3, [r7, #18]
}
 8004662:	4618      	mov	r0, r3
 8004664:	3718      	adds	r7, #24
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	40021000 	.word	0x40021000

08004670 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800467a:	2300      	movs	r3, #0
 800467c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800467e:	4b72      	ldr	r3, [pc, #456]	; (8004848 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	f003 0303 	and.w	r3, r3, #3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00e      	beq.n	80046a8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800468a:	4b6f      	ldr	r3, [pc, #444]	; (8004848 <RCCEx_PLLSAI1_Config+0x1d8>)
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	f003 0203 	and.w	r2, r3, #3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	429a      	cmp	r2, r3
 8004698:	d103      	bne.n	80046a2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
       ||
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d142      	bne.n	8004728 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	73fb      	strb	r3, [r7, #15]
 80046a6:	e03f      	b.n	8004728 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2b03      	cmp	r3, #3
 80046ae:	d018      	beq.n	80046e2 <RCCEx_PLLSAI1_Config+0x72>
 80046b0:	2b03      	cmp	r3, #3
 80046b2:	d825      	bhi.n	8004700 <RCCEx_PLLSAI1_Config+0x90>
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d002      	beq.n	80046be <RCCEx_PLLSAI1_Config+0x4e>
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d009      	beq.n	80046d0 <RCCEx_PLLSAI1_Config+0x60>
 80046bc:	e020      	b.n	8004700 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046be:	4b62      	ldr	r3, [pc, #392]	; (8004848 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d11d      	bne.n	8004706 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046ce:	e01a      	b.n	8004706 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046d0:	4b5d      	ldr	r3, [pc, #372]	; (8004848 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d116      	bne.n	800470a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046e0:	e013      	b.n	800470a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046e2:	4b59      	ldr	r3, [pc, #356]	; (8004848 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10f      	bne.n	800470e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046ee:	4b56      	ldr	r3, [pc, #344]	; (8004848 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d109      	bne.n	800470e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046fe:	e006      	b.n	800470e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	73fb      	strb	r3, [r7, #15]
      break;
 8004704:	e004      	b.n	8004710 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004706:	bf00      	nop
 8004708:	e002      	b.n	8004710 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800470a:	bf00      	nop
 800470c:	e000      	b.n	8004710 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800470e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004710:	7bfb      	ldrb	r3, [r7, #15]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d108      	bne.n	8004728 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004716:	4b4c      	ldr	r3, [pc, #304]	; (8004848 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f023 0203 	bic.w	r2, r3, #3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4949      	ldr	r1, [pc, #292]	; (8004848 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004724:	4313      	orrs	r3, r2
 8004726:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004728:	7bfb      	ldrb	r3, [r7, #15]
 800472a:	2b00      	cmp	r3, #0
 800472c:	f040 8086 	bne.w	800483c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004730:	4b45      	ldr	r3, [pc, #276]	; (8004848 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a44      	ldr	r2, [pc, #272]	; (8004848 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004736:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800473a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800473c:	f7fd fb38 	bl	8001db0 <HAL_GetTick>
 8004740:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004742:	e009      	b.n	8004758 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004744:	f7fd fb34 	bl	8001db0 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b02      	cmp	r3, #2
 8004750:	d902      	bls.n	8004758 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	73fb      	strb	r3, [r7, #15]
        break;
 8004756:	e005      	b.n	8004764 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004758:	4b3b      	ldr	r3, [pc, #236]	; (8004848 <RCCEx_PLLSAI1_Config+0x1d8>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1ef      	bne.n	8004744 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004764:	7bfb      	ldrb	r3, [r7, #15]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d168      	bne.n	800483c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d113      	bne.n	8004798 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004770:	4b35      	ldr	r3, [pc, #212]	; (8004848 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004772:	691a      	ldr	r2, [r3, #16]
 8004774:	4b35      	ldr	r3, [pc, #212]	; (800484c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004776:	4013      	ands	r3, r2
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	6892      	ldr	r2, [r2, #8]
 800477c:	0211      	lsls	r1, r2, #8
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	68d2      	ldr	r2, [r2, #12]
 8004782:	06d2      	lsls	r2, r2, #27
 8004784:	4311      	orrs	r1, r2
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	6852      	ldr	r2, [r2, #4]
 800478a:	3a01      	subs	r2, #1
 800478c:	0112      	lsls	r2, r2, #4
 800478e:	430a      	orrs	r2, r1
 8004790:	492d      	ldr	r1, [pc, #180]	; (8004848 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004792:	4313      	orrs	r3, r2
 8004794:	610b      	str	r3, [r1, #16]
 8004796:	e02d      	b.n	80047f4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d115      	bne.n	80047ca <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800479e:	4b2a      	ldr	r3, [pc, #168]	; (8004848 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047a0:	691a      	ldr	r2, [r3, #16]
 80047a2:	4b2b      	ldr	r3, [pc, #172]	; (8004850 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047a4:	4013      	ands	r3, r2
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6892      	ldr	r2, [r2, #8]
 80047aa:	0211      	lsls	r1, r2, #8
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	6912      	ldr	r2, [r2, #16]
 80047b0:	0852      	lsrs	r2, r2, #1
 80047b2:	3a01      	subs	r2, #1
 80047b4:	0552      	lsls	r2, r2, #21
 80047b6:	4311      	orrs	r1, r2
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	6852      	ldr	r2, [r2, #4]
 80047bc:	3a01      	subs	r2, #1
 80047be:	0112      	lsls	r2, r2, #4
 80047c0:	430a      	orrs	r2, r1
 80047c2:	4921      	ldr	r1, [pc, #132]	; (8004848 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	610b      	str	r3, [r1, #16]
 80047c8:	e014      	b.n	80047f4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047ca:	4b1f      	ldr	r3, [pc, #124]	; (8004848 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047cc:	691a      	ldr	r2, [r3, #16]
 80047ce:	4b21      	ldr	r3, [pc, #132]	; (8004854 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047d0:	4013      	ands	r3, r2
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	6892      	ldr	r2, [r2, #8]
 80047d6:	0211      	lsls	r1, r2, #8
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	6952      	ldr	r2, [r2, #20]
 80047dc:	0852      	lsrs	r2, r2, #1
 80047de:	3a01      	subs	r2, #1
 80047e0:	0652      	lsls	r2, r2, #25
 80047e2:	4311      	orrs	r1, r2
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6852      	ldr	r2, [r2, #4]
 80047e8:	3a01      	subs	r2, #1
 80047ea:	0112      	lsls	r2, r2, #4
 80047ec:	430a      	orrs	r2, r1
 80047ee:	4916      	ldr	r1, [pc, #88]	; (8004848 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80047f4:	4b14      	ldr	r3, [pc, #80]	; (8004848 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a13      	ldr	r2, [pc, #76]	; (8004848 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004800:	f7fd fad6 	bl	8001db0 <HAL_GetTick>
 8004804:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004806:	e009      	b.n	800481c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004808:	f7fd fad2 	bl	8001db0 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b02      	cmp	r3, #2
 8004814:	d902      	bls.n	800481c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	73fb      	strb	r3, [r7, #15]
          break;
 800481a:	e005      	b.n	8004828 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800481c:	4b0a      	ldr	r3, [pc, #40]	; (8004848 <RCCEx_PLLSAI1_Config+0x1d8>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0ef      	beq.n	8004808 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004828:	7bfb      	ldrb	r3, [r7, #15]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d106      	bne.n	800483c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800482e:	4b06      	ldr	r3, [pc, #24]	; (8004848 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004830:	691a      	ldr	r2, [r3, #16]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	4904      	ldr	r1, [pc, #16]	; (8004848 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004838:	4313      	orrs	r3, r2
 800483a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800483c:	7bfb      	ldrb	r3, [r7, #15]
}
 800483e:	4618      	mov	r0, r3
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	40021000 	.word	0x40021000
 800484c:	07ff800f 	.word	0x07ff800f
 8004850:	ff9f800f 	.word	0xff9f800f
 8004854:	f9ff800f 	.word	0xf9ff800f

08004858 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004866:	4b72      	ldr	r3, [pc, #456]	; (8004a30 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	f003 0303 	and.w	r3, r3, #3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00e      	beq.n	8004890 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004872:	4b6f      	ldr	r3, [pc, #444]	; (8004a30 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f003 0203 	and.w	r2, r3, #3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	429a      	cmp	r2, r3
 8004880:	d103      	bne.n	800488a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
       ||
 8004886:	2b00      	cmp	r3, #0
 8004888:	d142      	bne.n	8004910 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	73fb      	strb	r3, [r7, #15]
 800488e:	e03f      	b.n	8004910 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2b03      	cmp	r3, #3
 8004896:	d018      	beq.n	80048ca <RCCEx_PLLSAI2_Config+0x72>
 8004898:	2b03      	cmp	r3, #3
 800489a:	d825      	bhi.n	80048e8 <RCCEx_PLLSAI2_Config+0x90>
 800489c:	2b01      	cmp	r3, #1
 800489e:	d002      	beq.n	80048a6 <RCCEx_PLLSAI2_Config+0x4e>
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d009      	beq.n	80048b8 <RCCEx_PLLSAI2_Config+0x60>
 80048a4:	e020      	b.n	80048e8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80048a6:	4b62      	ldr	r3, [pc, #392]	; (8004a30 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d11d      	bne.n	80048ee <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048b6:	e01a      	b.n	80048ee <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048b8:	4b5d      	ldr	r3, [pc, #372]	; (8004a30 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d116      	bne.n	80048f2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048c8:	e013      	b.n	80048f2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048ca:	4b59      	ldr	r3, [pc, #356]	; (8004a30 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10f      	bne.n	80048f6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048d6:	4b56      	ldr	r3, [pc, #344]	; (8004a30 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d109      	bne.n	80048f6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048e6:	e006      	b.n	80048f6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	73fb      	strb	r3, [r7, #15]
      break;
 80048ec:	e004      	b.n	80048f8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80048ee:	bf00      	nop
 80048f0:	e002      	b.n	80048f8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80048f2:	bf00      	nop
 80048f4:	e000      	b.n	80048f8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80048f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80048f8:	7bfb      	ldrb	r3, [r7, #15]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d108      	bne.n	8004910 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80048fe:	4b4c      	ldr	r3, [pc, #304]	; (8004a30 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	f023 0203 	bic.w	r2, r3, #3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4949      	ldr	r1, [pc, #292]	; (8004a30 <RCCEx_PLLSAI2_Config+0x1d8>)
 800490c:	4313      	orrs	r3, r2
 800490e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004910:	7bfb      	ldrb	r3, [r7, #15]
 8004912:	2b00      	cmp	r3, #0
 8004914:	f040 8086 	bne.w	8004a24 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004918:	4b45      	ldr	r3, [pc, #276]	; (8004a30 <RCCEx_PLLSAI2_Config+0x1d8>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a44      	ldr	r2, [pc, #272]	; (8004a30 <RCCEx_PLLSAI2_Config+0x1d8>)
 800491e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004922:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004924:	f7fd fa44 	bl	8001db0 <HAL_GetTick>
 8004928:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800492a:	e009      	b.n	8004940 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800492c:	f7fd fa40 	bl	8001db0 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b02      	cmp	r3, #2
 8004938:	d902      	bls.n	8004940 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	73fb      	strb	r3, [r7, #15]
        break;
 800493e:	e005      	b.n	800494c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004940:	4b3b      	ldr	r3, [pc, #236]	; (8004a30 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1ef      	bne.n	800492c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800494c:	7bfb      	ldrb	r3, [r7, #15]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d168      	bne.n	8004a24 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d113      	bne.n	8004980 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004958:	4b35      	ldr	r3, [pc, #212]	; (8004a30 <RCCEx_PLLSAI2_Config+0x1d8>)
 800495a:	695a      	ldr	r2, [r3, #20]
 800495c:	4b35      	ldr	r3, [pc, #212]	; (8004a34 <RCCEx_PLLSAI2_Config+0x1dc>)
 800495e:	4013      	ands	r3, r2
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	6892      	ldr	r2, [r2, #8]
 8004964:	0211      	lsls	r1, r2, #8
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	68d2      	ldr	r2, [r2, #12]
 800496a:	06d2      	lsls	r2, r2, #27
 800496c:	4311      	orrs	r1, r2
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	6852      	ldr	r2, [r2, #4]
 8004972:	3a01      	subs	r2, #1
 8004974:	0112      	lsls	r2, r2, #4
 8004976:	430a      	orrs	r2, r1
 8004978:	492d      	ldr	r1, [pc, #180]	; (8004a30 <RCCEx_PLLSAI2_Config+0x1d8>)
 800497a:	4313      	orrs	r3, r2
 800497c:	614b      	str	r3, [r1, #20]
 800497e:	e02d      	b.n	80049dc <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d115      	bne.n	80049b2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004986:	4b2a      	ldr	r3, [pc, #168]	; (8004a30 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004988:	695a      	ldr	r2, [r3, #20]
 800498a:	4b2b      	ldr	r3, [pc, #172]	; (8004a38 <RCCEx_PLLSAI2_Config+0x1e0>)
 800498c:	4013      	ands	r3, r2
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	6892      	ldr	r2, [r2, #8]
 8004992:	0211      	lsls	r1, r2, #8
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	6912      	ldr	r2, [r2, #16]
 8004998:	0852      	lsrs	r2, r2, #1
 800499a:	3a01      	subs	r2, #1
 800499c:	0552      	lsls	r2, r2, #21
 800499e:	4311      	orrs	r1, r2
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6852      	ldr	r2, [r2, #4]
 80049a4:	3a01      	subs	r2, #1
 80049a6:	0112      	lsls	r2, r2, #4
 80049a8:	430a      	orrs	r2, r1
 80049aa:	4921      	ldr	r1, [pc, #132]	; (8004a30 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	614b      	str	r3, [r1, #20]
 80049b0:	e014      	b.n	80049dc <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049b2:	4b1f      	ldr	r3, [pc, #124]	; (8004a30 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049b4:	695a      	ldr	r2, [r3, #20]
 80049b6:	4b21      	ldr	r3, [pc, #132]	; (8004a3c <RCCEx_PLLSAI2_Config+0x1e4>)
 80049b8:	4013      	ands	r3, r2
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	6892      	ldr	r2, [r2, #8]
 80049be:	0211      	lsls	r1, r2, #8
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6952      	ldr	r2, [r2, #20]
 80049c4:	0852      	lsrs	r2, r2, #1
 80049c6:	3a01      	subs	r2, #1
 80049c8:	0652      	lsls	r2, r2, #25
 80049ca:	4311      	orrs	r1, r2
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	6852      	ldr	r2, [r2, #4]
 80049d0:	3a01      	subs	r2, #1
 80049d2:	0112      	lsls	r2, r2, #4
 80049d4:	430a      	orrs	r2, r1
 80049d6:	4916      	ldr	r1, [pc, #88]	; (8004a30 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80049dc:	4b14      	ldr	r3, [pc, #80]	; (8004a30 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a13      	ldr	r2, [pc, #76]	; (8004a30 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e8:	f7fd f9e2 	bl	8001db0 <HAL_GetTick>
 80049ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049ee:	e009      	b.n	8004a04 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049f0:	f7fd f9de 	bl	8001db0 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d902      	bls.n	8004a04 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	73fb      	strb	r3, [r7, #15]
          break;
 8004a02:	e005      	b.n	8004a10 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a04:	4b0a      	ldr	r3, [pc, #40]	; (8004a30 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d0ef      	beq.n	80049f0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d106      	bne.n	8004a24 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004a16:	4b06      	ldr	r3, [pc, #24]	; (8004a30 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a18:	695a      	ldr	r2, [r3, #20]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	4904      	ldr	r1, [pc, #16]	; (8004a30 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	40021000 	.word	0x40021000
 8004a34:	07ff800f 	.word	0x07ff800f
 8004a38:	ff9f800f 	.word	0xff9f800f
 8004a3c:	f9ff800f 	.word	0xf9ff800f

08004a40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e095      	b.n	8004b7e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d108      	bne.n	8004a6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a62:	d009      	beq.n	8004a78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	61da      	str	r2, [r3, #28]
 8004a6a:	e005      	b.n	8004a78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d106      	bne.n	8004a98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7fc feee 	bl	8001874 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ab8:	d902      	bls.n	8004ac0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004aba:	2300      	movs	r3, #0
 8004abc:	60fb      	str	r3, [r7, #12]
 8004abe:	e002      	b.n	8004ac6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ac4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004ace:	d007      	beq.n	8004ae0 <HAL_SPI_Init+0xa0>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ad8:	d002      	beq.n	8004ae0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004af0:	431a      	orrs	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	431a      	orrs	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	431a      	orrs	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	69db      	ldr	r3, [r3, #28]
 8004b14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b22:	ea42 0103 	orr.w	r1, r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	0c1b      	lsrs	r3, r3, #16
 8004b3c:	f003 0204 	and.w	r2, r3, #4
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b44:	f003 0310 	and.w	r3, r3, #16
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b4e:	f003 0308 	and.w	r3, r3, #8
 8004b52:	431a      	orrs	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004b5c:	ea42 0103 	orr.w	r1, r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b082      	sub	sp, #8
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e049      	b.n	8004c2c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d106      	bne.n	8004bb2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f7fc fea3 	bl	80018f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2202      	movs	r2, #2
 8004bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	3304      	adds	r3, #4
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	4610      	mov	r0, r2
 8004bc6:	f000 fb7b 	bl	80052c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d101      	bne.n	8004c46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e049      	b.n	8004cda <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d106      	bne.n	8004c60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f841 	bl	8004ce2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2202      	movs	r2, #2
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	3304      	adds	r3, #4
 8004c70:	4619      	mov	r1, r3
 8004c72:	4610      	mov	r0, r2
 8004c74:	f000 fb24 	bl	80052c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b083      	sub	sp, #12
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004cea:	bf00      	nop
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
	...

08004cf8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d109      	bne.n	8004d1c <HAL_TIM_PWM_Start+0x24>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	bf14      	ite	ne
 8004d14:	2301      	movne	r3, #1
 8004d16:	2300      	moveq	r3, #0
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	e03c      	b.n	8004d96 <HAL_TIM_PWM_Start+0x9e>
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	2b04      	cmp	r3, #4
 8004d20:	d109      	bne.n	8004d36 <HAL_TIM_PWM_Start+0x3e>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	bf14      	ite	ne
 8004d2e:	2301      	movne	r3, #1
 8004d30:	2300      	moveq	r3, #0
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	e02f      	b.n	8004d96 <HAL_TIM_PWM_Start+0x9e>
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	2b08      	cmp	r3, #8
 8004d3a:	d109      	bne.n	8004d50 <HAL_TIM_PWM_Start+0x58>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	bf14      	ite	ne
 8004d48:	2301      	movne	r3, #1
 8004d4a:	2300      	moveq	r3, #0
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	e022      	b.n	8004d96 <HAL_TIM_PWM_Start+0x9e>
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	2b0c      	cmp	r3, #12
 8004d54:	d109      	bne.n	8004d6a <HAL_TIM_PWM_Start+0x72>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	bf14      	ite	ne
 8004d62:	2301      	movne	r3, #1
 8004d64:	2300      	moveq	r3, #0
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	e015      	b.n	8004d96 <HAL_TIM_PWM_Start+0x9e>
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	2b10      	cmp	r3, #16
 8004d6e:	d109      	bne.n	8004d84 <HAL_TIM_PWM_Start+0x8c>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	bf14      	ite	ne
 8004d7c:	2301      	movne	r3, #1
 8004d7e:	2300      	moveq	r3, #0
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	e008      	b.n	8004d96 <HAL_TIM_PWM_Start+0x9e>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	bf14      	ite	ne
 8004d90:	2301      	movne	r3, #1
 8004d92:	2300      	moveq	r3, #0
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e09c      	b.n	8004ed8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d104      	bne.n	8004dae <HAL_TIM_PWM_Start+0xb6>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2202      	movs	r2, #2
 8004da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dac:	e023      	b.n	8004df6 <HAL_TIM_PWM_Start+0xfe>
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2b04      	cmp	r3, #4
 8004db2:	d104      	bne.n	8004dbe <HAL_TIM_PWM_Start+0xc6>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2202      	movs	r2, #2
 8004db8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dbc:	e01b      	b.n	8004df6 <HAL_TIM_PWM_Start+0xfe>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b08      	cmp	r3, #8
 8004dc2:	d104      	bne.n	8004dce <HAL_TIM_PWM_Start+0xd6>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dcc:	e013      	b.n	8004df6 <HAL_TIM_PWM_Start+0xfe>
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2b0c      	cmp	r3, #12
 8004dd2:	d104      	bne.n	8004dde <HAL_TIM_PWM_Start+0xe6>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ddc:	e00b      	b.n	8004df6 <HAL_TIM_PWM_Start+0xfe>
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	2b10      	cmp	r3, #16
 8004de2:	d104      	bne.n	8004dee <HAL_TIM_PWM_Start+0xf6>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2202      	movs	r2, #2
 8004de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dec:	e003      	b.n	8004df6 <HAL_TIM_PWM_Start+0xfe>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2202      	movs	r2, #2
 8004df2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	6839      	ldr	r1, [r7, #0]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 fe68 	bl	8005ad4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a35      	ldr	r2, [pc, #212]	; (8004ee0 <HAL_TIM_PWM_Start+0x1e8>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d013      	beq.n	8004e36 <HAL_TIM_PWM_Start+0x13e>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a34      	ldr	r2, [pc, #208]	; (8004ee4 <HAL_TIM_PWM_Start+0x1ec>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d00e      	beq.n	8004e36 <HAL_TIM_PWM_Start+0x13e>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a32      	ldr	r2, [pc, #200]	; (8004ee8 <HAL_TIM_PWM_Start+0x1f0>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d009      	beq.n	8004e36 <HAL_TIM_PWM_Start+0x13e>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a31      	ldr	r2, [pc, #196]	; (8004eec <HAL_TIM_PWM_Start+0x1f4>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d004      	beq.n	8004e36 <HAL_TIM_PWM_Start+0x13e>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a2f      	ldr	r2, [pc, #188]	; (8004ef0 <HAL_TIM_PWM_Start+0x1f8>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d101      	bne.n	8004e3a <HAL_TIM_PWM_Start+0x142>
 8004e36:	2301      	movs	r3, #1
 8004e38:	e000      	b.n	8004e3c <HAL_TIM_PWM_Start+0x144>
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d007      	beq.n	8004e50 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e4e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a22      	ldr	r2, [pc, #136]	; (8004ee0 <HAL_TIM_PWM_Start+0x1e8>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d01d      	beq.n	8004e96 <HAL_TIM_PWM_Start+0x19e>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e62:	d018      	beq.n	8004e96 <HAL_TIM_PWM_Start+0x19e>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a22      	ldr	r2, [pc, #136]	; (8004ef4 <HAL_TIM_PWM_Start+0x1fc>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d013      	beq.n	8004e96 <HAL_TIM_PWM_Start+0x19e>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a21      	ldr	r2, [pc, #132]	; (8004ef8 <HAL_TIM_PWM_Start+0x200>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d00e      	beq.n	8004e96 <HAL_TIM_PWM_Start+0x19e>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a1f      	ldr	r2, [pc, #124]	; (8004efc <HAL_TIM_PWM_Start+0x204>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d009      	beq.n	8004e96 <HAL_TIM_PWM_Start+0x19e>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a17      	ldr	r2, [pc, #92]	; (8004ee4 <HAL_TIM_PWM_Start+0x1ec>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d004      	beq.n	8004e96 <HAL_TIM_PWM_Start+0x19e>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a15      	ldr	r2, [pc, #84]	; (8004ee8 <HAL_TIM_PWM_Start+0x1f0>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d115      	bne.n	8004ec2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	4b18      	ldr	r3, [pc, #96]	; (8004f00 <HAL_TIM_PWM_Start+0x208>)
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2b06      	cmp	r3, #6
 8004ea6:	d015      	beq.n	8004ed4 <HAL_TIM_PWM_Start+0x1dc>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eae:	d011      	beq.n	8004ed4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f042 0201 	orr.w	r2, r2, #1
 8004ebe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ec0:	e008      	b.n	8004ed4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f042 0201 	orr.w	r2, r2, #1
 8004ed0:	601a      	str	r2, [r3, #0]
 8004ed2:	e000      	b.n	8004ed6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ed4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	40012c00 	.word	0x40012c00
 8004ee4:	40013400 	.word	0x40013400
 8004ee8:	40014000 	.word	0x40014000
 8004eec:	40014400 	.word	0x40014400
 8004ef0:	40014800 	.word	0x40014800
 8004ef4:	40000400 	.word	0x40000400
 8004ef8:	40000800 	.word	0x40000800
 8004efc:	40000c00 	.word	0x40000c00
 8004f00:	00010007 	.word	0x00010007

08004f04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f10:	2300      	movs	r3, #0
 8004f12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d101      	bne.n	8004f22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f1e:	2302      	movs	r3, #2
 8004f20:	e0ff      	b.n	8005122 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b14      	cmp	r3, #20
 8004f2e:	f200 80f0 	bhi.w	8005112 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004f32:	a201      	add	r2, pc, #4	; (adr r2, 8004f38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f38:	08004f8d 	.word	0x08004f8d
 8004f3c:	08005113 	.word	0x08005113
 8004f40:	08005113 	.word	0x08005113
 8004f44:	08005113 	.word	0x08005113
 8004f48:	08004fcd 	.word	0x08004fcd
 8004f4c:	08005113 	.word	0x08005113
 8004f50:	08005113 	.word	0x08005113
 8004f54:	08005113 	.word	0x08005113
 8004f58:	0800500f 	.word	0x0800500f
 8004f5c:	08005113 	.word	0x08005113
 8004f60:	08005113 	.word	0x08005113
 8004f64:	08005113 	.word	0x08005113
 8004f68:	0800504f 	.word	0x0800504f
 8004f6c:	08005113 	.word	0x08005113
 8004f70:	08005113 	.word	0x08005113
 8004f74:	08005113 	.word	0x08005113
 8004f78:	08005091 	.word	0x08005091
 8004f7c:	08005113 	.word	0x08005113
 8004f80:	08005113 	.word	0x08005113
 8004f84:	08005113 	.word	0x08005113
 8004f88:	080050d1 	.word	0x080050d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68b9      	ldr	r1, [r7, #8]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f000 fa2e 	bl	80053f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	699a      	ldr	r2, [r3, #24]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f042 0208 	orr.w	r2, r2, #8
 8004fa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	699a      	ldr	r2, [r3, #24]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 0204 	bic.w	r2, r2, #4
 8004fb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6999      	ldr	r1, [r3, #24]
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	691a      	ldr	r2, [r3, #16]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	619a      	str	r2, [r3, #24]
      break;
 8004fca:	e0a5      	b.n	8005118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68b9      	ldr	r1, [r7, #8]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 fa9e 	bl	8005514 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	699a      	ldr	r2, [r3, #24]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fe6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	699a      	ldr	r2, [r3, #24]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ff6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	6999      	ldr	r1, [r3, #24]
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	021a      	lsls	r2, r3, #8
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	619a      	str	r2, [r3, #24]
      break;
 800500c:	e084      	b.n	8005118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68b9      	ldr	r1, [r7, #8]
 8005014:	4618      	mov	r0, r3
 8005016:	f000 fb07 	bl	8005628 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	69da      	ldr	r2, [r3, #28]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f042 0208 	orr.w	r2, r2, #8
 8005028:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	69da      	ldr	r2, [r3, #28]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f022 0204 	bic.w	r2, r2, #4
 8005038:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	69d9      	ldr	r1, [r3, #28]
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	691a      	ldr	r2, [r3, #16]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	430a      	orrs	r2, r1
 800504a:	61da      	str	r2, [r3, #28]
      break;
 800504c:	e064      	b.n	8005118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68b9      	ldr	r1, [r7, #8]
 8005054:	4618      	mov	r0, r3
 8005056:	f000 fb6f 	bl	8005738 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	69da      	ldr	r2, [r3, #28]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005068:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	69da      	ldr	r2, [r3, #28]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005078:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	69d9      	ldr	r1, [r3, #28]
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	021a      	lsls	r2, r3, #8
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	61da      	str	r2, [r3, #28]
      break;
 800508e:	e043      	b.n	8005118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68b9      	ldr	r1, [r7, #8]
 8005096:	4618      	mov	r0, r3
 8005098:	f000 fbb8 	bl	800580c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f042 0208 	orr.w	r2, r2, #8
 80050aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0204 	bic.w	r2, r2, #4
 80050ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	691a      	ldr	r2, [r3, #16]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80050ce:	e023      	b.n	8005118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68b9      	ldr	r1, [r7, #8]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f000 fbfc 	bl	80058d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	021a      	lsls	r2, r3, #8
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	430a      	orrs	r2, r1
 800510e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005110:	e002      	b.n	8005118 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	75fb      	strb	r3, [r7, #23]
      break;
 8005116:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005120:	7dfb      	ldrb	r3, [r7, #23]
}
 8005122:	4618      	mov	r0, r3
 8005124:	3718      	adds	r7, #24
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop

0800512c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005136:	2300      	movs	r3, #0
 8005138:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005140:	2b01      	cmp	r3, #1
 8005142:	d101      	bne.n	8005148 <HAL_TIM_ConfigClockSource+0x1c>
 8005144:	2302      	movs	r3, #2
 8005146:	e0b6      	b.n	80052b6 <HAL_TIM_ConfigClockSource+0x18a>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2202      	movs	r2, #2
 8005154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005166:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800516a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005172:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005184:	d03e      	beq.n	8005204 <HAL_TIM_ConfigClockSource+0xd8>
 8005186:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800518a:	f200 8087 	bhi.w	800529c <HAL_TIM_ConfigClockSource+0x170>
 800518e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005192:	f000 8086 	beq.w	80052a2 <HAL_TIM_ConfigClockSource+0x176>
 8005196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800519a:	d87f      	bhi.n	800529c <HAL_TIM_ConfigClockSource+0x170>
 800519c:	2b70      	cmp	r3, #112	; 0x70
 800519e:	d01a      	beq.n	80051d6 <HAL_TIM_ConfigClockSource+0xaa>
 80051a0:	2b70      	cmp	r3, #112	; 0x70
 80051a2:	d87b      	bhi.n	800529c <HAL_TIM_ConfigClockSource+0x170>
 80051a4:	2b60      	cmp	r3, #96	; 0x60
 80051a6:	d050      	beq.n	800524a <HAL_TIM_ConfigClockSource+0x11e>
 80051a8:	2b60      	cmp	r3, #96	; 0x60
 80051aa:	d877      	bhi.n	800529c <HAL_TIM_ConfigClockSource+0x170>
 80051ac:	2b50      	cmp	r3, #80	; 0x50
 80051ae:	d03c      	beq.n	800522a <HAL_TIM_ConfigClockSource+0xfe>
 80051b0:	2b50      	cmp	r3, #80	; 0x50
 80051b2:	d873      	bhi.n	800529c <HAL_TIM_ConfigClockSource+0x170>
 80051b4:	2b40      	cmp	r3, #64	; 0x40
 80051b6:	d058      	beq.n	800526a <HAL_TIM_ConfigClockSource+0x13e>
 80051b8:	2b40      	cmp	r3, #64	; 0x40
 80051ba:	d86f      	bhi.n	800529c <HAL_TIM_ConfigClockSource+0x170>
 80051bc:	2b30      	cmp	r3, #48	; 0x30
 80051be:	d064      	beq.n	800528a <HAL_TIM_ConfigClockSource+0x15e>
 80051c0:	2b30      	cmp	r3, #48	; 0x30
 80051c2:	d86b      	bhi.n	800529c <HAL_TIM_ConfigClockSource+0x170>
 80051c4:	2b20      	cmp	r3, #32
 80051c6:	d060      	beq.n	800528a <HAL_TIM_ConfigClockSource+0x15e>
 80051c8:	2b20      	cmp	r3, #32
 80051ca:	d867      	bhi.n	800529c <HAL_TIM_ConfigClockSource+0x170>
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d05c      	beq.n	800528a <HAL_TIM_ConfigClockSource+0x15e>
 80051d0:	2b10      	cmp	r3, #16
 80051d2:	d05a      	beq.n	800528a <HAL_TIM_ConfigClockSource+0x15e>
 80051d4:	e062      	b.n	800529c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6818      	ldr	r0, [r3, #0]
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	6899      	ldr	r1, [r3, #8]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	f000 fc55 	bl	8005a94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	609a      	str	r2, [r3, #8]
      break;
 8005202:	e04f      	b.n	80052a4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6818      	ldr	r0, [r3, #0]
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	6899      	ldr	r1, [r3, #8]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	f000 fc3e 	bl	8005a94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689a      	ldr	r2, [r3, #8]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005226:	609a      	str	r2, [r3, #8]
      break;
 8005228:	e03c      	b.n	80052a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6818      	ldr	r0, [r3, #0]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	6859      	ldr	r1, [r3, #4]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	461a      	mov	r2, r3
 8005238:	f000 fbb2 	bl	80059a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2150      	movs	r1, #80	; 0x50
 8005242:	4618      	mov	r0, r3
 8005244:	f000 fc0b 	bl	8005a5e <TIM_ITRx_SetConfig>
      break;
 8005248:	e02c      	b.n	80052a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6818      	ldr	r0, [r3, #0]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	6859      	ldr	r1, [r3, #4]
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	461a      	mov	r2, r3
 8005258:	f000 fbd1 	bl	80059fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2160      	movs	r1, #96	; 0x60
 8005262:	4618      	mov	r0, r3
 8005264:	f000 fbfb 	bl	8005a5e <TIM_ITRx_SetConfig>
      break;
 8005268:	e01c      	b.n	80052a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6818      	ldr	r0, [r3, #0]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	6859      	ldr	r1, [r3, #4]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	461a      	mov	r2, r3
 8005278:	f000 fb92 	bl	80059a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2140      	movs	r1, #64	; 0x40
 8005282:	4618      	mov	r0, r3
 8005284:	f000 fbeb 	bl	8005a5e <TIM_ITRx_SetConfig>
      break;
 8005288:	e00c      	b.n	80052a4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4619      	mov	r1, r3
 8005294:	4610      	mov	r0, r2
 8005296:	f000 fbe2 	bl	8005a5e <TIM_ITRx_SetConfig>
      break;
 800529a:	e003      	b.n	80052a4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	73fb      	strb	r3, [r7, #15]
      break;
 80052a0:	e000      	b.n	80052a4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80052a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
	...

080052c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a40      	ldr	r2, [pc, #256]	; (80053d4 <TIM_Base_SetConfig+0x114>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d013      	beq.n	8005300 <TIM_Base_SetConfig+0x40>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052de:	d00f      	beq.n	8005300 <TIM_Base_SetConfig+0x40>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a3d      	ldr	r2, [pc, #244]	; (80053d8 <TIM_Base_SetConfig+0x118>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d00b      	beq.n	8005300 <TIM_Base_SetConfig+0x40>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a3c      	ldr	r2, [pc, #240]	; (80053dc <TIM_Base_SetConfig+0x11c>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d007      	beq.n	8005300 <TIM_Base_SetConfig+0x40>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a3b      	ldr	r2, [pc, #236]	; (80053e0 <TIM_Base_SetConfig+0x120>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d003      	beq.n	8005300 <TIM_Base_SetConfig+0x40>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a3a      	ldr	r2, [pc, #232]	; (80053e4 <TIM_Base_SetConfig+0x124>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d108      	bne.n	8005312 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005306:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	4313      	orrs	r3, r2
 8005310:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a2f      	ldr	r2, [pc, #188]	; (80053d4 <TIM_Base_SetConfig+0x114>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d01f      	beq.n	800535a <TIM_Base_SetConfig+0x9a>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005320:	d01b      	beq.n	800535a <TIM_Base_SetConfig+0x9a>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a2c      	ldr	r2, [pc, #176]	; (80053d8 <TIM_Base_SetConfig+0x118>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d017      	beq.n	800535a <TIM_Base_SetConfig+0x9a>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a2b      	ldr	r2, [pc, #172]	; (80053dc <TIM_Base_SetConfig+0x11c>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d013      	beq.n	800535a <TIM_Base_SetConfig+0x9a>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a2a      	ldr	r2, [pc, #168]	; (80053e0 <TIM_Base_SetConfig+0x120>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d00f      	beq.n	800535a <TIM_Base_SetConfig+0x9a>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a29      	ldr	r2, [pc, #164]	; (80053e4 <TIM_Base_SetConfig+0x124>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d00b      	beq.n	800535a <TIM_Base_SetConfig+0x9a>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a28      	ldr	r2, [pc, #160]	; (80053e8 <TIM_Base_SetConfig+0x128>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d007      	beq.n	800535a <TIM_Base_SetConfig+0x9a>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a27      	ldr	r2, [pc, #156]	; (80053ec <TIM_Base_SetConfig+0x12c>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d003      	beq.n	800535a <TIM_Base_SetConfig+0x9a>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a26      	ldr	r2, [pc, #152]	; (80053f0 <TIM_Base_SetConfig+0x130>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d108      	bne.n	800536c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005360:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	4313      	orrs	r3, r2
 800536a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	4313      	orrs	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	689a      	ldr	r2, [r3, #8]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a10      	ldr	r2, [pc, #64]	; (80053d4 <TIM_Base_SetConfig+0x114>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d00f      	beq.n	80053b8 <TIM_Base_SetConfig+0xf8>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a12      	ldr	r2, [pc, #72]	; (80053e4 <TIM_Base_SetConfig+0x124>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d00b      	beq.n	80053b8 <TIM_Base_SetConfig+0xf8>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a11      	ldr	r2, [pc, #68]	; (80053e8 <TIM_Base_SetConfig+0x128>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d007      	beq.n	80053b8 <TIM_Base_SetConfig+0xf8>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a10      	ldr	r2, [pc, #64]	; (80053ec <TIM_Base_SetConfig+0x12c>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d003      	beq.n	80053b8 <TIM_Base_SetConfig+0xf8>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a0f      	ldr	r2, [pc, #60]	; (80053f0 <TIM_Base_SetConfig+0x130>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d103      	bne.n	80053c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	691a      	ldr	r2, [r3, #16]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	615a      	str	r2, [r3, #20]
}
 80053c6:	bf00      	nop
 80053c8:	3714      	adds	r7, #20
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	40012c00 	.word	0x40012c00
 80053d8:	40000400 	.word	0x40000400
 80053dc:	40000800 	.word	0x40000800
 80053e0:	40000c00 	.word	0x40000c00
 80053e4:	40013400 	.word	0x40013400
 80053e8:	40014000 	.word	0x40014000
 80053ec:	40014400 	.word	0x40014400
 80053f0:	40014800 	.word	0x40014800

080053f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b087      	sub	sp, #28
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	f023 0201 	bic.w	r2, r3, #1
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f023 0303 	bic.w	r3, r3, #3
 800542e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	4313      	orrs	r3, r2
 8005438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	f023 0302 	bic.w	r3, r3, #2
 8005440:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	4313      	orrs	r3, r2
 800544a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a2c      	ldr	r2, [pc, #176]	; (8005500 <TIM_OC1_SetConfig+0x10c>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d00f      	beq.n	8005474 <TIM_OC1_SetConfig+0x80>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a2b      	ldr	r2, [pc, #172]	; (8005504 <TIM_OC1_SetConfig+0x110>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d00b      	beq.n	8005474 <TIM_OC1_SetConfig+0x80>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a2a      	ldr	r2, [pc, #168]	; (8005508 <TIM_OC1_SetConfig+0x114>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d007      	beq.n	8005474 <TIM_OC1_SetConfig+0x80>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a29      	ldr	r2, [pc, #164]	; (800550c <TIM_OC1_SetConfig+0x118>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d003      	beq.n	8005474 <TIM_OC1_SetConfig+0x80>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a28      	ldr	r2, [pc, #160]	; (8005510 <TIM_OC1_SetConfig+0x11c>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d10c      	bne.n	800548e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f023 0308 	bic.w	r3, r3, #8
 800547a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	4313      	orrs	r3, r2
 8005484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f023 0304 	bic.w	r3, r3, #4
 800548c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a1b      	ldr	r2, [pc, #108]	; (8005500 <TIM_OC1_SetConfig+0x10c>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d00f      	beq.n	80054b6 <TIM_OC1_SetConfig+0xc2>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a1a      	ldr	r2, [pc, #104]	; (8005504 <TIM_OC1_SetConfig+0x110>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d00b      	beq.n	80054b6 <TIM_OC1_SetConfig+0xc2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a19      	ldr	r2, [pc, #100]	; (8005508 <TIM_OC1_SetConfig+0x114>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d007      	beq.n	80054b6 <TIM_OC1_SetConfig+0xc2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a18      	ldr	r2, [pc, #96]	; (800550c <TIM_OC1_SetConfig+0x118>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d003      	beq.n	80054b6 <TIM_OC1_SetConfig+0xc2>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a17      	ldr	r2, [pc, #92]	; (8005510 <TIM_OC1_SetConfig+0x11c>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d111      	bne.n	80054da <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	621a      	str	r2, [r3, #32]
}
 80054f4:	bf00      	nop
 80054f6:	371c      	adds	r7, #28
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr
 8005500:	40012c00 	.word	0x40012c00
 8005504:	40013400 	.word	0x40013400
 8005508:	40014000 	.word	0x40014000
 800550c:	40014400 	.word	0x40014400
 8005510:	40014800 	.word	0x40014800

08005514 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005514:	b480      	push	{r7}
 8005516:	b087      	sub	sp, #28
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	f023 0210 	bic.w	r2, r3, #16
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800554e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	021b      	lsls	r3, r3, #8
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	4313      	orrs	r3, r2
 800555a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	f023 0320 	bic.w	r3, r3, #32
 8005562:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	011b      	lsls	r3, r3, #4
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	4313      	orrs	r3, r2
 800556e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a28      	ldr	r2, [pc, #160]	; (8005614 <TIM_OC2_SetConfig+0x100>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d003      	beq.n	8005580 <TIM_OC2_SetConfig+0x6c>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a27      	ldr	r2, [pc, #156]	; (8005618 <TIM_OC2_SetConfig+0x104>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d10d      	bne.n	800559c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005586:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	011b      	lsls	r3, r3, #4
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	4313      	orrs	r3, r2
 8005592:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800559a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a1d      	ldr	r2, [pc, #116]	; (8005614 <TIM_OC2_SetConfig+0x100>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d00f      	beq.n	80055c4 <TIM_OC2_SetConfig+0xb0>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a1c      	ldr	r2, [pc, #112]	; (8005618 <TIM_OC2_SetConfig+0x104>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d00b      	beq.n	80055c4 <TIM_OC2_SetConfig+0xb0>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a1b      	ldr	r2, [pc, #108]	; (800561c <TIM_OC2_SetConfig+0x108>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d007      	beq.n	80055c4 <TIM_OC2_SetConfig+0xb0>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a1a      	ldr	r2, [pc, #104]	; (8005620 <TIM_OC2_SetConfig+0x10c>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d003      	beq.n	80055c4 <TIM_OC2_SetConfig+0xb0>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a19      	ldr	r2, [pc, #100]	; (8005624 <TIM_OC2_SetConfig+0x110>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d113      	bne.n	80055ec <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	695b      	ldr	r3, [r3, #20]
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	4313      	orrs	r3, r2
 80055de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	621a      	str	r2, [r3, #32]
}
 8005606:	bf00      	nop
 8005608:	371c      	adds	r7, #28
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	40012c00 	.word	0x40012c00
 8005618:	40013400 	.word	0x40013400
 800561c:	40014000 	.word	0x40014000
 8005620:	40014400 	.word	0x40014400
 8005624:	40014800 	.word	0x40014800

08005628 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005628:	b480      	push	{r7}
 800562a:	b087      	sub	sp, #28
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f023 0303 	bic.w	r3, r3, #3
 8005662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	4313      	orrs	r3, r2
 800566c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005674:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	021b      	lsls	r3, r3, #8
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	4313      	orrs	r3, r2
 8005680:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a27      	ldr	r2, [pc, #156]	; (8005724 <TIM_OC3_SetConfig+0xfc>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d003      	beq.n	8005692 <TIM_OC3_SetConfig+0x6a>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a26      	ldr	r2, [pc, #152]	; (8005728 <TIM_OC3_SetConfig+0x100>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d10d      	bne.n	80056ae <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005698:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	021b      	lsls	r3, r3, #8
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a1c      	ldr	r2, [pc, #112]	; (8005724 <TIM_OC3_SetConfig+0xfc>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d00f      	beq.n	80056d6 <TIM_OC3_SetConfig+0xae>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a1b      	ldr	r2, [pc, #108]	; (8005728 <TIM_OC3_SetConfig+0x100>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d00b      	beq.n	80056d6 <TIM_OC3_SetConfig+0xae>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a1a      	ldr	r2, [pc, #104]	; (800572c <TIM_OC3_SetConfig+0x104>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d007      	beq.n	80056d6 <TIM_OC3_SetConfig+0xae>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a19      	ldr	r2, [pc, #100]	; (8005730 <TIM_OC3_SetConfig+0x108>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d003      	beq.n	80056d6 <TIM_OC3_SetConfig+0xae>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a18      	ldr	r2, [pc, #96]	; (8005734 <TIM_OC3_SetConfig+0x10c>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d113      	bne.n	80056fe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	011b      	lsls	r3, r3, #4
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	011b      	lsls	r3, r3, #4
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	685a      	ldr	r2, [r3, #4]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	621a      	str	r2, [r3, #32]
}
 8005718:	bf00      	nop
 800571a:	371c      	adds	r7, #28
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	40012c00 	.word	0x40012c00
 8005728:	40013400 	.word	0x40013400
 800572c:	40014000 	.word	0x40014000
 8005730:	40014400 	.word	0x40014400
 8005734:	40014800 	.word	0x40014800

08005738 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005738:	b480      	push	{r7}
 800573a:	b087      	sub	sp, #28
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800576a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005772:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	021b      	lsls	r3, r3, #8
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	4313      	orrs	r3, r2
 800577e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005786:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	031b      	lsls	r3, r3, #12
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	4313      	orrs	r3, r2
 8005792:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a18      	ldr	r2, [pc, #96]	; (80057f8 <TIM_OC4_SetConfig+0xc0>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d00f      	beq.n	80057bc <TIM_OC4_SetConfig+0x84>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a17      	ldr	r2, [pc, #92]	; (80057fc <TIM_OC4_SetConfig+0xc4>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d00b      	beq.n	80057bc <TIM_OC4_SetConfig+0x84>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a16      	ldr	r2, [pc, #88]	; (8005800 <TIM_OC4_SetConfig+0xc8>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d007      	beq.n	80057bc <TIM_OC4_SetConfig+0x84>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a15      	ldr	r2, [pc, #84]	; (8005804 <TIM_OC4_SetConfig+0xcc>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d003      	beq.n	80057bc <TIM_OC4_SetConfig+0x84>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a14      	ldr	r2, [pc, #80]	; (8005808 <TIM_OC4_SetConfig+0xd0>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d109      	bne.n	80057d0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	019b      	lsls	r3, r3, #6
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	621a      	str	r2, [r3, #32]
}
 80057ea:	bf00      	nop
 80057ec:	371c      	adds	r7, #28
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	40012c00 	.word	0x40012c00
 80057fc:	40013400 	.word	0x40013400
 8005800:	40014000 	.word	0x40014000
 8005804:	40014400 	.word	0x40014400
 8005808:	40014800 	.word	0x40014800

0800580c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800580c:	b480      	push	{r7}
 800580e:	b087      	sub	sp, #28
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800583a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800583e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	4313      	orrs	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005850:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	041b      	lsls	r3, r3, #16
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	4313      	orrs	r3, r2
 800585c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a17      	ldr	r2, [pc, #92]	; (80058c0 <TIM_OC5_SetConfig+0xb4>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d00f      	beq.n	8005886 <TIM_OC5_SetConfig+0x7a>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a16      	ldr	r2, [pc, #88]	; (80058c4 <TIM_OC5_SetConfig+0xb8>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d00b      	beq.n	8005886 <TIM_OC5_SetConfig+0x7a>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a15      	ldr	r2, [pc, #84]	; (80058c8 <TIM_OC5_SetConfig+0xbc>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d007      	beq.n	8005886 <TIM_OC5_SetConfig+0x7a>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a14      	ldr	r2, [pc, #80]	; (80058cc <TIM_OC5_SetConfig+0xc0>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d003      	beq.n	8005886 <TIM_OC5_SetConfig+0x7a>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a13      	ldr	r2, [pc, #76]	; (80058d0 <TIM_OC5_SetConfig+0xc4>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d109      	bne.n	800589a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800588c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	021b      	lsls	r3, r3, #8
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	4313      	orrs	r3, r2
 8005898:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	685a      	ldr	r2, [r3, #4]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	693a      	ldr	r2, [r7, #16]
 80058b2:	621a      	str	r2, [r3, #32]
}
 80058b4:	bf00      	nop
 80058b6:	371c      	adds	r7, #28
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr
 80058c0:	40012c00 	.word	0x40012c00
 80058c4:	40013400 	.word	0x40013400
 80058c8:	40014000 	.word	0x40014000
 80058cc:	40014400 	.word	0x40014400
 80058d0:	40014800 	.word	0x40014800

080058d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b087      	sub	sp, #28
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a1b      	ldr	r3, [r3, #32]
 80058ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005906:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	021b      	lsls	r3, r3, #8
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	4313      	orrs	r3, r2
 8005912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800591a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	051b      	lsls	r3, r3, #20
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	4313      	orrs	r3, r2
 8005926:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a18      	ldr	r2, [pc, #96]	; (800598c <TIM_OC6_SetConfig+0xb8>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d00f      	beq.n	8005950 <TIM_OC6_SetConfig+0x7c>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a17      	ldr	r2, [pc, #92]	; (8005990 <TIM_OC6_SetConfig+0xbc>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d00b      	beq.n	8005950 <TIM_OC6_SetConfig+0x7c>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a16      	ldr	r2, [pc, #88]	; (8005994 <TIM_OC6_SetConfig+0xc0>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d007      	beq.n	8005950 <TIM_OC6_SetConfig+0x7c>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a15      	ldr	r2, [pc, #84]	; (8005998 <TIM_OC6_SetConfig+0xc4>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d003      	beq.n	8005950 <TIM_OC6_SetConfig+0x7c>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a14      	ldr	r2, [pc, #80]	; (800599c <TIM_OC6_SetConfig+0xc8>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d109      	bne.n	8005964 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005956:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	029b      	lsls	r3, r3, #10
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	4313      	orrs	r3, r2
 8005962:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	685a      	ldr	r2, [r3, #4]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	621a      	str	r2, [r3, #32]
}
 800597e:	bf00      	nop
 8005980:	371c      	adds	r7, #28
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	40012c00 	.word	0x40012c00
 8005990:	40013400 	.word	0x40013400
 8005994:	40014000 	.word	0x40014000
 8005998:	40014400 	.word	0x40014400
 800599c:	40014800 	.word	0x40014800

080059a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b087      	sub	sp, #28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	f023 0201 	bic.w	r2, r3, #1
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	011b      	lsls	r3, r3, #4
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	f023 030a 	bic.w	r3, r3, #10
 80059dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	621a      	str	r2, [r3, #32]
}
 80059f2:	bf00      	nop
 80059f4:	371c      	adds	r7, #28
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b087      	sub	sp, #28
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	60f8      	str	r0, [r7, #12]
 8005a06:	60b9      	str	r1, [r7, #8]
 8005a08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	f023 0210 	bic.w	r2, r3, #16
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6a1b      	ldr	r3, [r3, #32]
 8005a20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	031b      	lsls	r3, r3, #12
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	011b      	lsls	r3, r3, #4
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	697a      	ldr	r2, [r7, #20]
 8005a4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	621a      	str	r2, [r3, #32]
}
 8005a52:	bf00      	nop
 8005a54:	371c      	adds	r7, #28
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b085      	sub	sp, #20
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
 8005a66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a76:	683a      	ldr	r2, [r7, #0]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	f043 0307 	orr.w	r3, r3, #7
 8005a80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	609a      	str	r2, [r3, #8]
}
 8005a88:	bf00      	nop
 8005a8a:	3714      	adds	r7, #20
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b087      	sub	sp, #28
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
 8005aa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005aae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	021a      	lsls	r2, r3, #8
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	431a      	orrs	r2, r3
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	609a      	str	r2, [r3, #8]
}
 8005ac8:	bf00      	nop
 8005aca:	371c      	adds	r7, #28
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b087      	sub	sp, #28
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	f003 031f 	and.w	r3, r3, #31
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6a1a      	ldr	r2, [r3, #32]
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	43db      	mvns	r3, r3
 8005af6:	401a      	ands	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6a1a      	ldr	r2, [r3, #32]
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	f003 031f 	and.w	r3, r3, #31
 8005b06:	6879      	ldr	r1, [r7, #4]
 8005b08:	fa01 f303 	lsl.w	r3, r1, r3
 8005b0c:	431a      	orrs	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	621a      	str	r2, [r3, #32]
}
 8005b12:	bf00      	nop
 8005b14:	371c      	adds	r7, #28
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
	...

08005b20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d101      	bne.n	8005b38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b34:	2302      	movs	r3, #2
 8005b36:	e068      	b.n	8005c0a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2202      	movs	r2, #2
 8005b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a2e      	ldr	r2, [pc, #184]	; (8005c18 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d004      	beq.n	8005b6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a2d      	ldr	r2, [pc, #180]	; (8005c1c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d108      	bne.n	8005b7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a1e      	ldr	r2, [pc, #120]	; (8005c18 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d01d      	beq.n	8005bde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005baa:	d018      	beq.n	8005bde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a1b      	ldr	r2, [pc, #108]	; (8005c20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d013      	beq.n	8005bde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a1a      	ldr	r2, [pc, #104]	; (8005c24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d00e      	beq.n	8005bde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a18      	ldr	r2, [pc, #96]	; (8005c28 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d009      	beq.n	8005bde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a13      	ldr	r2, [pc, #76]	; (8005c1c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d004      	beq.n	8005bde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a14      	ldr	r2, [pc, #80]	; (8005c2c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d10c      	bne.n	8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005be4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68ba      	ldr	r2, [r7, #8]
 8005bf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3714      	adds	r7, #20
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	40012c00 	.word	0x40012c00
 8005c1c:	40013400 	.word	0x40013400
 8005c20:	40000400 	.word	0x40000400
 8005c24:	40000800 	.word	0x40000800
 8005c28:	40000c00 	.word	0x40000c00
 8005c2c:	40014000 	.word	0x40014000

08005c30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e042      	b.n	8005cc8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d106      	bne.n	8005c5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f7fb fdad 	bl	80017b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2224      	movs	r2, #36	; 0x24
 8005c5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f022 0201 	bic.w	r2, r2, #1
 8005c70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 f8c4 	bl	8005e00 <UART_SetConfig>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d101      	bne.n	8005c82 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e022      	b.n	8005cc8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d002      	beq.n	8005c90 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 fbb4 	bl	80063f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685a      	ldr	r2, [r3, #4]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	689a      	ldr	r2, [r3, #8]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f042 0201 	orr.w	r2, r2, #1
 8005cbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 fc3b 	bl	800653c <UART_CheckIdleState>
 8005cc6:	4603      	mov	r3, r0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3708      	adds	r7, #8
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b08a      	sub	sp, #40	; 0x28
 8005cd4:	af02      	add	r7, sp, #8
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	603b      	str	r3, [r7, #0]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ce6:	2b20      	cmp	r3, #32
 8005ce8:	f040 8084 	bne.w	8005df4 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d002      	beq.n	8005cf8 <HAL_UART_Transmit+0x28>
 8005cf2:	88fb      	ldrh	r3, [r7, #6]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d101      	bne.n	8005cfc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e07c      	b.n	8005df6 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d101      	bne.n	8005d0a <HAL_UART_Transmit+0x3a>
 8005d06:	2302      	movs	r3, #2
 8005d08:	e075      	b.n	8005df6 <HAL_UART_Transmit+0x126>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2221      	movs	r2, #33	; 0x21
 8005d1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d22:	f7fc f845 	bl	8001db0 <HAL_GetTick>
 8005d26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	88fa      	ldrh	r2, [r7, #6]
 8005d2c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	88fa      	ldrh	r2, [r7, #6]
 8005d34:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d40:	d108      	bne.n	8005d54 <HAL_UART_Transmit+0x84>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d104      	bne.n	8005d54 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	61bb      	str	r3, [r7, #24]
 8005d52:	e003      	b.n	8005d5c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005d64:	e02d      	b.n	8005dc2 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	2180      	movs	r1, #128	; 0x80
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f000 fc2e 	bl	80065d2 <UART_WaitOnFlagUntilTimeout>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d001      	beq.n	8005d80 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e03a      	b.n	8005df6 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d10b      	bne.n	8005d9e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	881a      	ldrh	r2, [r3, #0]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d92:	b292      	uxth	r2, r2
 8005d94:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	3302      	adds	r3, #2
 8005d9a:	61bb      	str	r3, [r7, #24]
 8005d9c:	e008      	b.n	8005db0 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	781a      	ldrb	r2, [r3, #0]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	b292      	uxth	r2, r2
 8005da8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	3301      	adds	r3, #1
 8005dae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	3b01      	subs	r3, #1
 8005dba:	b29a      	uxth	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1cb      	bne.n	8005d66 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	9300      	str	r3, [sp, #0]
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	2140      	movs	r1, #64	; 0x40
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f000 fbfa 	bl	80065d2 <UART_WaitOnFlagUntilTimeout>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d001      	beq.n	8005de8 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e006      	b.n	8005df6 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2220      	movs	r2, #32
 8005dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005df0:	2300      	movs	r3, #0
 8005df2:	e000      	b.n	8005df6 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005df4:	2302      	movs	r3, #2
  }
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3720      	adds	r7, #32
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
	...

08005e00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e04:	b08c      	sub	sp, #48	; 0x30
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	689a      	ldr	r2, [r3, #8]
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	431a      	orrs	r2, r3
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	431a      	orrs	r2, r3
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	69db      	ldr	r3, [r3, #28]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	4baa      	ldr	r3, [pc, #680]	; (80060d8 <UART_SetConfig+0x2d8>)
 8005e30:	4013      	ands	r3, r2
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	6812      	ldr	r2, [r2, #0]
 8005e36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e38:	430b      	orrs	r3, r1
 8005e3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	68da      	ldr	r2, [r3, #12]
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	430a      	orrs	r2, r1
 8005e50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a9f      	ldr	r2, [pc, #636]	; (80060dc <UART_SetConfig+0x2dc>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d004      	beq.n	8005e6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005e76:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	6812      	ldr	r2, [r2, #0]
 8005e7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e80:	430b      	orrs	r3, r1
 8005e82:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8a:	f023 010f 	bic.w	r1, r3, #15
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	430a      	orrs	r2, r1
 8005e98:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a90      	ldr	r2, [pc, #576]	; (80060e0 <UART_SetConfig+0x2e0>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d125      	bne.n	8005ef0 <UART_SetConfig+0xf0>
 8005ea4:	4b8f      	ldr	r3, [pc, #572]	; (80060e4 <UART_SetConfig+0x2e4>)
 8005ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eaa:	f003 0303 	and.w	r3, r3, #3
 8005eae:	2b03      	cmp	r3, #3
 8005eb0:	d81a      	bhi.n	8005ee8 <UART_SetConfig+0xe8>
 8005eb2:	a201      	add	r2, pc, #4	; (adr r2, 8005eb8 <UART_SetConfig+0xb8>)
 8005eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb8:	08005ec9 	.word	0x08005ec9
 8005ebc:	08005ed9 	.word	0x08005ed9
 8005ec0:	08005ed1 	.word	0x08005ed1
 8005ec4:	08005ee1 	.word	0x08005ee1
 8005ec8:	2301      	movs	r3, #1
 8005eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ece:	e116      	b.n	80060fe <UART_SetConfig+0x2fe>
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ed6:	e112      	b.n	80060fe <UART_SetConfig+0x2fe>
 8005ed8:	2304      	movs	r3, #4
 8005eda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ede:	e10e      	b.n	80060fe <UART_SetConfig+0x2fe>
 8005ee0:	2308      	movs	r3, #8
 8005ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ee6:	e10a      	b.n	80060fe <UART_SetConfig+0x2fe>
 8005ee8:	2310      	movs	r3, #16
 8005eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eee:	e106      	b.n	80060fe <UART_SetConfig+0x2fe>
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a7c      	ldr	r2, [pc, #496]	; (80060e8 <UART_SetConfig+0x2e8>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d138      	bne.n	8005f6c <UART_SetConfig+0x16c>
 8005efa:	4b7a      	ldr	r3, [pc, #488]	; (80060e4 <UART_SetConfig+0x2e4>)
 8005efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f00:	f003 030c 	and.w	r3, r3, #12
 8005f04:	2b0c      	cmp	r3, #12
 8005f06:	d82d      	bhi.n	8005f64 <UART_SetConfig+0x164>
 8005f08:	a201      	add	r2, pc, #4	; (adr r2, 8005f10 <UART_SetConfig+0x110>)
 8005f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0e:	bf00      	nop
 8005f10:	08005f45 	.word	0x08005f45
 8005f14:	08005f65 	.word	0x08005f65
 8005f18:	08005f65 	.word	0x08005f65
 8005f1c:	08005f65 	.word	0x08005f65
 8005f20:	08005f55 	.word	0x08005f55
 8005f24:	08005f65 	.word	0x08005f65
 8005f28:	08005f65 	.word	0x08005f65
 8005f2c:	08005f65 	.word	0x08005f65
 8005f30:	08005f4d 	.word	0x08005f4d
 8005f34:	08005f65 	.word	0x08005f65
 8005f38:	08005f65 	.word	0x08005f65
 8005f3c:	08005f65 	.word	0x08005f65
 8005f40:	08005f5d 	.word	0x08005f5d
 8005f44:	2300      	movs	r3, #0
 8005f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f4a:	e0d8      	b.n	80060fe <UART_SetConfig+0x2fe>
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f52:	e0d4      	b.n	80060fe <UART_SetConfig+0x2fe>
 8005f54:	2304      	movs	r3, #4
 8005f56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f5a:	e0d0      	b.n	80060fe <UART_SetConfig+0x2fe>
 8005f5c:	2308      	movs	r3, #8
 8005f5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f62:	e0cc      	b.n	80060fe <UART_SetConfig+0x2fe>
 8005f64:	2310      	movs	r3, #16
 8005f66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f6a:	e0c8      	b.n	80060fe <UART_SetConfig+0x2fe>
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a5e      	ldr	r2, [pc, #376]	; (80060ec <UART_SetConfig+0x2ec>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d125      	bne.n	8005fc2 <UART_SetConfig+0x1c2>
 8005f76:	4b5b      	ldr	r3, [pc, #364]	; (80060e4 <UART_SetConfig+0x2e4>)
 8005f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005f80:	2b30      	cmp	r3, #48	; 0x30
 8005f82:	d016      	beq.n	8005fb2 <UART_SetConfig+0x1b2>
 8005f84:	2b30      	cmp	r3, #48	; 0x30
 8005f86:	d818      	bhi.n	8005fba <UART_SetConfig+0x1ba>
 8005f88:	2b20      	cmp	r3, #32
 8005f8a:	d00a      	beq.n	8005fa2 <UART_SetConfig+0x1a2>
 8005f8c:	2b20      	cmp	r3, #32
 8005f8e:	d814      	bhi.n	8005fba <UART_SetConfig+0x1ba>
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d002      	beq.n	8005f9a <UART_SetConfig+0x19a>
 8005f94:	2b10      	cmp	r3, #16
 8005f96:	d008      	beq.n	8005faa <UART_SetConfig+0x1aa>
 8005f98:	e00f      	b.n	8005fba <UART_SetConfig+0x1ba>
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fa0:	e0ad      	b.n	80060fe <UART_SetConfig+0x2fe>
 8005fa2:	2302      	movs	r3, #2
 8005fa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fa8:	e0a9      	b.n	80060fe <UART_SetConfig+0x2fe>
 8005faa:	2304      	movs	r3, #4
 8005fac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fb0:	e0a5      	b.n	80060fe <UART_SetConfig+0x2fe>
 8005fb2:	2308      	movs	r3, #8
 8005fb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fb8:	e0a1      	b.n	80060fe <UART_SetConfig+0x2fe>
 8005fba:	2310      	movs	r3, #16
 8005fbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fc0:	e09d      	b.n	80060fe <UART_SetConfig+0x2fe>
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a4a      	ldr	r2, [pc, #296]	; (80060f0 <UART_SetConfig+0x2f0>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d125      	bne.n	8006018 <UART_SetConfig+0x218>
 8005fcc:	4b45      	ldr	r3, [pc, #276]	; (80060e4 <UART_SetConfig+0x2e4>)
 8005fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005fd6:	2bc0      	cmp	r3, #192	; 0xc0
 8005fd8:	d016      	beq.n	8006008 <UART_SetConfig+0x208>
 8005fda:	2bc0      	cmp	r3, #192	; 0xc0
 8005fdc:	d818      	bhi.n	8006010 <UART_SetConfig+0x210>
 8005fde:	2b80      	cmp	r3, #128	; 0x80
 8005fe0:	d00a      	beq.n	8005ff8 <UART_SetConfig+0x1f8>
 8005fe2:	2b80      	cmp	r3, #128	; 0x80
 8005fe4:	d814      	bhi.n	8006010 <UART_SetConfig+0x210>
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d002      	beq.n	8005ff0 <UART_SetConfig+0x1f0>
 8005fea:	2b40      	cmp	r3, #64	; 0x40
 8005fec:	d008      	beq.n	8006000 <UART_SetConfig+0x200>
 8005fee:	e00f      	b.n	8006010 <UART_SetConfig+0x210>
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ff6:	e082      	b.n	80060fe <UART_SetConfig+0x2fe>
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ffe:	e07e      	b.n	80060fe <UART_SetConfig+0x2fe>
 8006000:	2304      	movs	r3, #4
 8006002:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006006:	e07a      	b.n	80060fe <UART_SetConfig+0x2fe>
 8006008:	2308      	movs	r3, #8
 800600a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800600e:	e076      	b.n	80060fe <UART_SetConfig+0x2fe>
 8006010:	2310      	movs	r3, #16
 8006012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006016:	e072      	b.n	80060fe <UART_SetConfig+0x2fe>
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a35      	ldr	r2, [pc, #212]	; (80060f4 <UART_SetConfig+0x2f4>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d12a      	bne.n	8006078 <UART_SetConfig+0x278>
 8006022:	4b30      	ldr	r3, [pc, #192]	; (80060e4 <UART_SetConfig+0x2e4>)
 8006024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006028:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800602c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006030:	d01a      	beq.n	8006068 <UART_SetConfig+0x268>
 8006032:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006036:	d81b      	bhi.n	8006070 <UART_SetConfig+0x270>
 8006038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800603c:	d00c      	beq.n	8006058 <UART_SetConfig+0x258>
 800603e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006042:	d815      	bhi.n	8006070 <UART_SetConfig+0x270>
 8006044:	2b00      	cmp	r3, #0
 8006046:	d003      	beq.n	8006050 <UART_SetConfig+0x250>
 8006048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800604c:	d008      	beq.n	8006060 <UART_SetConfig+0x260>
 800604e:	e00f      	b.n	8006070 <UART_SetConfig+0x270>
 8006050:	2300      	movs	r3, #0
 8006052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006056:	e052      	b.n	80060fe <UART_SetConfig+0x2fe>
 8006058:	2302      	movs	r3, #2
 800605a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800605e:	e04e      	b.n	80060fe <UART_SetConfig+0x2fe>
 8006060:	2304      	movs	r3, #4
 8006062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006066:	e04a      	b.n	80060fe <UART_SetConfig+0x2fe>
 8006068:	2308      	movs	r3, #8
 800606a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800606e:	e046      	b.n	80060fe <UART_SetConfig+0x2fe>
 8006070:	2310      	movs	r3, #16
 8006072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006076:	e042      	b.n	80060fe <UART_SetConfig+0x2fe>
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a17      	ldr	r2, [pc, #92]	; (80060dc <UART_SetConfig+0x2dc>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d13a      	bne.n	80060f8 <UART_SetConfig+0x2f8>
 8006082:	4b18      	ldr	r3, [pc, #96]	; (80060e4 <UART_SetConfig+0x2e4>)
 8006084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006088:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800608c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006090:	d01a      	beq.n	80060c8 <UART_SetConfig+0x2c8>
 8006092:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006096:	d81b      	bhi.n	80060d0 <UART_SetConfig+0x2d0>
 8006098:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800609c:	d00c      	beq.n	80060b8 <UART_SetConfig+0x2b8>
 800609e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060a2:	d815      	bhi.n	80060d0 <UART_SetConfig+0x2d0>
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d003      	beq.n	80060b0 <UART_SetConfig+0x2b0>
 80060a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ac:	d008      	beq.n	80060c0 <UART_SetConfig+0x2c0>
 80060ae:	e00f      	b.n	80060d0 <UART_SetConfig+0x2d0>
 80060b0:	2300      	movs	r3, #0
 80060b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060b6:	e022      	b.n	80060fe <UART_SetConfig+0x2fe>
 80060b8:	2302      	movs	r3, #2
 80060ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060be:	e01e      	b.n	80060fe <UART_SetConfig+0x2fe>
 80060c0:	2304      	movs	r3, #4
 80060c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060c6:	e01a      	b.n	80060fe <UART_SetConfig+0x2fe>
 80060c8:	2308      	movs	r3, #8
 80060ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060ce:	e016      	b.n	80060fe <UART_SetConfig+0x2fe>
 80060d0:	2310      	movs	r3, #16
 80060d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060d6:	e012      	b.n	80060fe <UART_SetConfig+0x2fe>
 80060d8:	cfff69f3 	.word	0xcfff69f3
 80060dc:	40008000 	.word	0x40008000
 80060e0:	40013800 	.word	0x40013800
 80060e4:	40021000 	.word	0x40021000
 80060e8:	40004400 	.word	0x40004400
 80060ec:	40004800 	.word	0x40004800
 80060f0:	40004c00 	.word	0x40004c00
 80060f4:	40005000 	.word	0x40005000
 80060f8:	2310      	movs	r3, #16
 80060fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4aae      	ldr	r2, [pc, #696]	; (80063bc <UART_SetConfig+0x5bc>)
 8006104:	4293      	cmp	r3, r2
 8006106:	f040 8097 	bne.w	8006238 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800610a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800610e:	2b08      	cmp	r3, #8
 8006110:	d823      	bhi.n	800615a <UART_SetConfig+0x35a>
 8006112:	a201      	add	r2, pc, #4	; (adr r2, 8006118 <UART_SetConfig+0x318>)
 8006114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006118:	0800613d 	.word	0x0800613d
 800611c:	0800615b 	.word	0x0800615b
 8006120:	08006145 	.word	0x08006145
 8006124:	0800615b 	.word	0x0800615b
 8006128:	0800614b 	.word	0x0800614b
 800612c:	0800615b 	.word	0x0800615b
 8006130:	0800615b 	.word	0x0800615b
 8006134:	0800615b 	.word	0x0800615b
 8006138:	08006153 	.word	0x08006153
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800613c:	f7fd fe7c 	bl	8003e38 <HAL_RCC_GetPCLK1Freq>
 8006140:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006142:	e010      	b.n	8006166 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006144:	4b9e      	ldr	r3, [pc, #632]	; (80063c0 <UART_SetConfig+0x5c0>)
 8006146:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006148:	e00d      	b.n	8006166 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800614a:	f7fd fddd 	bl	8003d08 <HAL_RCC_GetSysClockFreq>
 800614e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006150:	e009      	b.n	8006166 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006152:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006156:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006158:	e005      	b.n	8006166 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800615a:	2300      	movs	r3, #0
 800615c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006164:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 8130 	beq.w	80063ce <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006172:	4a94      	ldr	r2, [pc, #592]	; (80063c4 <UART_SetConfig+0x5c4>)
 8006174:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006178:	461a      	mov	r2, r3
 800617a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006180:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	685a      	ldr	r2, [r3, #4]
 8006186:	4613      	mov	r3, r2
 8006188:	005b      	lsls	r3, r3, #1
 800618a:	4413      	add	r3, r2
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	429a      	cmp	r2, r3
 8006190:	d305      	bcc.n	800619e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006198:	69ba      	ldr	r2, [r7, #24]
 800619a:	429a      	cmp	r2, r3
 800619c:	d903      	bls.n	80061a6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80061a4:	e113      	b.n	80063ce <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	2200      	movs	r2, #0
 80061aa:	60bb      	str	r3, [r7, #8]
 80061ac:	60fa      	str	r2, [r7, #12]
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b2:	4a84      	ldr	r2, [pc, #528]	; (80063c4 <UART_SetConfig+0x5c4>)
 80061b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	2200      	movs	r2, #0
 80061bc:	603b      	str	r3, [r7, #0]
 80061be:	607a      	str	r2, [r7, #4]
 80061c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80061c8:	f7fa fd06 	bl	8000bd8 <__aeabi_uldivmod>
 80061cc:	4602      	mov	r2, r0
 80061ce:	460b      	mov	r3, r1
 80061d0:	4610      	mov	r0, r2
 80061d2:	4619      	mov	r1, r3
 80061d4:	f04f 0200 	mov.w	r2, #0
 80061d8:	f04f 0300 	mov.w	r3, #0
 80061dc:	020b      	lsls	r3, r1, #8
 80061de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80061e2:	0202      	lsls	r2, r0, #8
 80061e4:	6979      	ldr	r1, [r7, #20]
 80061e6:	6849      	ldr	r1, [r1, #4]
 80061e8:	0849      	lsrs	r1, r1, #1
 80061ea:	2000      	movs	r0, #0
 80061ec:	460c      	mov	r4, r1
 80061ee:	4605      	mov	r5, r0
 80061f0:	eb12 0804 	adds.w	r8, r2, r4
 80061f4:	eb43 0905 	adc.w	r9, r3, r5
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	469a      	mov	sl, r3
 8006200:	4693      	mov	fp, r2
 8006202:	4652      	mov	r2, sl
 8006204:	465b      	mov	r3, fp
 8006206:	4640      	mov	r0, r8
 8006208:	4649      	mov	r1, r9
 800620a:	f7fa fce5 	bl	8000bd8 <__aeabi_uldivmod>
 800620e:	4602      	mov	r2, r0
 8006210:	460b      	mov	r3, r1
 8006212:	4613      	mov	r3, r2
 8006214:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006216:	6a3b      	ldr	r3, [r7, #32]
 8006218:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800621c:	d308      	bcc.n	8006230 <UART_SetConfig+0x430>
 800621e:	6a3b      	ldr	r3, [r7, #32]
 8006220:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006224:	d204      	bcs.n	8006230 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	6a3a      	ldr	r2, [r7, #32]
 800622c:	60da      	str	r2, [r3, #12]
 800622e:	e0ce      	b.n	80063ce <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006236:	e0ca      	b.n	80063ce <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	69db      	ldr	r3, [r3, #28]
 800623c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006240:	d166      	bne.n	8006310 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006242:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006246:	2b08      	cmp	r3, #8
 8006248:	d827      	bhi.n	800629a <UART_SetConfig+0x49a>
 800624a:	a201      	add	r2, pc, #4	; (adr r2, 8006250 <UART_SetConfig+0x450>)
 800624c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006250:	08006275 	.word	0x08006275
 8006254:	0800627d 	.word	0x0800627d
 8006258:	08006285 	.word	0x08006285
 800625c:	0800629b 	.word	0x0800629b
 8006260:	0800628b 	.word	0x0800628b
 8006264:	0800629b 	.word	0x0800629b
 8006268:	0800629b 	.word	0x0800629b
 800626c:	0800629b 	.word	0x0800629b
 8006270:	08006293 	.word	0x08006293
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006274:	f7fd fde0 	bl	8003e38 <HAL_RCC_GetPCLK1Freq>
 8006278:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800627a:	e014      	b.n	80062a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800627c:	f7fd fdf2 	bl	8003e64 <HAL_RCC_GetPCLK2Freq>
 8006280:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006282:	e010      	b.n	80062a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006284:	4b4e      	ldr	r3, [pc, #312]	; (80063c0 <UART_SetConfig+0x5c0>)
 8006286:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006288:	e00d      	b.n	80062a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800628a:	f7fd fd3d 	bl	8003d08 <HAL_RCC_GetSysClockFreq>
 800628e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006290:	e009      	b.n	80062a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006296:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006298:	e005      	b.n	80062a6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800629a:	2300      	movs	r3, #0
 800629c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80062a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f000 8090 	beq.w	80063ce <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b2:	4a44      	ldr	r2, [pc, #272]	; (80063c4 <UART_SetConfig+0x5c4>)
 80062b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062b8:	461a      	mov	r2, r3
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80062c0:	005a      	lsls	r2, r3, #1
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	085b      	lsrs	r3, r3, #1
 80062c8:	441a      	add	r2, r3
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062d4:	6a3b      	ldr	r3, [r7, #32]
 80062d6:	2b0f      	cmp	r3, #15
 80062d8:	d916      	bls.n	8006308 <UART_SetConfig+0x508>
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062e0:	d212      	bcs.n	8006308 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062e2:	6a3b      	ldr	r3, [r7, #32]
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	f023 030f 	bic.w	r3, r3, #15
 80062ea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062ec:	6a3b      	ldr	r3, [r7, #32]
 80062ee:	085b      	lsrs	r3, r3, #1
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	f003 0307 	and.w	r3, r3, #7
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	8bfb      	ldrh	r3, [r7, #30]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	8bfa      	ldrh	r2, [r7, #30]
 8006304:	60da      	str	r2, [r3, #12]
 8006306:	e062      	b.n	80063ce <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800630e:	e05e      	b.n	80063ce <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006310:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006314:	2b08      	cmp	r3, #8
 8006316:	d828      	bhi.n	800636a <UART_SetConfig+0x56a>
 8006318:	a201      	add	r2, pc, #4	; (adr r2, 8006320 <UART_SetConfig+0x520>)
 800631a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800631e:	bf00      	nop
 8006320:	08006345 	.word	0x08006345
 8006324:	0800634d 	.word	0x0800634d
 8006328:	08006355 	.word	0x08006355
 800632c:	0800636b 	.word	0x0800636b
 8006330:	0800635b 	.word	0x0800635b
 8006334:	0800636b 	.word	0x0800636b
 8006338:	0800636b 	.word	0x0800636b
 800633c:	0800636b 	.word	0x0800636b
 8006340:	08006363 	.word	0x08006363
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006344:	f7fd fd78 	bl	8003e38 <HAL_RCC_GetPCLK1Freq>
 8006348:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800634a:	e014      	b.n	8006376 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800634c:	f7fd fd8a 	bl	8003e64 <HAL_RCC_GetPCLK2Freq>
 8006350:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006352:	e010      	b.n	8006376 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006354:	4b1a      	ldr	r3, [pc, #104]	; (80063c0 <UART_SetConfig+0x5c0>)
 8006356:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006358:	e00d      	b.n	8006376 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800635a:	f7fd fcd5 	bl	8003d08 <HAL_RCC_GetSysClockFreq>
 800635e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006360:	e009      	b.n	8006376 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006366:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006368:	e005      	b.n	8006376 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800636a:	2300      	movs	r3, #0
 800636c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006374:	bf00      	nop
    }

    if (pclk != 0U)
 8006376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006378:	2b00      	cmp	r3, #0
 800637a:	d028      	beq.n	80063ce <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006380:	4a10      	ldr	r2, [pc, #64]	; (80063c4 <UART_SetConfig+0x5c4>)
 8006382:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006386:	461a      	mov	r2, r3
 8006388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638a:	fbb3 f2f2 	udiv	r2, r3, r2
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	085b      	lsrs	r3, r3, #1
 8006394:	441a      	add	r2, r3
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	fbb2 f3f3 	udiv	r3, r2, r3
 800639e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063a0:	6a3b      	ldr	r3, [r7, #32]
 80063a2:	2b0f      	cmp	r3, #15
 80063a4:	d910      	bls.n	80063c8 <UART_SetConfig+0x5c8>
 80063a6:	6a3b      	ldr	r3, [r7, #32]
 80063a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063ac:	d20c      	bcs.n	80063c8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063ae:	6a3b      	ldr	r3, [r7, #32]
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	60da      	str	r2, [r3, #12]
 80063b8:	e009      	b.n	80063ce <UART_SetConfig+0x5ce>
 80063ba:	bf00      	nop
 80063bc:	40008000 	.word	0x40008000
 80063c0:	00f42400 	.word	0x00f42400
 80063c4:	080094ac 	.word	0x080094ac
      }
      else
      {
        ret = HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	2201      	movs	r2, #1
 80063da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	2200      	movs	r2, #0
 80063e2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	2200      	movs	r2, #0
 80063e8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80063ea:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3730      	adds	r7, #48	; 0x30
 80063f2:	46bd      	mov	sp, r7
 80063f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080063f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006404:	f003 0301 	and.w	r3, r3, #1
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00a      	beq.n	8006422 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	430a      	orrs	r2, r1
 8006420:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006426:	f003 0302 	and.w	r3, r3, #2
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00a      	beq.n	8006444 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	430a      	orrs	r2, r1
 8006442:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006448:	f003 0304 	and.w	r3, r3, #4
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00a      	beq.n	8006466 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	430a      	orrs	r2, r1
 8006464:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646a:	f003 0308 	and.w	r3, r3, #8
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00a      	beq.n	8006488 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	430a      	orrs	r2, r1
 8006486:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800648c:	f003 0310 	and.w	r3, r3, #16
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00a      	beq.n	80064aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	430a      	orrs	r2, r1
 80064a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ae:	f003 0320 	and.w	r3, r3, #32
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00a      	beq.n	80064cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	430a      	orrs	r2, r1
 80064ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d01a      	beq.n	800650e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	430a      	orrs	r2, r1
 80064ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064f6:	d10a      	bne.n	800650e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	430a      	orrs	r2, r1
 800650c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00a      	beq.n	8006530 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	430a      	orrs	r2, r1
 800652e:	605a      	str	r2, [r3, #4]
  }
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af02      	add	r7, sp, #8
 8006542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800654c:	f7fb fc30 	bl	8001db0 <HAL_GetTick>
 8006550:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 0308 	and.w	r3, r3, #8
 800655c:	2b08      	cmp	r3, #8
 800655e:	d10e      	bne.n	800657e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006560:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006564:	9300      	str	r3, [sp, #0]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f82f 	bl	80065d2 <UART_WaitOnFlagUntilTimeout>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d001      	beq.n	800657e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	e025      	b.n	80065ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0304 	and.w	r3, r3, #4
 8006588:	2b04      	cmp	r3, #4
 800658a:	d10e      	bne.n	80065aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800658c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006590:	9300      	str	r3, [sp, #0]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f819 	bl	80065d2 <UART_WaitOnFlagUntilTimeout>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d001      	beq.n	80065aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e00f      	b.n	80065ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2220      	movs	r2, #32
 80065ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2220      	movs	r2, #32
 80065b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}

080065d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065d2:	b580      	push	{r7, lr}
 80065d4:	b09c      	sub	sp, #112	; 0x70
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	60f8      	str	r0, [r7, #12]
 80065da:	60b9      	str	r1, [r7, #8]
 80065dc:	603b      	str	r3, [r7, #0]
 80065de:	4613      	mov	r3, r2
 80065e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065e2:	e0a9      	b.n	8006738 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ea:	f000 80a5 	beq.w	8006738 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065ee:	f7fb fbdf 	bl	8001db0 <HAL_GetTick>
 80065f2:	4602      	mov	r2, r0
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d302      	bcc.n	8006604 <UART_WaitOnFlagUntilTimeout+0x32>
 80065fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006600:	2b00      	cmp	r3, #0
 8006602:	d140      	bne.n	8006686 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800660c:	e853 3f00 	ldrex	r3, [r3]
 8006610:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006614:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006618:	667b      	str	r3, [r7, #100]	; 0x64
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	461a      	mov	r2, r3
 8006620:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006622:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006624:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006626:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006628:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800662a:	e841 2300 	strex	r3, r2, [r1]
 800662e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1e6      	bne.n	8006604 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	3308      	adds	r3, #8
 800663c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006640:	e853 3f00 	ldrex	r3, [r3]
 8006644:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006648:	f023 0301 	bic.w	r3, r3, #1
 800664c:	663b      	str	r3, [r7, #96]	; 0x60
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	3308      	adds	r3, #8
 8006654:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006656:	64ba      	str	r2, [r7, #72]	; 0x48
 8006658:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800665c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800665e:	e841 2300 	strex	r3, r2, [r1]
 8006662:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1e5      	bne.n	8006636 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2220      	movs	r2, #32
 800666e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2220      	movs	r2, #32
 8006676:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e069      	b.n	800675a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 0304 	and.w	r3, r3, #4
 8006690:	2b00      	cmp	r3, #0
 8006692:	d051      	beq.n	8006738 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	69db      	ldr	r3, [r3, #28]
 800669a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800669e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066a2:	d149      	bne.n	8006738 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b6:	e853 3f00 	ldrex	r3, [r3]
 80066ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80066c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	461a      	mov	r2, r3
 80066ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066cc:	637b      	str	r3, [r7, #52]	; 0x34
 80066ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066d4:	e841 2300 	strex	r3, r2, [r1]
 80066d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80066da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1e6      	bne.n	80066ae <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	3308      	adds	r3, #8
 80066e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	e853 3f00 	ldrex	r3, [r3]
 80066ee:	613b      	str	r3, [r7, #16]
   return(result);
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	f023 0301 	bic.w	r3, r3, #1
 80066f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	3308      	adds	r3, #8
 80066fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006700:	623a      	str	r2, [r7, #32]
 8006702:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006704:	69f9      	ldr	r1, [r7, #28]
 8006706:	6a3a      	ldr	r2, [r7, #32]
 8006708:	e841 2300 	strex	r3, r2, [r1]
 800670c:	61bb      	str	r3, [r7, #24]
   return(result);
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d1e5      	bne.n	80066e0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2220      	movs	r2, #32
 8006718:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2220      	movs	r2, #32
 8006720:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2220      	movs	r2, #32
 8006728:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	e010      	b.n	800675a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	69da      	ldr	r2, [r3, #28]
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	4013      	ands	r3, r2
 8006742:	68ba      	ldr	r2, [r7, #8]
 8006744:	429a      	cmp	r2, r3
 8006746:	bf0c      	ite	eq
 8006748:	2301      	moveq	r3, #1
 800674a:	2300      	movne	r3, #0
 800674c:	b2db      	uxtb	r3, r3
 800674e:	461a      	mov	r2, r3
 8006750:	79fb      	ldrb	r3, [r7, #7]
 8006752:	429a      	cmp	r2, r3
 8006754:	f43f af46 	beq.w	80065e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3770      	adds	r7, #112	; 0x70
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006762:	b480      	push	{r7}
 8006764:	b085      	sub	sp, #20
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006770:	2b01      	cmp	r3, #1
 8006772:	d101      	bne.n	8006778 <HAL_UARTEx_DisableFifoMode+0x16>
 8006774:	2302      	movs	r3, #2
 8006776:	e027      	b.n	80067c8 <HAL_UARTEx_DisableFifoMode+0x66>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2224      	movs	r2, #36	; 0x24
 8006784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f022 0201 	bic.w	r2, r2, #1
 800679e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80067a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2220      	movs	r2, #32
 80067ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3714      	adds	r7, #20
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d101      	bne.n	80067ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80067e8:	2302      	movs	r3, #2
 80067ea:	e02d      	b.n	8006848 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2224      	movs	r2, #36	; 0x24
 80067f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f022 0201 	bic.w	r2, r2, #1
 8006812:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	683a      	ldr	r2, [r7, #0]
 8006824:	430a      	orrs	r2, r1
 8006826:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 f84f 	bl	80068cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2220      	movs	r2, #32
 800683a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3710      	adds	r7, #16
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006860:	2b01      	cmp	r3, #1
 8006862:	d101      	bne.n	8006868 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006864:	2302      	movs	r3, #2
 8006866:	e02d      	b.n	80068c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2224      	movs	r2, #36	; 0x24
 8006874:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f022 0201 	bic.w	r2, r2, #1
 800688e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	683a      	ldr	r2, [r7, #0]
 80068a0:	430a      	orrs	r2, r1
 80068a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 f811 	bl	80068cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2220      	movs	r2, #32
 80068b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d108      	bne.n	80068ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80068ec:	e031      	b.n	8006952 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80068ee:	2308      	movs	r3, #8
 80068f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80068f2:	2308      	movs	r3, #8
 80068f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	0e5b      	lsrs	r3, r3, #25
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	f003 0307 	and.w	r3, r3, #7
 8006904:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	0f5b      	lsrs	r3, r3, #29
 800690e:	b2db      	uxtb	r3, r3
 8006910:	f003 0307 	and.w	r3, r3, #7
 8006914:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006916:	7bbb      	ldrb	r3, [r7, #14]
 8006918:	7b3a      	ldrb	r2, [r7, #12]
 800691a:	4911      	ldr	r1, [pc, #68]	; (8006960 <UARTEx_SetNbDataToProcess+0x94>)
 800691c:	5c8a      	ldrb	r2, [r1, r2]
 800691e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006922:	7b3a      	ldrb	r2, [r7, #12]
 8006924:	490f      	ldr	r1, [pc, #60]	; (8006964 <UARTEx_SetNbDataToProcess+0x98>)
 8006926:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006928:	fb93 f3f2 	sdiv	r3, r3, r2
 800692c:	b29a      	uxth	r2, r3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006934:	7bfb      	ldrb	r3, [r7, #15]
 8006936:	7b7a      	ldrb	r2, [r7, #13]
 8006938:	4909      	ldr	r1, [pc, #36]	; (8006960 <UARTEx_SetNbDataToProcess+0x94>)
 800693a:	5c8a      	ldrb	r2, [r1, r2]
 800693c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006940:	7b7a      	ldrb	r2, [r7, #13]
 8006942:	4908      	ldr	r1, [pc, #32]	; (8006964 <UARTEx_SetNbDataToProcess+0x98>)
 8006944:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006946:	fb93 f3f2 	sdiv	r3, r3, r2
 800694a:	b29a      	uxth	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006952:	bf00      	nop
 8006954:	3714      	adds	r7, #20
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	080094c4 	.word	0x080094c4
 8006964:	080094cc 	.word	0x080094cc

08006968 <__errno>:
 8006968:	4b01      	ldr	r3, [pc, #4]	; (8006970 <__errno+0x8>)
 800696a:	6818      	ldr	r0, [r3, #0]
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	2000000c 	.word	0x2000000c

08006974 <__libc_init_array>:
 8006974:	b570      	push	{r4, r5, r6, lr}
 8006976:	4d0d      	ldr	r5, [pc, #52]	; (80069ac <__libc_init_array+0x38>)
 8006978:	4c0d      	ldr	r4, [pc, #52]	; (80069b0 <__libc_init_array+0x3c>)
 800697a:	1b64      	subs	r4, r4, r5
 800697c:	10a4      	asrs	r4, r4, #2
 800697e:	2600      	movs	r6, #0
 8006980:	42a6      	cmp	r6, r4
 8006982:	d109      	bne.n	8006998 <__libc_init_array+0x24>
 8006984:	4d0b      	ldr	r5, [pc, #44]	; (80069b4 <__libc_init_array+0x40>)
 8006986:	4c0c      	ldr	r4, [pc, #48]	; (80069b8 <__libc_init_array+0x44>)
 8006988:	f002 fd4c 	bl	8009424 <_init>
 800698c:	1b64      	subs	r4, r4, r5
 800698e:	10a4      	asrs	r4, r4, #2
 8006990:	2600      	movs	r6, #0
 8006992:	42a6      	cmp	r6, r4
 8006994:	d105      	bne.n	80069a2 <__libc_init_array+0x2e>
 8006996:	bd70      	pop	{r4, r5, r6, pc}
 8006998:	f855 3b04 	ldr.w	r3, [r5], #4
 800699c:	4798      	blx	r3
 800699e:	3601      	adds	r6, #1
 80069a0:	e7ee      	b.n	8006980 <__libc_init_array+0xc>
 80069a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80069a6:	4798      	blx	r3
 80069a8:	3601      	adds	r6, #1
 80069aa:	e7f2      	b.n	8006992 <__libc_init_array+0x1e>
 80069ac:	080098b4 	.word	0x080098b4
 80069b0:	080098b4 	.word	0x080098b4
 80069b4:	080098b4 	.word	0x080098b4
 80069b8:	080098b8 	.word	0x080098b8

080069bc <malloc>:
 80069bc:	4b02      	ldr	r3, [pc, #8]	; (80069c8 <malloc+0xc>)
 80069be:	4601      	mov	r1, r0
 80069c0:	6818      	ldr	r0, [r3, #0]
 80069c2:	f000 b877 	b.w	8006ab4 <_malloc_r>
 80069c6:	bf00      	nop
 80069c8:	2000000c 	.word	0x2000000c

080069cc <memset>:
 80069cc:	4402      	add	r2, r0
 80069ce:	4603      	mov	r3, r0
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d100      	bne.n	80069d6 <memset+0xa>
 80069d4:	4770      	bx	lr
 80069d6:	f803 1b01 	strb.w	r1, [r3], #1
 80069da:	e7f9      	b.n	80069d0 <memset+0x4>

080069dc <_free_r>:
 80069dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069de:	2900      	cmp	r1, #0
 80069e0:	d044      	beq.n	8006a6c <_free_r+0x90>
 80069e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069e6:	9001      	str	r0, [sp, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f1a1 0404 	sub.w	r4, r1, #4
 80069ee:	bfb8      	it	lt
 80069f0:	18e4      	addlt	r4, r4, r3
 80069f2:	f001 fed1 	bl	8008798 <__malloc_lock>
 80069f6:	4a1e      	ldr	r2, [pc, #120]	; (8006a70 <_free_r+0x94>)
 80069f8:	9801      	ldr	r0, [sp, #4]
 80069fa:	6813      	ldr	r3, [r2, #0]
 80069fc:	b933      	cbnz	r3, 8006a0c <_free_r+0x30>
 80069fe:	6063      	str	r3, [r4, #4]
 8006a00:	6014      	str	r4, [r2, #0]
 8006a02:	b003      	add	sp, #12
 8006a04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a08:	f001 becc 	b.w	80087a4 <__malloc_unlock>
 8006a0c:	42a3      	cmp	r3, r4
 8006a0e:	d908      	bls.n	8006a22 <_free_r+0x46>
 8006a10:	6825      	ldr	r5, [r4, #0]
 8006a12:	1961      	adds	r1, r4, r5
 8006a14:	428b      	cmp	r3, r1
 8006a16:	bf01      	itttt	eq
 8006a18:	6819      	ldreq	r1, [r3, #0]
 8006a1a:	685b      	ldreq	r3, [r3, #4]
 8006a1c:	1949      	addeq	r1, r1, r5
 8006a1e:	6021      	streq	r1, [r4, #0]
 8006a20:	e7ed      	b.n	80069fe <_free_r+0x22>
 8006a22:	461a      	mov	r2, r3
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	b10b      	cbz	r3, 8006a2c <_free_r+0x50>
 8006a28:	42a3      	cmp	r3, r4
 8006a2a:	d9fa      	bls.n	8006a22 <_free_r+0x46>
 8006a2c:	6811      	ldr	r1, [r2, #0]
 8006a2e:	1855      	adds	r5, r2, r1
 8006a30:	42a5      	cmp	r5, r4
 8006a32:	d10b      	bne.n	8006a4c <_free_r+0x70>
 8006a34:	6824      	ldr	r4, [r4, #0]
 8006a36:	4421      	add	r1, r4
 8006a38:	1854      	adds	r4, r2, r1
 8006a3a:	42a3      	cmp	r3, r4
 8006a3c:	6011      	str	r1, [r2, #0]
 8006a3e:	d1e0      	bne.n	8006a02 <_free_r+0x26>
 8006a40:	681c      	ldr	r4, [r3, #0]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	6053      	str	r3, [r2, #4]
 8006a46:	4421      	add	r1, r4
 8006a48:	6011      	str	r1, [r2, #0]
 8006a4a:	e7da      	b.n	8006a02 <_free_r+0x26>
 8006a4c:	d902      	bls.n	8006a54 <_free_r+0x78>
 8006a4e:	230c      	movs	r3, #12
 8006a50:	6003      	str	r3, [r0, #0]
 8006a52:	e7d6      	b.n	8006a02 <_free_r+0x26>
 8006a54:	6825      	ldr	r5, [r4, #0]
 8006a56:	1961      	adds	r1, r4, r5
 8006a58:	428b      	cmp	r3, r1
 8006a5a:	bf04      	itt	eq
 8006a5c:	6819      	ldreq	r1, [r3, #0]
 8006a5e:	685b      	ldreq	r3, [r3, #4]
 8006a60:	6063      	str	r3, [r4, #4]
 8006a62:	bf04      	itt	eq
 8006a64:	1949      	addeq	r1, r1, r5
 8006a66:	6021      	streq	r1, [r4, #0]
 8006a68:	6054      	str	r4, [r2, #4]
 8006a6a:	e7ca      	b.n	8006a02 <_free_r+0x26>
 8006a6c:	b003      	add	sp, #12
 8006a6e:	bd30      	pop	{r4, r5, pc}
 8006a70:	20000444 	.word	0x20000444

08006a74 <sbrk_aligned>:
 8006a74:	b570      	push	{r4, r5, r6, lr}
 8006a76:	4e0e      	ldr	r6, [pc, #56]	; (8006ab0 <sbrk_aligned+0x3c>)
 8006a78:	460c      	mov	r4, r1
 8006a7a:	6831      	ldr	r1, [r6, #0]
 8006a7c:	4605      	mov	r5, r0
 8006a7e:	b911      	cbnz	r1, 8006a86 <sbrk_aligned+0x12>
 8006a80:	f000 fd0e 	bl	80074a0 <_sbrk_r>
 8006a84:	6030      	str	r0, [r6, #0]
 8006a86:	4621      	mov	r1, r4
 8006a88:	4628      	mov	r0, r5
 8006a8a:	f000 fd09 	bl	80074a0 <_sbrk_r>
 8006a8e:	1c43      	adds	r3, r0, #1
 8006a90:	d00a      	beq.n	8006aa8 <sbrk_aligned+0x34>
 8006a92:	1cc4      	adds	r4, r0, #3
 8006a94:	f024 0403 	bic.w	r4, r4, #3
 8006a98:	42a0      	cmp	r0, r4
 8006a9a:	d007      	beq.n	8006aac <sbrk_aligned+0x38>
 8006a9c:	1a21      	subs	r1, r4, r0
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	f000 fcfe 	bl	80074a0 <_sbrk_r>
 8006aa4:	3001      	adds	r0, #1
 8006aa6:	d101      	bne.n	8006aac <sbrk_aligned+0x38>
 8006aa8:	f04f 34ff 	mov.w	r4, #4294967295
 8006aac:	4620      	mov	r0, r4
 8006aae:	bd70      	pop	{r4, r5, r6, pc}
 8006ab0:	20000448 	.word	0x20000448

08006ab4 <_malloc_r>:
 8006ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ab8:	1ccd      	adds	r5, r1, #3
 8006aba:	f025 0503 	bic.w	r5, r5, #3
 8006abe:	3508      	adds	r5, #8
 8006ac0:	2d0c      	cmp	r5, #12
 8006ac2:	bf38      	it	cc
 8006ac4:	250c      	movcc	r5, #12
 8006ac6:	2d00      	cmp	r5, #0
 8006ac8:	4607      	mov	r7, r0
 8006aca:	db01      	blt.n	8006ad0 <_malloc_r+0x1c>
 8006acc:	42a9      	cmp	r1, r5
 8006ace:	d905      	bls.n	8006adc <_malloc_r+0x28>
 8006ad0:	230c      	movs	r3, #12
 8006ad2:	603b      	str	r3, [r7, #0]
 8006ad4:	2600      	movs	r6, #0
 8006ad6:	4630      	mov	r0, r6
 8006ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006adc:	4e2e      	ldr	r6, [pc, #184]	; (8006b98 <_malloc_r+0xe4>)
 8006ade:	f001 fe5b 	bl	8008798 <__malloc_lock>
 8006ae2:	6833      	ldr	r3, [r6, #0]
 8006ae4:	461c      	mov	r4, r3
 8006ae6:	bb34      	cbnz	r4, 8006b36 <_malloc_r+0x82>
 8006ae8:	4629      	mov	r1, r5
 8006aea:	4638      	mov	r0, r7
 8006aec:	f7ff ffc2 	bl	8006a74 <sbrk_aligned>
 8006af0:	1c43      	adds	r3, r0, #1
 8006af2:	4604      	mov	r4, r0
 8006af4:	d14d      	bne.n	8006b92 <_malloc_r+0xde>
 8006af6:	6834      	ldr	r4, [r6, #0]
 8006af8:	4626      	mov	r6, r4
 8006afa:	2e00      	cmp	r6, #0
 8006afc:	d140      	bne.n	8006b80 <_malloc_r+0xcc>
 8006afe:	6823      	ldr	r3, [r4, #0]
 8006b00:	4631      	mov	r1, r6
 8006b02:	4638      	mov	r0, r7
 8006b04:	eb04 0803 	add.w	r8, r4, r3
 8006b08:	f000 fcca 	bl	80074a0 <_sbrk_r>
 8006b0c:	4580      	cmp	r8, r0
 8006b0e:	d13a      	bne.n	8006b86 <_malloc_r+0xd2>
 8006b10:	6821      	ldr	r1, [r4, #0]
 8006b12:	3503      	adds	r5, #3
 8006b14:	1a6d      	subs	r5, r5, r1
 8006b16:	f025 0503 	bic.w	r5, r5, #3
 8006b1a:	3508      	adds	r5, #8
 8006b1c:	2d0c      	cmp	r5, #12
 8006b1e:	bf38      	it	cc
 8006b20:	250c      	movcc	r5, #12
 8006b22:	4629      	mov	r1, r5
 8006b24:	4638      	mov	r0, r7
 8006b26:	f7ff ffa5 	bl	8006a74 <sbrk_aligned>
 8006b2a:	3001      	adds	r0, #1
 8006b2c:	d02b      	beq.n	8006b86 <_malloc_r+0xd2>
 8006b2e:	6823      	ldr	r3, [r4, #0]
 8006b30:	442b      	add	r3, r5
 8006b32:	6023      	str	r3, [r4, #0]
 8006b34:	e00e      	b.n	8006b54 <_malloc_r+0xa0>
 8006b36:	6822      	ldr	r2, [r4, #0]
 8006b38:	1b52      	subs	r2, r2, r5
 8006b3a:	d41e      	bmi.n	8006b7a <_malloc_r+0xc6>
 8006b3c:	2a0b      	cmp	r2, #11
 8006b3e:	d916      	bls.n	8006b6e <_malloc_r+0xba>
 8006b40:	1961      	adds	r1, r4, r5
 8006b42:	42a3      	cmp	r3, r4
 8006b44:	6025      	str	r5, [r4, #0]
 8006b46:	bf18      	it	ne
 8006b48:	6059      	strne	r1, [r3, #4]
 8006b4a:	6863      	ldr	r3, [r4, #4]
 8006b4c:	bf08      	it	eq
 8006b4e:	6031      	streq	r1, [r6, #0]
 8006b50:	5162      	str	r2, [r4, r5]
 8006b52:	604b      	str	r3, [r1, #4]
 8006b54:	4638      	mov	r0, r7
 8006b56:	f104 060b 	add.w	r6, r4, #11
 8006b5a:	f001 fe23 	bl	80087a4 <__malloc_unlock>
 8006b5e:	f026 0607 	bic.w	r6, r6, #7
 8006b62:	1d23      	adds	r3, r4, #4
 8006b64:	1af2      	subs	r2, r6, r3
 8006b66:	d0b6      	beq.n	8006ad6 <_malloc_r+0x22>
 8006b68:	1b9b      	subs	r3, r3, r6
 8006b6a:	50a3      	str	r3, [r4, r2]
 8006b6c:	e7b3      	b.n	8006ad6 <_malloc_r+0x22>
 8006b6e:	6862      	ldr	r2, [r4, #4]
 8006b70:	42a3      	cmp	r3, r4
 8006b72:	bf0c      	ite	eq
 8006b74:	6032      	streq	r2, [r6, #0]
 8006b76:	605a      	strne	r2, [r3, #4]
 8006b78:	e7ec      	b.n	8006b54 <_malloc_r+0xa0>
 8006b7a:	4623      	mov	r3, r4
 8006b7c:	6864      	ldr	r4, [r4, #4]
 8006b7e:	e7b2      	b.n	8006ae6 <_malloc_r+0x32>
 8006b80:	4634      	mov	r4, r6
 8006b82:	6876      	ldr	r6, [r6, #4]
 8006b84:	e7b9      	b.n	8006afa <_malloc_r+0x46>
 8006b86:	230c      	movs	r3, #12
 8006b88:	603b      	str	r3, [r7, #0]
 8006b8a:	4638      	mov	r0, r7
 8006b8c:	f001 fe0a 	bl	80087a4 <__malloc_unlock>
 8006b90:	e7a1      	b.n	8006ad6 <_malloc_r+0x22>
 8006b92:	6025      	str	r5, [r4, #0]
 8006b94:	e7de      	b.n	8006b54 <_malloc_r+0xa0>
 8006b96:	bf00      	nop
 8006b98:	20000444 	.word	0x20000444

08006b9c <__cvt>:
 8006b9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ba0:	ec55 4b10 	vmov	r4, r5, d0
 8006ba4:	2d00      	cmp	r5, #0
 8006ba6:	460e      	mov	r6, r1
 8006ba8:	4619      	mov	r1, r3
 8006baa:	462b      	mov	r3, r5
 8006bac:	bfbb      	ittet	lt
 8006bae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006bb2:	461d      	movlt	r5, r3
 8006bb4:	2300      	movge	r3, #0
 8006bb6:	232d      	movlt	r3, #45	; 0x2d
 8006bb8:	700b      	strb	r3, [r1, #0]
 8006bba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bbc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006bc0:	4691      	mov	r9, r2
 8006bc2:	f023 0820 	bic.w	r8, r3, #32
 8006bc6:	bfbc      	itt	lt
 8006bc8:	4622      	movlt	r2, r4
 8006bca:	4614      	movlt	r4, r2
 8006bcc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006bd0:	d005      	beq.n	8006bde <__cvt+0x42>
 8006bd2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006bd6:	d100      	bne.n	8006bda <__cvt+0x3e>
 8006bd8:	3601      	adds	r6, #1
 8006bda:	2102      	movs	r1, #2
 8006bdc:	e000      	b.n	8006be0 <__cvt+0x44>
 8006bde:	2103      	movs	r1, #3
 8006be0:	ab03      	add	r3, sp, #12
 8006be2:	9301      	str	r3, [sp, #4]
 8006be4:	ab02      	add	r3, sp, #8
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	ec45 4b10 	vmov	d0, r4, r5
 8006bec:	4653      	mov	r3, sl
 8006bee:	4632      	mov	r2, r6
 8006bf0:	f000 fdb2 	bl	8007758 <_dtoa_r>
 8006bf4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006bf8:	4607      	mov	r7, r0
 8006bfa:	d102      	bne.n	8006c02 <__cvt+0x66>
 8006bfc:	f019 0f01 	tst.w	r9, #1
 8006c00:	d022      	beq.n	8006c48 <__cvt+0xac>
 8006c02:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c06:	eb07 0906 	add.w	r9, r7, r6
 8006c0a:	d110      	bne.n	8006c2e <__cvt+0x92>
 8006c0c:	783b      	ldrb	r3, [r7, #0]
 8006c0e:	2b30      	cmp	r3, #48	; 0x30
 8006c10:	d10a      	bne.n	8006c28 <__cvt+0x8c>
 8006c12:	2200      	movs	r2, #0
 8006c14:	2300      	movs	r3, #0
 8006c16:	4620      	mov	r0, r4
 8006c18:	4629      	mov	r1, r5
 8006c1a:	f7f9 ff6d 	bl	8000af8 <__aeabi_dcmpeq>
 8006c1e:	b918      	cbnz	r0, 8006c28 <__cvt+0x8c>
 8006c20:	f1c6 0601 	rsb	r6, r6, #1
 8006c24:	f8ca 6000 	str.w	r6, [sl]
 8006c28:	f8da 3000 	ldr.w	r3, [sl]
 8006c2c:	4499      	add	r9, r3
 8006c2e:	2200      	movs	r2, #0
 8006c30:	2300      	movs	r3, #0
 8006c32:	4620      	mov	r0, r4
 8006c34:	4629      	mov	r1, r5
 8006c36:	f7f9 ff5f 	bl	8000af8 <__aeabi_dcmpeq>
 8006c3a:	b108      	cbz	r0, 8006c40 <__cvt+0xa4>
 8006c3c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006c40:	2230      	movs	r2, #48	; 0x30
 8006c42:	9b03      	ldr	r3, [sp, #12]
 8006c44:	454b      	cmp	r3, r9
 8006c46:	d307      	bcc.n	8006c58 <__cvt+0xbc>
 8006c48:	9b03      	ldr	r3, [sp, #12]
 8006c4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c4c:	1bdb      	subs	r3, r3, r7
 8006c4e:	4638      	mov	r0, r7
 8006c50:	6013      	str	r3, [r2, #0]
 8006c52:	b004      	add	sp, #16
 8006c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c58:	1c59      	adds	r1, r3, #1
 8006c5a:	9103      	str	r1, [sp, #12]
 8006c5c:	701a      	strb	r2, [r3, #0]
 8006c5e:	e7f0      	b.n	8006c42 <__cvt+0xa6>

08006c60 <__exponent>:
 8006c60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c62:	4603      	mov	r3, r0
 8006c64:	2900      	cmp	r1, #0
 8006c66:	bfb8      	it	lt
 8006c68:	4249      	neglt	r1, r1
 8006c6a:	f803 2b02 	strb.w	r2, [r3], #2
 8006c6e:	bfb4      	ite	lt
 8006c70:	222d      	movlt	r2, #45	; 0x2d
 8006c72:	222b      	movge	r2, #43	; 0x2b
 8006c74:	2909      	cmp	r1, #9
 8006c76:	7042      	strb	r2, [r0, #1]
 8006c78:	dd2a      	ble.n	8006cd0 <__exponent+0x70>
 8006c7a:	f10d 0407 	add.w	r4, sp, #7
 8006c7e:	46a4      	mov	ip, r4
 8006c80:	270a      	movs	r7, #10
 8006c82:	46a6      	mov	lr, r4
 8006c84:	460a      	mov	r2, r1
 8006c86:	fb91 f6f7 	sdiv	r6, r1, r7
 8006c8a:	fb07 1516 	mls	r5, r7, r6, r1
 8006c8e:	3530      	adds	r5, #48	; 0x30
 8006c90:	2a63      	cmp	r2, #99	; 0x63
 8006c92:	f104 34ff 	add.w	r4, r4, #4294967295
 8006c96:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006c9a:	4631      	mov	r1, r6
 8006c9c:	dcf1      	bgt.n	8006c82 <__exponent+0x22>
 8006c9e:	3130      	adds	r1, #48	; 0x30
 8006ca0:	f1ae 0502 	sub.w	r5, lr, #2
 8006ca4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006ca8:	1c44      	adds	r4, r0, #1
 8006caa:	4629      	mov	r1, r5
 8006cac:	4561      	cmp	r1, ip
 8006cae:	d30a      	bcc.n	8006cc6 <__exponent+0x66>
 8006cb0:	f10d 0209 	add.w	r2, sp, #9
 8006cb4:	eba2 020e 	sub.w	r2, r2, lr
 8006cb8:	4565      	cmp	r5, ip
 8006cba:	bf88      	it	hi
 8006cbc:	2200      	movhi	r2, #0
 8006cbe:	4413      	add	r3, r2
 8006cc0:	1a18      	subs	r0, r3, r0
 8006cc2:	b003      	add	sp, #12
 8006cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006cca:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006cce:	e7ed      	b.n	8006cac <__exponent+0x4c>
 8006cd0:	2330      	movs	r3, #48	; 0x30
 8006cd2:	3130      	adds	r1, #48	; 0x30
 8006cd4:	7083      	strb	r3, [r0, #2]
 8006cd6:	70c1      	strb	r1, [r0, #3]
 8006cd8:	1d03      	adds	r3, r0, #4
 8006cda:	e7f1      	b.n	8006cc0 <__exponent+0x60>

08006cdc <_printf_float>:
 8006cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ce0:	ed2d 8b02 	vpush	{d8}
 8006ce4:	b08d      	sub	sp, #52	; 0x34
 8006ce6:	460c      	mov	r4, r1
 8006ce8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006cec:	4616      	mov	r6, r2
 8006cee:	461f      	mov	r7, r3
 8006cf0:	4605      	mov	r5, r0
 8006cf2:	f001 fcd7 	bl	80086a4 <_localeconv_r>
 8006cf6:	f8d0 a000 	ldr.w	sl, [r0]
 8006cfa:	4650      	mov	r0, sl
 8006cfc:	f7f9 fa80 	bl	8000200 <strlen>
 8006d00:	2300      	movs	r3, #0
 8006d02:	930a      	str	r3, [sp, #40]	; 0x28
 8006d04:	6823      	ldr	r3, [r4, #0]
 8006d06:	9305      	str	r3, [sp, #20]
 8006d08:	f8d8 3000 	ldr.w	r3, [r8]
 8006d0c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006d10:	3307      	adds	r3, #7
 8006d12:	f023 0307 	bic.w	r3, r3, #7
 8006d16:	f103 0208 	add.w	r2, r3, #8
 8006d1a:	f8c8 2000 	str.w	r2, [r8]
 8006d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d22:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006d26:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006d2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006d2e:	9307      	str	r3, [sp, #28]
 8006d30:	f8cd 8018 	str.w	r8, [sp, #24]
 8006d34:	ee08 0a10 	vmov	s16, r0
 8006d38:	4b9f      	ldr	r3, [pc, #636]	; (8006fb8 <_printf_float+0x2dc>)
 8006d3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d42:	f7f9 ff0b 	bl	8000b5c <__aeabi_dcmpun>
 8006d46:	bb88      	cbnz	r0, 8006dac <_printf_float+0xd0>
 8006d48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d4c:	4b9a      	ldr	r3, [pc, #616]	; (8006fb8 <_printf_float+0x2dc>)
 8006d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d52:	f7f9 fee5 	bl	8000b20 <__aeabi_dcmple>
 8006d56:	bb48      	cbnz	r0, 8006dac <_printf_float+0xd0>
 8006d58:	2200      	movs	r2, #0
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	4640      	mov	r0, r8
 8006d5e:	4649      	mov	r1, r9
 8006d60:	f7f9 fed4 	bl	8000b0c <__aeabi_dcmplt>
 8006d64:	b110      	cbz	r0, 8006d6c <_printf_float+0x90>
 8006d66:	232d      	movs	r3, #45	; 0x2d
 8006d68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d6c:	4b93      	ldr	r3, [pc, #588]	; (8006fbc <_printf_float+0x2e0>)
 8006d6e:	4894      	ldr	r0, [pc, #592]	; (8006fc0 <_printf_float+0x2e4>)
 8006d70:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006d74:	bf94      	ite	ls
 8006d76:	4698      	movls	r8, r3
 8006d78:	4680      	movhi	r8, r0
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	6123      	str	r3, [r4, #16]
 8006d7e:	9b05      	ldr	r3, [sp, #20]
 8006d80:	f023 0204 	bic.w	r2, r3, #4
 8006d84:	6022      	str	r2, [r4, #0]
 8006d86:	f04f 0900 	mov.w	r9, #0
 8006d8a:	9700      	str	r7, [sp, #0]
 8006d8c:	4633      	mov	r3, r6
 8006d8e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006d90:	4621      	mov	r1, r4
 8006d92:	4628      	mov	r0, r5
 8006d94:	f000 f9d8 	bl	8007148 <_printf_common>
 8006d98:	3001      	adds	r0, #1
 8006d9a:	f040 8090 	bne.w	8006ebe <_printf_float+0x1e2>
 8006d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006da2:	b00d      	add	sp, #52	; 0x34
 8006da4:	ecbd 8b02 	vpop	{d8}
 8006da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dac:	4642      	mov	r2, r8
 8006dae:	464b      	mov	r3, r9
 8006db0:	4640      	mov	r0, r8
 8006db2:	4649      	mov	r1, r9
 8006db4:	f7f9 fed2 	bl	8000b5c <__aeabi_dcmpun>
 8006db8:	b140      	cbz	r0, 8006dcc <_printf_float+0xf0>
 8006dba:	464b      	mov	r3, r9
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	bfbc      	itt	lt
 8006dc0:	232d      	movlt	r3, #45	; 0x2d
 8006dc2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006dc6:	487f      	ldr	r0, [pc, #508]	; (8006fc4 <_printf_float+0x2e8>)
 8006dc8:	4b7f      	ldr	r3, [pc, #508]	; (8006fc8 <_printf_float+0x2ec>)
 8006dca:	e7d1      	b.n	8006d70 <_printf_float+0x94>
 8006dcc:	6863      	ldr	r3, [r4, #4]
 8006dce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006dd2:	9206      	str	r2, [sp, #24]
 8006dd4:	1c5a      	adds	r2, r3, #1
 8006dd6:	d13f      	bne.n	8006e58 <_printf_float+0x17c>
 8006dd8:	2306      	movs	r3, #6
 8006dda:	6063      	str	r3, [r4, #4]
 8006ddc:	9b05      	ldr	r3, [sp, #20]
 8006dde:	6861      	ldr	r1, [r4, #4]
 8006de0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006de4:	2300      	movs	r3, #0
 8006de6:	9303      	str	r3, [sp, #12]
 8006de8:	ab0a      	add	r3, sp, #40	; 0x28
 8006dea:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006dee:	ab09      	add	r3, sp, #36	; 0x24
 8006df0:	ec49 8b10 	vmov	d0, r8, r9
 8006df4:	9300      	str	r3, [sp, #0]
 8006df6:	6022      	str	r2, [r4, #0]
 8006df8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006dfc:	4628      	mov	r0, r5
 8006dfe:	f7ff fecd 	bl	8006b9c <__cvt>
 8006e02:	9b06      	ldr	r3, [sp, #24]
 8006e04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e06:	2b47      	cmp	r3, #71	; 0x47
 8006e08:	4680      	mov	r8, r0
 8006e0a:	d108      	bne.n	8006e1e <_printf_float+0x142>
 8006e0c:	1cc8      	adds	r0, r1, #3
 8006e0e:	db02      	blt.n	8006e16 <_printf_float+0x13a>
 8006e10:	6863      	ldr	r3, [r4, #4]
 8006e12:	4299      	cmp	r1, r3
 8006e14:	dd41      	ble.n	8006e9a <_printf_float+0x1be>
 8006e16:	f1ab 0b02 	sub.w	fp, fp, #2
 8006e1a:	fa5f fb8b 	uxtb.w	fp, fp
 8006e1e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006e22:	d820      	bhi.n	8006e66 <_printf_float+0x18a>
 8006e24:	3901      	subs	r1, #1
 8006e26:	465a      	mov	r2, fp
 8006e28:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006e2c:	9109      	str	r1, [sp, #36]	; 0x24
 8006e2e:	f7ff ff17 	bl	8006c60 <__exponent>
 8006e32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e34:	1813      	adds	r3, r2, r0
 8006e36:	2a01      	cmp	r2, #1
 8006e38:	4681      	mov	r9, r0
 8006e3a:	6123      	str	r3, [r4, #16]
 8006e3c:	dc02      	bgt.n	8006e44 <_printf_float+0x168>
 8006e3e:	6822      	ldr	r2, [r4, #0]
 8006e40:	07d2      	lsls	r2, r2, #31
 8006e42:	d501      	bpl.n	8006e48 <_printf_float+0x16c>
 8006e44:	3301      	adds	r3, #1
 8006e46:	6123      	str	r3, [r4, #16]
 8006e48:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d09c      	beq.n	8006d8a <_printf_float+0xae>
 8006e50:	232d      	movs	r3, #45	; 0x2d
 8006e52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e56:	e798      	b.n	8006d8a <_printf_float+0xae>
 8006e58:	9a06      	ldr	r2, [sp, #24]
 8006e5a:	2a47      	cmp	r2, #71	; 0x47
 8006e5c:	d1be      	bne.n	8006ddc <_printf_float+0x100>
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1bc      	bne.n	8006ddc <_printf_float+0x100>
 8006e62:	2301      	movs	r3, #1
 8006e64:	e7b9      	b.n	8006dda <_printf_float+0xfe>
 8006e66:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006e6a:	d118      	bne.n	8006e9e <_printf_float+0x1c2>
 8006e6c:	2900      	cmp	r1, #0
 8006e6e:	6863      	ldr	r3, [r4, #4]
 8006e70:	dd0b      	ble.n	8006e8a <_printf_float+0x1ae>
 8006e72:	6121      	str	r1, [r4, #16]
 8006e74:	b913      	cbnz	r3, 8006e7c <_printf_float+0x1a0>
 8006e76:	6822      	ldr	r2, [r4, #0]
 8006e78:	07d0      	lsls	r0, r2, #31
 8006e7a:	d502      	bpl.n	8006e82 <_printf_float+0x1a6>
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	440b      	add	r3, r1
 8006e80:	6123      	str	r3, [r4, #16]
 8006e82:	65a1      	str	r1, [r4, #88]	; 0x58
 8006e84:	f04f 0900 	mov.w	r9, #0
 8006e88:	e7de      	b.n	8006e48 <_printf_float+0x16c>
 8006e8a:	b913      	cbnz	r3, 8006e92 <_printf_float+0x1b6>
 8006e8c:	6822      	ldr	r2, [r4, #0]
 8006e8e:	07d2      	lsls	r2, r2, #31
 8006e90:	d501      	bpl.n	8006e96 <_printf_float+0x1ba>
 8006e92:	3302      	adds	r3, #2
 8006e94:	e7f4      	b.n	8006e80 <_printf_float+0x1a4>
 8006e96:	2301      	movs	r3, #1
 8006e98:	e7f2      	b.n	8006e80 <_printf_float+0x1a4>
 8006e9a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006e9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ea0:	4299      	cmp	r1, r3
 8006ea2:	db05      	blt.n	8006eb0 <_printf_float+0x1d4>
 8006ea4:	6823      	ldr	r3, [r4, #0]
 8006ea6:	6121      	str	r1, [r4, #16]
 8006ea8:	07d8      	lsls	r0, r3, #31
 8006eaa:	d5ea      	bpl.n	8006e82 <_printf_float+0x1a6>
 8006eac:	1c4b      	adds	r3, r1, #1
 8006eae:	e7e7      	b.n	8006e80 <_printf_float+0x1a4>
 8006eb0:	2900      	cmp	r1, #0
 8006eb2:	bfd4      	ite	le
 8006eb4:	f1c1 0202 	rsble	r2, r1, #2
 8006eb8:	2201      	movgt	r2, #1
 8006eba:	4413      	add	r3, r2
 8006ebc:	e7e0      	b.n	8006e80 <_printf_float+0x1a4>
 8006ebe:	6823      	ldr	r3, [r4, #0]
 8006ec0:	055a      	lsls	r2, r3, #21
 8006ec2:	d407      	bmi.n	8006ed4 <_printf_float+0x1f8>
 8006ec4:	6923      	ldr	r3, [r4, #16]
 8006ec6:	4642      	mov	r2, r8
 8006ec8:	4631      	mov	r1, r6
 8006eca:	4628      	mov	r0, r5
 8006ecc:	47b8      	blx	r7
 8006ece:	3001      	adds	r0, #1
 8006ed0:	d12c      	bne.n	8006f2c <_printf_float+0x250>
 8006ed2:	e764      	b.n	8006d9e <_printf_float+0xc2>
 8006ed4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ed8:	f240 80e0 	bls.w	800709c <_printf_float+0x3c0>
 8006edc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	f7f9 fe08 	bl	8000af8 <__aeabi_dcmpeq>
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	d034      	beq.n	8006f56 <_printf_float+0x27a>
 8006eec:	4a37      	ldr	r2, [pc, #220]	; (8006fcc <_printf_float+0x2f0>)
 8006eee:	2301      	movs	r3, #1
 8006ef0:	4631      	mov	r1, r6
 8006ef2:	4628      	mov	r0, r5
 8006ef4:	47b8      	blx	r7
 8006ef6:	3001      	adds	r0, #1
 8006ef8:	f43f af51 	beq.w	8006d9e <_printf_float+0xc2>
 8006efc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f00:	429a      	cmp	r2, r3
 8006f02:	db02      	blt.n	8006f0a <_printf_float+0x22e>
 8006f04:	6823      	ldr	r3, [r4, #0]
 8006f06:	07d8      	lsls	r0, r3, #31
 8006f08:	d510      	bpl.n	8006f2c <_printf_float+0x250>
 8006f0a:	ee18 3a10 	vmov	r3, s16
 8006f0e:	4652      	mov	r2, sl
 8006f10:	4631      	mov	r1, r6
 8006f12:	4628      	mov	r0, r5
 8006f14:	47b8      	blx	r7
 8006f16:	3001      	adds	r0, #1
 8006f18:	f43f af41 	beq.w	8006d9e <_printf_float+0xc2>
 8006f1c:	f04f 0800 	mov.w	r8, #0
 8006f20:	f104 091a 	add.w	r9, r4, #26
 8006f24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f26:	3b01      	subs	r3, #1
 8006f28:	4543      	cmp	r3, r8
 8006f2a:	dc09      	bgt.n	8006f40 <_printf_float+0x264>
 8006f2c:	6823      	ldr	r3, [r4, #0]
 8006f2e:	079b      	lsls	r3, r3, #30
 8006f30:	f100 8105 	bmi.w	800713e <_printf_float+0x462>
 8006f34:	68e0      	ldr	r0, [r4, #12]
 8006f36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f38:	4298      	cmp	r0, r3
 8006f3a:	bfb8      	it	lt
 8006f3c:	4618      	movlt	r0, r3
 8006f3e:	e730      	b.n	8006da2 <_printf_float+0xc6>
 8006f40:	2301      	movs	r3, #1
 8006f42:	464a      	mov	r2, r9
 8006f44:	4631      	mov	r1, r6
 8006f46:	4628      	mov	r0, r5
 8006f48:	47b8      	blx	r7
 8006f4a:	3001      	adds	r0, #1
 8006f4c:	f43f af27 	beq.w	8006d9e <_printf_float+0xc2>
 8006f50:	f108 0801 	add.w	r8, r8, #1
 8006f54:	e7e6      	b.n	8006f24 <_printf_float+0x248>
 8006f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	dc39      	bgt.n	8006fd0 <_printf_float+0x2f4>
 8006f5c:	4a1b      	ldr	r2, [pc, #108]	; (8006fcc <_printf_float+0x2f0>)
 8006f5e:	2301      	movs	r3, #1
 8006f60:	4631      	mov	r1, r6
 8006f62:	4628      	mov	r0, r5
 8006f64:	47b8      	blx	r7
 8006f66:	3001      	adds	r0, #1
 8006f68:	f43f af19 	beq.w	8006d9e <_printf_float+0xc2>
 8006f6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f70:	4313      	orrs	r3, r2
 8006f72:	d102      	bne.n	8006f7a <_printf_float+0x29e>
 8006f74:	6823      	ldr	r3, [r4, #0]
 8006f76:	07d9      	lsls	r1, r3, #31
 8006f78:	d5d8      	bpl.n	8006f2c <_printf_float+0x250>
 8006f7a:	ee18 3a10 	vmov	r3, s16
 8006f7e:	4652      	mov	r2, sl
 8006f80:	4631      	mov	r1, r6
 8006f82:	4628      	mov	r0, r5
 8006f84:	47b8      	blx	r7
 8006f86:	3001      	adds	r0, #1
 8006f88:	f43f af09 	beq.w	8006d9e <_printf_float+0xc2>
 8006f8c:	f04f 0900 	mov.w	r9, #0
 8006f90:	f104 0a1a 	add.w	sl, r4, #26
 8006f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f96:	425b      	negs	r3, r3
 8006f98:	454b      	cmp	r3, r9
 8006f9a:	dc01      	bgt.n	8006fa0 <_printf_float+0x2c4>
 8006f9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f9e:	e792      	b.n	8006ec6 <_printf_float+0x1ea>
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	4652      	mov	r2, sl
 8006fa4:	4631      	mov	r1, r6
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	47b8      	blx	r7
 8006faa:	3001      	adds	r0, #1
 8006fac:	f43f aef7 	beq.w	8006d9e <_printf_float+0xc2>
 8006fb0:	f109 0901 	add.w	r9, r9, #1
 8006fb4:	e7ee      	b.n	8006f94 <_printf_float+0x2b8>
 8006fb6:	bf00      	nop
 8006fb8:	7fefffff 	.word	0x7fefffff
 8006fbc:	080094d8 	.word	0x080094d8
 8006fc0:	080094dc 	.word	0x080094dc
 8006fc4:	080094e4 	.word	0x080094e4
 8006fc8:	080094e0 	.word	0x080094e0
 8006fcc:	080094e8 	.word	0x080094e8
 8006fd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	bfa8      	it	ge
 8006fd8:	461a      	movge	r2, r3
 8006fda:	2a00      	cmp	r2, #0
 8006fdc:	4691      	mov	r9, r2
 8006fde:	dc37      	bgt.n	8007050 <_printf_float+0x374>
 8006fe0:	f04f 0b00 	mov.w	fp, #0
 8006fe4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006fe8:	f104 021a 	add.w	r2, r4, #26
 8006fec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006fee:	9305      	str	r3, [sp, #20]
 8006ff0:	eba3 0309 	sub.w	r3, r3, r9
 8006ff4:	455b      	cmp	r3, fp
 8006ff6:	dc33      	bgt.n	8007060 <_printf_float+0x384>
 8006ff8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	db3b      	blt.n	8007078 <_printf_float+0x39c>
 8007000:	6823      	ldr	r3, [r4, #0]
 8007002:	07da      	lsls	r2, r3, #31
 8007004:	d438      	bmi.n	8007078 <_printf_float+0x39c>
 8007006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007008:	9a05      	ldr	r2, [sp, #20]
 800700a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800700c:	1a9a      	subs	r2, r3, r2
 800700e:	eba3 0901 	sub.w	r9, r3, r1
 8007012:	4591      	cmp	r9, r2
 8007014:	bfa8      	it	ge
 8007016:	4691      	movge	r9, r2
 8007018:	f1b9 0f00 	cmp.w	r9, #0
 800701c:	dc35      	bgt.n	800708a <_printf_float+0x3ae>
 800701e:	f04f 0800 	mov.w	r8, #0
 8007022:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007026:	f104 0a1a 	add.w	sl, r4, #26
 800702a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800702e:	1a9b      	subs	r3, r3, r2
 8007030:	eba3 0309 	sub.w	r3, r3, r9
 8007034:	4543      	cmp	r3, r8
 8007036:	f77f af79 	ble.w	8006f2c <_printf_float+0x250>
 800703a:	2301      	movs	r3, #1
 800703c:	4652      	mov	r2, sl
 800703e:	4631      	mov	r1, r6
 8007040:	4628      	mov	r0, r5
 8007042:	47b8      	blx	r7
 8007044:	3001      	adds	r0, #1
 8007046:	f43f aeaa 	beq.w	8006d9e <_printf_float+0xc2>
 800704a:	f108 0801 	add.w	r8, r8, #1
 800704e:	e7ec      	b.n	800702a <_printf_float+0x34e>
 8007050:	4613      	mov	r3, r2
 8007052:	4631      	mov	r1, r6
 8007054:	4642      	mov	r2, r8
 8007056:	4628      	mov	r0, r5
 8007058:	47b8      	blx	r7
 800705a:	3001      	adds	r0, #1
 800705c:	d1c0      	bne.n	8006fe0 <_printf_float+0x304>
 800705e:	e69e      	b.n	8006d9e <_printf_float+0xc2>
 8007060:	2301      	movs	r3, #1
 8007062:	4631      	mov	r1, r6
 8007064:	4628      	mov	r0, r5
 8007066:	9205      	str	r2, [sp, #20]
 8007068:	47b8      	blx	r7
 800706a:	3001      	adds	r0, #1
 800706c:	f43f ae97 	beq.w	8006d9e <_printf_float+0xc2>
 8007070:	9a05      	ldr	r2, [sp, #20]
 8007072:	f10b 0b01 	add.w	fp, fp, #1
 8007076:	e7b9      	b.n	8006fec <_printf_float+0x310>
 8007078:	ee18 3a10 	vmov	r3, s16
 800707c:	4652      	mov	r2, sl
 800707e:	4631      	mov	r1, r6
 8007080:	4628      	mov	r0, r5
 8007082:	47b8      	blx	r7
 8007084:	3001      	adds	r0, #1
 8007086:	d1be      	bne.n	8007006 <_printf_float+0x32a>
 8007088:	e689      	b.n	8006d9e <_printf_float+0xc2>
 800708a:	9a05      	ldr	r2, [sp, #20]
 800708c:	464b      	mov	r3, r9
 800708e:	4442      	add	r2, r8
 8007090:	4631      	mov	r1, r6
 8007092:	4628      	mov	r0, r5
 8007094:	47b8      	blx	r7
 8007096:	3001      	adds	r0, #1
 8007098:	d1c1      	bne.n	800701e <_printf_float+0x342>
 800709a:	e680      	b.n	8006d9e <_printf_float+0xc2>
 800709c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800709e:	2a01      	cmp	r2, #1
 80070a0:	dc01      	bgt.n	80070a6 <_printf_float+0x3ca>
 80070a2:	07db      	lsls	r3, r3, #31
 80070a4:	d538      	bpl.n	8007118 <_printf_float+0x43c>
 80070a6:	2301      	movs	r3, #1
 80070a8:	4642      	mov	r2, r8
 80070aa:	4631      	mov	r1, r6
 80070ac:	4628      	mov	r0, r5
 80070ae:	47b8      	blx	r7
 80070b0:	3001      	adds	r0, #1
 80070b2:	f43f ae74 	beq.w	8006d9e <_printf_float+0xc2>
 80070b6:	ee18 3a10 	vmov	r3, s16
 80070ba:	4652      	mov	r2, sl
 80070bc:	4631      	mov	r1, r6
 80070be:	4628      	mov	r0, r5
 80070c0:	47b8      	blx	r7
 80070c2:	3001      	adds	r0, #1
 80070c4:	f43f ae6b 	beq.w	8006d9e <_printf_float+0xc2>
 80070c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80070cc:	2200      	movs	r2, #0
 80070ce:	2300      	movs	r3, #0
 80070d0:	f7f9 fd12 	bl	8000af8 <__aeabi_dcmpeq>
 80070d4:	b9d8      	cbnz	r0, 800710e <_printf_float+0x432>
 80070d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070d8:	f108 0201 	add.w	r2, r8, #1
 80070dc:	3b01      	subs	r3, #1
 80070de:	4631      	mov	r1, r6
 80070e0:	4628      	mov	r0, r5
 80070e2:	47b8      	blx	r7
 80070e4:	3001      	adds	r0, #1
 80070e6:	d10e      	bne.n	8007106 <_printf_float+0x42a>
 80070e8:	e659      	b.n	8006d9e <_printf_float+0xc2>
 80070ea:	2301      	movs	r3, #1
 80070ec:	4652      	mov	r2, sl
 80070ee:	4631      	mov	r1, r6
 80070f0:	4628      	mov	r0, r5
 80070f2:	47b8      	blx	r7
 80070f4:	3001      	adds	r0, #1
 80070f6:	f43f ae52 	beq.w	8006d9e <_printf_float+0xc2>
 80070fa:	f108 0801 	add.w	r8, r8, #1
 80070fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007100:	3b01      	subs	r3, #1
 8007102:	4543      	cmp	r3, r8
 8007104:	dcf1      	bgt.n	80070ea <_printf_float+0x40e>
 8007106:	464b      	mov	r3, r9
 8007108:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800710c:	e6dc      	b.n	8006ec8 <_printf_float+0x1ec>
 800710e:	f04f 0800 	mov.w	r8, #0
 8007112:	f104 0a1a 	add.w	sl, r4, #26
 8007116:	e7f2      	b.n	80070fe <_printf_float+0x422>
 8007118:	2301      	movs	r3, #1
 800711a:	4642      	mov	r2, r8
 800711c:	e7df      	b.n	80070de <_printf_float+0x402>
 800711e:	2301      	movs	r3, #1
 8007120:	464a      	mov	r2, r9
 8007122:	4631      	mov	r1, r6
 8007124:	4628      	mov	r0, r5
 8007126:	47b8      	blx	r7
 8007128:	3001      	adds	r0, #1
 800712a:	f43f ae38 	beq.w	8006d9e <_printf_float+0xc2>
 800712e:	f108 0801 	add.w	r8, r8, #1
 8007132:	68e3      	ldr	r3, [r4, #12]
 8007134:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007136:	1a5b      	subs	r3, r3, r1
 8007138:	4543      	cmp	r3, r8
 800713a:	dcf0      	bgt.n	800711e <_printf_float+0x442>
 800713c:	e6fa      	b.n	8006f34 <_printf_float+0x258>
 800713e:	f04f 0800 	mov.w	r8, #0
 8007142:	f104 0919 	add.w	r9, r4, #25
 8007146:	e7f4      	b.n	8007132 <_printf_float+0x456>

08007148 <_printf_common>:
 8007148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800714c:	4616      	mov	r6, r2
 800714e:	4699      	mov	r9, r3
 8007150:	688a      	ldr	r2, [r1, #8]
 8007152:	690b      	ldr	r3, [r1, #16]
 8007154:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007158:	4293      	cmp	r3, r2
 800715a:	bfb8      	it	lt
 800715c:	4613      	movlt	r3, r2
 800715e:	6033      	str	r3, [r6, #0]
 8007160:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007164:	4607      	mov	r7, r0
 8007166:	460c      	mov	r4, r1
 8007168:	b10a      	cbz	r2, 800716e <_printf_common+0x26>
 800716a:	3301      	adds	r3, #1
 800716c:	6033      	str	r3, [r6, #0]
 800716e:	6823      	ldr	r3, [r4, #0]
 8007170:	0699      	lsls	r1, r3, #26
 8007172:	bf42      	ittt	mi
 8007174:	6833      	ldrmi	r3, [r6, #0]
 8007176:	3302      	addmi	r3, #2
 8007178:	6033      	strmi	r3, [r6, #0]
 800717a:	6825      	ldr	r5, [r4, #0]
 800717c:	f015 0506 	ands.w	r5, r5, #6
 8007180:	d106      	bne.n	8007190 <_printf_common+0x48>
 8007182:	f104 0a19 	add.w	sl, r4, #25
 8007186:	68e3      	ldr	r3, [r4, #12]
 8007188:	6832      	ldr	r2, [r6, #0]
 800718a:	1a9b      	subs	r3, r3, r2
 800718c:	42ab      	cmp	r3, r5
 800718e:	dc26      	bgt.n	80071de <_printf_common+0x96>
 8007190:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007194:	1e13      	subs	r3, r2, #0
 8007196:	6822      	ldr	r2, [r4, #0]
 8007198:	bf18      	it	ne
 800719a:	2301      	movne	r3, #1
 800719c:	0692      	lsls	r2, r2, #26
 800719e:	d42b      	bmi.n	80071f8 <_printf_common+0xb0>
 80071a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071a4:	4649      	mov	r1, r9
 80071a6:	4638      	mov	r0, r7
 80071a8:	47c0      	blx	r8
 80071aa:	3001      	adds	r0, #1
 80071ac:	d01e      	beq.n	80071ec <_printf_common+0xa4>
 80071ae:	6823      	ldr	r3, [r4, #0]
 80071b0:	68e5      	ldr	r5, [r4, #12]
 80071b2:	6832      	ldr	r2, [r6, #0]
 80071b4:	f003 0306 	and.w	r3, r3, #6
 80071b8:	2b04      	cmp	r3, #4
 80071ba:	bf08      	it	eq
 80071bc:	1aad      	subeq	r5, r5, r2
 80071be:	68a3      	ldr	r3, [r4, #8]
 80071c0:	6922      	ldr	r2, [r4, #16]
 80071c2:	bf0c      	ite	eq
 80071c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071c8:	2500      	movne	r5, #0
 80071ca:	4293      	cmp	r3, r2
 80071cc:	bfc4      	itt	gt
 80071ce:	1a9b      	subgt	r3, r3, r2
 80071d0:	18ed      	addgt	r5, r5, r3
 80071d2:	2600      	movs	r6, #0
 80071d4:	341a      	adds	r4, #26
 80071d6:	42b5      	cmp	r5, r6
 80071d8:	d11a      	bne.n	8007210 <_printf_common+0xc8>
 80071da:	2000      	movs	r0, #0
 80071dc:	e008      	b.n	80071f0 <_printf_common+0xa8>
 80071de:	2301      	movs	r3, #1
 80071e0:	4652      	mov	r2, sl
 80071e2:	4649      	mov	r1, r9
 80071e4:	4638      	mov	r0, r7
 80071e6:	47c0      	blx	r8
 80071e8:	3001      	adds	r0, #1
 80071ea:	d103      	bne.n	80071f4 <_printf_common+0xac>
 80071ec:	f04f 30ff 	mov.w	r0, #4294967295
 80071f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071f4:	3501      	adds	r5, #1
 80071f6:	e7c6      	b.n	8007186 <_printf_common+0x3e>
 80071f8:	18e1      	adds	r1, r4, r3
 80071fa:	1c5a      	adds	r2, r3, #1
 80071fc:	2030      	movs	r0, #48	; 0x30
 80071fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007202:	4422      	add	r2, r4
 8007204:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007208:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800720c:	3302      	adds	r3, #2
 800720e:	e7c7      	b.n	80071a0 <_printf_common+0x58>
 8007210:	2301      	movs	r3, #1
 8007212:	4622      	mov	r2, r4
 8007214:	4649      	mov	r1, r9
 8007216:	4638      	mov	r0, r7
 8007218:	47c0      	blx	r8
 800721a:	3001      	adds	r0, #1
 800721c:	d0e6      	beq.n	80071ec <_printf_common+0xa4>
 800721e:	3601      	adds	r6, #1
 8007220:	e7d9      	b.n	80071d6 <_printf_common+0x8e>
	...

08007224 <_printf_i>:
 8007224:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007228:	7e0f      	ldrb	r7, [r1, #24]
 800722a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800722c:	2f78      	cmp	r7, #120	; 0x78
 800722e:	4691      	mov	r9, r2
 8007230:	4680      	mov	r8, r0
 8007232:	460c      	mov	r4, r1
 8007234:	469a      	mov	sl, r3
 8007236:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800723a:	d807      	bhi.n	800724c <_printf_i+0x28>
 800723c:	2f62      	cmp	r7, #98	; 0x62
 800723e:	d80a      	bhi.n	8007256 <_printf_i+0x32>
 8007240:	2f00      	cmp	r7, #0
 8007242:	f000 80d8 	beq.w	80073f6 <_printf_i+0x1d2>
 8007246:	2f58      	cmp	r7, #88	; 0x58
 8007248:	f000 80a3 	beq.w	8007392 <_printf_i+0x16e>
 800724c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007250:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007254:	e03a      	b.n	80072cc <_printf_i+0xa8>
 8007256:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800725a:	2b15      	cmp	r3, #21
 800725c:	d8f6      	bhi.n	800724c <_printf_i+0x28>
 800725e:	a101      	add	r1, pc, #4	; (adr r1, 8007264 <_printf_i+0x40>)
 8007260:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007264:	080072bd 	.word	0x080072bd
 8007268:	080072d1 	.word	0x080072d1
 800726c:	0800724d 	.word	0x0800724d
 8007270:	0800724d 	.word	0x0800724d
 8007274:	0800724d 	.word	0x0800724d
 8007278:	0800724d 	.word	0x0800724d
 800727c:	080072d1 	.word	0x080072d1
 8007280:	0800724d 	.word	0x0800724d
 8007284:	0800724d 	.word	0x0800724d
 8007288:	0800724d 	.word	0x0800724d
 800728c:	0800724d 	.word	0x0800724d
 8007290:	080073dd 	.word	0x080073dd
 8007294:	08007301 	.word	0x08007301
 8007298:	080073bf 	.word	0x080073bf
 800729c:	0800724d 	.word	0x0800724d
 80072a0:	0800724d 	.word	0x0800724d
 80072a4:	080073ff 	.word	0x080073ff
 80072a8:	0800724d 	.word	0x0800724d
 80072ac:	08007301 	.word	0x08007301
 80072b0:	0800724d 	.word	0x0800724d
 80072b4:	0800724d 	.word	0x0800724d
 80072b8:	080073c7 	.word	0x080073c7
 80072bc:	682b      	ldr	r3, [r5, #0]
 80072be:	1d1a      	adds	r2, r3, #4
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	602a      	str	r2, [r5, #0]
 80072c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072cc:	2301      	movs	r3, #1
 80072ce:	e0a3      	b.n	8007418 <_printf_i+0x1f4>
 80072d0:	6820      	ldr	r0, [r4, #0]
 80072d2:	6829      	ldr	r1, [r5, #0]
 80072d4:	0606      	lsls	r6, r0, #24
 80072d6:	f101 0304 	add.w	r3, r1, #4
 80072da:	d50a      	bpl.n	80072f2 <_printf_i+0xce>
 80072dc:	680e      	ldr	r6, [r1, #0]
 80072de:	602b      	str	r3, [r5, #0]
 80072e0:	2e00      	cmp	r6, #0
 80072e2:	da03      	bge.n	80072ec <_printf_i+0xc8>
 80072e4:	232d      	movs	r3, #45	; 0x2d
 80072e6:	4276      	negs	r6, r6
 80072e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072ec:	485e      	ldr	r0, [pc, #376]	; (8007468 <_printf_i+0x244>)
 80072ee:	230a      	movs	r3, #10
 80072f0:	e019      	b.n	8007326 <_printf_i+0x102>
 80072f2:	680e      	ldr	r6, [r1, #0]
 80072f4:	602b      	str	r3, [r5, #0]
 80072f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80072fa:	bf18      	it	ne
 80072fc:	b236      	sxthne	r6, r6
 80072fe:	e7ef      	b.n	80072e0 <_printf_i+0xbc>
 8007300:	682b      	ldr	r3, [r5, #0]
 8007302:	6820      	ldr	r0, [r4, #0]
 8007304:	1d19      	adds	r1, r3, #4
 8007306:	6029      	str	r1, [r5, #0]
 8007308:	0601      	lsls	r1, r0, #24
 800730a:	d501      	bpl.n	8007310 <_printf_i+0xec>
 800730c:	681e      	ldr	r6, [r3, #0]
 800730e:	e002      	b.n	8007316 <_printf_i+0xf2>
 8007310:	0646      	lsls	r6, r0, #25
 8007312:	d5fb      	bpl.n	800730c <_printf_i+0xe8>
 8007314:	881e      	ldrh	r6, [r3, #0]
 8007316:	4854      	ldr	r0, [pc, #336]	; (8007468 <_printf_i+0x244>)
 8007318:	2f6f      	cmp	r7, #111	; 0x6f
 800731a:	bf0c      	ite	eq
 800731c:	2308      	moveq	r3, #8
 800731e:	230a      	movne	r3, #10
 8007320:	2100      	movs	r1, #0
 8007322:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007326:	6865      	ldr	r5, [r4, #4]
 8007328:	60a5      	str	r5, [r4, #8]
 800732a:	2d00      	cmp	r5, #0
 800732c:	bfa2      	ittt	ge
 800732e:	6821      	ldrge	r1, [r4, #0]
 8007330:	f021 0104 	bicge.w	r1, r1, #4
 8007334:	6021      	strge	r1, [r4, #0]
 8007336:	b90e      	cbnz	r6, 800733c <_printf_i+0x118>
 8007338:	2d00      	cmp	r5, #0
 800733a:	d04d      	beq.n	80073d8 <_printf_i+0x1b4>
 800733c:	4615      	mov	r5, r2
 800733e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007342:	fb03 6711 	mls	r7, r3, r1, r6
 8007346:	5dc7      	ldrb	r7, [r0, r7]
 8007348:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800734c:	4637      	mov	r7, r6
 800734e:	42bb      	cmp	r3, r7
 8007350:	460e      	mov	r6, r1
 8007352:	d9f4      	bls.n	800733e <_printf_i+0x11a>
 8007354:	2b08      	cmp	r3, #8
 8007356:	d10b      	bne.n	8007370 <_printf_i+0x14c>
 8007358:	6823      	ldr	r3, [r4, #0]
 800735a:	07de      	lsls	r6, r3, #31
 800735c:	d508      	bpl.n	8007370 <_printf_i+0x14c>
 800735e:	6923      	ldr	r3, [r4, #16]
 8007360:	6861      	ldr	r1, [r4, #4]
 8007362:	4299      	cmp	r1, r3
 8007364:	bfde      	ittt	le
 8007366:	2330      	movle	r3, #48	; 0x30
 8007368:	f805 3c01 	strble.w	r3, [r5, #-1]
 800736c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007370:	1b52      	subs	r2, r2, r5
 8007372:	6122      	str	r2, [r4, #16]
 8007374:	f8cd a000 	str.w	sl, [sp]
 8007378:	464b      	mov	r3, r9
 800737a:	aa03      	add	r2, sp, #12
 800737c:	4621      	mov	r1, r4
 800737e:	4640      	mov	r0, r8
 8007380:	f7ff fee2 	bl	8007148 <_printf_common>
 8007384:	3001      	adds	r0, #1
 8007386:	d14c      	bne.n	8007422 <_printf_i+0x1fe>
 8007388:	f04f 30ff 	mov.w	r0, #4294967295
 800738c:	b004      	add	sp, #16
 800738e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007392:	4835      	ldr	r0, [pc, #212]	; (8007468 <_printf_i+0x244>)
 8007394:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007398:	6829      	ldr	r1, [r5, #0]
 800739a:	6823      	ldr	r3, [r4, #0]
 800739c:	f851 6b04 	ldr.w	r6, [r1], #4
 80073a0:	6029      	str	r1, [r5, #0]
 80073a2:	061d      	lsls	r5, r3, #24
 80073a4:	d514      	bpl.n	80073d0 <_printf_i+0x1ac>
 80073a6:	07df      	lsls	r7, r3, #31
 80073a8:	bf44      	itt	mi
 80073aa:	f043 0320 	orrmi.w	r3, r3, #32
 80073ae:	6023      	strmi	r3, [r4, #0]
 80073b0:	b91e      	cbnz	r6, 80073ba <_printf_i+0x196>
 80073b2:	6823      	ldr	r3, [r4, #0]
 80073b4:	f023 0320 	bic.w	r3, r3, #32
 80073b8:	6023      	str	r3, [r4, #0]
 80073ba:	2310      	movs	r3, #16
 80073bc:	e7b0      	b.n	8007320 <_printf_i+0xfc>
 80073be:	6823      	ldr	r3, [r4, #0]
 80073c0:	f043 0320 	orr.w	r3, r3, #32
 80073c4:	6023      	str	r3, [r4, #0]
 80073c6:	2378      	movs	r3, #120	; 0x78
 80073c8:	4828      	ldr	r0, [pc, #160]	; (800746c <_printf_i+0x248>)
 80073ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80073ce:	e7e3      	b.n	8007398 <_printf_i+0x174>
 80073d0:	0659      	lsls	r1, r3, #25
 80073d2:	bf48      	it	mi
 80073d4:	b2b6      	uxthmi	r6, r6
 80073d6:	e7e6      	b.n	80073a6 <_printf_i+0x182>
 80073d8:	4615      	mov	r5, r2
 80073da:	e7bb      	b.n	8007354 <_printf_i+0x130>
 80073dc:	682b      	ldr	r3, [r5, #0]
 80073de:	6826      	ldr	r6, [r4, #0]
 80073e0:	6961      	ldr	r1, [r4, #20]
 80073e2:	1d18      	adds	r0, r3, #4
 80073e4:	6028      	str	r0, [r5, #0]
 80073e6:	0635      	lsls	r5, r6, #24
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	d501      	bpl.n	80073f0 <_printf_i+0x1cc>
 80073ec:	6019      	str	r1, [r3, #0]
 80073ee:	e002      	b.n	80073f6 <_printf_i+0x1d2>
 80073f0:	0670      	lsls	r0, r6, #25
 80073f2:	d5fb      	bpl.n	80073ec <_printf_i+0x1c8>
 80073f4:	8019      	strh	r1, [r3, #0]
 80073f6:	2300      	movs	r3, #0
 80073f8:	6123      	str	r3, [r4, #16]
 80073fa:	4615      	mov	r5, r2
 80073fc:	e7ba      	b.n	8007374 <_printf_i+0x150>
 80073fe:	682b      	ldr	r3, [r5, #0]
 8007400:	1d1a      	adds	r2, r3, #4
 8007402:	602a      	str	r2, [r5, #0]
 8007404:	681d      	ldr	r5, [r3, #0]
 8007406:	6862      	ldr	r2, [r4, #4]
 8007408:	2100      	movs	r1, #0
 800740a:	4628      	mov	r0, r5
 800740c:	f7f8 ff00 	bl	8000210 <memchr>
 8007410:	b108      	cbz	r0, 8007416 <_printf_i+0x1f2>
 8007412:	1b40      	subs	r0, r0, r5
 8007414:	6060      	str	r0, [r4, #4]
 8007416:	6863      	ldr	r3, [r4, #4]
 8007418:	6123      	str	r3, [r4, #16]
 800741a:	2300      	movs	r3, #0
 800741c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007420:	e7a8      	b.n	8007374 <_printf_i+0x150>
 8007422:	6923      	ldr	r3, [r4, #16]
 8007424:	462a      	mov	r2, r5
 8007426:	4649      	mov	r1, r9
 8007428:	4640      	mov	r0, r8
 800742a:	47d0      	blx	sl
 800742c:	3001      	adds	r0, #1
 800742e:	d0ab      	beq.n	8007388 <_printf_i+0x164>
 8007430:	6823      	ldr	r3, [r4, #0]
 8007432:	079b      	lsls	r3, r3, #30
 8007434:	d413      	bmi.n	800745e <_printf_i+0x23a>
 8007436:	68e0      	ldr	r0, [r4, #12]
 8007438:	9b03      	ldr	r3, [sp, #12]
 800743a:	4298      	cmp	r0, r3
 800743c:	bfb8      	it	lt
 800743e:	4618      	movlt	r0, r3
 8007440:	e7a4      	b.n	800738c <_printf_i+0x168>
 8007442:	2301      	movs	r3, #1
 8007444:	4632      	mov	r2, r6
 8007446:	4649      	mov	r1, r9
 8007448:	4640      	mov	r0, r8
 800744a:	47d0      	blx	sl
 800744c:	3001      	adds	r0, #1
 800744e:	d09b      	beq.n	8007388 <_printf_i+0x164>
 8007450:	3501      	adds	r5, #1
 8007452:	68e3      	ldr	r3, [r4, #12]
 8007454:	9903      	ldr	r1, [sp, #12]
 8007456:	1a5b      	subs	r3, r3, r1
 8007458:	42ab      	cmp	r3, r5
 800745a:	dcf2      	bgt.n	8007442 <_printf_i+0x21e>
 800745c:	e7eb      	b.n	8007436 <_printf_i+0x212>
 800745e:	2500      	movs	r5, #0
 8007460:	f104 0619 	add.w	r6, r4, #25
 8007464:	e7f5      	b.n	8007452 <_printf_i+0x22e>
 8007466:	bf00      	nop
 8007468:	080094ea 	.word	0x080094ea
 800746c:	080094fb 	.word	0x080094fb

08007470 <iprintf>:
 8007470:	b40f      	push	{r0, r1, r2, r3}
 8007472:	4b0a      	ldr	r3, [pc, #40]	; (800749c <iprintf+0x2c>)
 8007474:	b513      	push	{r0, r1, r4, lr}
 8007476:	681c      	ldr	r4, [r3, #0]
 8007478:	b124      	cbz	r4, 8007484 <iprintf+0x14>
 800747a:	69a3      	ldr	r3, [r4, #24]
 800747c:	b913      	cbnz	r3, 8007484 <iprintf+0x14>
 800747e:	4620      	mov	r0, r4
 8007480:	f001 f872 	bl	8008568 <__sinit>
 8007484:	ab05      	add	r3, sp, #20
 8007486:	9a04      	ldr	r2, [sp, #16]
 8007488:	68a1      	ldr	r1, [r4, #8]
 800748a:	9301      	str	r3, [sp, #4]
 800748c:	4620      	mov	r0, r4
 800748e:	f001 fd53 	bl	8008f38 <_vfiprintf_r>
 8007492:	b002      	add	sp, #8
 8007494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007498:	b004      	add	sp, #16
 800749a:	4770      	bx	lr
 800749c:	2000000c 	.word	0x2000000c

080074a0 <_sbrk_r>:
 80074a0:	b538      	push	{r3, r4, r5, lr}
 80074a2:	4d06      	ldr	r5, [pc, #24]	; (80074bc <_sbrk_r+0x1c>)
 80074a4:	2300      	movs	r3, #0
 80074a6:	4604      	mov	r4, r0
 80074a8:	4608      	mov	r0, r1
 80074aa:	602b      	str	r3, [r5, #0]
 80074ac:	f7fa fba6 	bl	8001bfc <_sbrk>
 80074b0:	1c43      	adds	r3, r0, #1
 80074b2:	d102      	bne.n	80074ba <_sbrk_r+0x1a>
 80074b4:	682b      	ldr	r3, [r5, #0]
 80074b6:	b103      	cbz	r3, 80074ba <_sbrk_r+0x1a>
 80074b8:	6023      	str	r3, [r4, #0]
 80074ba:	bd38      	pop	{r3, r4, r5, pc}
 80074bc:	20000450 	.word	0x20000450

080074c0 <__swbuf_r>:
 80074c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074c2:	460e      	mov	r6, r1
 80074c4:	4614      	mov	r4, r2
 80074c6:	4605      	mov	r5, r0
 80074c8:	b118      	cbz	r0, 80074d2 <__swbuf_r+0x12>
 80074ca:	6983      	ldr	r3, [r0, #24]
 80074cc:	b90b      	cbnz	r3, 80074d2 <__swbuf_r+0x12>
 80074ce:	f001 f84b 	bl	8008568 <__sinit>
 80074d2:	4b21      	ldr	r3, [pc, #132]	; (8007558 <__swbuf_r+0x98>)
 80074d4:	429c      	cmp	r4, r3
 80074d6:	d12b      	bne.n	8007530 <__swbuf_r+0x70>
 80074d8:	686c      	ldr	r4, [r5, #4]
 80074da:	69a3      	ldr	r3, [r4, #24]
 80074dc:	60a3      	str	r3, [r4, #8]
 80074de:	89a3      	ldrh	r3, [r4, #12]
 80074e0:	071a      	lsls	r2, r3, #28
 80074e2:	d52f      	bpl.n	8007544 <__swbuf_r+0x84>
 80074e4:	6923      	ldr	r3, [r4, #16]
 80074e6:	b36b      	cbz	r3, 8007544 <__swbuf_r+0x84>
 80074e8:	6923      	ldr	r3, [r4, #16]
 80074ea:	6820      	ldr	r0, [r4, #0]
 80074ec:	1ac0      	subs	r0, r0, r3
 80074ee:	6963      	ldr	r3, [r4, #20]
 80074f0:	b2f6      	uxtb	r6, r6
 80074f2:	4283      	cmp	r3, r0
 80074f4:	4637      	mov	r7, r6
 80074f6:	dc04      	bgt.n	8007502 <__swbuf_r+0x42>
 80074f8:	4621      	mov	r1, r4
 80074fa:	4628      	mov	r0, r5
 80074fc:	f000 ffa0 	bl	8008440 <_fflush_r>
 8007500:	bb30      	cbnz	r0, 8007550 <__swbuf_r+0x90>
 8007502:	68a3      	ldr	r3, [r4, #8]
 8007504:	3b01      	subs	r3, #1
 8007506:	60a3      	str	r3, [r4, #8]
 8007508:	6823      	ldr	r3, [r4, #0]
 800750a:	1c5a      	adds	r2, r3, #1
 800750c:	6022      	str	r2, [r4, #0]
 800750e:	701e      	strb	r6, [r3, #0]
 8007510:	6963      	ldr	r3, [r4, #20]
 8007512:	3001      	adds	r0, #1
 8007514:	4283      	cmp	r3, r0
 8007516:	d004      	beq.n	8007522 <__swbuf_r+0x62>
 8007518:	89a3      	ldrh	r3, [r4, #12]
 800751a:	07db      	lsls	r3, r3, #31
 800751c:	d506      	bpl.n	800752c <__swbuf_r+0x6c>
 800751e:	2e0a      	cmp	r6, #10
 8007520:	d104      	bne.n	800752c <__swbuf_r+0x6c>
 8007522:	4621      	mov	r1, r4
 8007524:	4628      	mov	r0, r5
 8007526:	f000 ff8b 	bl	8008440 <_fflush_r>
 800752a:	b988      	cbnz	r0, 8007550 <__swbuf_r+0x90>
 800752c:	4638      	mov	r0, r7
 800752e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007530:	4b0a      	ldr	r3, [pc, #40]	; (800755c <__swbuf_r+0x9c>)
 8007532:	429c      	cmp	r4, r3
 8007534:	d101      	bne.n	800753a <__swbuf_r+0x7a>
 8007536:	68ac      	ldr	r4, [r5, #8]
 8007538:	e7cf      	b.n	80074da <__swbuf_r+0x1a>
 800753a:	4b09      	ldr	r3, [pc, #36]	; (8007560 <__swbuf_r+0xa0>)
 800753c:	429c      	cmp	r4, r3
 800753e:	bf08      	it	eq
 8007540:	68ec      	ldreq	r4, [r5, #12]
 8007542:	e7ca      	b.n	80074da <__swbuf_r+0x1a>
 8007544:	4621      	mov	r1, r4
 8007546:	4628      	mov	r0, r5
 8007548:	f000 f80c 	bl	8007564 <__swsetup_r>
 800754c:	2800      	cmp	r0, #0
 800754e:	d0cb      	beq.n	80074e8 <__swbuf_r+0x28>
 8007550:	f04f 37ff 	mov.w	r7, #4294967295
 8007554:	e7ea      	b.n	800752c <__swbuf_r+0x6c>
 8007556:	bf00      	nop
 8007558:	080095bc 	.word	0x080095bc
 800755c:	080095dc 	.word	0x080095dc
 8007560:	0800959c 	.word	0x0800959c

08007564 <__swsetup_r>:
 8007564:	4b32      	ldr	r3, [pc, #200]	; (8007630 <__swsetup_r+0xcc>)
 8007566:	b570      	push	{r4, r5, r6, lr}
 8007568:	681d      	ldr	r5, [r3, #0]
 800756a:	4606      	mov	r6, r0
 800756c:	460c      	mov	r4, r1
 800756e:	b125      	cbz	r5, 800757a <__swsetup_r+0x16>
 8007570:	69ab      	ldr	r3, [r5, #24]
 8007572:	b913      	cbnz	r3, 800757a <__swsetup_r+0x16>
 8007574:	4628      	mov	r0, r5
 8007576:	f000 fff7 	bl	8008568 <__sinit>
 800757a:	4b2e      	ldr	r3, [pc, #184]	; (8007634 <__swsetup_r+0xd0>)
 800757c:	429c      	cmp	r4, r3
 800757e:	d10f      	bne.n	80075a0 <__swsetup_r+0x3c>
 8007580:	686c      	ldr	r4, [r5, #4]
 8007582:	89a3      	ldrh	r3, [r4, #12]
 8007584:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007588:	0719      	lsls	r1, r3, #28
 800758a:	d42c      	bmi.n	80075e6 <__swsetup_r+0x82>
 800758c:	06dd      	lsls	r5, r3, #27
 800758e:	d411      	bmi.n	80075b4 <__swsetup_r+0x50>
 8007590:	2309      	movs	r3, #9
 8007592:	6033      	str	r3, [r6, #0]
 8007594:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007598:	81a3      	strh	r3, [r4, #12]
 800759a:	f04f 30ff 	mov.w	r0, #4294967295
 800759e:	e03e      	b.n	800761e <__swsetup_r+0xba>
 80075a0:	4b25      	ldr	r3, [pc, #148]	; (8007638 <__swsetup_r+0xd4>)
 80075a2:	429c      	cmp	r4, r3
 80075a4:	d101      	bne.n	80075aa <__swsetup_r+0x46>
 80075a6:	68ac      	ldr	r4, [r5, #8]
 80075a8:	e7eb      	b.n	8007582 <__swsetup_r+0x1e>
 80075aa:	4b24      	ldr	r3, [pc, #144]	; (800763c <__swsetup_r+0xd8>)
 80075ac:	429c      	cmp	r4, r3
 80075ae:	bf08      	it	eq
 80075b0:	68ec      	ldreq	r4, [r5, #12]
 80075b2:	e7e6      	b.n	8007582 <__swsetup_r+0x1e>
 80075b4:	0758      	lsls	r0, r3, #29
 80075b6:	d512      	bpl.n	80075de <__swsetup_r+0x7a>
 80075b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075ba:	b141      	cbz	r1, 80075ce <__swsetup_r+0x6a>
 80075bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075c0:	4299      	cmp	r1, r3
 80075c2:	d002      	beq.n	80075ca <__swsetup_r+0x66>
 80075c4:	4630      	mov	r0, r6
 80075c6:	f7ff fa09 	bl	80069dc <_free_r>
 80075ca:	2300      	movs	r3, #0
 80075cc:	6363      	str	r3, [r4, #52]	; 0x34
 80075ce:	89a3      	ldrh	r3, [r4, #12]
 80075d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80075d4:	81a3      	strh	r3, [r4, #12]
 80075d6:	2300      	movs	r3, #0
 80075d8:	6063      	str	r3, [r4, #4]
 80075da:	6923      	ldr	r3, [r4, #16]
 80075dc:	6023      	str	r3, [r4, #0]
 80075de:	89a3      	ldrh	r3, [r4, #12]
 80075e0:	f043 0308 	orr.w	r3, r3, #8
 80075e4:	81a3      	strh	r3, [r4, #12]
 80075e6:	6923      	ldr	r3, [r4, #16]
 80075e8:	b94b      	cbnz	r3, 80075fe <__swsetup_r+0x9a>
 80075ea:	89a3      	ldrh	r3, [r4, #12]
 80075ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80075f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075f4:	d003      	beq.n	80075fe <__swsetup_r+0x9a>
 80075f6:	4621      	mov	r1, r4
 80075f8:	4630      	mov	r0, r6
 80075fa:	f001 f87f 	bl	80086fc <__smakebuf_r>
 80075fe:	89a0      	ldrh	r0, [r4, #12]
 8007600:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007604:	f010 0301 	ands.w	r3, r0, #1
 8007608:	d00a      	beq.n	8007620 <__swsetup_r+0xbc>
 800760a:	2300      	movs	r3, #0
 800760c:	60a3      	str	r3, [r4, #8]
 800760e:	6963      	ldr	r3, [r4, #20]
 8007610:	425b      	negs	r3, r3
 8007612:	61a3      	str	r3, [r4, #24]
 8007614:	6923      	ldr	r3, [r4, #16]
 8007616:	b943      	cbnz	r3, 800762a <__swsetup_r+0xc6>
 8007618:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800761c:	d1ba      	bne.n	8007594 <__swsetup_r+0x30>
 800761e:	bd70      	pop	{r4, r5, r6, pc}
 8007620:	0781      	lsls	r1, r0, #30
 8007622:	bf58      	it	pl
 8007624:	6963      	ldrpl	r3, [r4, #20]
 8007626:	60a3      	str	r3, [r4, #8]
 8007628:	e7f4      	b.n	8007614 <__swsetup_r+0xb0>
 800762a:	2000      	movs	r0, #0
 800762c:	e7f7      	b.n	800761e <__swsetup_r+0xba>
 800762e:	bf00      	nop
 8007630:	2000000c 	.word	0x2000000c
 8007634:	080095bc 	.word	0x080095bc
 8007638:	080095dc 	.word	0x080095dc
 800763c:	0800959c 	.word	0x0800959c

08007640 <quorem>:
 8007640:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007644:	6903      	ldr	r3, [r0, #16]
 8007646:	690c      	ldr	r4, [r1, #16]
 8007648:	42a3      	cmp	r3, r4
 800764a:	4607      	mov	r7, r0
 800764c:	f2c0 8081 	blt.w	8007752 <quorem+0x112>
 8007650:	3c01      	subs	r4, #1
 8007652:	f101 0814 	add.w	r8, r1, #20
 8007656:	f100 0514 	add.w	r5, r0, #20
 800765a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800765e:	9301      	str	r3, [sp, #4]
 8007660:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007664:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007668:	3301      	adds	r3, #1
 800766a:	429a      	cmp	r2, r3
 800766c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007670:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007674:	fbb2 f6f3 	udiv	r6, r2, r3
 8007678:	d331      	bcc.n	80076de <quorem+0x9e>
 800767a:	f04f 0e00 	mov.w	lr, #0
 800767e:	4640      	mov	r0, r8
 8007680:	46ac      	mov	ip, r5
 8007682:	46f2      	mov	sl, lr
 8007684:	f850 2b04 	ldr.w	r2, [r0], #4
 8007688:	b293      	uxth	r3, r2
 800768a:	fb06 e303 	mla	r3, r6, r3, lr
 800768e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007692:	b29b      	uxth	r3, r3
 8007694:	ebaa 0303 	sub.w	r3, sl, r3
 8007698:	f8dc a000 	ldr.w	sl, [ip]
 800769c:	0c12      	lsrs	r2, r2, #16
 800769e:	fa13 f38a 	uxtah	r3, r3, sl
 80076a2:	fb06 e202 	mla	r2, r6, r2, lr
 80076a6:	9300      	str	r3, [sp, #0]
 80076a8:	9b00      	ldr	r3, [sp, #0]
 80076aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80076ae:	b292      	uxth	r2, r2
 80076b0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80076b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076b8:	f8bd 3000 	ldrh.w	r3, [sp]
 80076bc:	4581      	cmp	r9, r0
 80076be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076c2:	f84c 3b04 	str.w	r3, [ip], #4
 80076c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80076ca:	d2db      	bcs.n	8007684 <quorem+0x44>
 80076cc:	f855 300b 	ldr.w	r3, [r5, fp]
 80076d0:	b92b      	cbnz	r3, 80076de <quorem+0x9e>
 80076d2:	9b01      	ldr	r3, [sp, #4]
 80076d4:	3b04      	subs	r3, #4
 80076d6:	429d      	cmp	r5, r3
 80076d8:	461a      	mov	r2, r3
 80076da:	d32e      	bcc.n	800773a <quorem+0xfa>
 80076dc:	613c      	str	r4, [r7, #16]
 80076de:	4638      	mov	r0, r7
 80076e0:	f001 fae8 	bl	8008cb4 <__mcmp>
 80076e4:	2800      	cmp	r0, #0
 80076e6:	db24      	blt.n	8007732 <quorem+0xf2>
 80076e8:	3601      	adds	r6, #1
 80076ea:	4628      	mov	r0, r5
 80076ec:	f04f 0c00 	mov.w	ip, #0
 80076f0:	f858 2b04 	ldr.w	r2, [r8], #4
 80076f4:	f8d0 e000 	ldr.w	lr, [r0]
 80076f8:	b293      	uxth	r3, r2
 80076fa:	ebac 0303 	sub.w	r3, ip, r3
 80076fe:	0c12      	lsrs	r2, r2, #16
 8007700:	fa13 f38e 	uxtah	r3, r3, lr
 8007704:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007708:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800770c:	b29b      	uxth	r3, r3
 800770e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007712:	45c1      	cmp	r9, r8
 8007714:	f840 3b04 	str.w	r3, [r0], #4
 8007718:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800771c:	d2e8      	bcs.n	80076f0 <quorem+0xb0>
 800771e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007722:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007726:	b922      	cbnz	r2, 8007732 <quorem+0xf2>
 8007728:	3b04      	subs	r3, #4
 800772a:	429d      	cmp	r5, r3
 800772c:	461a      	mov	r2, r3
 800772e:	d30a      	bcc.n	8007746 <quorem+0x106>
 8007730:	613c      	str	r4, [r7, #16]
 8007732:	4630      	mov	r0, r6
 8007734:	b003      	add	sp, #12
 8007736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800773a:	6812      	ldr	r2, [r2, #0]
 800773c:	3b04      	subs	r3, #4
 800773e:	2a00      	cmp	r2, #0
 8007740:	d1cc      	bne.n	80076dc <quorem+0x9c>
 8007742:	3c01      	subs	r4, #1
 8007744:	e7c7      	b.n	80076d6 <quorem+0x96>
 8007746:	6812      	ldr	r2, [r2, #0]
 8007748:	3b04      	subs	r3, #4
 800774a:	2a00      	cmp	r2, #0
 800774c:	d1f0      	bne.n	8007730 <quorem+0xf0>
 800774e:	3c01      	subs	r4, #1
 8007750:	e7eb      	b.n	800772a <quorem+0xea>
 8007752:	2000      	movs	r0, #0
 8007754:	e7ee      	b.n	8007734 <quorem+0xf4>
	...

08007758 <_dtoa_r>:
 8007758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800775c:	ed2d 8b04 	vpush	{d8-d9}
 8007760:	ec57 6b10 	vmov	r6, r7, d0
 8007764:	b093      	sub	sp, #76	; 0x4c
 8007766:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007768:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800776c:	9106      	str	r1, [sp, #24]
 800776e:	ee10 aa10 	vmov	sl, s0
 8007772:	4604      	mov	r4, r0
 8007774:	9209      	str	r2, [sp, #36]	; 0x24
 8007776:	930c      	str	r3, [sp, #48]	; 0x30
 8007778:	46bb      	mov	fp, r7
 800777a:	b975      	cbnz	r5, 800779a <_dtoa_r+0x42>
 800777c:	2010      	movs	r0, #16
 800777e:	f7ff f91d 	bl	80069bc <malloc>
 8007782:	4602      	mov	r2, r0
 8007784:	6260      	str	r0, [r4, #36]	; 0x24
 8007786:	b920      	cbnz	r0, 8007792 <_dtoa_r+0x3a>
 8007788:	4ba7      	ldr	r3, [pc, #668]	; (8007a28 <_dtoa_r+0x2d0>)
 800778a:	21ea      	movs	r1, #234	; 0xea
 800778c:	48a7      	ldr	r0, [pc, #668]	; (8007a2c <_dtoa_r+0x2d4>)
 800778e:	f001 fd59 	bl	8009244 <__assert_func>
 8007792:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007796:	6005      	str	r5, [r0, #0]
 8007798:	60c5      	str	r5, [r0, #12]
 800779a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800779c:	6819      	ldr	r1, [r3, #0]
 800779e:	b151      	cbz	r1, 80077b6 <_dtoa_r+0x5e>
 80077a0:	685a      	ldr	r2, [r3, #4]
 80077a2:	604a      	str	r2, [r1, #4]
 80077a4:	2301      	movs	r3, #1
 80077a6:	4093      	lsls	r3, r2
 80077a8:	608b      	str	r3, [r1, #8]
 80077aa:	4620      	mov	r0, r4
 80077ac:	f001 f840 	bl	8008830 <_Bfree>
 80077b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077b2:	2200      	movs	r2, #0
 80077b4:	601a      	str	r2, [r3, #0]
 80077b6:	1e3b      	subs	r3, r7, #0
 80077b8:	bfaa      	itet	ge
 80077ba:	2300      	movge	r3, #0
 80077bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80077c0:	f8c8 3000 	strge.w	r3, [r8]
 80077c4:	4b9a      	ldr	r3, [pc, #616]	; (8007a30 <_dtoa_r+0x2d8>)
 80077c6:	bfbc      	itt	lt
 80077c8:	2201      	movlt	r2, #1
 80077ca:	f8c8 2000 	strlt.w	r2, [r8]
 80077ce:	ea33 030b 	bics.w	r3, r3, fp
 80077d2:	d11b      	bne.n	800780c <_dtoa_r+0xb4>
 80077d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077d6:	f242 730f 	movw	r3, #9999	; 0x270f
 80077da:	6013      	str	r3, [r2, #0]
 80077dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80077e0:	4333      	orrs	r3, r6
 80077e2:	f000 8592 	beq.w	800830a <_dtoa_r+0xbb2>
 80077e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077e8:	b963      	cbnz	r3, 8007804 <_dtoa_r+0xac>
 80077ea:	4b92      	ldr	r3, [pc, #584]	; (8007a34 <_dtoa_r+0x2dc>)
 80077ec:	e022      	b.n	8007834 <_dtoa_r+0xdc>
 80077ee:	4b92      	ldr	r3, [pc, #584]	; (8007a38 <_dtoa_r+0x2e0>)
 80077f0:	9301      	str	r3, [sp, #4]
 80077f2:	3308      	adds	r3, #8
 80077f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80077f6:	6013      	str	r3, [r2, #0]
 80077f8:	9801      	ldr	r0, [sp, #4]
 80077fa:	b013      	add	sp, #76	; 0x4c
 80077fc:	ecbd 8b04 	vpop	{d8-d9}
 8007800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007804:	4b8b      	ldr	r3, [pc, #556]	; (8007a34 <_dtoa_r+0x2dc>)
 8007806:	9301      	str	r3, [sp, #4]
 8007808:	3303      	adds	r3, #3
 800780a:	e7f3      	b.n	80077f4 <_dtoa_r+0x9c>
 800780c:	2200      	movs	r2, #0
 800780e:	2300      	movs	r3, #0
 8007810:	4650      	mov	r0, sl
 8007812:	4659      	mov	r1, fp
 8007814:	f7f9 f970 	bl	8000af8 <__aeabi_dcmpeq>
 8007818:	ec4b ab19 	vmov	d9, sl, fp
 800781c:	4680      	mov	r8, r0
 800781e:	b158      	cbz	r0, 8007838 <_dtoa_r+0xe0>
 8007820:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007822:	2301      	movs	r3, #1
 8007824:	6013      	str	r3, [r2, #0]
 8007826:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007828:	2b00      	cmp	r3, #0
 800782a:	f000 856b 	beq.w	8008304 <_dtoa_r+0xbac>
 800782e:	4883      	ldr	r0, [pc, #524]	; (8007a3c <_dtoa_r+0x2e4>)
 8007830:	6018      	str	r0, [r3, #0]
 8007832:	1e43      	subs	r3, r0, #1
 8007834:	9301      	str	r3, [sp, #4]
 8007836:	e7df      	b.n	80077f8 <_dtoa_r+0xa0>
 8007838:	ec4b ab10 	vmov	d0, sl, fp
 800783c:	aa10      	add	r2, sp, #64	; 0x40
 800783e:	a911      	add	r1, sp, #68	; 0x44
 8007840:	4620      	mov	r0, r4
 8007842:	f001 fadd 	bl	8008e00 <__d2b>
 8007846:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800784a:	ee08 0a10 	vmov	s16, r0
 800784e:	2d00      	cmp	r5, #0
 8007850:	f000 8084 	beq.w	800795c <_dtoa_r+0x204>
 8007854:	ee19 3a90 	vmov	r3, s19
 8007858:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800785c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007860:	4656      	mov	r6, sl
 8007862:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007866:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800786a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800786e:	4b74      	ldr	r3, [pc, #464]	; (8007a40 <_dtoa_r+0x2e8>)
 8007870:	2200      	movs	r2, #0
 8007872:	4630      	mov	r0, r6
 8007874:	4639      	mov	r1, r7
 8007876:	f7f8 fd1f 	bl	80002b8 <__aeabi_dsub>
 800787a:	a365      	add	r3, pc, #404	; (adr r3, 8007a10 <_dtoa_r+0x2b8>)
 800787c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007880:	f7f8 fed2 	bl	8000628 <__aeabi_dmul>
 8007884:	a364      	add	r3, pc, #400	; (adr r3, 8007a18 <_dtoa_r+0x2c0>)
 8007886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788a:	f7f8 fd17 	bl	80002bc <__adddf3>
 800788e:	4606      	mov	r6, r0
 8007890:	4628      	mov	r0, r5
 8007892:	460f      	mov	r7, r1
 8007894:	f7f8 fe5e 	bl	8000554 <__aeabi_i2d>
 8007898:	a361      	add	r3, pc, #388	; (adr r3, 8007a20 <_dtoa_r+0x2c8>)
 800789a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789e:	f7f8 fec3 	bl	8000628 <__aeabi_dmul>
 80078a2:	4602      	mov	r2, r0
 80078a4:	460b      	mov	r3, r1
 80078a6:	4630      	mov	r0, r6
 80078a8:	4639      	mov	r1, r7
 80078aa:	f7f8 fd07 	bl	80002bc <__adddf3>
 80078ae:	4606      	mov	r6, r0
 80078b0:	460f      	mov	r7, r1
 80078b2:	f7f9 f969 	bl	8000b88 <__aeabi_d2iz>
 80078b6:	2200      	movs	r2, #0
 80078b8:	9000      	str	r0, [sp, #0]
 80078ba:	2300      	movs	r3, #0
 80078bc:	4630      	mov	r0, r6
 80078be:	4639      	mov	r1, r7
 80078c0:	f7f9 f924 	bl	8000b0c <__aeabi_dcmplt>
 80078c4:	b150      	cbz	r0, 80078dc <_dtoa_r+0x184>
 80078c6:	9800      	ldr	r0, [sp, #0]
 80078c8:	f7f8 fe44 	bl	8000554 <__aeabi_i2d>
 80078cc:	4632      	mov	r2, r6
 80078ce:	463b      	mov	r3, r7
 80078d0:	f7f9 f912 	bl	8000af8 <__aeabi_dcmpeq>
 80078d4:	b910      	cbnz	r0, 80078dc <_dtoa_r+0x184>
 80078d6:	9b00      	ldr	r3, [sp, #0]
 80078d8:	3b01      	subs	r3, #1
 80078da:	9300      	str	r3, [sp, #0]
 80078dc:	9b00      	ldr	r3, [sp, #0]
 80078de:	2b16      	cmp	r3, #22
 80078e0:	d85a      	bhi.n	8007998 <_dtoa_r+0x240>
 80078e2:	9a00      	ldr	r2, [sp, #0]
 80078e4:	4b57      	ldr	r3, [pc, #348]	; (8007a44 <_dtoa_r+0x2ec>)
 80078e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ee:	ec51 0b19 	vmov	r0, r1, d9
 80078f2:	f7f9 f90b 	bl	8000b0c <__aeabi_dcmplt>
 80078f6:	2800      	cmp	r0, #0
 80078f8:	d050      	beq.n	800799c <_dtoa_r+0x244>
 80078fa:	9b00      	ldr	r3, [sp, #0]
 80078fc:	3b01      	subs	r3, #1
 80078fe:	9300      	str	r3, [sp, #0]
 8007900:	2300      	movs	r3, #0
 8007902:	930b      	str	r3, [sp, #44]	; 0x2c
 8007904:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007906:	1b5d      	subs	r5, r3, r5
 8007908:	1e6b      	subs	r3, r5, #1
 800790a:	9305      	str	r3, [sp, #20]
 800790c:	bf45      	ittet	mi
 800790e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007912:	9304      	strmi	r3, [sp, #16]
 8007914:	2300      	movpl	r3, #0
 8007916:	2300      	movmi	r3, #0
 8007918:	bf4c      	ite	mi
 800791a:	9305      	strmi	r3, [sp, #20]
 800791c:	9304      	strpl	r3, [sp, #16]
 800791e:	9b00      	ldr	r3, [sp, #0]
 8007920:	2b00      	cmp	r3, #0
 8007922:	db3d      	blt.n	80079a0 <_dtoa_r+0x248>
 8007924:	9b05      	ldr	r3, [sp, #20]
 8007926:	9a00      	ldr	r2, [sp, #0]
 8007928:	920a      	str	r2, [sp, #40]	; 0x28
 800792a:	4413      	add	r3, r2
 800792c:	9305      	str	r3, [sp, #20]
 800792e:	2300      	movs	r3, #0
 8007930:	9307      	str	r3, [sp, #28]
 8007932:	9b06      	ldr	r3, [sp, #24]
 8007934:	2b09      	cmp	r3, #9
 8007936:	f200 8089 	bhi.w	8007a4c <_dtoa_r+0x2f4>
 800793a:	2b05      	cmp	r3, #5
 800793c:	bfc4      	itt	gt
 800793e:	3b04      	subgt	r3, #4
 8007940:	9306      	strgt	r3, [sp, #24]
 8007942:	9b06      	ldr	r3, [sp, #24]
 8007944:	f1a3 0302 	sub.w	r3, r3, #2
 8007948:	bfcc      	ite	gt
 800794a:	2500      	movgt	r5, #0
 800794c:	2501      	movle	r5, #1
 800794e:	2b03      	cmp	r3, #3
 8007950:	f200 8087 	bhi.w	8007a62 <_dtoa_r+0x30a>
 8007954:	e8df f003 	tbb	[pc, r3]
 8007958:	59383a2d 	.word	0x59383a2d
 800795c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007960:	441d      	add	r5, r3
 8007962:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007966:	2b20      	cmp	r3, #32
 8007968:	bfc1      	itttt	gt
 800796a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800796e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007972:	fa0b f303 	lslgt.w	r3, fp, r3
 8007976:	fa26 f000 	lsrgt.w	r0, r6, r0
 800797a:	bfda      	itte	le
 800797c:	f1c3 0320 	rsble	r3, r3, #32
 8007980:	fa06 f003 	lslle.w	r0, r6, r3
 8007984:	4318      	orrgt	r0, r3
 8007986:	f7f8 fdd5 	bl	8000534 <__aeabi_ui2d>
 800798a:	2301      	movs	r3, #1
 800798c:	4606      	mov	r6, r0
 800798e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007992:	3d01      	subs	r5, #1
 8007994:	930e      	str	r3, [sp, #56]	; 0x38
 8007996:	e76a      	b.n	800786e <_dtoa_r+0x116>
 8007998:	2301      	movs	r3, #1
 800799a:	e7b2      	b.n	8007902 <_dtoa_r+0x1aa>
 800799c:	900b      	str	r0, [sp, #44]	; 0x2c
 800799e:	e7b1      	b.n	8007904 <_dtoa_r+0x1ac>
 80079a0:	9b04      	ldr	r3, [sp, #16]
 80079a2:	9a00      	ldr	r2, [sp, #0]
 80079a4:	1a9b      	subs	r3, r3, r2
 80079a6:	9304      	str	r3, [sp, #16]
 80079a8:	4253      	negs	r3, r2
 80079aa:	9307      	str	r3, [sp, #28]
 80079ac:	2300      	movs	r3, #0
 80079ae:	930a      	str	r3, [sp, #40]	; 0x28
 80079b0:	e7bf      	b.n	8007932 <_dtoa_r+0x1da>
 80079b2:	2300      	movs	r3, #0
 80079b4:	9308      	str	r3, [sp, #32]
 80079b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	dc55      	bgt.n	8007a68 <_dtoa_r+0x310>
 80079bc:	2301      	movs	r3, #1
 80079be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80079c2:	461a      	mov	r2, r3
 80079c4:	9209      	str	r2, [sp, #36]	; 0x24
 80079c6:	e00c      	b.n	80079e2 <_dtoa_r+0x28a>
 80079c8:	2301      	movs	r3, #1
 80079ca:	e7f3      	b.n	80079b4 <_dtoa_r+0x25c>
 80079cc:	2300      	movs	r3, #0
 80079ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079d0:	9308      	str	r3, [sp, #32]
 80079d2:	9b00      	ldr	r3, [sp, #0]
 80079d4:	4413      	add	r3, r2
 80079d6:	9302      	str	r3, [sp, #8]
 80079d8:	3301      	adds	r3, #1
 80079da:	2b01      	cmp	r3, #1
 80079dc:	9303      	str	r3, [sp, #12]
 80079de:	bfb8      	it	lt
 80079e0:	2301      	movlt	r3, #1
 80079e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80079e4:	2200      	movs	r2, #0
 80079e6:	6042      	str	r2, [r0, #4]
 80079e8:	2204      	movs	r2, #4
 80079ea:	f102 0614 	add.w	r6, r2, #20
 80079ee:	429e      	cmp	r6, r3
 80079f0:	6841      	ldr	r1, [r0, #4]
 80079f2:	d93d      	bls.n	8007a70 <_dtoa_r+0x318>
 80079f4:	4620      	mov	r0, r4
 80079f6:	f000 fedb 	bl	80087b0 <_Balloc>
 80079fa:	9001      	str	r0, [sp, #4]
 80079fc:	2800      	cmp	r0, #0
 80079fe:	d13b      	bne.n	8007a78 <_dtoa_r+0x320>
 8007a00:	4b11      	ldr	r3, [pc, #68]	; (8007a48 <_dtoa_r+0x2f0>)
 8007a02:	4602      	mov	r2, r0
 8007a04:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007a08:	e6c0      	b.n	800778c <_dtoa_r+0x34>
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e7df      	b.n	80079ce <_dtoa_r+0x276>
 8007a0e:	bf00      	nop
 8007a10:	636f4361 	.word	0x636f4361
 8007a14:	3fd287a7 	.word	0x3fd287a7
 8007a18:	8b60c8b3 	.word	0x8b60c8b3
 8007a1c:	3fc68a28 	.word	0x3fc68a28
 8007a20:	509f79fb 	.word	0x509f79fb
 8007a24:	3fd34413 	.word	0x3fd34413
 8007a28:	08009519 	.word	0x08009519
 8007a2c:	08009530 	.word	0x08009530
 8007a30:	7ff00000 	.word	0x7ff00000
 8007a34:	08009515 	.word	0x08009515
 8007a38:	0800950c 	.word	0x0800950c
 8007a3c:	080094e9 	.word	0x080094e9
 8007a40:	3ff80000 	.word	0x3ff80000
 8007a44:	08009680 	.word	0x08009680
 8007a48:	0800958b 	.word	0x0800958b
 8007a4c:	2501      	movs	r5, #1
 8007a4e:	2300      	movs	r3, #0
 8007a50:	9306      	str	r3, [sp, #24]
 8007a52:	9508      	str	r5, [sp, #32]
 8007a54:	f04f 33ff 	mov.w	r3, #4294967295
 8007a58:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	2312      	movs	r3, #18
 8007a60:	e7b0      	b.n	80079c4 <_dtoa_r+0x26c>
 8007a62:	2301      	movs	r3, #1
 8007a64:	9308      	str	r3, [sp, #32]
 8007a66:	e7f5      	b.n	8007a54 <_dtoa_r+0x2fc>
 8007a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a6a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007a6e:	e7b8      	b.n	80079e2 <_dtoa_r+0x28a>
 8007a70:	3101      	adds	r1, #1
 8007a72:	6041      	str	r1, [r0, #4]
 8007a74:	0052      	lsls	r2, r2, #1
 8007a76:	e7b8      	b.n	80079ea <_dtoa_r+0x292>
 8007a78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a7a:	9a01      	ldr	r2, [sp, #4]
 8007a7c:	601a      	str	r2, [r3, #0]
 8007a7e:	9b03      	ldr	r3, [sp, #12]
 8007a80:	2b0e      	cmp	r3, #14
 8007a82:	f200 809d 	bhi.w	8007bc0 <_dtoa_r+0x468>
 8007a86:	2d00      	cmp	r5, #0
 8007a88:	f000 809a 	beq.w	8007bc0 <_dtoa_r+0x468>
 8007a8c:	9b00      	ldr	r3, [sp, #0]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	dd32      	ble.n	8007af8 <_dtoa_r+0x3a0>
 8007a92:	4ab7      	ldr	r2, [pc, #732]	; (8007d70 <_dtoa_r+0x618>)
 8007a94:	f003 030f 	and.w	r3, r3, #15
 8007a98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007a9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007aa0:	9b00      	ldr	r3, [sp, #0]
 8007aa2:	05d8      	lsls	r0, r3, #23
 8007aa4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007aa8:	d516      	bpl.n	8007ad8 <_dtoa_r+0x380>
 8007aaa:	4bb2      	ldr	r3, [pc, #712]	; (8007d74 <_dtoa_r+0x61c>)
 8007aac:	ec51 0b19 	vmov	r0, r1, d9
 8007ab0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ab4:	f7f8 fee2 	bl	800087c <__aeabi_ddiv>
 8007ab8:	f007 070f 	and.w	r7, r7, #15
 8007abc:	4682      	mov	sl, r0
 8007abe:	468b      	mov	fp, r1
 8007ac0:	2503      	movs	r5, #3
 8007ac2:	4eac      	ldr	r6, [pc, #688]	; (8007d74 <_dtoa_r+0x61c>)
 8007ac4:	b957      	cbnz	r7, 8007adc <_dtoa_r+0x384>
 8007ac6:	4642      	mov	r2, r8
 8007ac8:	464b      	mov	r3, r9
 8007aca:	4650      	mov	r0, sl
 8007acc:	4659      	mov	r1, fp
 8007ace:	f7f8 fed5 	bl	800087c <__aeabi_ddiv>
 8007ad2:	4682      	mov	sl, r0
 8007ad4:	468b      	mov	fp, r1
 8007ad6:	e028      	b.n	8007b2a <_dtoa_r+0x3d2>
 8007ad8:	2502      	movs	r5, #2
 8007ada:	e7f2      	b.n	8007ac2 <_dtoa_r+0x36a>
 8007adc:	07f9      	lsls	r1, r7, #31
 8007ade:	d508      	bpl.n	8007af2 <_dtoa_r+0x39a>
 8007ae0:	4640      	mov	r0, r8
 8007ae2:	4649      	mov	r1, r9
 8007ae4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007ae8:	f7f8 fd9e 	bl	8000628 <__aeabi_dmul>
 8007aec:	3501      	adds	r5, #1
 8007aee:	4680      	mov	r8, r0
 8007af0:	4689      	mov	r9, r1
 8007af2:	107f      	asrs	r7, r7, #1
 8007af4:	3608      	adds	r6, #8
 8007af6:	e7e5      	b.n	8007ac4 <_dtoa_r+0x36c>
 8007af8:	f000 809b 	beq.w	8007c32 <_dtoa_r+0x4da>
 8007afc:	9b00      	ldr	r3, [sp, #0]
 8007afe:	4f9d      	ldr	r7, [pc, #628]	; (8007d74 <_dtoa_r+0x61c>)
 8007b00:	425e      	negs	r6, r3
 8007b02:	4b9b      	ldr	r3, [pc, #620]	; (8007d70 <_dtoa_r+0x618>)
 8007b04:	f006 020f 	and.w	r2, r6, #15
 8007b08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b10:	ec51 0b19 	vmov	r0, r1, d9
 8007b14:	f7f8 fd88 	bl	8000628 <__aeabi_dmul>
 8007b18:	1136      	asrs	r6, r6, #4
 8007b1a:	4682      	mov	sl, r0
 8007b1c:	468b      	mov	fp, r1
 8007b1e:	2300      	movs	r3, #0
 8007b20:	2502      	movs	r5, #2
 8007b22:	2e00      	cmp	r6, #0
 8007b24:	d17a      	bne.n	8007c1c <_dtoa_r+0x4c4>
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d1d3      	bne.n	8007ad2 <_dtoa_r+0x37a>
 8007b2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f000 8082 	beq.w	8007c36 <_dtoa_r+0x4de>
 8007b32:	4b91      	ldr	r3, [pc, #580]	; (8007d78 <_dtoa_r+0x620>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	4650      	mov	r0, sl
 8007b38:	4659      	mov	r1, fp
 8007b3a:	f7f8 ffe7 	bl	8000b0c <__aeabi_dcmplt>
 8007b3e:	2800      	cmp	r0, #0
 8007b40:	d079      	beq.n	8007c36 <_dtoa_r+0x4de>
 8007b42:	9b03      	ldr	r3, [sp, #12]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d076      	beq.n	8007c36 <_dtoa_r+0x4de>
 8007b48:	9b02      	ldr	r3, [sp, #8]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	dd36      	ble.n	8007bbc <_dtoa_r+0x464>
 8007b4e:	9b00      	ldr	r3, [sp, #0]
 8007b50:	4650      	mov	r0, sl
 8007b52:	4659      	mov	r1, fp
 8007b54:	1e5f      	subs	r7, r3, #1
 8007b56:	2200      	movs	r2, #0
 8007b58:	4b88      	ldr	r3, [pc, #544]	; (8007d7c <_dtoa_r+0x624>)
 8007b5a:	f7f8 fd65 	bl	8000628 <__aeabi_dmul>
 8007b5e:	9e02      	ldr	r6, [sp, #8]
 8007b60:	4682      	mov	sl, r0
 8007b62:	468b      	mov	fp, r1
 8007b64:	3501      	adds	r5, #1
 8007b66:	4628      	mov	r0, r5
 8007b68:	f7f8 fcf4 	bl	8000554 <__aeabi_i2d>
 8007b6c:	4652      	mov	r2, sl
 8007b6e:	465b      	mov	r3, fp
 8007b70:	f7f8 fd5a 	bl	8000628 <__aeabi_dmul>
 8007b74:	4b82      	ldr	r3, [pc, #520]	; (8007d80 <_dtoa_r+0x628>)
 8007b76:	2200      	movs	r2, #0
 8007b78:	f7f8 fba0 	bl	80002bc <__adddf3>
 8007b7c:	46d0      	mov	r8, sl
 8007b7e:	46d9      	mov	r9, fp
 8007b80:	4682      	mov	sl, r0
 8007b82:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007b86:	2e00      	cmp	r6, #0
 8007b88:	d158      	bne.n	8007c3c <_dtoa_r+0x4e4>
 8007b8a:	4b7e      	ldr	r3, [pc, #504]	; (8007d84 <_dtoa_r+0x62c>)
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	4640      	mov	r0, r8
 8007b90:	4649      	mov	r1, r9
 8007b92:	f7f8 fb91 	bl	80002b8 <__aeabi_dsub>
 8007b96:	4652      	mov	r2, sl
 8007b98:	465b      	mov	r3, fp
 8007b9a:	4680      	mov	r8, r0
 8007b9c:	4689      	mov	r9, r1
 8007b9e:	f7f8 ffd3 	bl	8000b48 <__aeabi_dcmpgt>
 8007ba2:	2800      	cmp	r0, #0
 8007ba4:	f040 8295 	bne.w	80080d2 <_dtoa_r+0x97a>
 8007ba8:	4652      	mov	r2, sl
 8007baa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007bae:	4640      	mov	r0, r8
 8007bb0:	4649      	mov	r1, r9
 8007bb2:	f7f8 ffab 	bl	8000b0c <__aeabi_dcmplt>
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	f040 8289 	bne.w	80080ce <_dtoa_r+0x976>
 8007bbc:	ec5b ab19 	vmov	sl, fp, d9
 8007bc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f2c0 8148 	blt.w	8007e58 <_dtoa_r+0x700>
 8007bc8:	9a00      	ldr	r2, [sp, #0]
 8007bca:	2a0e      	cmp	r2, #14
 8007bcc:	f300 8144 	bgt.w	8007e58 <_dtoa_r+0x700>
 8007bd0:	4b67      	ldr	r3, [pc, #412]	; (8007d70 <_dtoa_r+0x618>)
 8007bd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bd6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f280 80d5 	bge.w	8007d8c <_dtoa_r+0x634>
 8007be2:	9b03      	ldr	r3, [sp, #12]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f300 80d1 	bgt.w	8007d8c <_dtoa_r+0x634>
 8007bea:	f040 826f 	bne.w	80080cc <_dtoa_r+0x974>
 8007bee:	4b65      	ldr	r3, [pc, #404]	; (8007d84 <_dtoa_r+0x62c>)
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	4640      	mov	r0, r8
 8007bf4:	4649      	mov	r1, r9
 8007bf6:	f7f8 fd17 	bl	8000628 <__aeabi_dmul>
 8007bfa:	4652      	mov	r2, sl
 8007bfc:	465b      	mov	r3, fp
 8007bfe:	f7f8 ff99 	bl	8000b34 <__aeabi_dcmpge>
 8007c02:	9e03      	ldr	r6, [sp, #12]
 8007c04:	4637      	mov	r7, r6
 8007c06:	2800      	cmp	r0, #0
 8007c08:	f040 8245 	bne.w	8008096 <_dtoa_r+0x93e>
 8007c0c:	9d01      	ldr	r5, [sp, #4]
 8007c0e:	2331      	movs	r3, #49	; 0x31
 8007c10:	f805 3b01 	strb.w	r3, [r5], #1
 8007c14:	9b00      	ldr	r3, [sp, #0]
 8007c16:	3301      	adds	r3, #1
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	e240      	b.n	800809e <_dtoa_r+0x946>
 8007c1c:	07f2      	lsls	r2, r6, #31
 8007c1e:	d505      	bpl.n	8007c2c <_dtoa_r+0x4d4>
 8007c20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c24:	f7f8 fd00 	bl	8000628 <__aeabi_dmul>
 8007c28:	3501      	adds	r5, #1
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	1076      	asrs	r6, r6, #1
 8007c2e:	3708      	adds	r7, #8
 8007c30:	e777      	b.n	8007b22 <_dtoa_r+0x3ca>
 8007c32:	2502      	movs	r5, #2
 8007c34:	e779      	b.n	8007b2a <_dtoa_r+0x3d2>
 8007c36:	9f00      	ldr	r7, [sp, #0]
 8007c38:	9e03      	ldr	r6, [sp, #12]
 8007c3a:	e794      	b.n	8007b66 <_dtoa_r+0x40e>
 8007c3c:	9901      	ldr	r1, [sp, #4]
 8007c3e:	4b4c      	ldr	r3, [pc, #304]	; (8007d70 <_dtoa_r+0x618>)
 8007c40:	4431      	add	r1, r6
 8007c42:	910d      	str	r1, [sp, #52]	; 0x34
 8007c44:	9908      	ldr	r1, [sp, #32]
 8007c46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007c4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c4e:	2900      	cmp	r1, #0
 8007c50:	d043      	beq.n	8007cda <_dtoa_r+0x582>
 8007c52:	494d      	ldr	r1, [pc, #308]	; (8007d88 <_dtoa_r+0x630>)
 8007c54:	2000      	movs	r0, #0
 8007c56:	f7f8 fe11 	bl	800087c <__aeabi_ddiv>
 8007c5a:	4652      	mov	r2, sl
 8007c5c:	465b      	mov	r3, fp
 8007c5e:	f7f8 fb2b 	bl	80002b8 <__aeabi_dsub>
 8007c62:	9d01      	ldr	r5, [sp, #4]
 8007c64:	4682      	mov	sl, r0
 8007c66:	468b      	mov	fp, r1
 8007c68:	4649      	mov	r1, r9
 8007c6a:	4640      	mov	r0, r8
 8007c6c:	f7f8 ff8c 	bl	8000b88 <__aeabi_d2iz>
 8007c70:	4606      	mov	r6, r0
 8007c72:	f7f8 fc6f 	bl	8000554 <__aeabi_i2d>
 8007c76:	4602      	mov	r2, r0
 8007c78:	460b      	mov	r3, r1
 8007c7a:	4640      	mov	r0, r8
 8007c7c:	4649      	mov	r1, r9
 8007c7e:	f7f8 fb1b 	bl	80002b8 <__aeabi_dsub>
 8007c82:	3630      	adds	r6, #48	; 0x30
 8007c84:	f805 6b01 	strb.w	r6, [r5], #1
 8007c88:	4652      	mov	r2, sl
 8007c8a:	465b      	mov	r3, fp
 8007c8c:	4680      	mov	r8, r0
 8007c8e:	4689      	mov	r9, r1
 8007c90:	f7f8 ff3c 	bl	8000b0c <__aeabi_dcmplt>
 8007c94:	2800      	cmp	r0, #0
 8007c96:	d163      	bne.n	8007d60 <_dtoa_r+0x608>
 8007c98:	4642      	mov	r2, r8
 8007c9a:	464b      	mov	r3, r9
 8007c9c:	4936      	ldr	r1, [pc, #216]	; (8007d78 <_dtoa_r+0x620>)
 8007c9e:	2000      	movs	r0, #0
 8007ca0:	f7f8 fb0a 	bl	80002b8 <__aeabi_dsub>
 8007ca4:	4652      	mov	r2, sl
 8007ca6:	465b      	mov	r3, fp
 8007ca8:	f7f8 ff30 	bl	8000b0c <__aeabi_dcmplt>
 8007cac:	2800      	cmp	r0, #0
 8007cae:	f040 80b5 	bne.w	8007e1c <_dtoa_r+0x6c4>
 8007cb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cb4:	429d      	cmp	r5, r3
 8007cb6:	d081      	beq.n	8007bbc <_dtoa_r+0x464>
 8007cb8:	4b30      	ldr	r3, [pc, #192]	; (8007d7c <_dtoa_r+0x624>)
 8007cba:	2200      	movs	r2, #0
 8007cbc:	4650      	mov	r0, sl
 8007cbe:	4659      	mov	r1, fp
 8007cc0:	f7f8 fcb2 	bl	8000628 <__aeabi_dmul>
 8007cc4:	4b2d      	ldr	r3, [pc, #180]	; (8007d7c <_dtoa_r+0x624>)
 8007cc6:	4682      	mov	sl, r0
 8007cc8:	468b      	mov	fp, r1
 8007cca:	4640      	mov	r0, r8
 8007ccc:	4649      	mov	r1, r9
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f7f8 fcaa 	bl	8000628 <__aeabi_dmul>
 8007cd4:	4680      	mov	r8, r0
 8007cd6:	4689      	mov	r9, r1
 8007cd8:	e7c6      	b.n	8007c68 <_dtoa_r+0x510>
 8007cda:	4650      	mov	r0, sl
 8007cdc:	4659      	mov	r1, fp
 8007cde:	f7f8 fca3 	bl	8000628 <__aeabi_dmul>
 8007ce2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ce4:	9d01      	ldr	r5, [sp, #4]
 8007ce6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ce8:	4682      	mov	sl, r0
 8007cea:	468b      	mov	fp, r1
 8007cec:	4649      	mov	r1, r9
 8007cee:	4640      	mov	r0, r8
 8007cf0:	f7f8 ff4a 	bl	8000b88 <__aeabi_d2iz>
 8007cf4:	4606      	mov	r6, r0
 8007cf6:	f7f8 fc2d 	bl	8000554 <__aeabi_i2d>
 8007cfa:	3630      	adds	r6, #48	; 0x30
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	460b      	mov	r3, r1
 8007d00:	4640      	mov	r0, r8
 8007d02:	4649      	mov	r1, r9
 8007d04:	f7f8 fad8 	bl	80002b8 <__aeabi_dsub>
 8007d08:	f805 6b01 	strb.w	r6, [r5], #1
 8007d0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d0e:	429d      	cmp	r5, r3
 8007d10:	4680      	mov	r8, r0
 8007d12:	4689      	mov	r9, r1
 8007d14:	f04f 0200 	mov.w	r2, #0
 8007d18:	d124      	bne.n	8007d64 <_dtoa_r+0x60c>
 8007d1a:	4b1b      	ldr	r3, [pc, #108]	; (8007d88 <_dtoa_r+0x630>)
 8007d1c:	4650      	mov	r0, sl
 8007d1e:	4659      	mov	r1, fp
 8007d20:	f7f8 facc 	bl	80002bc <__adddf3>
 8007d24:	4602      	mov	r2, r0
 8007d26:	460b      	mov	r3, r1
 8007d28:	4640      	mov	r0, r8
 8007d2a:	4649      	mov	r1, r9
 8007d2c:	f7f8 ff0c 	bl	8000b48 <__aeabi_dcmpgt>
 8007d30:	2800      	cmp	r0, #0
 8007d32:	d173      	bne.n	8007e1c <_dtoa_r+0x6c4>
 8007d34:	4652      	mov	r2, sl
 8007d36:	465b      	mov	r3, fp
 8007d38:	4913      	ldr	r1, [pc, #76]	; (8007d88 <_dtoa_r+0x630>)
 8007d3a:	2000      	movs	r0, #0
 8007d3c:	f7f8 fabc 	bl	80002b8 <__aeabi_dsub>
 8007d40:	4602      	mov	r2, r0
 8007d42:	460b      	mov	r3, r1
 8007d44:	4640      	mov	r0, r8
 8007d46:	4649      	mov	r1, r9
 8007d48:	f7f8 fee0 	bl	8000b0c <__aeabi_dcmplt>
 8007d4c:	2800      	cmp	r0, #0
 8007d4e:	f43f af35 	beq.w	8007bbc <_dtoa_r+0x464>
 8007d52:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007d54:	1e6b      	subs	r3, r5, #1
 8007d56:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d58:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d5c:	2b30      	cmp	r3, #48	; 0x30
 8007d5e:	d0f8      	beq.n	8007d52 <_dtoa_r+0x5fa>
 8007d60:	9700      	str	r7, [sp, #0]
 8007d62:	e049      	b.n	8007df8 <_dtoa_r+0x6a0>
 8007d64:	4b05      	ldr	r3, [pc, #20]	; (8007d7c <_dtoa_r+0x624>)
 8007d66:	f7f8 fc5f 	bl	8000628 <__aeabi_dmul>
 8007d6a:	4680      	mov	r8, r0
 8007d6c:	4689      	mov	r9, r1
 8007d6e:	e7bd      	b.n	8007cec <_dtoa_r+0x594>
 8007d70:	08009680 	.word	0x08009680
 8007d74:	08009658 	.word	0x08009658
 8007d78:	3ff00000 	.word	0x3ff00000
 8007d7c:	40240000 	.word	0x40240000
 8007d80:	401c0000 	.word	0x401c0000
 8007d84:	40140000 	.word	0x40140000
 8007d88:	3fe00000 	.word	0x3fe00000
 8007d8c:	9d01      	ldr	r5, [sp, #4]
 8007d8e:	4656      	mov	r6, sl
 8007d90:	465f      	mov	r7, fp
 8007d92:	4642      	mov	r2, r8
 8007d94:	464b      	mov	r3, r9
 8007d96:	4630      	mov	r0, r6
 8007d98:	4639      	mov	r1, r7
 8007d9a:	f7f8 fd6f 	bl	800087c <__aeabi_ddiv>
 8007d9e:	f7f8 fef3 	bl	8000b88 <__aeabi_d2iz>
 8007da2:	4682      	mov	sl, r0
 8007da4:	f7f8 fbd6 	bl	8000554 <__aeabi_i2d>
 8007da8:	4642      	mov	r2, r8
 8007daa:	464b      	mov	r3, r9
 8007dac:	f7f8 fc3c 	bl	8000628 <__aeabi_dmul>
 8007db0:	4602      	mov	r2, r0
 8007db2:	460b      	mov	r3, r1
 8007db4:	4630      	mov	r0, r6
 8007db6:	4639      	mov	r1, r7
 8007db8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007dbc:	f7f8 fa7c 	bl	80002b8 <__aeabi_dsub>
 8007dc0:	f805 6b01 	strb.w	r6, [r5], #1
 8007dc4:	9e01      	ldr	r6, [sp, #4]
 8007dc6:	9f03      	ldr	r7, [sp, #12]
 8007dc8:	1bae      	subs	r6, r5, r6
 8007dca:	42b7      	cmp	r7, r6
 8007dcc:	4602      	mov	r2, r0
 8007dce:	460b      	mov	r3, r1
 8007dd0:	d135      	bne.n	8007e3e <_dtoa_r+0x6e6>
 8007dd2:	f7f8 fa73 	bl	80002bc <__adddf3>
 8007dd6:	4642      	mov	r2, r8
 8007dd8:	464b      	mov	r3, r9
 8007dda:	4606      	mov	r6, r0
 8007ddc:	460f      	mov	r7, r1
 8007dde:	f7f8 feb3 	bl	8000b48 <__aeabi_dcmpgt>
 8007de2:	b9d0      	cbnz	r0, 8007e1a <_dtoa_r+0x6c2>
 8007de4:	4642      	mov	r2, r8
 8007de6:	464b      	mov	r3, r9
 8007de8:	4630      	mov	r0, r6
 8007dea:	4639      	mov	r1, r7
 8007dec:	f7f8 fe84 	bl	8000af8 <__aeabi_dcmpeq>
 8007df0:	b110      	cbz	r0, 8007df8 <_dtoa_r+0x6a0>
 8007df2:	f01a 0f01 	tst.w	sl, #1
 8007df6:	d110      	bne.n	8007e1a <_dtoa_r+0x6c2>
 8007df8:	4620      	mov	r0, r4
 8007dfa:	ee18 1a10 	vmov	r1, s16
 8007dfe:	f000 fd17 	bl	8008830 <_Bfree>
 8007e02:	2300      	movs	r3, #0
 8007e04:	9800      	ldr	r0, [sp, #0]
 8007e06:	702b      	strb	r3, [r5, #0]
 8007e08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e0a:	3001      	adds	r0, #1
 8007e0c:	6018      	str	r0, [r3, #0]
 8007e0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	f43f acf1 	beq.w	80077f8 <_dtoa_r+0xa0>
 8007e16:	601d      	str	r5, [r3, #0]
 8007e18:	e4ee      	b.n	80077f8 <_dtoa_r+0xa0>
 8007e1a:	9f00      	ldr	r7, [sp, #0]
 8007e1c:	462b      	mov	r3, r5
 8007e1e:	461d      	mov	r5, r3
 8007e20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e24:	2a39      	cmp	r2, #57	; 0x39
 8007e26:	d106      	bne.n	8007e36 <_dtoa_r+0x6de>
 8007e28:	9a01      	ldr	r2, [sp, #4]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d1f7      	bne.n	8007e1e <_dtoa_r+0x6c6>
 8007e2e:	9901      	ldr	r1, [sp, #4]
 8007e30:	2230      	movs	r2, #48	; 0x30
 8007e32:	3701      	adds	r7, #1
 8007e34:	700a      	strb	r2, [r1, #0]
 8007e36:	781a      	ldrb	r2, [r3, #0]
 8007e38:	3201      	adds	r2, #1
 8007e3a:	701a      	strb	r2, [r3, #0]
 8007e3c:	e790      	b.n	8007d60 <_dtoa_r+0x608>
 8007e3e:	4ba6      	ldr	r3, [pc, #664]	; (80080d8 <_dtoa_r+0x980>)
 8007e40:	2200      	movs	r2, #0
 8007e42:	f7f8 fbf1 	bl	8000628 <__aeabi_dmul>
 8007e46:	2200      	movs	r2, #0
 8007e48:	2300      	movs	r3, #0
 8007e4a:	4606      	mov	r6, r0
 8007e4c:	460f      	mov	r7, r1
 8007e4e:	f7f8 fe53 	bl	8000af8 <__aeabi_dcmpeq>
 8007e52:	2800      	cmp	r0, #0
 8007e54:	d09d      	beq.n	8007d92 <_dtoa_r+0x63a>
 8007e56:	e7cf      	b.n	8007df8 <_dtoa_r+0x6a0>
 8007e58:	9a08      	ldr	r2, [sp, #32]
 8007e5a:	2a00      	cmp	r2, #0
 8007e5c:	f000 80d7 	beq.w	800800e <_dtoa_r+0x8b6>
 8007e60:	9a06      	ldr	r2, [sp, #24]
 8007e62:	2a01      	cmp	r2, #1
 8007e64:	f300 80ba 	bgt.w	8007fdc <_dtoa_r+0x884>
 8007e68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e6a:	2a00      	cmp	r2, #0
 8007e6c:	f000 80b2 	beq.w	8007fd4 <_dtoa_r+0x87c>
 8007e70:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007e74:	9e07      	ldr	r6, [sp, #28]
 8007e76:	9d04      	ldr	r5, [sp, #16]
 8007e78:	9a04      	ldr	r2, [sp, #16]
 8007e7a:	441a      	add	r2, r3
 8007e7c:	9204      	str	r2, [sp, #16]
 8007e7e:	9a05      	ldr	r2, [sp, #20]
 8007e80:	2101      	movs	r1, #1
 8007e82:	441a      	add	r2, r3
 8007e84:	4620      	mov	r0, r4
 8007e86:	9205      	str	r2, [sp, #20]
 8007e88:	f000 fd8a 	bl	80089a0 <__i2b>
 8007e8c:	4607      	mov	r7, r0
 8007e8e:	2d00      	cmp	r5, #0
 8007e90:	dd0c      	ble.n	8007eac <_dtoa_r+0x754>
 8007e92:	9b05      	ldr	r3, [sp, #20]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	dd09      	ble.n	8007eac <_dtoa_r+0x754>
 8007e98:	42ab      	cmp	r3, r5
 8007e9a:	9a04      	ldr	r2, [sp, #16]
 8007e9c:	bfa8      	it	ge
 8007e9e:	462b      	movge	r3, r5
 8007ea0:	1ad2      	subs	r2, r2, r3
 8007ea2:	9204      	str	r2, [sp, #16]
 8007ea4:	9a05      	ldr	r2, [sp, #20]
 8007ea6:	1aed      	subs	r5, r5, r3
 8007ea8:	1ad3      	subs	r3, r2, r3
 8007eaa:	9305      	str	r3, [sp, #20]
 8007eac:	9b07      	ldr	r3, [sp, #28]
 8007eae:	b31b      	cbz	r3, 8007ef8 <_dtoa_r+0x7a0>
 8007eb0:	9b08      	ldr	r3, [sp, #32]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	f000 80af 	beq.w	8008016 <_dtoa_r+0x8be>
 8007eb8:	2e00      	cmp	r6, #0
 8007eba:	dd13      	ble.n	8007ee4 <_dtoa_r+0x78c>
 8007ebc:	4639      	mov	r1, r7
 8007ebe:	4632      	mov	r2, r6
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	f000 fe2d 	bl	8008b20 <__pow5mult>
 8007ec6:	ee18 2a10 	vmov	r2, s16
 8007eca:	4601      	mov	r1, r0
 8007ecc:	4607      	mov	r7, r0
 8007ece:	4620      	mov	r0, r4
 8007ed0:	f000 fd7c 	bl	80089cc <__multiply>
 8007ed4:	ee18 1a10 	vmov	r1, s16
 8007ed8:	4680      	mov	r8, r0
 8007eda:	4620      	mov	r0, r4
 8007edc:	f000 fca8 	bl	8008830 <_Bfree>
 8007ee0:	ee08 8a10 	vmov	s16, r8
 8007ee4:	9b07      	ldr	r3, [sp, #28]
 8007ee6:	1b9a      	subs	r2, r3, r6
 8007ee8:	d006      	beq.n	8007ef8 <_dtoa_r+0x7a0>
 8007eea:	ee18 1a10 	vmov	r1, s16
 8007eee:	4620      	mov	r0, r4
 8007ef0:	f000 fe16 	bl	8008b20 <__pow5mult>
 8007ef4:	ee08 0a10 	vmov	s16, r0
 8007ef8:	2101      	movs	r1, #1
 8007efa:	4620      	mov	r0, r4
 8007efc:	f000 fd50 	bl	80089a0 <__i2b>
 8007f00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	4606      	mov	r6, r0
 8007f06:	f340 8088 	ble.w	800801a <_dtoa_r+0x8c2>
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	4601      	mov	r1, r0
 8007f0e:	4620      	mov	r0, r4
 8007f10:	f000 fe06 	bl	8008b20 <__pow5mult>
 8007f14:	9b06      	ldr	r3, [sp, #24]
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	4606      	mov	r6, r0
 8007f1a:	f340 8081 	ble.w	8008020 <_dtoa_r+0x8c8>
 8007f1e:	f04f 0800 	mov.w	r8, #0
 8007f22:	6933      	ldr	r3, [r6, #16]
 8007f24:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007f28:	6918      	ldr	r0, [r3, #16]
 8007f2a:	f000 fce9 	bl	8008900 <__hi0bits>
 8007f2e:	f1c0 0020 	rsb	r0, r0, #32
 8007f32:	9b05      	ldr	r3, [sp, #20]
 8007f34:	4418      	add	r0, r3
 8007f36:	f010 001f 	ands.w	r0, r0, #31
 8007f3a:	f000 8092 	beq.w	8008062 <_dtoa_r+0x90a>
 8007f3e:	f1c0 0320 	rsb	r3, r0, #32
 8007f42:	2b04      	cmp	r3, #4
 8007f44:	f340 808a 	ble.w	800805c <_dtoa_r+0x904>
 8007f48:	f1c0 001c 	rsb	r0, r0, #28
 8007f4c:	9b04      	ldr	r3, [sp, #16]
 8007f4e:	4403      	add	r3, r0
 8007f50:	9304      	str	r3, [sp, #16]
 8007f52:	9b05      	ldr	r3, [sp, #20]
 8007f54:	4403      	add	r3, r0
 8007f56:	4405      	add	r5, r0
 8007f58:	9305      	str	r3, [sp, #20]
 8007f5a:	9b04      	ldr	r3, [sp, #16]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	dd07      	ble.n	8007f70 <_dtoa_r+0x818>
 8007f60:	ee18 1a10 	vmov	r1, s16
 8007f64:	461a      	mov	r2, r3
 8007f66:	4620      	mov	r0, r4
 8007f68:	f000 fe34 	bl	8008bd4 <__lshift>
 8007f6c:	ee08 0a10 	vmov	s16, r0
 8007f70:	9b05      	ldr	r3, [sp, #20]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	dd05      	ble.n	8007f82 <_dtoa_r+0x82a>
 8007f76:	4631      	mov	r1, r6
 8007f78:	461a      	mov	r2, r3
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	f000 fe2a 	bl	8008bd4 <__lshift>
 8007f80:	4606      	mov	r6, r0
 8007f82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d06e      	beq.n	8008066 <_dtoa_r+0x90e>
 8007f88:	ee18 0a10 	vmov	r0, s16
 8007f8c:	4631      	mov	r1, r6
 8007f8e:	f000 fe91 	bl	8008cb4 <__mcmp>
 8007f92:	2800      	cmp	r0, #0
 8007f94:	da67      	bge.n	8008066 <_dtoa_r+0x90e>
 8007f96:	9b00      	ldr	r3, [sp, #0]
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	ee18 1a10 	vmov	r1, s16
 8007f9e:	9300      	str	r3, [sp, #0]
 8007fa0:	220a      	movs	r2, #10
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	f000 fc65 	bl	8008874 <__multadd>
 8007faa:	9b08      	ldr	r3, [sp, #32]
 8007fac:	ee08 0a10 	vmov	s16, r0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	f000 81b1 	beq.w	8008318 <_dtoa_r+0xbc0>
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	4639      	mov	r1, r7
 8007fba:	220a      	movs	r2, #10
 8007fbc:	4620      	mov	r0, r4
 8007fbe:	f000 fc59 	bl	8008874 <__multadd>
 8007fc2:	9b02      	ldr	r3, [sp, #8]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	4607      	mov	r7, r0
 8007fc8:	f300 808e 	bgt.w	80080e8 <_dtoa_r+0x990>
 8007fcc:	9b06      	ldr	r3, [sp, #24]
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	dc51      	bgt.n	8008076 <_dtoa_r+0x91e>
 8007fd2:	e089      	b.n	80080e8 <_dtoa_r+0x990>
 8007fd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007fda:	e74b      	b.n	8007e74 <_dtoa_r+0x71c>
 8007fdc:	9b03      	ldr	r3, [sp, #12]
 8007fde:	1e5e      	subs	r6, r3, #1
 8007fe0:	9b07      	ldr	r3, [sp, #28]
 8007fe2:	42b3      	cmp	r3, r6
 8007fe4:	bfbf      	itttt	lt
 8007fe6:	9b07      	ldrlt	r3, [sp, #28]
 8007fe8:	9607      	strlt	r6, [sp, #28]
 8007fea:	1af2      	sublt	r2, r6, r3
 8007fec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007fee:	bfb6      	itet	lt
 8007ff0:	189b      	addlt	r3, r3, r2
 8007ff2:	1b9e      	subge	r6, r3, r6
 8007ff4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007ff6:	9b03      	ldr	r3, [sp, #12]
 8007ff8:	bfb8      	it	lt
 8007ffa:	2600      	movlt	r6, #0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	bfb7      	itett	lt
 8008000:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008004:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008008:	1a9d      	sublt	r5, r3, r2
 800800a:	2300      	movlt	r3, #0
 800800c:	e734      	b.n	8007e78 <_dtoa_r+0x720>
 800800e:	9e07      	ldr	r6, [sp, #28]
 8008010:	9d04      	ldr	r5, [sp, #16]
 8008012:	9f08      	ldr	r7, [sp, #32]
 8008014:	e73b      	b.n	8007e8e <_dtoa_r+0x736>
 8008016:	9a07      	ldr	r2, [sp, #28]
 8008018:	e767      	b.n	8007eea <_dtoa_r+0x792>
 800801a:	9b06      	ldr	r3, [sp, #24]
 800801c:	2b01      	cmp	r3, #1
 800801e:	dc18      	bgt.n	8008052 <_dtoa_r+0x8fa>
 8008020:	f1ba 0f00 	cmp.w	sl, #0
 8008024:	d115      	bne.n	8008052 <_dtoa_r+0x8fa>
 8008026:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800802a:	b993      	cbnz	r3, 8008052 <_dtoa_r+0x8fa>
 800802c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008030:	0d1b      	lsrs	r3, r3, #20
 8008032:	051b      	lsls	r3, r3, #20
 8008034:	b183      	cbz	r3, 8008058 <_dtoa_r+0x900>
 8008036:	9b04      	ldr	r3, [sp, #16]
 8008038:	3301      	adds	r3, #1
 800803a:	9304      	str	r3, [sp, #16]
 800803c:	9b05      	ldr	r3, [sp, #20]
 800803e:	3301      	adds	r3, #1
 8008040:	9305      	str	r3, [sp, #20]
 8008042:	f04f 0801 	mov.w	r8, #1
 8008046:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008048:	2b00      	cmp	r3, #0
 800804a:	f47f af6a 	bne.w	8007f22 <_dtoa_r+0x7ca>
 800804e:	2001      	movs	r0, #1
 8008050:	e76f      	b.n	8007f32 <_dtoa_r+0x7da>
 8008052:	f04f 0800 	mov.w	r8, #0
 8008056:	e7f6      	b.n	8008046 <_dtoa_r+0x8ee>
 8008058:	4698      	mov	r8, r3
 800805a:	e7f4      	b.n	8008046 <_dtoa_r+0x8ee>
 800805c:	f43f af7d 	beq.w	8007f5a <_dtoa_r+0x802>
 8008060:	4618      	mov	r0, r3
 8008062:	301c      	adds	r0, #28
 8008064:	e772      	b.n	8007f4c <_dtoa_r+0x7f4>
 8008066:	9b03      	ldr	r3, [sp, #12]
 8008068:	2b00      	cmp	r3, #0
 800806a:	dc37      	bgt.n	80080dc <_dtoa_r+0x984>
 800806c:	9b06      	ldr	r3, [sp, #24]
 800806e:	2b02      	cmp	r3, #2
 8008070:	dd34      	ble.n	80080dc <_dtoa_r+0x984>
 8008072:	9b03      	ldr	r3, [sp, #12]
 8008074:	9302      	str	r3, [sp, #8]
 8008076:	9b02      	ldr	r3, [sp, #8]
 8008078:	b96b      	cbnz	r3, 8008096 <_dtoa_r+0x93e>
 800807a:	4631      	mov	r1, r6
 800807c:	2205      	movs	r2, #5
 800807e:	4620      	mov	r0, r4
 8008080:	f000 fbf8 	bl	8008874 <__multadd>
 8008084:	4601      	mov	r1, r0
 8008086:	4606      	mov	r6, r0
 8008088:	ee18 0a10 	vmov	r0, s16
 800808c:	f000 fe12 	bl	8008cb4 <__mcmp>
 8008090:	2800      	cmp	r0, #0
 8008092:	f73f adbb 	bgt.w	8007c0c <_dtoa_r+0x4b4>
 8008096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008098:	9d01      	ldr	r5, [sp, #4]
 800809a:	43db      	mvns	r3, r3
 800809c:	9300      	str	r3, [sp, #0]
 800809e:	f04f 0800 	mov.w	r8, #0
 80080a2:	4631      	mov	r1, r6
 80080a4:	4620      	mov	r0, r4
 80080a6:	f000 fbc3 	bl	8008830 <_Bfree>
 80080aa:	2f00      	cmp	r7, #0
 80080ac:	f43f aea4 	beq.w	8007df8 <_dtoa_r+0x6a0>
 80080b0:	f1b8 0f00 	cmp.w	r8, #0
 80080b4:	d005      	beq.n	80080c2 <_dtoa_r+0x96a>
 80080b6:	45b8      	cmp	r8, r7
 80080b8:	d003      	beq.n	80080c2 <_dtoa_r+0x96a>
 80080ba:	4641      	mov	r1, r8
 80080bc:	4620      	mov	r0, r4
 80080be:	f000 fbb7 	bl	8008830 <_Bfree>
 80080c2:	4639      	mov	r1, r7
 80080c4:	4620      	mov	r0, r4
 80080c6:	f000 fbb3 	bl	8008830 <_Bfree>
 80080ca:	e695      	b.n	8007df8 <_dtoa_r+0x6a0>
 80080cc:	2600      	movs	r6, #0
 80080ce:	4637      	mov	r7, r6
 80080d0:	e7e1      	b.n	8008096 <_dtoa_r+0x93e>
 80080d2:	9700      	str	r7, [sp, #0]
 80080d4:	4637      	mov	r7, r6
 80080d6:	e599      	b.n	8007c0c <_dtoa_r+0x4b4>
 80080d8:	40240000 	.word	0x40240000
 80080dc:	9b08      	ldr	r3, [sp, #32]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	f000 80ca 	beq.w	8008278 <_dtoa_r+0xb20>
 80080e4:	9b03      	ldr	r3, [sp, #12]
 80080e6:	9302      	str	r3, [sp, #8]
 80080e8:	2d00      	cmp	r5, #0
 80080ea:	dd05      	ble.n	80080f8 <_dtoa_r+0x9a0>
 80080ec:	4639      	mov	r1, r7
 80080ee:	462a      	mov	r2, r5
 80080f0:	4620      	mov	r0, r4
 80080f2:	f000 fd6f 	bl	8008bd4 <__lshift>
 80080f6:	4607      	mov	r7, r0
 80080f8:	f1b8 0f00 	cmp.w	r8, #0
 80080fc:	d05b      	beq.n	80081b6 <_dtoa_r+0xa5e>
 80080fe:	6879      	ldr	r1, [r7, #4]
 8008100:	4620      	mov	r0, r4
 8008102:	f000 fb55 	bl	80087b0 <_Balloc>
 8008106:	4605      	mov	r5, r0
 8008108:	b928      	cbnz	r0, 8008116 <_dtoa_r+0x9be>
 800810a:	4b87      	ldr	r3, [pc, #540]	; (8008328 <_dtoa_r+0xbd0>)
 800810c:	4602      	mov	r2, r0
 800810e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008112:	f7ff bb3b 	b.w	800778c <_dtoa_r+0x34>
 8008116:	693a      	ldr	r2, [r7, #16]
 8008118:	3202      	adds	r2, #2
 800811a:	0092      	lsls	r2, r2, #2
 800811c:	f107 010c 	add.w	r1, r7, #12
 8008120:	300c      	adds	r0, #12
 8008122:	f000 fb2b 	bl	800877c <memcpy>
 8008126:	2201      	movs	r2, #1
 8008128:	4629      	mov	r1, r5
 800812a:	4620      	mov	r0, r4
 800812c:	f000 fd52 	bl	8008bd4 <__lshift>
 8008130:	9b01      	ldr	r3, [sp, #4]
 8008132:	f103 0901 	add.w	r9, r3, #1
 8008136:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800813a:	4413      	add	r3, r2
 800813c:	9305      	str	r3, [sp, #20]
 800813e:	f00a 0301 	and.w	r3, sl, #1
 8008142:	46b8      	mov	r8, r7
 8008144:	9304      	str	r3, [sp, #16]
 8008146:	4607      	mov	r7, r0
 8008148:	4631      	mov	r1, r6
 800814a:	ee18 0a10 	vmov	r0, s16
 800814e:	f7ff fa77 	bl	8007640 <quorem>
 8008152:	4641      	mov	r1, r8
 8008154:	9002      	str	r0, [sp, #8]
 8008156:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800815a:	ee18 0a10 	vmov	r0, s16
 800815e:	f000 fda9 	bl	8008cb4 <__mcmp>
 8008162:	463a      	mov	r2, r7
 8008164:	9003      	str	r0, [sp, #12]
 8008166:	4631      	mov	r1, r6
 8008168:	4620      	mov	r0, r4
 800816a:	f000 fdbf 	bl	8008cec <__mdiff>
 800816e:	68c2      	ldr	r2, [r0, #12]
 8008170:	f109 3bff 	add.w	fp, r9, #4294967295
 8008174:	4605      	mov	r5, r0
 8008176:	bb02      	cbnz	r2, 80081ba <_dtoa_r+0xa62>
 8008178:	4601      	mov	r1, r0
 800817a:	ee18 0a10 	vmov	r0, s16
 800817e:	f000 fd99 	bl	8008cb4 <__mcmp>
 8008182:	4602      	mov	r2, r0
 8008184:	4629      	mov	r1, r5
 8008186:	4620      	mov	r0, r4
 8008188:	9207      	str	r2, [sp, #28]
 800818a:	f000 fb51 	bl	8008830 <_Bfree>
 800818e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008192:	ea43 0102 	orr.w	r1, r3, r2
 8008196:	9b04      	ldr	r3, [sp, #16]
 8008198:	430b      	orrs	r3, r1
 800819a:	464d      	mov	r5, r9
 800819c:	d10f      	bne.n	80081be <_dtoa_r+0xa66>
 800819e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80081a2:	d02a      	beq.n	80081fa <_dtoa_r+0xaa2>
 80081a4:	9b03      	ldr	r3, [sp, #12]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	dd02      	ble.n	80081b0 <_dtoa_r+0xa58>
 80081aa:	9b02      	ldr	r3, [sp, #8]
 80081ac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80081b0:	f88b a000 	strb.w	sl, [fp]
 80081b4:	e775      	b.n	80080a2 <_dtoa_r+0x94a>
 80081b6:	4638      	mov	r0, r7
 80081b8:	e7ba      	b.n	8008130 <_dtoa_r+0x9d8>
 80081ba:	2201      	movs	r2, #1
 80081bc:	e7e2      	b.n	8008184 <_dtoa_r+0xa2c>
 80081be:	9b03      	ldr	r3, [sp, #12]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	db04      	blt.n	80081ce <_dtoa_r+0xa76>
 80081c4:	9906      	ldr	r1, [sp, #24]
 80081c6:	430b      	orrs	r3, r1
 80081c8:	9904      	ldr	r1, [sp, #16]
 80081ca:	430b      	orrs	r3, r1
 80081cc:	d122      	bne.n	8008214 <_dtoa_r+0xabc>
 80081ce:	2a00      	cmp	r2, #0
 80081d0:	ddee      	ble.n	80081b0 <_dtoa_r+0xa58>
 80081d2:	ee18 1a10 	vmov	r1, s16
 80081d6:	2201      	movs	r2, #1
 80081d8:	4620      	mov	r0, r4
 80081da:	f000 fcfb 	bl	8008bd4 <__lshift>
 80081de:	4631      	mov	r1, r6
 80081e0:	ee08 0a10 	vmov	s16, r0
 80081e4:	f000 fd66 	bl	8008cb4 <__mcmp>
 80081e8:	2800      	cmp	r0, #0
 80081ea:	dc03      	bgt.n	80081f4 <_dtoa_r+0xa9c>
 80081ec:	d1e0      	bne.n	80081b0 <_dtoa_r+0xa58>
 80081ee:	f01a 0f01 	tst.w	sl, #1
 80081f2:	d0dd      	beq.n	80081b0 <_dtoa_r+0xa58>
 80081f4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80081f8:	d1d7      	bne.n	80081aa <_dtoa_r+0xa52>
 80081fa:	2339      	movs	r3, #57	; 0x39
 80081fc:	f88b 3000 	strb.w	r3, [fp]
 8008200:	462b      	mov	r3, r5
 8008202:	461d      	mov	r5, r3
 8008204:	3b01      	subs	r3, #1
 8008206:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800820a:	2a39      	cmp	r2, #57	; 0x39
 800820c:	d071      	beq.n	80082f2 <_dtoa_r+0xb9a>
 800820e:	3201      	adds	r2, #1
 8008210:	701a      	strb	r2, [r3, #0]
 8008212:	e746      	b.n	80080a2 <_dtoa_r+0x94a>
 8008214:	2a00      	cmp	r2, #0
 8008216:	dd07      	ble.n	8008228 <_dtoa_r+0xad0>
 8008218:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800821c:	d0ed      	beq.n	80081fa <_dtoa_r+0xaa2>
 800821e:	f10a 0301 	add.w	r3, sl, #1
 8008222:	f88b 3000 	strb.w	r3, [fp]
 8008226:	e73c      	b.n	80080a2 <_dtoa_r+0x94a>
 8008228:	9b05      	ldr	r3, [sp, #20]
 800822a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800822e:	4599      	cmp	r9, r3
 8008230:	d047      	beq.n	80082c2 <_dtoa_r+0xb6a>
 8008232:	ee18 1a10 	vmov	r1, s16
 8008236:	2300      	movs	r3, #0
 8008238:	220a      	movs	r2, #10
 800823a:	4620      	mov	r0, r4
 800823c:	f000 fb1a 	bl	8008874 <__multadd>
 8008240:	45b8      	cmp	r8, r7
 8008242:	ee08 0a10 	vmov	s16, r0
 8008246:	f04f 0300 	mov.w	r3, #0
 800824a:	f04f 020a 	mov.w	r2, #10
 800824e:	4641      	mov	r1, r8
 8008250:	4620      	mov	r0, r4
 8008252:	d106      	bne.n	8008262 <_dtoa_r+0xb0a>
 8008254:	f000 fb0e 	bl	8008874 <__multadd>
 8008258:	4680      	mov	r8, r0
 800825a:	4607      	mov	r7, r0
 800825c:	f109 0901 	add.w	r9, r9, #1
 8008260:	e772      	b.n	8008148 <_dtoa_r+0x9f0>
 8008262:	f000 fb07 	bl	8008874 <__multadd>
 8008266:	4639      	mov	r1, r7
 8008268:	4680      	mov	r8, r0
 800826a:	2300      	movs	r3, #0
 800826c:	220a      	movs	r2, #10
 800826e:	4620      	mov	r0, r4
 8008270:	f000 fb00 	bl	8008874 <__multadd>
 8008274:	4607      	mov	r7, r0
 8008276:	e7f1      	b.n	800825c <_dtoa_r+0xb04>
 8008278:	9b03      	ldr	r3, [sp, #12]
 800827a:	9302      	str	r3, [sp, #8]
 800827c:	9d01      	ldr	r5, [sp, #4]
 800827e:	ee18 0a10 	vmov	r0, s16
 8008282:	4631      	mov	r1, r6
 8008284:	f7ff f9dc 	bl	8007640 <quorem>
 8008288:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800828c:	9b01      	ldr	r3, [sp, #4]
 800828e:	f805 ab01 	strb.w	sl, [r5], #1
 8008292:	1aea      	subs	r2, r5, r3
 8008294:	9b02      	ldr	r3, [sp, #8]
 8008296:	4293      	cmp	r3, r2
 8008298:	dd09      	ble.n	80082ae <_dtoa_r+0xb56>
 800829a:	ee18 1a10 	vmov	r1, s16
 800829e:	2300      	movs	r3, #0
 80082a0:	220a      	movs	r2, #10
 80082a2:	4620      	mov	r0, r4
 80082a4:	f000 fae6 	bl	8008874 <__multadd>
 80082a8:	ee08 0a10 	vmov	s16, r0
 80082ac:	e7e7      	b.n	800827e <_dtoa_r+0xb26>
 80082ae:	9b02      	ldr	r3, [sp, #8]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	bfc8      	it	gt
 80082b4:	461d      	movgt	r5, r3
 80082b6:	9b01      	ldr	r3, [sp, #4]
 80082b8:	bfd8      	it	le
 80082ba:	2501      	movle	r5, #1
 80082bc:	441d      	add	r5, r3
 80082be:	f04f 0800 	mov.w	r8, #0
 80082c2:	ee18 1a10 	vmov	r1, s16
 80082c6:	2201      	movs	r2, #1
 80082c8:	4620      	mov	r0, r4
 80082ca:	f000 fc83 	bl	8008bd4 <__lshift>
 80082ce:	4631      	mov	r1, r6
 80082d0:	ee08 0a10 	vmov	s16, r0
 80082d4:	f000 fcee 	bl	8008cb4 <__mcmp>
 80082d8:	2800      	cmp	r0, #0
 80082da:	dc91      	bgt.n	8008200 <_dtoa_r+0xaa8>
 80082dc:	d102      	bne.n	80082e4 <_dtoa_r+0xb8c>
 80082de:	f01a 0f01 	tst.w	sl, #1
 80082e2:	d18d      	bne.n	8008200 <_dtoa_r+0xaa8>
 80082e4:	462b      	mov	r3, r5
 80082e6:	461d      	mov	r5, r3
 80082e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082ec:	2a30      	cmp	r2, #48	; 0x30
 80082ee:	d0fa      	beq.n	80082e6 <_dtoa_r+0xb8e>
 80082f0:	e6d7      	b.n	80080a2 <_dtoa_r+0x94a>
 80082f2:	9a01      	ldr	r2, [sp, #4]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d184      	bne.n	8008202 <_dtoa_r+0xaaa>
 80082f8:	9b00      	ldr	r3, [sp, #0]
 80082fa:	3301      	adds	r3, #1
 80082fc:	9300      	str	r3, [sp, #0]
 80082fe:	2331      	movs	r3, #49	; 0x31
 8008300:	7013      	strb	r3, [r2, #0]
 8008302:	e6ce      	b.n	80080a2 <_dtoa_r+0x94a>
 8008304:	4b09      	ldr	r3, [pc, #36]	; (800832c <_dtoa_r+0xbd4>)
 8008306:	f7ff ba95 	b.w	8007834 <_dtoa_r+0xdc>
 800830a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800830c:	2b00      	cmp	r3, #0
 800830e:	f47f aa6e 	bne.w	80077ee <_dtoa_r+0x96>
 8008312:	4b07      	ldr	r3, [pc, #28]	; (8008330 <_dtoa_r+0xbd8>)
 8008314:	f7ff ba8e 	b.w	8007834 <_dtoa_r+0xdc>
 8008318:	9b02      	ldr	r3, [sp, #8]
 800831a:	2b00      	cmp	r3, #0
 800831c:	dcae      	bgt.n	800827c <_dtoa_r+0xb24>
 800831e:	9b06      	ldr	r3, [sp, #24]
 8008320:	2b02      	cmp	r3, #2
 8008322:	f73f aea8 	bgt.w	8008076 <_dtoa_r+0x91e>
 8008326:	e7a9      	b.n	800827c <_dtoa_r+0xb24>
 8008328:	0800958b 	.word	0x0800958b
 800832c:	080094e8 	.word	0x080094e8
 8008330:	0800950c 	.word	0x0800950c

08008334 <__sflush_r>:
 8008334:	898a      	ldrh	r2, [r1, #12]
 8008336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800833a:	4605      	mov	r5, r0
 800833c:	0710      	lsls	r0, r2, #28
 800833e:	460c      	mov	r4, r1
 8008340:	d458      	bmi.n	80083f4 <__sflush_r+0xc0>
 8008342:	684b      	ldr	r3, [r1, #4]
 8008344:	2b00      	cmp	r3, #0
 8008346:	dc05      	bgt.n	8008354 <__sflush_r+0x20>
 8008348:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800834a:	2b00      	cmp	r3, #0
 800834c:	dc02      	bgt.n	8008354 <__sflush_r+0x20>
 800834e:	2000      	movs	r0, #0
 8008350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008354:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008356:	2e00      	cmp	r6, #0
 8008358:	d0f9      	beq.n	800834e <__sflush_r+0x1a>
 800835a:	2300      	movs	r3, #0
 800835c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008360:	682f      	ldr	r7, [r5, #0]
 8008362:	602b      	str	r3, [r5, #0]
 8008364:	d032      	beq.n	80083cc <__sflush_r+0x98>
 8008366:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008368:	89a3      	ldrh	r3, [r4, #12]
 800836a:	075a      	lsls	r2, r3, #29
 800836c:	d505      	bpl.n	800837a <__sflush_r+0x46>
 800836e:	6863      	ldr	r3, [r4, #4]
 8008370:	1ac0      	subs	r0, r0, r3
 8008372:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008374:	b10b      	cbz	r3, 800837a <__sflush_r+0x46>
 8008376:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008378:	1ac0      	subs	r0, r0, r3
 800837a:	2300      	movs	r3, #0
 800837c:	4602      	mov	r2, r0
 800837e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008380:	6a21      	ldr	r1, [r4, #32]
 8008382:	4628      	mov	r0, r5
 8008384:	47b0      	blx	r6
 8008386:	1c43      	adds	r3, r0, #1
 8008388:	89a3      	ldrh	r3, [r4, #12]
 800838a:	d106      	bne.n	800839a <__sflush_r+0x66>
 800838c:	6829      	ldr	r1, [r5, #0]
 800838e:	291d      	cmp	r1, #29
 8008390:	d82c      	bhi.n	80083ec <__sflush_r+0xb8>
 8008392:	4a2a      	ldr	r2, [pc, #168]	; (800843c <__sflush_r+0x108>)
 8008394:	40ca      	lsrs	r2, r1
 8008396:	07d6      	lsls	r6, r2, #31
 8008398:	d528      	bpl.n	80083ec <__sflush_r+0xb8>
 800839a:	2200      	movs	r2, #0
 800839c:	6062      	str	r2, [r4, #4]
 800839e:	04d9      	lsls	r1, r3, #19
 80083a0:	6922      	ldr	r2, [r4, #16]
 80083a2:	6022      	str	r2, [r4, #0]
 80083a4:	d504      	bpl.n	80083b0 <__sflush_r+0x7c>
 80083a6:	1c42      	adds	r2, r0, #1
 80083a8:	d101      	bne.n	80083ae <__sflush_r+0x7a>
 80083aa:	682b      	ldr	r3, [r5, #0]
 80083ac:	b903      	cbnz	r3, 80083b0 <__sflush_r+0x7c>
 80083ae:	6560      	str	r0, [r4, #84]	; 0x54
 80083b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083b2:	602f      	str	r7, [r5, #0]
 80083b4:	2900      	cmp	r1, #0
 80083b6:	d0ca      	beq.n	800834e <__sflush_r+0x1a>
 80083b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083bc:	4299      	cmp	r1, r3
 80083be:	d002      	beq.n	80083c6 <__sflush_r+0x92>
 80083c0:	4628      	mov	r0, r5
 80083c2:	f7fe fb0b 	bl	80069dc <_free_r>
 80083c6:	2000      	movs	r0, #0
 80083c8:	6360      	str	r0, [r4, #52]	; 0x34
 80083ca:	e7c1      	b.n	8008350 <__sflush_r+0x1c>
 80083cc:	6a21      	ldr	r1, [r4, #32]
 80083ce:	2301      	movs	r3, #1
 80083d0:	4628      	mov	r0, r5
 80083d2:	47b0      	blx	r6
 80083d4:	1c41      	adds	r1, r0, #1
 80083d6:	d1c7      	bne.n	8008368 <__sflush_r+0x34>
 80083d8:	682b      	ldr	r3, [r5, #0]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d0c4      	beq.n	8008368 <__sflush_r+0x34>
 80083de:	2b1d      	cmp	r3, #29
 80083e0:	d001      	beq.n	80083e6 <__sflush_r+0xb2>
 80083e2:	2b16      	cmp	r3, #22
 80083e4:	d101      	bne.n	80083ea <__sflush_r+0xb6>
 80083e6:	602f      	str	r7, [r5, #0]
 80083e8:	e7b1      	b.n	800834e <__sflush_r+0x1a>
 80083ea:	89a3      	ldrh	r3, [r4, #12]
 80083ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083f0:	81a3      	strh	r3, [r4, #12]
 80083f2:	e7ad      	b.n	8008350 <__sflush_r+0x1c>
 80083f4:	690f      	ldr	r7, [r1, #16]
 80083f6:	2f00      	cmp	r7, #0
 80083f8:	d0a9      	beq.n	800834e <__sflush_r+0x1a>
 80083fa:	0793      	lsls	r3, r2, #30
 80083fc:	680e      	ldr	r6, [r1, #0]
 80083fe:	bf08      	it	eq
 8008400:	694b      	ldreq	r3, [r1, #20]
 8008402:	600f      	str	r7, [r1, #0]
 8008404:	bf18      	it	ne
 8008406:	2300      	movne	r3, #0
 8008408:	eba6 0807 	sub.w	r8, r6, r7
 800840c:	608b      	str	r3, [r1, #8]
 800840e:	f1b8 0f00 	cmp.w	r8, #0
 8008412:	dd9c      	ble.n	800834e <__sflush_r+0x1a>
 8008414:	6a21      	ldr	r1, [r4, #32]
 8008416:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008418:	4643      	mov	r3, r8
 800841a:	463a      	mov	r2, r7
 800841c:	4628      	mov	r0, r5
 800841e:	47b0      	blx	r6
 8008420:	2800      	cmp	r0, #0
 8008422:	dc06      	bgt.n	8008432 <__sflush_r+0xfe>
 8008424:	89a3      	ldrh	r3, [r4, #12]
 8008426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800842a:	81a3      	strh	r3, [r4, #12]
 800842c:	f04f 30ff 	mov.w	r0, #4294967295
 8008430:	e78e      	b.n	8008350 <__sflush_r+0x1c>
 8008432:	4407      	add	r7, r0
 8008434:	eba8 0800 	sub.w	r8, r8, r0
 8008438:	e7e9      	b.n	800840e <__sflush_r+0xda>
 800843a:	bf00      	nop
 800843c:	20400001 	.word	0x20400001

08008440 <_fflush_r>:
 8008440:	b538      	push	{r3, r4, r5, lr}
 8008442:	690b      	ldr	r3, [r1, #16]
 8008444:	4605      	mov	r5, r0
 8008446:	460c      	mov	r4, r1
 8008448:	b913      	cbnz	r3, 8008450 <_fflush_r+0x10>
 800844a:	2500      	movs	r5, #0
 800844c:	4628      	mov	r0, r5
 800844e:	bd38      	pop	{r3, r4, r5, pc}
 8008450:	b118      	cbz	r0, 800845a <_fflush_r+0x1a>
 8008452:	6983      	ldr	r3, [r0, #24]
 8008454:	b90b      	cbnz	r3, 800845a <_fflush_r+0x1a>
 8008456:	f000 f887 	bl	8008568 <__sinit>
 800845a:	4b14      	ldr	r3, [pc, #80]	; (80084ac <_fflush_r+0x6c>)
 800845c:	429c      	cmp	r4, r3
 800845e:	d11b      	bne.n	8008498 <_fflush_r+0x58>
 8008460:	686c      	ldr	r4, [r5, #4]
 8008462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d0ef      	beq.n	800844a <_fflush_r+0xa>
 800846a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800846c:	07d0      	lsls	r0, r2, #31
 800846e:	d404      	bmi.n	800847a <_fflush_r+0x3a>
 8008470:	0599      	lsls	r1, r3, #22
 8008472:	d402      	bmi.n	800847a <_fflush_r+0x3a>
 8008474:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008476:	f000 f91a 	bl	80086ae <__retarget_lock_acquire_recursive>
 800847a:	4628      	mov	r0, r5
 800847c:	4621      	mov	r1, r4
 800847e:	f7ff ff59 	bl	8008334 <__sflush_r>
 8008482:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008484:	07da      	lsls	r2, r3, #31
 8008486:	4605      	mov	r5, r0
 8008488:	d4e0      	bmi.n	800844c <_fflush_r+0xc>
 800848a:	89a3      	ldrh	r3, [r4, #12]
 800848c:	059b      	lsls	r3, r3, #22
 800848e:	d4dd      	bmi.n	800844c <_fflush_r+0xc>
 8008490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008492:	f000 f90d 	bl	80086b0 <__retarget_lock_release_recursive>
 8008496:	e7d9      	b.n	800844c <_fflush_r+0xc>
 8008498:	4b05      	ldr	r3, [pc, #20]	; (80084b0 <_fflush_r+0x70>)
 800849a:	429c      	cmp	r4, r3
 800849c:	d101      	bne.n	80084a2 <_fflush_r+0x62>
 800849e:	68ac      	ldr	r4, [r5, #8]
 80084a0:	e7df      	b.n	8008462 <_fflush_r+0x22>
 80084a2:	4b04      	ldr	r3, [pc, #16]	; (80084b4 <_fflush_r+0x74>)
 80084a4:	429c      	cmp	r4, r3
 80084a6:	bf08      	it	eq
 80084a8:	68ec      	ldreq	r4, [r5, #12]
 80084aa:	e7da      	b.n	8008462 <_fflush_r+0x22>
 80084ac:	080095bc 	.word	0x080095bc
 80084b0:	080095dc 	.word	0x080095dc
 80084b4:	0800959c 	.word	0x0800959c

080084b8 <std>:
 80084b8:	2300      	movs	r3, #0
 80084ba:	b510      	push	{r4, lr}
 80084bc:	4604      	mov	r4, r0
 80084be:	e9c0 3300 	strd	r3, r3, [r0]
 80084c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084c6:	6083      	str	r3, [r0, #8]
 80084c8:	8181      	strh	r1, [r0, #12]
 80084ca:	6643      	str	r3, [r0, #100]	; 0x64
 80084cc:	81c2      	strh	r2, [r0, #14]
 80084ce:	6183      	str	r3, [r0, #24]
 80084d0:	4619      	mov	r1, r3
 80084d2:	2208      	movs	r2, #8
 80084d4:	305c      	adds	r0, #92	; 0x5c
 80084d6:	f7fe fa79 	bl	80069cc <memset>
 80084da:	4b05      	ldr	r3, [pc, #20]	; (80084f0 <std+0x38>)
 80084dc:	6263      	str	r3, [r4, #36]	; 0x24
 80084de:	4b05      	ldr	r3, [pc, #20]	; (80084f4 <std+0x3c>)
 80084e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80084e2:	4b05      	ldr	r3, [pc, #20]	; (80084f8 <std+0x40>)
 80084e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80084e6:	4b05      	ldr	r3, [pc, #20]	; (80084fc <std+0x44>)
 80084e8:	6224      	str	r4, [r4, #32]
 80084ea:	6323      	str	r3, [r4, #48]	; 0x30
 80084ec:	bd10      	pop	{r4, pc}
 80084ee:	bf00      	nop
 80084f0:	08009199 	.word	0x08009199
 80084f4:	080091bb 	.word	0x080091bb
 80084f8:	080091f3 	.word	0x080091f3
 80084fc:	08009217 	.word	0x08009217

08008500 <_cleanup_r>:
 8008500:	4901      	ldr	r1, [pc, #4]	; (8008508 <_cleanup_r+0x8>)
 8008502:	f000 b8af 	b.w	8008664 <_fwalk_reent>
 8008506:	bf00      	nop
 8008508:	08008441 	.word	0x08008441

0800850c <__sfmoreglue>:
 800850c:	b570      	push	{r4, r5, r6, lr}
 800850e:	2268      	movs	r2, #104	; 0x68
 8008510:	1e4d      	subs	r5, r1, #1
 8008512:	4355      	muls	r5, r2
 8008514:	460e      	mov	r6, r1
 8008516:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800851a:	f7fe facb 	bl	8006ab4 <_malloc_r>
 800851e:	4604      	mov	r4, r0
 8008520:	b140      	cbz	r0, 8008534 <__sfmoreglue+0x28>
 8008522:	2100      	movs	r1, #0
 8008524:	e9c0 1600 	strd	r1, r6, [r0]
 8008528:	300c      	adds	r0, #12
 800852a:	60a0      	str	r0, [r4, #8]
 800852c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008530:	f7fe fa4c 	bl	80069cc <memset>
 8008534:	4620      	mov	r0, r4
 8008536:	bd70      	pop	{r4, r5, r6, pc}

08008538 <__sfp_lock_acquire>:
 8008538:	4801      	ldr	r0, [pc, #4]	; (8008540 <__sfp_lock_acquire+0x8>)
 800853a:	f000 b8b8 	b.w	80086ae <__retarget_lock_acquire_recursive>
 800853e:	bf00      	nop
 8008540:	2000044d 	.word	0x2000044d

08008544 <__sfp_lock_release>:
 8008544:	4801      	ldr	r0, [pc, #4]	; (800854c <__sfp_lock_release+0x8>)
 8008546:	f000 b8b3 	b.w	80086b0 <__retarget_lock_release_recursive>
 800854a:	bf00      	nop
 800854c:	2000044d 	.word	0x2000044d

08008550 <__sinit_lock_acquire>:
 8008550:	4801      	ldr	r0, [pc, #4]	; (8008558 <__sinit_lock_acquire+0x8>)
 8008552:	f000 b8ac 	b.w	80086ae <__retarget_lock_acquire_recursive>
 8008556:	bf00      	nop
 8008558:	2000044e 	.word	0x2000044e

0800855c <__sinit_lock_release>:
 800855c:	4801      	ldr	r0, [pc, #4]	; (8008564 <__sinit_lock_release+0x8>)
 800855e:	f000 b8a7 	b.w	80086b0 <__retarget_lock_release_recursive>
 8008562:	bf00      	nop
 8008564:	2000044e 	.word	0x2000044e

08008568 <__sinit>:
 8008568:	b510      	push	{r4, lr}
 800856a:	4604      	mov	r4, r0
 800856c:	f7ff fff0 	bl	8008550 <__sinit_lock_acquire>
 8008570:	69a3      	ldr	r3, [r4, #24]
 8008572:	b11b      	cbz	r3, 800857c <__sinit+0x14>
 8008574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008578:	f7ff bff0 	b.w	800855c <__sinit_lock_release>
 800857c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008580:	6523      	str	r3, [r4, #80]	; 0x50
 8008582:	4b13      	ldr	r3, [pc, #76]	; (80085d0 <__sinit+0x68>)
 8008584:	4a13      	ldr	r2, [pc, #76]	; (80085d4 <__sinit+0x6c>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	62a2      	str	r2, [r4, #40]	; 0x28
 800858a:	42a3      	cmp	r3, r4
 800858c:	bf04      	itt	eq
 800858e:	2301      	moveq	r3, #1
 8008590:	61a3      	streq	r3, [r4, #24]
 8008592:	4620      	mov	r0, r4
 8008594:	f000 f820 	bl	80085d8 <__sfp>
 8008598:	6060      	str	r0, [r4, #4]
 800859a:	4620      	mov	r0, r4
 800859c:	f000 f81c 	bl	80085d8 <__sfp>
 80085a0:	60a0      	str	r0, [r4, #8]
 80085a2:	4620      	mov	r0, r4
 80085a4:	f000 f818 	bl	80085d8 <__sfp>
 80085a8:	2200      	movs	r2, #0
 80085aa:	60e0      	str	r0, [r4, #12]
 80085ac:	2104      	movs	r1, #4
 80085ae:	6860      	ldr	r0, [r4, #4]
 80085b0:	f7ff ff82 	bl	80084b8 <std>
 80085b4:	68a0      	ldr	r0, [r4, #8]
 80085b6:	2201      	movs	r2, #1
 80085b8:	2109      	movs	r1, #9
 80085ba:	f7ff ff7d 	bl	80084b8 <std>
 80085be:	68e0      	ldr	r0, [r4, #12]
 80085c0:	2202      	movs	r2, #2
 80085c2:	2112      	movs	r1, #18
 80085c4:	f7ff ff78 	bl	80084b8 <std>
 80085c8:	2301      	movs	r3, #1
 80085ca:	61a3      	str	r3, [r4, #24]
 80085cc:	e7d2      	b.n	8008574 <__sinit+0xc>
 80085ce:	bf00      	nop
 80085d0:	080094d4 	.word	0x080094d4
 80085d4:	08008501 	.word	0x08008501

080085d8 <__sfp>:
 80085d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085da:	4607      	mov	r7, r0
 80085dc:	f7ff ffac 	bl	8008538 <__sfp_lock_acquire>
 80085e0:	4b1e      	ldr	r3, [pc, #120]	; (800865c <__sfp+0x84>)
 80085e2:	681e      	ldr	r6, [r3, #0]
 80085e4:	69b3      	ldr	r3, [r6, #24]
 80085e6:	b913      	cbnz	r3, 80085ee <__sfp+0x16>
 80085e8:	4630      	mov	r0, r6
 80085ea:	f7ff ffbd 	bl	8008568 <__sinit>
 80085ee:	3648      	adds	r6, #72	; 0x48
 80085f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80085f4:	3b01      	subs	r3, #1
 80085f6:	d503      	bpl.n	8008600 <__sfp+0x28>
 80085f8:	6833      	ldr	r3, [r6, #0]
 80085fa:	b30b      	cbz	r3, 8008640 <__sfp+0x68>
 80085fc:	6836      	ldr	r6, [r6, #0]
 80085fe:	e7f7      	b.n	80085f0 <__sfp+0x18>
 8008600:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008604:	b9d5      	cbnz	r5, 800863c <__sfp+0x64>
 8008606:	4b16      	ldr	r3, [pc, #88]	; (8008660 <__sfp+0x88>)
 8008608:	60e3      	str	r3, [r4, #12]
 800860a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800860e:	6665      	str	r5, [r4, #100]	; 0x64
 8008610:	f000 f84c 	bl	80086ac <__retarget_lock_init_recursive>
 8008614:	f7ff ff96 	bl	8008544 <__sfp_lock_release>
 8008618:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800861c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008620:	6025      	str	r5, [r4, #0]
 8008622:	61a5      	str	r5, [r4, #24]
 8008624:	2208      	movs	r2, #8
 8008626:	4629      	mov	r1, r5
 8008628:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800862c:	f7fe f9ce 	bl	80069cc <memset>
 8008630:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008634:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008638:	4620      	mov	r0, r4
 800863a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800863c:	3468      	adds	r4, #104	; 0x68
 800863e:	e7d9      	b.n	80085f4 <__sfp+0x1c>
 8008640:	2104      	movs	r1, #4
 8008642:	4638      	mov	r0, r7
 8008644:	f7ff ff62 	bl	800850c <__sfmoreglue>
 8008648:	4604      	mov	r4, r0
 800864a:	6030      	str	r0, [r6, #0]
 800864c:	2800      	cmp	r0, #0
 800864e:	d1d5      	bne.n	80085fc <__sfp+0x24>
 8008650:	f7ff ff78 	bl	8008544 <__sfp_lock_release>
 8008654:	230c      	movs	r3, #12
 8008656:	603b      	str	r3, [r7, #0]
 8008658:	e7ee      	b.n	8008638 <__sfp+0x60>
 800865a:	bf00      	nop
 800865c:	080094d4 	.word	0x080094d4
 8008660:	ffff0001 	.word	0xffff0001

08008664 <_fwalk_reent>:
 8008664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008668:	4606      	mov	r6, r0
 800866a:	4688      	mov	r8, r1
 800866c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008670:	2700      	movs	r7, #0
 8008672:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008676:	f1b9 0901 	subs.w	r9, r9, #1
 800867a:	d505      	bpl.n	8008688 <_fwalk_reent+0x24>
 800867c:	6824      	ldr	r4, [r4, #0]
 800867e:	2c00      	cmp	r4, #0
 8008680:	d1f7      	bne.n	8008672 <_fwalk_reent+0xe>
 8008682:	4638      	mov	r0, r7
 8008684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008688:	89ab      	ldrh	r3, [r5, #12]
 800868a:	2b01      	cmp	r3, #1
 800868c:	d907      	bls.n	800869e <_fwalk_reent+0x3a>
 800868e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008692:	3301      	adds	r3, #1
 8008694:	d003      	beq.n	800869e <_fwalk_reent+0x3a>
 8008696:	4629      	mov	r1, r5
 8008698:	4630      	mov	r0, r6
 800869a:	47c0      	blx	r8
 800869c:	4307      	orrs	r7, r0
 800869e:	3568      	adds	r5, #104	; 0x68
 80086a0:	e7e9      	b.n	8008676 <_fwalk_reent+0x12>
	...

080086a4 <_localeconv_r>:
 80086a4:	4800      	ldr	r0, [pc, #0]	; (80086a8 <_localeconv_r+0x4>)
 80086a6:	4770      	bx	lr
 80086a8:	20000160 	.word	0x20000160

080086ac <__retarget_lock_init_recursive>:
 80086ac:	4770      	bx	lr

080086ae <__retarget_lock_acquire_recursive>:
 80086ae:	4770      	bx	lr

080086b0 <__retarget_lock_release_recursive>:
 80086b0:	4770      	bx	lr

080086b2 <__swhatbuf_r>:
 80086b2:	b570      	push	{r4, r5, r6, lr}
 80086b4:	460e      	mov	r6, r1
 80086b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086ba:	2900      	cmp	r1, #0
 80086bc:	b096      	sub	sp, #88	; 0x58
 80086be:	4614      	mov	r4, r2
 80086c0:	461d      	mov	r5, r3
 80086c2:	da08      	bge.n	80086d6 <__swhatbuf_r+0x24>
 80086c4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80086c8:	2200      	movs	r2, #0
 80086ca:	602a      	str	r2, [r5, #0]
 80086cc:	061a      	lsls	r2, r3, #24
 80086ce:	d410      	bmi.n	80086f2 <__swhatbuf_r+0x40>
 80086d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086d4:	e00e      	b.n	80086f4 <__swhatbuf_r+0x42>
 80086d6:	466a      	mov	r2, sp
 80086d8:	f000 fdf4 	bl	80092c4 <_fstat_r>
 80086dc:	2800      	cmp	r0, #0
 80086de:	dbf1      	blt.n	80086c4 <__swhatbuf_r+0x12>
 80086e0:	9a01      	ldr	r2, [sp, #4]
 80086e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80086e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80086ea:	425a      	negs	r2, r3
 80086ec:	415a      	adcs	r2, r3
 80086ee:	602a      	str	r2, [r5, #0]
 80086f0:	e7ee      	b.n	80086d0 <__swhatbuf_r+0x1e>
 80086f2:	2340      	movs	r3, #64	; 0x40
 80086f4:	2000      	movs	r0, #0
 80086f6:	6023      	str	r3, [r4, #0]
 80086f8:	b016      	add	sp, #88	; 0x58
 80086fa:	bd70      	pop	{r4, r5, r6, pc}

080086fc <__smakebuf_r>:
 80086fc:	898b      	ldrh	r3, [r1, #12]
 80086fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008700:	079d      	lsls	r5, r3, #30
 8008702:	4606      	mov	r6, r0
 8008704:	460c      	mov	r4, r1
 8008706:	d507      	bpl.n	8008718 <__smakebuf_r+0x1c>
 8008708:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800870c:	6023      	str	r3, [r4, #0]
 800870e:	6123      	str	r3, [r4, #16]
 8008710:	2301      	movs	r3, #1
 8008712:	6163      	str	r3, [r4, #20]
 8008714:	b002      	add	sp, #8
 8008716:	bd70      	pop	{r4, r5, r6, pc}
 8008718:	ab01      	add	r3, sp, #4
 800871a:	466a      	mov	r2, sp
 800871c:	f7ff ffc9 	bl	80086b2 <__swhatbuf_r>
 8008720:	9900      	ldr	r1, [sp, #0]
 8008722:	4605      	mov	r5, r0
 8008724:	4630      	mov	r0, r6
 8008726:	f7fe f9c5 	bl	8006ab4 <_malloc_r>
 800872a:	b948      	cbnz	r0, 8008740 <__smakebuf_r+0x44>
 800872c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008730:	059a      	lsls	r2, r3, #22
 8008732:	d4ef      	bmi.n	8008714 <__smakebuf_r+0x18>
 8008734:	f023 0303 	bic.w	r3, r3, #3
 8008738:	f043 0302 	orr.w	r3, r3, #2
 800873c:	81a3      	strh	r3, [r4, #12]
 800873e:	e7e3      	b.n	8008708 <__smakebuf_r+0xc>
 8008740:	4b0d      	ldr	r3, [pc, #52]	; (8008778 <__smakebuf_r+0x7c>)
 8008742:	62b3      	str	r3, [r6, #40]	; 0x28
 8008744:	89a3      	ldrh	r3, [r4, #12]
 8008746:	6020      	str	r0, [r4, #0]
 8008748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800874c:	81a3      	strh	r3, [r4, #12]
 800874e:	9b00      	ldr	r3, [sp, #0]
 8008750:	6163      	str	r3, [r4, #20]
 8008752:	9b01      	ldr	r3, [sp, #4]
 8008754:	6120      	str	r0, [r4, #16]
 8008756:	b15b      	cbz	r3, 8008770 <__smakebuf_r+0x74>
 8008758:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800875c:	4630      	mov	r0, r6
 800875e:	f000 fdc3 	bl	80092e8 <_isatty_r>
 8008762:	b128      	cbz	r0, 8008770 <__smakebuf_r+0x74>
 8008764:	89a3      	ldrh	r3, [r4, #12]
 8008766:	f023 0303 	bic.w	r3, r3, #3
 800876a:	f043 0301 	orr.w	r3, r3, #1
 800876e:	81a3      	strh	r3, [r4, #12]
 8008770:	89a0      	ldrh	r0, [r4, #12]
 8008772:	4305      	orrs	r5, r0
 8008774:	81a5      	strh	r5, [r4, #12]
 8008776:	e7cd      	b.n	8008714 <__smakebuf_r+0x18>
 8008778:	08008501 	.word	0x08008501

0800877c <memcpy>:
 800877c:	440a      	add	r2, r1
 800877e:	4291      	cmp	r1, r2
 8008780:	f100 33ff 	add.w	r3, r0, #4294967295
 8008784:	d100      	bne.n	8008788 <memcpy+0xc>
 8008786:	4770      	bx	lr
 8008788:	b510      	push	{r4, lr}
 800878a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800878e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008792:	4291      	cmp	r1, r2
 8008794:	d1f9      	bne.n	800878a <memcpy+0xe>
 8008796:	bd10      	pop	{r4, pc}

08008798 <__malloc_lock>:
 8008798:	4801      	ldr	r0, [pc, #4]	; (80087a0 <__malloc_lock+0x8>)
 800879a:	f7ff bf88 	b.w	80086ae <__retarget_lock_acquire_recursive>
 800879e:	bf00      	nop
 80087a0:	2000044c 	.word	0x2000044c

080087a4 <__malloc_unlock>:
 80087a4:	4801      	ldr	r0, [pc, #4]	; (80087ac <__malloc_unlock+0x8>)
 80087a6:	f7ff bf83 	b.w	80086b0 <__retarget_lock_release_recursive>
 80087aa:	bf00      	nop
 80087ac:	2000044c 	.word	0x2000044c

080087b0 <_Balloc>:
 80087b0:	b570      	push	{r4, r5, r6, lr}
 80087b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80087b4:	4604      	mov	r4, r0
 80087b6:	460d      	mov	r5, r1
 80087b8:	b976      	cbnz	r6, 80087d8 <_Balloc+0x28>
 80087ba:	2010      	movs	r0, #16
 80087bc:	f7fe f8fe 	bl	80069bc <malloc>
 80087c0:	4602      	mov	r2, r0
 80087c2:	6260      	str	r0, [r4, #36]	; 0x24
 80087c4:	b920      	cbnz	r0, 80087d0 <_Balloc+0x20>
 80087c6:	4b18      	ldr	r3, [pc, #96]	; (8008828 <_Balloc+0x78>)
 80087c8:	4818      	ldr	r0, [pc, #96]	; (800882c <_Balloc+0x7c>)
 80087ca:	2166      	movs	r1, #102	; 0x66
 80087cc:	f000 fd3a 	bl	8009244 <__assert_func>
 80087d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087d4:	6006      	str	r6, [r0, #0]
 80087d6:	60c6      	str	r6, [r0, #12]
 80087d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80087da:	68f3      	ldr	r3, [r6, #12]
 80087dc:	b183      	cbz	r3, 8008800 <_Balloc+0x50>
 80087de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80087e6:	b9b8      	cbnz	r0, 8008818 <_Balloc+0x68>
 80087e8:	2101      	movs	r1, #1
 80087ea:	fa01 f605 	lsl.w	r6, r1, r5
 80087ee:	1d72      	adds	r2, r6, #5
 80087f0:	0092      	lsls	r2, r2, #2
 80087f2:	4620      	mov	r0, r4
 80087f4:	f000 fb60 	bl	8008eb8 <_calloc_r>
 80087f8:	b160      	cbz	r0, 8008814 <_Balloc+0x64>
 80087fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80087fe:	e00e      	b.n	800881e <_Balloc+0x6e>
 8008800:	2221      	movs	r2, #33	; 0x21
 8008802:	2104      	movs	r1, #4
 8008804:	4620      	mov	r0, r4
 8008806:	f000 fb57 	bl	8008eb8 <_calloc_r>
 800880a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800880c:	60f0      	str	r0, [r6, #12]
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d1e4      	bne.n	80087de <_Balloc+0x2e>
 8008814:	2000      	movs	r0, #0
 8008816:	bd70      	pop	{r4, r5, r6, pc}
 8008818:	6802      	ldr	r2, [r0, #0]
 800881a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800881e:	2300      	movs	r3, #0
 8008820:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008824:	e7f7      	b.n	8008816 <_Balloc+0x66>
 8008826:	bf00      	nop
 8008828:	08009519 	.word	0x08009519
 800882c:	080095fc 	.word	0x080095fc

08008830 <_Bfree>:
 8008830:	b570      	push	{r4, r5, r6, lr}
 8008832:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008834:	4605      	mov	r5, r0
 8008836:	460c      	mov	r4, r1
 8008838:	b976      	cbnz	r6, 8008858 <_Bfree+0x28>
 800883a:	2010      	movs	r0, #16
 800883c:	f7fe f8be 	bl	80069bc <malloc>
 8008840:	4602      	mov	r2, r0
 8008842:	6268      	str	r0, [r5, #36]	; 0x24
 8008844:	b920      	cbnz	r0, 8008850 <_Bfree+0x20>
 8008846:	4b09      	ldr	r3, [pc, #36]	; (800886c <_Bfree+0x3c>)
 8008848:	4809      	ldr	r0, [pc, #36]	; (8008870 <_Bfree+0x40>)
 800884a:	218a      	movs	r1, #138	; 0x8a
 800884c:	f000 fcfa 	bl	8009244 <__assert_func>
 8008850:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008854:	6006      	str	r6, [r0, #0]
 8008856:	60c6      	str	r6, [r0, #12]
 8008858:	b13c      	cbz	r4, 800886a <_Bfree+0x3a>
 800885a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800885c:	6862      	ldr	r2, [r4, #4]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008864:	6021      	str	r1, [r4, #0]
 8008866:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800886a:	bd70      	pop	{r4, r5, r6, pc}
 800886c:	08009519 	.word	0x08009519
 8008870:	080095fc 	.word	0x080095fc

08008874 <__multadd>:
 8008874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008878:	690d      	ldr	r5, [r1, #16]
 800887a:	4607      	mov	r7, r0
 800887c:	460c      	mov	r4, r1
 800887e:	461e      	mov	r6, r3
 8008880:	f101 0c14 	add.w	ip, r1, #20
 8008884:	2000      	movs	r0, #0
 8008886:	f8dc 3000 	ldr.w	r3, [ip]
 800888a:	b299      	uxth	r1, r3
 800888c:	fb02 6101 	mla	r1, r2, r1, r6
 8008890:	0c1e      	lsrs	r6, r3, #16
 8008892:	0c0b      	lsrs	r3, r1, #16
 8008894:	fb02 3306 	mla	r3, r2, r6, r3
 8008898:	b289      	uxth	r1, r1
 800889a:	3001      	adds	r0, #1
 800889c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80088a0:	4285      	cmp	r5, r0
 80088a2:	f84c 1b04 	str.w	r1, [ip], #4
 80088a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80088aa:	dcec      	bgt.n	8008886 <__multadd+0x12>
 80088ac:	b30e      	cbz	r6, 80088f2 <__multadd+0x7e>
 80088ae:	68a3      	ldr	r3, [r4, #8]
 80088b0:	42ab      	cmp	r3, r5
 80088b2:	dc19      	bgt.n	80088e8 <__multadd+0x74>
 80088b4:	6861      	ldr	r1, [r4, #4]
 80088b6:	4638      	mov	r0, r7
 80088b8:	3101      	adds	r1, #1
 80088ba:	f7ff ff79 	bl	80087b0 <_Balloc>
 80088be:	4680      	mov	r8, r0
 80088c0:	b928      	cbnz	r0, 80088ce <__multadd+0x5a>
 80088c2:	4602      	mov	r2, r0
 80088c4:	4b0c      	ldr	r3, [pc, #48]	; (80088f8 <__multadd+0x84>)
 80088c6:	480d      	ldr	r0, [pc, #52]	; (80088fc <__multadd+0x88>)
 80088c8:	21b5      	movs	r1, #181	; 0xb5
 80088ca:	f000 fcbb 	bl	8009244 <__assert_func>
 80088ce:	6922      	ldr	r2, [r4, #16]
 80088d0:	3202      	adds	r2, #2
 80088d2:	f104 010c 	add.w	r1, r4, #12
 80088d6:	0092      	lsls	r2, r2, #2
 80088d8:	300c      	adds	r0, #12
 80088da:	f7ff ff4f 	bl	800877c <memcpy>
 80088de:	4621      	mov	r1, r4
 80088e0:	4638      	mov	r0, r7
 80088e2:	f7ff ffa5 	bl	8008830 <_Bfree>
 80088e6:	4644      	mov	r4, r8
 80088e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80088ec:	3501      	adds	r5, #1
 80088ee:	615e      	str	r6, [r3, #20]
 80088f0:	6125      	str	r5, [r4, #16]
 80088f2:	4620      	mov	r0, r4
 80088f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088f8:	0800958b 	.word	0x0800958b
 80088fc:	080095fc 	.word	0x080095fc

08008900 <__hi0bits>:
 8008900:	0c03      	lsrs	r3, r0, #16
 8008902:	041b      	lsls	r3, r3, #16
 8008904:	b9d3      	cbnz	r3, 800893c <__hi0bits+0x3c>
 8008906:	0400      	lsls	r0, r0, #16
 8008908:	2310      	movs	r3, #16
 800890a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800890e:	bf04      	itt	eq
 8008910:	0200      	lsleq	r0, r0, #8
 8008912:	3308      	addeq	r3, #8
 8008914:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008918:	bf04      	itt	eq
 800891a:	0100      	lsleq	r0, r0, #4
 800891c:	3304      	addeq	r3, #4
 800891e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008922:	bf04      	itt	eq
 8008924:	0080      	lsleq	r0, r0, #2
 8008926:	3302      	addeq	r3, #2
 8008928:	2800      	cmp	r0, #0
 800892a:	db05      	blt.n	8008938 <__hi0bits+0x38>
 800892c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008930:	f103 0301 	add.w	r3, r3, #1
 8008934:	bf08      	it	eq
 8008936:	2320      	moveq	r3, #32
 8008938:	4618      	mov	r0, r3
 800893a:	4770      	bx	lr
 800893c:	2300      	movs	r3, #0
 800893e:	e7e4      	b.n	800890a <__hi0bits+0xa>

08008940 <__lo0bits>:
 8008940:	6803      	ldr	r3, [r0, #0]
 8008942:	f013 0207 	ands.w	r2, r3, #7
 8008946:	4601      	mov	r1, r0
 8008948:	d00b      	beq.n	8008962 <__lo0bits+0x22>
 800894a:	07da      	lsls	r2, r3, #31
 800894c:	d423      	bmi.n	8008996 <__lo0bits+0x56>
 800894e:	0798      	lsls	r0, r3, #30
 8008950:	bf49      	itett	mi
 8008952:	085b      	lsrmi	r3, r3, #1
 8008954:	089b      	lsrpl	r3, r3, #2
 8008956:	2001      	movmi	r0, #1
 8008958:	600b      	strmi	r3, [r1, #0]
 800895a:	bf5c      	itt	pl
 800895c:	600b      	strpl	r3, [r1, #0]
 800895e:	2002      	movpl	r0, #2
 8008960:	4770      	bx	lr
 8008962:	b298      	uxth	r0, r3
 8008964:	b9a8      	cbnz	r0, 8008992 <__lo0bits+0x52>
 8008966:	0c1b      	lsrs	r3, r3, #16
 8008968:	2010      	movs	r0, #16
 800896a:	b2da      	uxtb	r2, r3
 800896c:	b90a      	cbnz	r2, 8008972 <__lo0bits+0x32>
 800896e:	3008      	adds	r0, #8
 8008970:	0a1b      	lsrs	r3, r3, #8
 8008972:	071a      	lsls	r2, r3, #28
 8008974:	bf04      	itt	eq
 8008976:	091b      	lsreq	r3, r3, #4
 8008978:	3004      	addeq	r0, #4
 800897a:	079a      	lsls	r2, r3, #30
 800897c:	bf04      	itt	eq
 800897e:	089b      	lsreq	r3, r3, #2
 8008980:	3002      	addeq	r0, #2
 8008982:	07da      	lsls	r2, r3, #31
 8008984:	d403      	bmi.n	800898e <__lo0bits+0x4e>
 8008986:	085b      	lsrs	r3, r3, #1
 8008988:	f100 0001 	add.w	r0, r0, #1
 800898c:	d005      	beq.n	800899a <__lo0bits+0x5a>
 800898e:	600b      	str	r3, [r1, #0]
 8008990:	4770      	bx	lr
 8008992:	4610      	mov	r0, r2
 8008994:	e7e9      	b.n	800896a <__lo0bits+0x2a>
 8008996:	2000      	movs	r0, #0
 8008998:	4770      	bx	lr
 800899a:	2020      	movs	r0, #32
 800899c:	4770      	bx	lr
	...

080089a0 <__i2b>:
 80089a0:	b510      	push	{r4, lr}
 80089a2:	460c      	mov	r4, r1
 80089a4:	2101      	movs	r1, #1
 80089a6:	f7ff ff03 	bl	80087b0 <_Balloc>
 80089aa:	4602      	mov	r2, r0
 80089ac:	b928      	cbnz	r0, 80089ba <__i2b+0x1a>
 80089ae:	4b05      	ldr	r3, [pc, #20]	; (80089c4 <__i2b+0x24>)
 80089b0:	4805      	ldr	r0, [pc, #20]	; (80089c8 <__i2b+0x28>)
 80089b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80089b6:	f000 fc45 	bl	8009244 <__assert_func>
 80089ba:	2301      	movs	r3, #1
 80089bc:	6144      	str	r4, [r0, #20]
 80089be:	6103      	str	r3, [r0, #16]
 80089c0:	bd10      	pop	{r4, pc}
 80089c2:	bf00      	nop
 80089c4:	0800958b 	.word	0x0800958b
 80089c8:	080095fc 	.word	0x080095fc

080089cc <__multiply>:
 80089cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d0:	4691      	mov	r9, r2
 80089d2:	690a      	ldr	r2, [r1, #16]
 80089d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80089d8:	429a      	cmp	r2, r3
 80089da:	bfb8      	it	lt
 80089dc:	460b      	movlt	r3, r1
 80089de:	460c      	mov	r4, r1
 80089e0:	bfbc      	itt	lt
 80089e2:	464c      	movlt	r4, r9
 80089e4:	4699      	movlt	r9, r3
 80089e6:	6927      	ldr	r7, [r4, #16]
 80089e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80089ec:	68a3      	ldr	r3, [r4, #8]
 80089ee:	6861      	ldr	r1, [r4, #4]
 80089f0:	eb07 060a 	add.w	r6, r7, sl
 80089f4:	42b3      	cmp	r3, r6
 80089f6:	b085      	sub	sp, #20
 80089f8:	bfb8      	it	lt
 80089fa:	3101      	addlt	r1, #1
 80089fc:	f7ff fed8 	bl	80087b0 <_Balloc>
 8008a00:	b930      	cbnz	r0, 8008a10 <__multiply+0x44>
 8008a02:	4602      	mov	r2, r0
 8008a04:	4b44      	ldr	r3, [pc, #272]	; (8008b18 <__multiply+0x14c>)
 8008a06:	4845      	ldr	r0, [pc, #276]	; (8008b1c <__multiply+0x150>)
 8008a08:	f240 115d 	movw	r1, #349	; 0x15d
 8008a0c:	f000 fc1a 	bl	8009244 <__assert_func>
 8008a10:	f100 0514 	add.w	r5, r0, #20
 8008a14:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008a18:	462b      	mov	r3, r5
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	4543      	cmp	r3, r8
 8008a1e:	d321      	bcc.n	8008a64 <__multiply+0x98>
 8008a20:	f104 0314 	add.w	r3, r4, #20
 8008a24:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008a28:	f109 0314 	add.w	r3, r9, #20
 8008a2c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008a30:	9202      	str	r2, [sp, #8]
 8008a32:	1b3a      	subs	r2, r7, r4
 8008a34:	3a15      	subs	r2, #21
 8008a36:	f022 0203 	bic.w	r2, r2, #3
 8008a3a:	3204      	adds	r2, #4
 8008a3c:	f104 0115 	add.w	r1, r4, #21
 8008a40:	428f      	cmp	r7, r1
 8008a42:	bf38      	it	cc
 8008a44:	2204      	movcc	r2, #4
 8008a46:	9201      	str	r2, [sp, #4]
 8008a48:	9a02      	ldr	r2, [sp, #8]
 8008a4a:	9303      	str	r3, [sp, #12]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d80c      	bhi.n	8008a6a <__multiply+0x9e>
 8008a50:	2e00      	cmp	r6, #0
 8008a52:	dd03      	ble.n	8008a5c <__multiply+0x90>
 8008a54:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d05a      	beq.n	8008b12 <__multiply+0x146>
 8008a5c:	6106      	str	r6, [r0, #16]
 8008a5e:	b005      	add	sp, #20
 8008a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a64:	f843 2b04 	str.w	r2, [r3], #4
 8008a68:	e7d8      	b.n	8008a1c <__multiply+0x50>
 8008a6a:	f8b3 a000 	ldrh.w	sl, [r3]
 8008a6e:	f1ba 0f00 	cmp.w	sl, #0
 8008a72:	d024      	beq.n	8008abe <__multiply+0xf2>
 8008a74:	f104 0e14 	add.w	lr, r4, #20
 8008a78:	46a9      	mov	r9, r5
 8008a7a:	f04f 0c00 	mov.w	ip, #0
 8008a7e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008a82:	f8d9 1000 	ldr.w	r1, [r9]
 8008a86:	fa1f fb82 	uxth.w	fp, r2
 8008a8a:	b289      	uxth	r1, r1
 8008a8c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008a90:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008a94:	f8d9 2000 	ldr.w	r2, [r9]
 8008a98:	4461      	add	r1, ip
 8008a9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008a9e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008aa2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008aa6:	b289      	uxth	r1, r1
 8008aa8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008aac:	4577      	cmp	r7, lr
 8008aae:	f849 1b04 	str.w	r1, [r9], #4
 8008ab2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008ab6:	d8e2      	bhi.n	8008a7e <__multiply+0xb2>
 8008ab8:	9a01      	ldr	r2, [sp, #4]
 8008aba:	f845 c002 	str.w	ip, [r5, r2]
 8008abe:	9a03      	ldr	r2, [sp, #12]
 8008ac0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008ac4:	3304      	adds	r3, #4
 8008ac6:	f1b9 0f00 	cmp.w	r9, #0
 8008aca:	d020      	beq.n	8008b0e <__multiply+0x142>
 8008acc:	6829      	ldr	r1, [r5, #0]
 8008ace:	f104 0c14 	add.w	ip, r4, #20
 8008ad2:	46ae      	mov	lr, r5
 8008ad4:	f04f 0a00 	mov.w	sl, #0
 8008ad8:	f8bc b000 	ldrh.w	fp, [ip]
 8008adc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008ae0:	fb09 220b 	mla	r2, r9, fp, r2
 8008ae4:	4492      	add	sl, r2
 8008ae6:	b289      	uxth	r1, r1
 8008ae8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008aec:	f84e 1b04 	str.w	r1, [lr], #4
 8008af0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008af4:	f8be 1000 	ldrh.w	r1, [lr]
 8008af8:	0c12      	lsrs	r2, r2, #16
 8008afa:	fb09 1102 	mla	r1, r9, r2, r1
 8008afe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008b02:	4567      	cmp	r7, ip
 8008b04:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008b08:	d8e6      	bhi.n	8008ad8 <__multiply+0x10c>
 8008b0a:	9a01      	ldr	r2, [sp, #4]
 8008b0c:	50a9      	str	r1, [r5, r2]
 8008b0e:	3504      	adds	r5, #4
 8008b10:	e79a      	b.n	8008a48 <__multiply+0x7c>
 8008b12:	3e01      	subs	r6, #1
 8008b14:	e79c      	b.n	8008a50 <__multiply+0x84>
 8008b16:	bf00      	nop
 8008b18:	0800958b 	.word	0x0800958b
 8008b1c:	080095fc 	.word	0x080095fc

08008b20 <__pow5mult>:
 8008b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b24:	4615      	mov	r5, r2
 8008b26:	f012 0203 	ands.w	r2, r2, #3
 8008b2a:	4606      	mov	r6, r0
 8008b2c:	460f      	mov	r7, r1
 8008b2e:	d007      	beq.n	8008b40 <__pow5mult+0x20>
 8008b30:	4c25      	ldr	r4, [pc, #148]	; (8008bc8 <__pow5mult+0xa8>)
 8008b32:	3a01      	subs	r2, #1
 8008b34:	2300      	movs	r3, #0
 8008b36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008b3a:	f7ff fe9b 	bl	8008874 <__multadd>
 8008b3e:	4607      	mov	r7, r0
 8008b40:	10ad      	asrs	r5, r5, #2
 8008b42:	d03d      	beq.n	8008bc0 <__pow5mult+0xa0>
 8008b44:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008b46:	b97c      	cbnz	r4, 8008b68 <__pow5mult+0x48>
 8008b48:	2010      	movs	r0, #16
 8008b4a:	f7fd ff37 	bl	80069bc <malloc>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	6270      	str	r0, [r6, #36]	; 0x24
 8008b52:	b928      	cbnz	r0, 8008b60 <__pow5mult+0x40>
 8008b54:	4b1d      	ldr	r3, [pc, #116]	; (8008bcc <__pow5mult+0xac>)
 8008b56:	481e      	ldr	r0, [pc, #120]	; (8008bd0 <__pow5mult+0xb0>)
 8008b58:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008b5c:	f000 fb72 	bl	8009244 <__assert_func>
 8008b60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b64:	6004      	str	r4, [r0, #0]
 8008b66:	60c4      	str	r4, [r0, #12]
 8008b68:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008b6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008b70:	b94c      	cbnz	r4, 8008b86 <__pow5mult+0x66>
 8008b72:	f240 2171 	movw	r1, #625	; 0x271
 8008b76:	4630      	mov	r0, r6
 8008b78:	f7ff ff12 	bl	80089a0 <__i2b>
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008b82:	4604      	mov	r4, r0
 8008b84:	6003      	str	r3, [r0, #0]
 8008b86:	f04f 0900 	mov.w	r9, #0
 8008b8a:	07eb      	lsls	r3, r5, #31
 8008b8c:	d50a      	bpl.n	8008ba4 <__pow5mult+0x84>
 8008b8e:	4639      	mov	r1, r7
 8008b90:	4622      	mov	r2, r4
 8008b92:	4630      	mov	r0, r6
 8008b94:	f7ff ff1a 	bl	80089cc <__multiply>
 8008b98:	4639      	mov	r1, r7
 8008b9a:	4680      	mov	r8, r0
 8008b9c:	4630      	mov	r0, r6
 8008b9e:	f7ff fe47 	bl	8008830 <_Bfree>
 8008ba2:	4647      	mov	r7, r8
 8008ba4:	106d      	asrs	r5, r5, #1
 8008ba6:	d00b      	beq.n	8008bc0 <__pow5mult+0xa0>
 8008ba8:	6820      	ldr	r0, [r4, #0]
 8008baa:	b938      	cbnz	r0, 8008bbc <__pow5mult+0x9c>
 8008bac:	4622      	mov	r2, r4
 8008bae:	4621      	mov	r1, r4
 8008bb0:	4630      	mov	r0, r6
 8008bb2:	f7ff ff0b 	bl	80089cc <__multiply>
 8008bb6:	6020      	str	r0, [r4, #0]
 8008bb8:	f8c0 9000 	str.w	r9, [r0]
 8008bbc:	4604      	mov	r4, r0
 8008bbe:	e7e4      	b.n	8008b8a <__pow5mult+0x6a>
 8008bc0:	4638      	mov	r0, r7
 8008bc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bc6:	bf00      	nop
 8008bc8:	08009748 	.word	0x08009748
 8008bcc:	08009519 	.word	0x08009519
 8008bd0:	080095fc 	.word	0x080095fc

08008bd4 <__lshift>:
 8008bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bd8:	460c      	mov	r4, r1
 8008bda:	6849      	ldr	r1, [r1, #4]
 8008bdc:	6923      	ldr	r3, [r4, #16]
 8008bde:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008be2:	68a3      	ldr	r3, [r4, #8]
 8008be4:	4607      	mov	r7, r0
 8008be6:	4691      	mov	r9, r2
 8008be8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008bec:	f108 0601 	add.w	r6, r8, #1
 8008bf0:	42b3      	cmp	r3, r6
 8008bf2:	db0b      	blt.n	8008c0c <__lshift+0x38>
 8008bf4:	4638      	mov	r0, r7
 8008bf6:	f7ff fddb 	bl	80087b0 <_Balloc>
 8008bfa:	4605      	mov	r5, r0
 8008bfc:	b948      	cbnz	r0, 8008c12 <__lshift+0x3e>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	4b2a      	ldr	r3, [pc, #168]	; (8008cac <__lshift+0xd8>)
 8008c02:	482b      	ldr	r0, [pc, #172]	; (8008cb0 <__lshift+0xdc>)
 8008c04:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008c08:	f000 fb1c 	bl	8009244 <__assert_func>
 8008c0c:	3101      	adds	r1, #1
 8008c0e:	005b      	lsls	r3, r3, #1
 8008c10:	e7ee      	b.n	8008bf0 <__lshift+0x1c>
 8008c12:	2300      	movs	r3, #0
 8008c14:	f100 0114 	add.w	r1, r0, #20
 8008c18:	f100 0210 	add.w	r2, r0, #16
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	4553      	cmp	r3, sl
 8008c20:	db37      	blt.n	8008c92 <__lshift+0xbe>
 8008c22:	6920      	ldr	r0, [r4, #16]
 8008c24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c28:	f104 0314 	add.w	r3, r4, #20
 8008c2c:	f019 091f 	ands.w	r9, r9, #31
 8008c30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008c34:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008c38:	d02f      	beq.n	8008c9a <__lshift+0xc6>
 8008c3a:	f1c9 0e20 	rsb	lr, r9, #32
 8008c3e:	468a      	mov	sl, r1
 8008c40:	f04f 0c00 	mov.w	ip, #0
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	fa02 f209 	lsl.w	r2, r2, r9
 8008c4a:	ea42 020c 	orr.w	r2, r2, ip
 8008c4e:	f84a 2b04 	str.w	r2, [sl], #4
 8008c52:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c56:	4298      	cmp	r0, r3
 8008c58:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008c5c:	d8f2      	bhi.n	8008c44 <__lshift+0x70>
 8008c5e:	1b03      	subs	r3, r0, r4
 8008c60:	3b15      	subs	r3, #21
 8008c62:	f023 0303 	bic.w	r3, r3, #3
 8008c66:	3304      	adds	r3, #4
 8008c68:	f104 0215 	add.w	r2, r4, #21
 8008c6c:	4290      	cmp	r0, r2
 8008c6e:	bf38      	it	cc
 8008c70:	2304      	movcc	r3, #4
 8008c72:	f841 c003 	str.w	ip, [r1, r3]
 8008c76:	f1bc 0f00 	cmp.w	ip, #0
 8008c7a:	d001      	beq.n	8008c80 <__lshift+0xac>
 8008c7c:	f108 0602 	add.w	r6, r8, #2
 8008c80:	3e01      	subs	r6, #1
 8008c82:	4638      	mov	r0, r7
 8008c84:	612e      	str	r6, [r5, #16]
 8008c86:	4621      	mov	r1, r4
 8008c88:	f7ff fdd2 	bl	8008830 <_Bfree>
 8008c8c:	4628      	mov	r0, r5
 8008c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c92:	f842 0f04 	str.w	r0, [r2, #4]!
 8008c96:	3301      	adds	r3, #1
 8008c98:	e7c1      	b.n	8008c1e <__lshift+0x4a>
 8008c9a:	3904      	subs	r1, #4
 8008c9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ca0:	f841 2f04 	str.w	r2, [r1, #4]!
 8008ca4:	4298      	cmp	r0, r3
 8008ca6:	d8f9      	bhi.n	8008c9c <__lshift+0xc8>
 8008ca8:	e7ea      	b.n	8008c80 <__lshift+0xac>
 8008caa:	bf00      	nop
 8008cac:	0800958b 	.word	0x0800958b
 8008cb0:	080095fc 	.word	0x080095fc

08008cb4 <__mcmp>:
 8008cb4:	b530      	push	{r4, r5, lr}
 8008cb6:	6902      	ldr	r2, [r0, #16]
 8008cb8:	690c      	ldr	r4, [r1, #16]
 8008cba:	1b12      	subs	r2, r2, r4
 8008cbc:	d10e      	bne.n	8008cdc <__mcmp+0x28>
 8008cbe:	f100 0314 	add.w	r3, r0, #20
 8008cc2:	3114      	adds	r1, #20
 8008cc4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008cc8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008ccc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008cd0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008cd4:	42a5      	cmp	r5, r4
 8008cd6:	d003      	beq.n	8008ce0 <__mcmp+0x2c>
 8008cd8:	d305      	bcc.n	8008ce6 <__mcmp+0x32>
 8008cda:	2201      	movs	r2, #1
 8008cdc:	4610      	mov	r0, r2
 8008cde:	bd30      	pop	{r4, r5, pc}
 8008ce0:	4283      	cmp	r3, r0
 8008ce2:	d3f3      	bcc.n	8008ccc <__mcmp+0x18>
 8008ce4:	e7fa      	b.n	8008cdc <__mcmp+0x28>
 8008ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8008cea:	e7f7      	b.n	8008cdc <__mcmp+0x28>

08008cec <__mdiff>:
 8008cec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf0:	460c      	mov	r4, r1
 8008cf2:	4606      	mov	r6, r0
 8008cf4:	4611      	mov	r1, r2
 8008cf6:	4620      	mov	r0, r4
 8008cf8:	4690      	mov	r8, r2
 8008cfa:	f7ff ffdb 	bl	8008cb4 <__mcmp>
 8008cfe:	1e05      	subs	r5, r0, #0
 8008d00:	d110      	bne.n	8008d24 <__mdiff+0x38>
 8008d02:	4629      	mov	r1, r5
 8008d04:	4630      	mov	r0, r6
 8008d06:	f7ff fd53 	bl	80087b0 <_Balloc>
 8008d0a:	b930      	cbnz	r0, 8008d1a <__mdiff+0x2e>
 8008d0c:	4b3a      	ldr	r3, [pc, #232]	; (8008df8 <__mdiff+0x10c>)
 8008d0e:	4602      	mov	r2, r0
 8008d10:	f240 2132 	movw	r1, #562	; 0x232
 8008d14:	4839      	ldr	r0, [pc, #228]	; (8008dfc <__mdiff+0x110>)
 8008d16:	f000 fa95 	bl	8009244 <__assert_func>
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d24:	bfa4      	itt	ge
 8008d26:	4643      	movge	r3, r8
 8008d28:	46a0      	movge	r8, r4
 8008d2a:	4630      	mov	r0, r6
 8008d2c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008d30:	bfa6      	itte	ge
 8008d32:	461c      	movge	r4, r3
 8008d34:	2500      	movge	r5, #0
 8008d36:	2501      	movlt	r5, #1
 8008d38:	f7ff fd3a 	bl	80087b0 <_Balloc>
 8008d3c:	b920      	cbnz	r0, 8008d48 <__mdiff+0x5c>
 8008d3e:	4b2e      	ldr	r3, [pc, #184]	; (8008df8 <__mdiff+0x10c>)
 8008d40:	4602      	mov	r2, r0
 8008d42:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008d46:	e7e5      	b.n	8008d14 <__mdiff+0x28>
 8008d48:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008d4c:	6926      	ldr	r6, [r4, #16]
 8008d4e:	60c5      	str	r5, [r0, #12]
 8008d50:	f104 0914 	add.w	r9, r4, #20
 8008d54:	f108 0514 	add.w	r5, r8, #20
 8008d58:	f100 0e14 	add.w	lr, r0, #20
 8008d5c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008d60:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008d64:	f108 0210 	add.w	r2, r8, #16
 8008d68:	46f2      	mov	sl, lr
 8008d6a:	2100      	movs	r1, #0
 8008d6c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008d70:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008d74:	fa1f f883 	uxth.w	r8, r3
 8008d78:	fa11 f18b 	uxtah	r1, r1, fp
 8008d7c:	0c1b      	lsrs	r3, r3, #16
 8008d7e:	eba1 0808 	sub.w	r8, r1, r8
 8008d82:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008d86:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008d8a:	fa1f f888 	uxth.w	r8, r8
 8008d8e:	1419      	asrs	r1, r3, #16
 8008d90:	454e      	cmp	r6, r9
 8008d92:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008d96:	f84a 3b04 	str.w	r3, [sl], #4
 8008d9a:	d8e7      	bhi.n	8008d6c <__mdiff+0x80>
 8008d9c:	1b33      	subs	r3, r6, r4
 8008d9e:	3b15      	subs	r3, #21
 8008da0:	f023 0303 	bic.w	r3, r3, #3
 8008da4:	3304      	adds	r3, #4
 8008da6:	3415      	adds	r4, #21
 8008da8:	42a6      	cmp	r6, r4
 8008daa:	bf38      	it	cc
 8008dac:	2304      	movcc	r3, #4
 8008dae:	441d      	add	r5, r3
 8008db0:	4473      	add	r3, lr
 8008db2:	469e      	mov	lr, r3
 8008db4:	462e      	mov	r6, r5
 8008db6:	4566      	cmp	r6, ip
 8008db8:	d30e      	bcc.n	8008dd8 <__mdiff+0xec>
 8008dba:	f10c 0203 	add.w	r2, ip, #3
 8008dbe:	1b52      	subs	r2, r2, r5
 8008dc0:	f022 0203 	bic.w	r2, r2, #3
 8008dc4:	3d03      	subs	r5, #3
 8008dc6:	45ac      	cmp	ip, r5
 8008dc8:	bf38      	it	cc
 8008dca:	2200      	movcc	r2, #0
 8008dcc:	441a      	add	r2, r3
 8008dce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008dd2:	b17b      	cbz	r3, 8008df4 <__mdiff+0x108>
 8008dd4:	6107      	str	r7, [r0, #16]
 8008dd6:	e7a3      	b.n	8008d20 <__mdiff+0x34>
 8008dd8:	f856 8b04 	ldr.w	r8, [r6], #4
 8008ddc:	fa11 f288 	uxtah	r2, r1, r8
 8008de0:	1414      	asrs	r4, r2, #16
 8008de2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008de6:	b292      	uxth	r2, r2
 8008de8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008dec:	f84e 2b04 	str.w	r2, [lr], #4
 8008df0:	1421      	asrs	r1, r4, #16
 8008df2:	e7e0      	b.n	8008db6 <__mdiff+0xca>
 8008df4:	3f01      	subs	r7, #1
 8008df6:	e7ea      	b.n	8008dce <__mdiff+0xe2>
 8008df8:	0800958b 	.word	0x0800958b
 8008dfc:	080095fc 	.word	0x080095fc

08008e00 <__d2b>:
 8008e00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e04:	4689      	mov	r9, r1
 8008e06:	2101      	movs	r1, #1
 8008e08:	ec57 6b10 	vmov	r6, r7, d0
 8008e0c:	4690      	mov	r8, r2
 8008e0e:	f7ff fccf 	bl	80087b0 <_Balloc>
 8008e12:	4604      	mov	r4, r0
 8008e14:	b930      	cbnz	r0, 8008e24 <__d2b+0x24>
 8008e16:	4602      	mov	r2, r0
 8008e18:	4b25      	ldr	r3, [pc, #148]	; (8008eb0 <__d2b+0xb0>)
 8008e1a:	4826      	ldr	r0, [pc, #152]	; (8008eb4 <__d2b+0xb4>)
 8008e1c:	f240 310a 	movw	r1, #778	; 0x30a
 8008e20:	f000 fa10 	bl	8009244 <__assert_func>
 8008e24:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008e28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008e2c:	bb35      	cbnz	r5, 8008e7c <__d2b+0x7c>
 8008e2e:	2e00      	cmp	r6, #0
 8008e30:	9301      	str	r3, [sp, #4]
 8008e32:	d028      	beq.n	8008e86 <__d2b+0x86>
 8008e34:	4668      	mov	r0, sp
 8008e36:	9600      	str	r6, [sp, #0]
 8008e38:	f7ff fd82 	bl	8008940 <__lo0bits>
 8008e3c:	9900      	ldr	r1, [sp, #0]
 8008e3e:	b300      	cbz	r0, 8008e82 <__d2b+0x82>
 8008e40:	9a01      	ldr	r2, [sp, #4]
 8008e42:	f1c0 0320 	rsb	r3, r0, #32
 8008e46:	fa02 f303 	lsl.w	r3, r2, r3
 8008e4a:	430b      	orrs	r3, r1
 8008e4c:	40c2      	lsrs	r2, r0
 8008e4e:	6163      	str	r3, [r4, #20]
 8008e50:	9201      	str	r2, [sp, #4]
 8008e52:	9b01      	ldr	r3, [sp, #4]
 8008e54:	61a3      	str	r3, [r4, #24]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	bf14      	ite	ne
 8008e5a:	2202      	movne	r2, #2
 8008e5c:	2201      	moveq	r2, #1
 8008e5e:	6122      	str	r2, [r4, #16]
 8008e60:	b1d5      	cbz	r5, 8008e98 <__d2b+0x98>
 8008e62:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008e66:	4405      	add	r5, r0
 8008e68:	f8c9 5000 	str.w	r5, [r9]
 8008e6c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008e70:	f8c8 0000 	str.w	r0, [r8]
 8008e74:	4620      	mov	r0, r4
 8008e76:	b003      	add	sp, #12
 8008e78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e80:	e7d5      	b.n	8008e2e <__d2b+0x2e>
 8008e82:	6161      	str	r1, [r4, #20]
 8008e84:	e7e5      	b.n	8008e52 <__d2b+0x52>
 8008e86:	a801      	add	r0, sp, #4
 8008e88:	f7ff fd5a 	bl	8008940 <__lo0bits>
 8008e8c:	9b01      	ldr	r3, [sp, #4]
 8008e8e:	6163      	str	r3, [r4, #20]
 8008e90:	2201      	movs	r2, #1
 8008e92:	6122      	str	r2, [r4, #16]
 8008e94:	3020      	adds	r0, #32
 8008e96:	e7e3      	b.n	8008e60 <__d2b+0x60>
 8008e98:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008e9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008ea0:	f8c9 0000 	str.w	r0, [r9]
 8008ea4:	6918      	ldr	r0, [r3, #16]
 8008ea6:	f7ff fd2b 	bl	8008900 <__hi0bits>
 8008eaa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008eae:	e7df      	b.n	8008e70 <__d2b+0x70>
 8008eb0:	0800958b 	.word	0x0800958b
 8008eb4:	080095fc 	.word	0x080095fc

08008eb8 <_calloc_r>:
 8008eb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008eba:	fba1 2402 	umull	r2, r4, r1, r2
 8008ebe:	b94c      	cbnz	r4, 8008ed4 <_calloc_r+0x1c>
 8008ec0:	4611      	mov	r1, r2
 8008ec2:	9201      	str	r2, [sp, #4]
 8008ec4:	f7fd fdf6 	bl	8006ab4 <_malloc_r>
 8008ec8:	9a01      	ldr	r2, [sp, #4]
 8008eca:	4605      	mov	r5, r0
 8008ecc:	b930      	cbnz	r0, 8008edc <_calloc_r+0x24>
 8008ece:	4628      	mov	r0, r5
 8008ed0:	b003      	add	sp, #12
 8008ed2:	bd30      	pop	{r4, r5, pc}
 8008ed4:	220c      	movs	r2, #12
 8008ed6:	6002      	str	r2, [r0, #0]
 8008ed8:	2500      	movs	r5, #0
 8008eda:	e7f8      	b.n	8008ece <_calloc_r+0x16>
 8008edc:	4621      	mov	r1, r4
 8008ede:	f7fd fd75 	bl	80069cc <memset>
 8008ee2:	e7f4      	b.n	8008ece <_calloc_r+0x16>

08008ee4 <__sfputc_r>:
 8008ee4:	6893      	ldr	r3, [r2, #8]
 8008ee6:	3b01      	subs	r3, #1
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	b410      	push	{r4}
 8008eec:	6093      	str	r3, [r2, #8]
 8008eee:	da08      	bge.n	8008f02 <__sfputc_r+0x1e>
 8008ef0:	6994      	ldr	r4, [r2, #24]
 8008ef2:	42a3      	cmp	r3, r4
 8008ef4:	db01      	blt.n	8008efa <__sfputc_r+0x16>
 8008ef6:	290a      	cmp	r1, #10
 8008ef8:	d103      	bne.n	8008f02 <__sfputc_r+0x1e>
 8008efa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008efe:	f7fe badf 	b.w	80074c0 <__swbuf_r>
 8008f02:	6813      	ldr	r3, [r2, #0]
 8008f04:	1c58      	adds	r0, r3, #1
 8008f06:	6010      	str	r0, [r2, #0]
 8008f08:	7019      	strb	r1, [r3, #0]
 8008f0a:	4608      	mov	r0, r1
 8008f0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f10:	4770      	bx	lr

08008f12 <__sfputs_r>:
 8008f12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f14:	4606      	mov	r6, r0
 8008f16:	460f      	mov	r7, r1
 8008f18:	4614      	mov	r4, r2
 8008f1a:	18d5      	adds	r5, r2, r3
 8008f1c:	42ac      	cmp	r4, r5
 8008f1e:	d101      	bne.n	8008f24 <__sfputs_r+0x12>
 8008f20:	2000      	movs	r0, #0
 8008f22:	e007      	b.n	8008f34 <__sfputs_r+0x22>
 8008f24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f28:	463a      	mov	r2, r7
 8008f2a:	4630      	mov	r0, r6
 8008f2c:	f7ff ffda 	bl	8008ee4 <__sfputc_r>
 8008f30:	1c43      	adds	r3, r0, #1
 8008f32:	d1f3      	bne.n	8008f1c <__sfputs_r+0xa>
 8008f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f38 <_vfiprintf_r>:
 8008f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f3c:	460d      	mov	r5, r1
 8008f3e:	b09d      	sub	sp, #116	; 0x74
 8008f40:	4614      	mov	r4, r2
 8008f42:	4698      	mov	r8, r3
 8008f44:	4606      	mov	r6, r0
 8008f46:	b118      	cbz	r0, 8008f50 <_vfiprintf_r+0x18>
 8008f48:	6983      	ldr	r3, [r0, #24]
 8008f4a:	b90b      	cbnz	r3, 8008f50 <_vfiprintf_r+0x18>
 8008f4c:	f7ff fb0c 	bl	8008568 <__sinit>
 8008f50:	4b89      	ldr	r3, [pc, #548]	; (8009178 <_vfiprintf_r+0x240>)
 8008f52:	429d      	cmp	r5, r3
 8008f54:	d11b      	bne.n	8008f8e <_vfiprintf_r+0x56>
 8008f56:	6875      	ldr	r5, [r6, #4]
 8008f58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f5a:	07d9      	lsls	r1, r3, #31
 8008f5c:	d405      	bmi.n	8008f6a <_vfiprintf_r+0x32>
 8008f5e:	89ab      	ldrh	r3, [r5, #12]
 8008f60:	059a      	lsls	r2, r3, #22
 8008f62:	d402      	bmi.n	8008f6a <_vfiprintf_r+0x32>
 8008f64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f66:	f7ff fba2 	bl	80086ae <__retarget_lock_acquire_recursive>
 8008f6a:	89ab      	ldrh	r3, [r5, #12]
 8008f6c:	071b      	lsls	r3, r3, #28
 8008f6e:	d501      	bpl.n	8008f74 <_vfiprintf_r+0x3c>
 8008f70:	692b      	ldr	r3, [r5, #16]
 8008f72:	b9eb      	cbnz	r3, 8008fb0 <_vfiprintf_r+0x78>
 8008f74:	4629      	mov	r1, r5
 8008f76:	4630      	mov	r0, r6
 8008f78:	f7fe faf4 	bl	8007564 <__swsetup_r>
 8008f7c:	b1c0      	cbz	r0, 8008fb0 <_vfiprintf_r+0x78>
 8008f7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f80:	07dc      	lsls	r4, r3, #31
 8008f82:	d50e      	bpl.n	8008fa2 <_vfiprintf_r+0x6a>
 8008f84:	f04f 30ff 	mov.w	r0, #4294967295
 8008f88:	b01d      	add	sp, #116	; 0x74
 8008f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f8e:	4b7b      	ldr	r3, [pc, #492]	; (800917c <_vfiprintf_r+0x244>)
 8008f90:	429d      	cmp	r5, r3
 8008f92:	d101      	bne.n	8008f98 <_vfiprintf_r+0x60>
 8008f94:	68b5      	ldr	r5, [r6, #8]
 8008f96:	e7df      	b.n	8008f58 <_vfiprintf_r+0x20>
 8008f98:	4b79      	ldr	r3, [pc, #484]	; (8009180 <_vfiprintf_r+0x248>)
 8008f9a:	429d      	cmp	r5, r3
 8008f9c:	bf08      	it	eq
 8008f9e:	68f5      	ldreq	r5, [r6, #12]
 8008fa0:	e7da      	b.n	8008f58 <_vfiprintf_r+0x20>
 8008fa2:	89ab      	ldrh	r3, [r5, #12]
 8008fa4:	0598      	lsls	r0, r3, #22
 8008fa6:	d4ed      	bmi.n	8008f84 <_vfiprintf_r+0x4c>
 8008fa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008faa:	f7ff fb81 	bl	80086b0 <__retarget_lock_release_recursive>
 8008fae:	e7e9      	b.n	8008f84 <_vfiprintf_r+0x4c>
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	9309      	str	r3, [sp, #36]	; 0x24
 8008fb4:	2320      	movs	r3, #32
 8008fb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fba:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fbe:	2330      	movs	r3, #48	; 0x30
 8008fc0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009184 <_vfiprintf_r+0x24c>
 8008fc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fc8:	f04f 0901 	mov.w	r9, #1
 8008fcc:	4623      	mov	r3, r4
 8008fce:	469a      	mov	sl, r3
 8008fd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fd4:	b10a      	cbz	r2, 8008fda <_vfiprintf_r+0xa2>
 8008fd6:	2a25      	cmp	r2, #37	; 0x25
 8008fd8:	d1f9      	bne.n	8008fce <_vfiprintf_r+0x96>
 8008fda:	ebba 0b04 	subs.w	fp, sl, r4
 8008fde:	d00b      	beq.n	8008ff8 <_vfiprintf_r+0xc0>
 8008fe0:	465b      	mov	r3, fp
 8008fe2:	4622      	mov	r2, r4
 8008fe4:	4629      	mov	r1, r5
 8008fe6:	4630      	mov	r0, r6
 8008fe8:	f7ff ff93 	bl	8008f12 <__sfputs_r>
 8008fec:	3001      	adds	r0, #1
 8008fee:	f000 80aa 	beq.w	8009146 <_vfiprintf_r+0x20e>
 8008ff2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ff4:	445a      	add	r2, fp
 8008ff6:	9209      	str	r2, [sp, #36]	; 0x24
 8008ff8:	f89a 3000 	ldrb.w	r3, [sl]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	f000 80a2 	beq.w	8009146 <_vfiprintf_r+0x20e>
 8009002:	2300      	movs	r3, #0
 8009004:	f04f 32ff 	mov.w	r2, #4294967295
 8009008:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800900c:	f10a 0a01 	add.w	sl, sl, #1
 8009010:	9304      	str	r3, [sp, #16]
 8009012:	9307      	str	r3, [sp, #28]
 8009014:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009018:	931a      	str	r3, [sp, #104]	; 0x68
 800901a:	4654      	mov	r4, sl
 800901c:	2205      	movs	r2, #5
 800901e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009022:	4858      	ldr	r0, [pc, #352]	; (8009184 <_vfiprintf_r+0x24c>)
 8009024:	f7f7 f8f4 	bl	8000210 <memchr>
 8009028:	9a04      	ldr	r2, [sp, #16]
 800902a:	b9d8      	cbnz	r0, 8009064 <_vfiprintf_r+0x12c>
 800902c:	06d1      	lsls	r1, r2, #27
 800902e:	bf44      	itt	mi
 8009030:	2320      	movmi	r3, #32
 8009032:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009036:	0713      	lsls	r3, r2, #28
 8009038:	bf44      	itt	mi
 800903a:	232b      	movmi	r3, #43	; 0x2b
 800903c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009040:	f89a 3000 	ldrb.w	r3, [sl]
 8009044:	2b2a      	cmp	r3, #42	; 0x2a
 8009046:	d015      	beq.n	8009074 <_vfiprintf_r+0x13c>
 8009048:	9a07      	ldr	r2, [sp, #28]
 800904a:	4654      	mov	r4, sl
 800904c:	2000      	movs	r0, #0
 800904e:	f04f 0c0a 	mov.w	ip, #10
 8009052:	4621      	mov	r1, r4
 8009054:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009058:	3b30      	subs	r3, #48	; 0x30
 800905a:	2b09      	cmp	r3, #9
 800905c:	d94e      	bls.n	80090fc <_vfiprintf_r+0x1c4>
 800905e:	b1b0      	cbz	r0, 800908e <_vfiprintf_r+0x156>
 8009060:	9207      	str	r2, [sp, #28]
 8009062:	e014      	b.n	800908e <_vfiprintf_r+0x156>
 8009064:	eba0 0308 	sub.w	r3, r0, r8
 8009068:	fa09 f303 	lsl.w	r3, r9, r3
 800906c:	4313      	orrs	r3, r2
 800906e:	9304      	str	r3, [sp, #16]
 8009070:	46a2      	mov	sl, r4
 8009072:	e7d2      	b.n	800901a <_vfiprintf_r+0xe2>
 8009074:	9b03      	ldr	r3, [sp, #12]
 8009076:	1d19      	adds	r1, r3, #4
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	9103      	str	r1, [sp, #12]
 800907c:	2b00      	cmp	r3, #0
 800907e:	bfbb      	ittet	lt
 8009080:	425b      	neglt	r3, r3
 8009082:	f042 0202 	orrlt.w	r2, r2, #2
 8009086:	9307      	strge	r3, [sp, #28]
 8009088:	9307      	strlt	r3, [sp, #28]
 800908a:	bfb8      	it	lt
 800908c:	9204      	strlt	r2, [sp, #16]
 800908e:	7823      	ldrb	r3, [r4, #0]
 8009090:	2b2e      	cmp	r3, #46	; 0x2e
 8009092:	d10c      	bne.n	80090ae <_vfiprintf_r+0x176>
 8009094:	7863      	ldrb	r3, [r4, #1]
 8009096:	2b2a      	cmp	r3, #42	; 0x2a
 8009098:	d135      	bne.n	8009106 <_vfiprintf_r+0x1ce>
 800909a:	9b03      	ldr	r3, [sp, #12]
 800909c:	1d1a      	adds	r2, r3, #4
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	9203      	str	r2, [sp, #12]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	bfb8      	it	lt
 80090a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80090aa:	3402      	adds	r4, #2
 80090ac:	9305      	str	r3, [sp, #20]
 80090ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009194 <_vfiprintf_r+0x25c>
 80090b2:	7821      	ldrb	r1, [r4, #0]
 80090b4:	2203      	movs	r2, #3
 80090b6:	4650      	mov	r0, sl
 80090b8:	f7f7 f8aa 	bl	8000210 <memchr>
 80090bc:	b140      	cbz	r0, 80090d0 <_vfiprintf_r+0x198>
 80090be:	2340      	movs	r3, #64	; 0x40
 80090c0:	eba0 000a 	sub.w	r0, r0, sl
 80090c4:	fa03 f000 	lsl.w	r0, r3, r0
 80090c8:	9b04      	ldr	r3, [sp, #16]
 80090ca:	4303      	orrs	r3, r0
 80090cc:	3401      	adds	r4, #1
 80090ce:	9304      	str	r3, [sp, #16]
 80090d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090d4:	482c      	ldr	r0, [pc, #176]	; (8009188 <_vfiprintf_r+0x250>)
 80090d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090da:	2206      	movs	r2, #6
 80090dc:	f7f7 f898 	bl	8000210 <memchr>
 80090e0:	2800      	cmp	r0, #0
 80090e2:	d03f      	beq.n	8009164 <_vfiprintf_r+0x22c>
 80090e4:	4b29      	ldr	r3, [pc, #164]	; (800918c <_vfiprintf_r+0x254>)
 80090e6:	bb1b      	cbnz	r3, 8009130 <_vfiprintf_r+0x1f8>
 80090e8:	9b03      	ldr	r3, [sp, #12]
 80090ea:	3307      	adds	r3, #7
 80090ec:	f023 0307 	bic.w	r3, r3, #7
 80090f0:	3308      	adds	r3, #8
 80090f2:	9303      	str	r3, [sp, #12]
 80090f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090f6:	443b      	add	r3, r7
 80090f8:	9309      	str	r3, [sp, #36]	; 0x24
 80090fa:	e767      	b.n	8008fcc <_vfiprintf_r+0x94>
 80090fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009100:	460c      	mov	r4, r1
 8009102:	2001      	movs	r0, #1
 8009104:	e7a5      	b.n	8009052 <_vfiprintf_r+0x11a>
 8009106:	2300      	movs	r3, #0
 8009108:	3401      	adds	r4, #1
 800910a:	9305      	str	r3, [sp, #20]
 800910c:	4619      	mov	r1, r3
 800910e:	f04f 0c0a 	mov.w	ip, #10
 8009112:	4620      	mov	r0, r4
 8009114:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009118:	3a30      	subs	r2, #48	; 0x30
 800911a:	2a09      	cmp	r2, #9
 800911c:	d903      	bls.n	8009126 <_vfiprintf_r+0x1ee>
 800911e:	2b00      	cmp	r3, #0
 8009120:	d0c5      	beq.n	80090ae <_vfiprintf_r+0x176>
 8009122:	9105      	str	r1, [sp, #20]
 8009124:	e7c3      	b.n	80090ae <_vfiprintf_r+0x176>
 8009126:	fb0c 2101 	mla	r1, ip, r1, r2
 800912a:	4604      	mov	r4, r0
 800912c:	2301      	movs	r3, #1
 800912e:	e7f0      	b.n	8009112 <_vfiprintf_r+0x1da>
 8009130:	ab03      	add	r3, sp, #12
 8009132:	9300      	str	r3, [sp, #0]
 8009134:	462a      	mov	r2, r5
 8009136:	4b16      	ldr	r3, [pc, #88]	; (8009190 <_vfiprintf_r+0x258>)
 8009138:	a904      	add	r1, sp, #16
 800913a:	4630      	mov	r0, r6
 800913c:	f7fd fdce 	bl	8006cdc <_printf_float>
 8009140:	4607      	mov	r7, r0
 8009142:	1c78      	adds	r0, r7, #1
 8009144:	d1d6      	bne.n	80090f4 <_vfiprintf_r+0x1bc>
 8009146:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009148:	07d9      	lsls	r1, r3, #31
 800914a:	d405      	bmi.n	8009158 <_vfiprintf_r+0x220>
 800914c:	89ab      	ldrh	r3, [r5, #12]
 800914e:	059a      	lsls	r2, r3, #22
 8009150:	d402      	bmi.n	8009158 <_vfiprintf_r+0x220>
 8009152:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009154:	f7ff faac 	bl	80086b0 <__retarget_lock_release_recursive>
 8009158:	89ab      	ldrh	r3, [r5, #12]
 800915a:	065b      	lsls	r3, r3, #25
 800915c:	f53f af12 	bmi.w	8008f84 <_vfiprintf_r+0x4c>
 8009160:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009162:	e711      	b.n	8008f88 <_vfiprintf_r+0x50>
 8009164:	ab03      	add	r3, sp, #12
 8009166:	9300      	str	r3, [sp, #0]
 8009168:	462a      	mov	r2, r5
 800916a:	4b09      	ldr	r3, [pc, #36]	; (8009190 <_vfiprintf_r+0x258>)
 800916c:	a904      	add	r1, sp, #16
 800916e:	4630      	mov	r0, r6
 8009170:	f7fe f858 	bl	8007224 <_printf_i>
 8009174:	e7e4      	b.n	8009140 <_vfiprintf_r+0x208>
 8009176:	bf00      	nop
 8009178:	080095bc 	.word	0x080095bc
 800917c:	080095dc 	.word	0x080095dc
 8009180:	0800959c 	.word	0x0800959c
 8009184:	08009754 	.word	0x08009754
 8009188:	0800975e 	.word	0x0800975e
 800918c:	08006cdd 	.word	0x08006cdd
 8009190:	08008f13 	.word	0x08008f13
 8009194:	0800975a 	.word	0x0800975a

08009198 <__sread>:
 8009198:	b510      	push	{r4, lr}
 800919a:	460c      	mov	r4, r1
 800919c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091a0:	f000 f8d6 	bl	8009350 <_read_r>
 80091a4:	2800      	cmp	r0, #0
 80091a6:	bfab      	itete	ge
 80091a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80091aa:	89a3      	ldrhlt	r3, [r4, #12]
 80091ac:	181b      	addge	r3, r3, r0
 80091ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80091b2:	bfac      	ite	ge
 80091b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80091b6:	81a3      	strhlt	r3, [r4, #12]
 80091b8:	bd10      	pop	{r4, pc}

080091ba <__swrite>:
 80091ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091be:	461f      	mov	r7, r3
 80091c0:	898b      	ldrh	r3, [r1, #12]
 80091c2:	05db      	lsls	r3, r3, #23
 80091c4:	4605      	mov	r5, r0
 80091c6:	460c      	mov	r4, r1
 80091c8:	4616      	mov	r6, r2
 80091ca:	d505      	bpl.n	80091d8 <__swrite+0x1e>
 80091cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091d0:	2302      	movs	r3, #2
 80091d2:	2200      	movs	r2, #0
 80091d4:	f000 f898 	bl	8009308 <_lseek_r>
 80091d8:	89a3      	ldrh	r3, [r4, #12]
 80091da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091e2:	81a3      	strh	r3, [r4, #12]
 80091e4:	4632      	mov	r2, r6
 80091e6:	463b      	mov	r3, r7
 80091e8:	4628      	mov	r0, r5
 80091ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091ee:	f000 b817 	b.w	8009220 <_write_r>

080091f2 <__sseek>:
 80091f2:	b510      	push	{r4, lr}
 80091f4:	460c      	mov	r4, r1
 80091f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091fa:	f000 f885 	bl	8009308 <_lseek_r>
 80091fe:	1c43      	adds	r3, r0, #1
 8009200:	89a3      	ldrh	r3, [r4, #12]
 8009202:	bf15      	itete	ne
 8009204:	6560      	strne	r0, [r4, #84]	; 0x54
 8009206:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800920a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800920e:	81a3      	strheq	r3, [r4, #12]
 8009210:	bf18      	it	ne
 8009212:	81a3      	strhne	r3, [r4, #12]
 8009214:	bd10      	pop	{r4, pc}

08009216 <__sclose>:
 8009216:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800921a:	f000 b831 	b.w	8009280 <_close_r>
	...

08009220 <_write_r>:
 8009220:	b538      	push	{r3, r4, r5, lr}
 8009222:	4d07      	ldr	r5, [pc, #28]	; (8009240 <_write_r+0x20>)
 8009224:	4604      	mov	r4, r0
 8009226:	4608      	mov	r0, r1
 8009228:	4611      	mov	r1, r2
 800922a:	2200      	movs	r2, #0
 800922c:	602a      	str	r2, [r5, #0]
 800922e:	461a      	mov	r2, r3
 8009230:	f7f8 fc93 	bl	8001b5a <_write>
 8009234:	1c43      	adds	r3, r0, #1
 8009236:	d102      	bne.n	800923e <_write_r+0x1e>
 8009238:	682b      	ldr	r3, [r5, #0]
 800923a:	b103      	cbz	r3, 800923e <_write_r+0x1e>
 800923c:	6023      	str	r3, [r4, #0]
 800923e:	bd38      	pop	{r3, r4, r5, pc}
 8009240:	20000450 	.word	0x20000450

08009244 <__assert_func>:
 8009244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009246:	4614      	mov	r4, r2
 8009248:	461a      	mov	r2, r3
 800924a:	4b09      	ldr	r3, [pc, #36]	; (8009270 <__assert_func+0x2c>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4605      	mov	r5, r0
 8009250:	68d8      	ldr	r0, [r3, #12]
 8009252:	b14c      	cbz	r4, 8009268 <__assert_func+0x24>
 8009254:	4b07      	ldr	r3, [pc, #28]	; (8009274 <__assert_func+0x30>)
 8009256:	9100      	str	r1, [sp, #0]
 8009258:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800925c:	4906      	ldr	r1, [pc, #24]	; (8009278 <__assert_func+0x34>)
 800925e:	462b      	mov	r3, r5
 8009260:	f000 f81e 	bl	80092a0 <fiprintf>
 8009264:	f000 f893 	bl	800938e <abort>
 8009268:	4b04      	ldr	r3, [pc, #16]	; (800927c <__assert_func+0x38>)
 800926a:	461c      	mov	r4, r3
 800926c:	e7f3      	b.n	8009256 <__assert_func+0x12>
 800926e:	bf00      	nop
 8009270:	2000000c 	.word	0x2000000c
 8009274:	08009765 	.word	0x08009765
 8009278:	08009772 	.word	0x08009772
 800927c:	080097a0 	.word	0x080097a0

08009280 <_close_r>:
 8009280:	b538      	push	{r3, r4, r5, lr}
 8009282:	4d06      	ldr	r5, [pc, #24]	; (800929c <_close_r+0x1c>)
 8009284:	2300      	movs	r3, #0
 8009286:	4604      	mov	r4, r0
 8009288:	4608      	mov	r0, r1
 800928a:	602b      	str	r3, [r5, #0]
 800928c:	f7f8 fc81 	bl	8001b92 <_close>
 8009290:	1c43      	adds	r3, r0, #1
 8009292:	d102      	bne.n	800929a <_close_r+0x1a>
 8009294:	682b      	ldr	r3, [r5, #0]
 8009296:	b103      	cbz	r3, 800929a <_close_r+0x1a>
 8009298:	6023      	str	r3, [r4, #0]
 800929a:	bd38      	pop	{r3, r4, r5, pc}
 800929c:	20000450 	.word	0x20000450

080092a0 <fiprintf>:
 80092a0:	b40e      	push	{r1, r2, r3}
 80092a2:	b503      	push	{r0, r1, lr}
 80092a4:	4601      	mov	r1, r0
 80092a6:	ab03      	add	r3, sp, #12
 80092a8:	4805      	ldr	r0, [pc, #20]	; (80092c0 <fiprintf+0x20>)
 80092aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80092ae:	6800      	ldr	r0, [r0, #0]
 80092b0:	9301      	str	r3, [sp, #4]
 80092b2:	f7ff fe41 	bl	8008f38 <_vfiprintf_r>
 80092b6:	b002      	add	sp, #8
 80092b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80092bc:	b003      	add	sp, #12
 80092be:	4770      	bx	lr
 80092c0:	2000000c 	.word	0x2000000c

080092c4 <_fstat_r>:
 80092c4:	b538      	push	{r3, r4, r5, lr}
 80092c6:	4d07      	ldr	r5, [pc, #28]	; (80092e4 <_fstat_r+0x20>)
 80092c8:	2300      	movs	r3, #0
 80092ca:	4604      	mov	r4, r0
 80092cc:	4608      	mov	r0, r1
 80092ce:	4611      	mov	r1, r2
 80092d0:	602b      	str	r3, [r5, #0]
 80092d2:	f7f8 fc6a 	bl	8001baa <_fstat>
 80092d6:	1c43      	adds	r3, r0, #1
 80092d8:	d102      	bne.n	80092e0 <_fstat_r+0x1c>
 80092da:	682b      	ldr	r3, [r5, #0]
 80092dc:	b103      	cbz	r3, 80092e0 <_fstat_r+0x1c>
 80092de:	6023      	str	r3, [r4, #0]
 80092e0:	bd38      	pop	{r3, r4, r5, pc}
 80092e2:	bf00      	nop
 80092e4:	20000450 	.word	0x20000450

080092e8 <_isatty_r>:
 80092e8:	b538      	push	{r3, r4, r5, lr}
 80092ea:	4d06      	ldr	r5, [pc, #24]	; (8009304 <_isatty_r+0x1c>)
 80092ec:	2300      	movs	r3, #0
 80092ee:	4604      	mov	r4, r0
 80092f0:	4608      	mov	r0, r1
 80092f2:	602b      	str	r3, [r5, #0]
 80092f4:	f7f8 fc69 	bl	8001bca <_isatty>
 80092f8:	1c43      	adds	r3, r0, #1
 80092fa:	d102      	bne.n	8009302 <_isatty_r+0x1a>
 80092fc:	682b      	ldr	r3, [r5, #0]
 80092fe:	b103      	cbz	r3, 8009302 <_isatty_r+0x1a>
 8009300:	6023      	str	r3, [r4, #0]
 8009302:	bd38      	pop	{r3, r4, r5, pc}
 8009304:	20000450 	.word	0x20000450

08009308 <_lseek_r>:
 8009308:	b538      	push	{r3, r4, r5, lr}
 800930a:	4d07      	ldr	r5, [pc, #28]	; (8009328 <_lseek_r+0x20>)
 800930c:	4604      	mov	r4, r0
 800930e:	4608      	mov	r0, r1
 8009310:	4611      	mov	r1, r2
 8009312:	2200      	movs	r2, #0
 8009314:	602a      	str	r2, [r5, #0]
 8009316:	461a      	mov	r2, r3
 8009318:	f7f8 fc62 	bl	8001be0 <_lseek>
 800931c:	1c43      	adds	r3, r0, #1
 800931e:	d102      	bne.n	8009326 <_lseek_r+0x1e>
 8009320:	682b      	ldr	r3, [r5, #0]
 8009322:	b103      	cbz	r3, 8009326 <_lseek_r+0x1e>
 8009324:	6023      	str	r3, [r4, #0]
 8009326:	bd38      	pop	{r3, r4, r5, pc}
 8009328:	20000450 	.word	0x20000450

0800932c <__ascii_mbtowc>:
 800932c:	b082      	sub	sp, #8
 800932e:	b901      	cbnz	r1, 8009332 <__ascii_mbtowc+0x6>
 8009330:	a901      	add	r1, sp, #4
 8009332:	b142      	cbz	r2, 8009346 <__ascii_mbtowc+0x1a>
 8009334:	b14b      	cbz	r3, 800934a <__ascii_mbtowc+0x1e>
 8009336:	7813      	ldrb	r3, [r2, #0]
 8009338:	600b      	str	r3, [r1, #0]
 800933a:	7812      	ldrb	r2, [r2, #0]
 800933c:	1e10      	subs	r0, r2, #0
 800933e:	bf18      	it	ne
 8009340:	2001      	movne	r0, #1
 8009342:	b002      	add	sp, #8
 8009344:	4770      	bx	lr
 8009346:	4610      	mov	r0, r2
 8009348:	e7fb      	b.n	8009342 <__ascii_mbtowc+0x16>
 800934a:	f06f 0001 	mvn.w	r0, #1
 800934e:	e7f8      	b.n	8009342 <__ascii_mbtowc+0x16>

08009350 <_read_r>:
 8009350:	b538      	push	{r3, r4, r5, lr}
 8009352:	4d07      	ldr	r5, [pc, #28]	; (8009370 <_read_r+0x20>)
 8009354:	4604      	mov	r4, r0
 8009356:	4608      	mov	r0, r1
 8009358:	4611      	mov	r1, r2
 800935a:	2200      	movs	r2, #0
 800935c:	602a      	str	r2, [r5, #0]
 800935e:	461a      	mov	r2, r3
 8009360:	f7f8 fbde 	bl	8001b20 <_read>
 8009364:	1c43      	adds	r3, r0, #1
 8009366:	d102      	bne.n	800936e <_read_r+0x1e>
 8009368:	682b      	ldr	r3, [r5, #0]
 800936a:	b103      	cbz	r3, 800936e <_read_r+0x1e>
 800936c:	6023      	str	r3, [r4, #0]
 800936e:	bd38      	pop	{r3, r4, r5, pc}
 8009370:	20000450 	.word	0x20000450

08009374 <__ascii_wctomb>:
 8009374:	b149      	cbz	r1, 800938a <__ascii_wctomb+0x16>
 8009376:	2aff      	cmp	r2, #255	; 0xff
 8009378:	bf85      	ittet	hi
 800937a:	238a      	movhi	r3, #138	; 0x8a
 800937c:	6003      	strhi	r3, [r0, #0]
 800937e:	700a      	strbls	r2, [r1, #0]
 8009380:	f04f 30ff 	movhi.w	r0, #4294967295
 8009384:	bf98      	it	ls
 8009386:	2001      	movls	r0, #1
 8009388:	4770      	bx	lr
 800938a:	4608      	mov	r0, r1
 800938c:	4770      	bx	lr

0800938e <abort>:
 800938e:	b508      	push	{r3, lr}
 8009390:	2006      	movs	r0, #6
 8009392:	f000 f82b 	bl	80093ec <raise>
 8009396:	2001      	movs	r0, #1
 8009398:	f7f8 fbb8 	bl	8001b0c <_exit>

0800939c <_raise_r>:
 800939c:	291f      	cmp	r1, #31
 800939e:	b538      	push	{r3, r4, r5, lr}
 80093a0:	4604      	mov	r4, r0
 80093a2:	460d      	mov	r5, r1
 80093a4:	d904      	bls.n	80093b0 <_raise_r+0x14>
 80093a6:	2316      	movs	r3, #22
 80093a8:	6003      	str	r3, [r0, #0]
 80093aa:	f04f 30ff 	mov.w	r0, #4294967295
 80093ae:	bd38      	pop	{r3, r4, r5, pc}
 80093b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80093b2:	b112      	cbz	r2, 80093ba <_raise_r+0x1e>
 80093b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80093b8:	b94b      	cbnz	r3, 80093ce <_raise_r+0x32>
 80093ba:	4620      	mov	r0, r4
 80093bc:	f000 f830 	bl	8009420 <_getpid_r>
 80093c0:	462a      	mov	r2, r5
 80093c2:	4601      	mov	r1, r0
 80093c4:	4620      	mov	r0, r4
 80093c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093ca:	f000 b817 	b.w	80093fc <_kill_r>
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d00a      	beq.n	80093e8 <_raise_r+0x4c>
 80093d2:	1c59      	adds	r1, r3, #1
 80093d4:	d103      	bne.n	80093de <_raise_r+0x42>
 80093d6:	2316      	movs	r3, #22
 80093d8:	6003      	str	r3, [r0, #0]
 80093da:	2001      	movs	r0, #1
 80093dc:	e7e7      	b.n	80093ae <_raise_r+0x12>
 80093de:	2400      	movs	r4, #0
 80093e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80093e4:	4628      	mov	r0, r5
 80093e6:	4798      	blx	r3
 80093e8:	2000      	movs	r0, #0
 80093ea:	e7e0      	b.n	80093ae <_raise_r+0x12>

080093ec <raise>:
 80093ec:	4b02      	ldr	r3, [pc, #8]	; (80093f8 <raise+0xc>)
 80093ee:	4601      	mov	r1, r0
 80093f0:	6818      	ldr	r0, [r3, #0]
 80093f2:	f7ff bfd3 	b.w	800939c <_raise_r>
 80093f6:	bf00      	nop
 80093f8:	2000000c 	.word	0x2000000c

080093fc <_kill_r>:
 80093fc:	b538      	push	{r3, r4, r5, lr}
 80093fe:	4d07      	ldr	r5, [pc, #28]	; (800941c <_kill_r+0x20>)
 8009400:	2300      	movs	r3, #0
 8009402:	4604      	mov	r4, r0
 8009404:	4608      	mov	r0, r1
 8009406:	4611      	mov	r1, r2
 8009408:	602b      	str	r3, [r5, #0]
 800940a:	f7f8 fb6f 	bl	8001aec <_kill>
 800940e:	1c43      	adds	r3, r0, #1
 8009410:	d102      	bne.n	8009418 <_kill_r+0x1c>
 8009412:	682b      	ldr	r3, [r5, #0]
 8009414:	b103      	cbz	r3, 8009418 <_kill_r+0x1c>
 8009416:	6023      	str	r3, [r4, #0]
 8009418:	bd38      	pop	{r3, r4, r5, pc}
 800941a:	bf00      	nop
 800941c:	20000450 	.word	0x20000450

08009420 <_getpid_r>:
 8009420:	f7f8 bb5c 	b.w	8001adc <_getpid>

08009424 <_init>:
 8009424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009426:	bf00      	nop
 8009428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800942a:	bc08      	pop	{r3}
 800942c:	469e      	mov	lr, r3
 800942e:	4770      	bx	lr

08009430 <_fini>:
 8009430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009432:	bf00      	nop
 8009434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009436:	bc08      	pop	{r3}
 8009438:	469e      	mov	lr, r3
 800943a:	4770      	bx	lr
