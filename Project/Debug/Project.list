
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b110  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  0800b2d0  0800b2d0  0001b2d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b770  0800b770  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b770  0800b770  0001b770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b778  0800b778  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b778  0800b778  0001b778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b77c  0800b77c  0001b77c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b780  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  200001e4  0800b964  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d0  0800b964  000204d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017785  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028b3  00000000  00000000  00037999  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001518  00000000  00000000  0003a250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001420  00000000  00000000  0003b768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d598  00000000  00000000  0003cb88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001773b  00000000  00000000  0006a120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011e052  00000000  00000000  0008185b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019f8ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e80  00000000  00000000  0019f900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800b2b8 	.word	0x0800b2b8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	0800b2b8 	.word	0x0800b2b8

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b974 	b.w	8000f78 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468e      	mov	lr, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14d      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4694      	mov	ip, r2
 8000cba:	d969      	bls.n	8000d90 <__udivmoddi4+0xe8>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b152      	cbz	r2, 8000cd8 <__udivmoddi4+0x30>
 8000cc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cc6:	f1c2 0120 	rsb	r1, r2, #32
 8000cca:	fa20 f101 	lsr.w	r1, r0, r1
 8000cce:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cd6:	4094      	lsls	r4, r2
 8000cd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cdc:	0c21      	lsrs	r1, r4, #16
 8000cde:	fbbe f6f8 	udiv	r6, lr, r8
 8000ce2:	fa1f f78c 	uxth.w	r7, ip
 8000ce6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cee:	fb06 f107 	mul.w	r1, r6, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cfe:	f080 811f 	bcs.w	8000f40 <__udivmoddi4+0x298>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 811c 	bls.w	8000f40 <__udivmoddi4+0x298>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d1c:	fb00 f707 	mul.w	r7, r0, r7
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x92>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2c:	f080 810a 	bcs.w	8000f44 <__udivmoddi4+0x29c>
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	f240 8107 	bls.w	8000f44 <__udivmoddi4+0x29c>
 8000d36:	4464      	add	r4, ip
 8000d38:	3802      	subs	r0, #2
 8000d3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3e:	1be4      	subs	r4, r4, r7
 8000d40:	2600      	movs	r6, #0
 8000d42:	b11d      	cbz	r5, 8000d4c <__udivmoddi4+0xa4>
 8000d44:	40d4      	lsrs	r4, r2
 8000d46:	2300      	movs	r3, #0
 8000d48:	e9c5 4300 	strd	r4, r3, [r5]
 8000d4c:	4631      	mov	r1, r6
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0xc2>
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	f000 80ef 	beq.w	8000f3a <__udivmoddi4+0x292>
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d62:	4630      	mov	r0, r6
 8000d64:	4631      	mov	r1, r6
 8000d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6a:	fab3 f683 	clz	r6, r3
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d14a      	bne.n	8000e08 <__udivmoddi4+0x160>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d302      	bcc.n	8000d7c <__udivmoddi4+0xd4>
 8000d76:	4282      	cmp	r2, r0
 8000d78:	f200 80f9 	bhi.w	8000f6e <__udivmoddi4+0x2c6>
 8000d7c:	1a84      	subs	r4, r0, r2
 8000d7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d82:	2001      	movs	r0, #1
 8000d84:	469e      	mov	lr, r3
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d0e0      	beq.n	8000d4c <__udivmoddi4+0xa4>
 8000d8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d8e:	e7dd      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000d90:	b902      	cbnz	r2, 8000d94 <__udivmoddi4+0xec>
 8000d92:	deff      	udf	#255	; 0xff
 8000d94:	fab2 f282 	clz	r2, r2
 8000d98:	2a00      	cmp	r2, #0
 8000d9a:	f040 8092 	bne.w	8000ec2 <__udivmoddi4+0x21a>
 8000d9e:	eba1 010c 	sub.w	r1, r1, ip
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	2601      	movs	r6, #1
 8000dac:	0c20      	lsrs	r0, r4, #16
 8000dae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000db2:	fb07 1113 	mls	r1, r7, r3, r1
 8000db6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dba:	fb0e f003 	mul.w	r0, lr, r3
 8000dbe:	4288      	cmp	r0, r1
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x12c>
 8000dc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x12a>
 8000dcc:	4288      	cmp	r0, r1
 8000dce:	f200 80cb 	bhi.w	8000f68 <__udivmoddi4+0x2c0>
 8000dd2:	4643      	mov	r3, r8
 8000dd4:	1a09      	subs	r1, r1, r0
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ddc:	fb07 1110 	mls	r1, r7, r0, r1
 8000de0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de4:	fb0e fe00 	mul.w	lr, lr, r0
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x156>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000df4:	d202      	bcs.n	8000dfc <__udivmoddi4+0x154>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f200 80bb 	bhi.w	8000f72 <__udivmoddi4+0x2ca>
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	eba4 040e 	sub.w	r4, r4, lr
 8000e02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e06:	e79c      	b.n	8000d42 <__udivmoddi4+0x9a>
 8000e08:	f1c6 0720 	rsb	r7, r6, #32
 8000e0c:	40b3      	lsls	r3, r6
 8000e0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e16:	fa20 f407 	lsr.w	r4, r0, r7
 8000e1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	40f9      	lsrs	r1, r7
 8000e22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e26:	fa00 f306 	lsl.w	r3, r0, r6
 8000e2a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e2e:	0c20      	lsrs	r0, r4, #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fb09 1118 	mls	r1, r9, r8, r1
 8000e38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e40:	4288      	cmp	r0, r1
 8000e42:	fa02 f206 	lsl.w	r2, r2, r6
 8000e46:	d90b      	bls.n	8000e60 <__udivmoddi4+0x1b8>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e50:	f080 8088 	bcs.w	8000f64 <__udivmoddi4+0x2bc>
 8000e54:	4288      	cmp	r0, r1
 8000e56:	f240 8085 	bls.w	8000f64 <__udivmoddi4+0x2bc>
 8000e5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e68:	fb09 1110 	mls	r1, r9, r0, r1
 8000e6c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e74:	458e      	cmp	lr, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x1e2>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e80:	d26c      	bcs.n	8000f5c <__udivmoddi4+0x2b4>
 8000e82:	458e      	cmp	lr, r1
 8000e84:	d96a      	bls.n	8000f5c <__udivmoddi4+0x2b4>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e8e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e92:	eba1 010e 	sub.w	r1, r1, lr
 8000e96:	42a1      	cmp	r1, r4
 8000e98:	46c8      	mov	r8, r9
 8000e9a:	46a6      	mov	lr, r4
 8000e9c:	d356      	bcc.n	8000f4c <__udivmoddi4+0x2a4>
 8000e9e:	d053      	beq.n	8000f48 <__udivmoddi4+0x2a0>
 8000ea0:	b15d      	cbz	r5, 8000eba <__udivmoddi4+0x212>
 8000ea2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ea6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eaa:	fa01 f707 	lsl.w	r7, r1, r7
 8000eae:	fa22 f306 	lsr.w	r3, r2, r6
 8000eb2:	40f1      	lsrs	r1, r6
 8000eb4:	431f      	orrs	r7, r3
 8000eb6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eba:	2600      	movs	r6, #0
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	f1c2 0320 	rsb	r3, r2, #32
 8000ec6:	40d8      	lsrs	r0, r3
 8000ec8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ecc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed0:	4091      	lsls	r1, r2
 8000ed2:	4301      	orrs	r1, r0
 8000ed4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed8:	fa1f fe8c 	uxth.w	lr, ip
 8000edc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ee0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee4:	0c0b      	lsrs	r3, r1, #16
 8000ee6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eea:	fb00 f60e 	mul.w	r6, r0, lr
 8000eee:	429e      	cmp	r6, r3
 8000ef0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x260>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000efe:	d22f      	bcs.n	8000f60 <__udivmoddi4+0x2b8>
 8000f00:	429e      	cmp	r6, r3
 8000f02:	d92d      	bls.n	8000f60 <__udivmoddi4+0x2b8>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	1b9b      	subs	r3, r3, r6
 8000f0a:	b289      	uxth	r1, r1
 8000f0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f10:	fb07 3316 	mls	r3, r7, r6, r3
 8000f14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f18:	fb06 f30e 	mul.w	r3, r6, lr
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x28a>
 8000f20:	eb1c 0101 	adds.w	r1, ip, r1
 8000f24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f28:	d216      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	d914      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2e:	3e02      	subs	r6, #2
 8000f30:	4461      	add	r1, ip
 8000f32:	1ac9      	subs	r1, r1, r3
 8000f34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f38:	e738      	b.n	8000dac <__udivmoddi4+0x104>
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e705      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e3      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6f8      	b.n	8000d3a <__udivmoddi4+0x92>
 8000f48:	454b      	cmp	r3, r9
 8000f4a:	d2a9      	bcs.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7a3      	b.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f58:	4646      	mov	r6, r8
 8000f5a:	e7ea      	b.n	8000f32 <__udivmoddi4+0x28a>
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	e794      	b.n	8000e8a <__udivmoddi4+0x1e2>
 8000f60:	4640      	mov	r0, r8
 8000f62:	e7d1      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f64:	46d0      	mov	r8, sl
 8000f66:	e77b      	b.n	8000e60 <__udivmoddi4+0x1b8>
 8000f68:	3b02      	subs	r3, #2
 8000f6a:	4461      	add	r1, ip
 8000f6c:	e732      	b.n	8000dd4 <__udivmoddi4+0x12c>
 8000f6e:	4630      	mov	r0, r6
 8000f70:	e709      	b.n	8000d86 <__udivmoddi4+0xde>
 8000f72:	4464      	add	r4, ip
 8000f74:	3802      	subs	r0, #2
 8000f76:	e742      	b.n	8000dfe <__udivmoddi4+0x156>

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <getStart>:
static BlockType g_blockType; // use this to remember the next object block type between function calls
static int g_skipStart = 0;
static Block *g_blocks;

int getStart(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
  uint16_t w, lastw;

  lastw = 0xffff; // some inconsequential initial value
 8000f82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f86:	80fb      	strh	r3, [r7, #6]

  while(1)
  {
    w = getWord();
 8000f88:	f000 f9ac 	bl	80012e4 <getWord>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	80bb      	strh	r3, [r7, #4]
    //printf("%x\n", w);
    if (w==0 && lastw==0){
 8000f90:	88bb      	ldrh	r3, [r7, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d104      	bne.n	8000fa0 <getStart+0x24>
 8000f96:	88fb      	ldrh	r3, [r7, #6]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d101      	bne.n	8000fa0 <getStart+0x24>

      return 0; // in I2C and SPI modes this means no data, so return immediately
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	e028      	b.n	8000ff2 <getStart+0x76>
    }
    else if (w==PIXY_START_WORD && lastw==PIXY_START_WORD)
 8000fa0:	88bb      	ldrh	r3, [r7, #4]
 8000fa2:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d109      	bne.n	8000fbe <getStart+0x42>
 8000faa:	88fb      	ldrh	r3, [r7, #6]
 8000fac:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d104      	bne.n	8000fbe <getStart+0x42>
    {
      g_blockType = NORMAL_BLOCK; // remember block type
 8000fb4:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <getStart+0x80>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
      return 1; // code found!
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e019      	b.n	8000ff2 <getStart+0x76>
    }
    else if (w==PIXY_START_WORD_CC && lastw==PIXY_START_WORD)
 8000fbe:	88bb      	ldrh	r3, [r7, #4]
 8000fc0:	f64a 2256 	movw	r2, #43606	; 0xaa56
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d109      	bne.n	8000fdc <getStart+0x60>
 8000fc8:	88fb      	ldrh	r3, [r7, #6]
 8000fca:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d104      	bne.n	8000fdc <getStart+0x60>
    {
      g_blockType = CC_BLOCK; // found color code block
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <getStart+0x80>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	701a      	strb	r2, [r3, #0]
      return 1;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e00a      	b.n	8000ff2 <getStart+0x76>
    }
    else if (w==PIXY_START_WORDX) // this is important, we might be juxtaposed
 8000fdc:	88bb      	ldrh	r3, [r7, #4]
 8000fde:	f245 52aa 	movw	r2, #21930	; 0x55aa
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d102      	bne.n	8000fec <getStart+0x70>
      getByte(0); // we're out of sync! (backwards)
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f000 f94e 	bl	8001288 <getByte>
    lastw = w; // save
 8000fec:	88bb      	ldrh	r3, [r7, #4]
 8000fee:	80fb      	strh	r3, [r7, #6]
    w = getWord();
 8000ff0:	e7ca      	b.n	8000f88 <getStart+0xc>
  }
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	2000048c 	.word	0x2000048c

08001000 <getBlocks>:

uint16_t getBlocks(uint16_t maxBlocks)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	80fb      	strh	r3, [r7, #6]
  uint8_t i;
  uint16_t w, blockCount, checksum, sum;
  Block *block;

  if (!g_skipStart)
 800100a:	4b47      	ldr	r3, [pc, #284]	; (8001128 <getBlocks+0x128>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d106      	bne.n	8001020 <getBlocks+0x20>
  {
    if (getStart()==0)
 8001012:	f7ff ffb3 	bl	8000f7c <getStart>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d104      	bne.n	8001026 <getBlocks+0x26>
      return 0;
 800101c:	2300      	movs	r3, #0
 800101e:	e07f      	b.n	8001120 <getBlocks+0x120>
  }
  else
    g_skipStart = 0;
 8001020:	4b41      	ldr	r3, [pc, #260]	; (8001128 <getBlocks+0x128>)
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]

  for(blockCount=0; blockCount<maxBlocks && blockCount<PIXY_ARRAYSIZE;)
 8001026:	2300      	movs	r3, #0
 8001028:	82bb      	strh	r3, [r7, #20]
 800102a:	e072      	b.n	8001112 <getBlocks+0x112>
  {
    checksum = getWord();
 800102c:	f000 f95a 	bl	80012e4 <getWord>
 8001030:	4603      	mov	r3, r0
 8001032:	823b      	strh	r3, [r7, #16]
    if (checksum==PIXY_START_WORD) // we've reached the beginning of the next frame
 8001034:	8a3b      	ldrh	r3, [r7, #16]
 8001036:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800103a:	4293      	cmp	r3, r2
 800103c:	d107      	bne.n	800104e <getBlocks+0x4e>
    {
      g_skipStart = 1;
 800103e:	4b3a      	ldr	r3, [pc, #232]	; (8001128 <getBlocks+0x128>)
 8001040:	2201      	movs	r2, #1
 8001042:	601a      	str	r2, [r3, #0]
      g_blockType = NORMAL_BLOCK;
 8001044:	4b39      	ldr	r3, [pc, #228]	; (800112c <getBlocks+0x12c>)
 8001046:	2200      	movs	r2, #0
 8001048:	701a      	strb	r2, [r3, #0]
      return blockCount;
 800104a:	8abb      	ldrh	r3, [r7, #20]
 800104c:	e068      	b.n	8001120 <getBlocks+0x120>
    }
    else if (checksum==PIXY_START_WORD_CC)
 800104e:	8a3b      	ldrh	r3, [r7, #16]
 8001050:	f64a 2256 	movw	r2, #43606	; 0xaa56
 8001054:	4293      	cmp	r3, r2
 8001056:	d107      	bne.n	8001068 <getBlocks+0x68>
    {
      g_skipStart = 1;
 8001058:	4b33      	ldr	r3, [pc, #204]	; (8001128 <getBlocks+0x128>)
 800105a:	2201      	movs	r2, #1
 800105c:	601a      	str	r2, [r3, #0]
      g_blockType = CC_BLOCK;
 800105e:	4b33      	ldr	r3, [pc, #204]	; (800112c <getBlocks+0x12c>)
 8001060:	2201      	movs	r2, #1
 8001062:	701a      	strb	r2, [r3, #0]
      return blockCount;
 8001064:	8abb      	ldrh	r3, [r7, #20]
 8001066:	e05b      	b.n	8001120 <getBlocks+0x120>
    }
    else if (checksum==0)
 8001068:	8a3b      	ldrh	r3, [r7, #16]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <getBlocks+0x72>
      return blockCount;
 800106e:	8abb      	ldrh	r3, [r7, #20]
 8001070:	e056      	b.n	8001120 <getBlocks+0x120>

    block = g_blocks + blockCount;
 8001072:	4b2f      	ldr	r3, [pc, #188]	; (8001130 <getBlocks+0x130>)
 8001074:	6819      	ldr	r1, [r3, #0]
 8001076:	8aba      	ldrh	r2, [r7, #20]
 8001078:	4613      	mov	r3, r2
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	4413      	add	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	440b      	add	r3, r1
 8001082:	60fb      	str	r3, [r7, #12]

    for (i=0, sum=0; i<sizeof(Block)/sizeof(uint16_t); i++)
 8001084:	2300      	movs	r3, #0
 8001086:	75fb      	strb	r3, [r7, #23]
 8001088:	2300      	movs	r3, #0
 800108a:	827b      	strh	r3, [r7, #18]
 800108c:	e01b      	b.n	80010c6 <getBlocks+0xc6>
    {
      if (g_blockType==NORMAL_BLOCK && i>=5) // no angle for normal block
 800108e:	4b27      	ldr	r3, [pc, #156]	; (800112c <getBlocks+0x12c>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d106      	bne.n	80010a4 <getBlocks+0xa4>
 8001096:	7dfb      	ldrb	r3, [r7, #23]
 8001098:	2b04      	cmp	r3, #4
 800109a:	d903      	bls.n	80010a4 <getBlocks+0xa4>
      {
        block->angle = 0;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	2200      	movs	r2, #0
 80010a0:	815a      	strh	r2, [r3, #10]
        break;
 80010a2:	e013      	b.n	80010cc <getBlocks+0xcc>
      }
      w = getWord();
 80010a4:	f000 f91e 	bl	80012e4 <getWord>
 80010a8:	4603      	mov	r3, r0
 80010aa:	817b      	strh	r3, [r7, #10]
      sum += w;
 80010ac:	8a7a      	ldrh	r2, [r7, #18]
 80010ae:	897b      	ldrh	r3, [r7, #10]
 80010b0:	4413      	add	r3, r2
 80010b2:	827b      	strh	r3, [r7, #18]
      *((uint16_t *)block + i) = w;
 80010b4:	7dfb      	ldrb	r3, [r7, #23]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	68fa      	ldr	r2, [r7, #12]
 80010ba:	4413      	add	r3, r2
 80010bc:	897a      	ldrh	r2, [r7, #10]
 80010be:	801a      	strh	r2, [r3, #0]
    for (i=0, sum=0; i<sizeof(Block)/sizeof(uint16_t); i++)
 80010c0:	7dfb      	ldrb	r3, [r7, #23]
 80010c2:	3301      	adds	r3, #1
 80010c4:	75fb      	strb	r3, [r7, #23]
 80010c6:	7dfb      	ldrb	r3, [r7, #23]
 80010c8:	2b05      	cmp	r3, #5
 80010ca:	d9e0      	bls.n	800108e <getBlocks+0x8e>
    }

    // check checksum
    if (checksum==sum)
 80010cc:	8a3a      	ldrh	r2, [r7, #16]
 80010ce:	8a7b      	ldrh	r3, [r7, #18]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d103      	bne.n	80010dc <getBlocks+0xdc>
      blockCount++;
 80010d4:	8abb      	ldrh	r3, [r7, #20]
 80010d6:	3301      	adds	r3, #1
 80010d8:	82bb      	strh	r3, [r7, #20]
 80010da:	e002      	b.n	80010e2 <getBlocks+0xe2>
    else
      printf("checksum error!\n");
 80010dc:	4815      	ldr	r0, [pc, #84]	; (8001134 <getBlocks+0x134>)
 80010de:	f007 fd11 	bl	8008b04 <puts>

    w = getWord();
 80010e2:	f000 f8ff 	bl	80012e4 <getWord>
 80010e6:	4603      	mov	r3, r0
 80010e8:	817b      	strh	r3, [r7, #10]
    if (w==PIXY_START_WORD)
 80010ea:	897b      	ldrh	r3, [r7, #10]
 80010ec:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d103      	bne.n	80010fc <getBlocks+0xfc>
      g_blockType = NORMAL_BLOCK;
 80010f4:	4b0d      	ldr	r3, [pc, #52]	; (800112c <getBlocks+0x12c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
 80010fa:	e00a      	b.n	8001112 <getBlocks+0x112>
    else if (w==PIXY_START_WORD_CC)
 80010fc:	897b      	ldrh	r3, [r7, #10]
 80010fe:	f64a 2256 	movw	r2, #43606	; 0xaa56
 8001102:	4293      	cmp	r3, r2
 8001104:	d103      	bne.n	800110e <getBlocks+0x10e>
      g_blockType = CC_BLOCK;
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <getBlocks+0x12c>)
 8001108:	2201      	movs	r2, #1
 800110a:	701a      	strb	r2, [r3, #0]
 800110c:	e001      	b.n	8001112 <getBlocks+0x112>
    else
      return blockCount;
 800110e:	8abb      	ldrh	r3, [r7, #20]
 8001110:	e006      	b.n	8001120 <getBlocks+0x120>
  for(blockCount=0; blockCount<maxBlocks && blockCount<PIXY_ARRAYSIZE;)
 8001112:	8aba      	ldrh	r2, [r7, #20]
 8001114:	88fb      	ldrh	r3, [r7, #6]
 8001116:	429a      	cmp	r2, r3
 8001118:	d202      	bcs.n	8001120 <getBlocks+0x120>
 800111a:	8abb      	ldrh	r3, [r7, #20]
 800111c:	2b63      	cmp	r3, #99	; 0x63
 800111e:	d985      	bls.n	800102c <getBlocks+0x2c>
  }
}
 8001120:	4618      	mov	r0, r3
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000490 	.word	0x20000490
 800112c:	2000048c 	.word	0x2000048c
 8001130:	20000494 	.word	0x20000494
 8001134:	0800b2d0 	.word	0x0800b2d0

08001138 <pixy_init>:

void pixy_init()
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  g_blocks = (Block *)malloc(sizeof(Block)*PIXY_ARRAYSIZE);
 800113c:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8001140:	f006 ff00 	bl	8007f44 <malloc>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	4b01      	ldr	r3, [pc, #4]	; (8001150 <pixy_init+0x18>)
 800114a:	601a      	str	r2, [r3, #0]
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000494 	.word	0x20000494

08001154 <SetPWM>:

// Sets a timer's PWM to a value
// timerIndex = which timer (eg TIM2 -> pass 2, TIM3 -> pass 3)
// pwmVal = value to set that timer's CCR to; these should be defined below
void SetPWM(uint16_t timerIndex, uint16_t pwmVal)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	460a      	mov	r2, r1
 800115e:	80fb      	strh	r3, [r7, #6]
 8001160:	4613      	mov	r3, r2
 8001162:	80bb      	strh	r3, [r7, #4]
	TIM_TypeDef* timer;

	switch (timerIndex)
 8001164:	88fb      	ldrh	r3, [r7, #6]
 8001166:	3b02      	subs	r3, #2
 8001168:	2b03      	cmp	r3, #3
 800116a:	d81c      	bhi.n	80011a6 <SetPWM+0x52>
 800116c:	a201      	add	r2, pc, #4	; (adr r2, 8001174 <SetPWM+0x20>)
 800116e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001172:	bf00      	nop
 8001174:	08001185 	.word	0x08001185
 8001178:	0800118d 	.word	0x0800118d
 800117c:	08001193 	.word	0x08001193
 8001180:	08001199 	.word	0x08001199
	{
	case 2:
		timer = TIM2;
 8001184:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001188:	60fb      	str	r3, [r7, #12]
		break;
 800118a:	e008      	b.n	800119e <SetPWM+0x4a>
	case 3:
		timer = TIM3;
 800118c:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <SetPWM+0x60>)
 800118e:	60fb      	str	r3, [r7, #12]
		break;
 8001190:	e005      	b.n	800119e <SetPWM+0x4a>
	case 4:
		timer = TIM4;
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <SetPWM+0x64>)
 8001194:	60fb      	str	r3, [r7, #12]
		break;
 8001196:	e002      	b.n	800119e <SetPWM+0x4a>
	case 5:
		timer = TIM5;
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <SetPWM+0x68>)
 800119a:	60fb      	str	r3, [r7, #12]
		break;
 800119c:	bf00      	nop
	default:
		return; // just in case.
	}

	timer->CCR3 = pwmVal;
 800119e:	88ba      	ldrh	r2, [r7, #4]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80011a4:	e000      	b.n	80011a8 <SetPWM+0x54>
		return; // just in case.
 80011a6:	bf00      	nop
}
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	40000400 	.word	0x40000400
 80011b8:	40000800 	.word	0x40000800
 80011bc:	40000c00 	.word	0x40000c00

080011c0 <UpdateState>:

uint8_t currentState = STATE_IDLE;

// Updates the current state
void UpdateState(uint8_t nextState)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
	currentState = nextState;
 80011ca:	4a04      	ldr	r2, [pc, #16]	; (80011dc <UpdateState+0x1c>)
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	7013      	strb	r3, [r2, #0]
	ResetAverage();
 80011d0:	f000 f8ac 	bl	800132c <ResetAverage>
		ResetAverage();
		break;
	case STATE_
	}
	//*/
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000000 	.word	0x20000000

080011e0 <CheckButton>:
// Start: Code to handle start button and head
//
// ============================

void CheckButton()
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_0))
 80011e4:	2101      	movs	r1, #1
 80011e6:	4805      	ldr	r0, [pc, #20]	; (80011fc <CheckButton+0x1c>)
 80011e8:	f002 fe8e 	bl	8003f08 <HAL_GPIO_ReadPin>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d002      	beq.n	80011f8 <CheckButton+0x18>
		UpdateState(STATE_FIND_BALL);
 80011f2:	2000      	movs	r0, #0
 80011f4:	f7ff ffe4 	bl	80011c0 <UpdateState>
}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	48001800 	.word	0x48001800

08001200 <UpdateHead>:
uint16_t headServoWidth = HEAD_SERVO_MIN;
uint16_t headServoChange = HEAD_SERVO_CHANGE;
uint16_t headServoCounter = 0;

void UpdateHead()
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	headServoCounter += 1;
 8001204:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <UpdateHead+0x78>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	3301      	adds	r3, #1
 800120a:	b29a      	uxth	r2, r3
 800120c:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <UpdateHead+0x78>)
 800120e:	801a      	strh	r2, [r3, #0]
	if (headServoCounter < HEAD_SERVO_COUNTER_MAX)
 8001210:	4b19      	ldr	r3, [pc, #100]	; (8001278 <UpdateHead+0x78>)
 8001212:	881b      	ldrh	r3, [r3, #0]
 8001214:	2b4f      	cmp	r3, #79	; 0x4f
 8001216:	d92c      	bls.n	8001272 <UpdateHead+0x72>
		return;

	headServoCounter = 0;
 8001218:	4b17      	ldr	r3, [pc, #92]	; (8001278 <UpdateHead+0x78>)
 800121a:	2200      	movs	r2, #0
 800121c:	801a      	strh	r2, [r3, #0]
	if (currentState == STATE_IDLE ||
 800121e:	4b17      	ldr	r3, [pc, #92]	; (800127c <UpdateHead+0x7c>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b04      	cmp	r3, #4
 8001224:	d003      	beq.n	800122e <UpdateHead+0x2e>
		currentState == STATE_GRAB_BALL)
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <UpdateHead+0x7c>)
 8001228:	781b      	ldrb	r3, [r3, #0]
	if (currentState == STATE_IDLE ||
 800122a:	2b01      	cmp	r3, #1
 800122c:	d103      	bne.n	8001236 <UpdateHead+0x36>
	{
		headServoWidth = HEAD_SERVO_MID;
 800122e:	4b14      	ldr	r3, [pc, #80]	; (8001280 <UpdateHead+0x80>)
 8001230:	228c      	movs	r2, #140	; 0x8c
 8001232:	801a      	strh	r2, [r3, #0]
 8001234:	e016      	b.n	8001264 <UpdateHead+0x64>
	}
	else
	{
		headServoWidth += headServoChange;
 8001236:	4b12      	ldr	r3, [pc, #72]	; (8001280 <UpdateHead+0x80>)
 8001238:	881a      	ldrh	r2, [r3, #0]
 800123a:	4b12      	ldr	r3, [pc, #72]	; (8001284 <UpdateHead+0x84>)
 800123c:	881b      	ldrh	r3, [r3, #0]
 800123e:	4413      	add	r3, r2
 8001240:	b29a      	uxth	r2, r3
 8001242:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <UpdateHead+0x80>)
 8001244:	801a      	strh	r2, [r3, #0]
		if (headServoWidth >= HEAD_SERVO_MAX)
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <UpdateHead+0x80>)
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	2bb3      	cmp	r3, #179	; 0xb3
 800124c:	d903      	bls.n	8001256 <UpdateHead+0x56>
			headServoChange = -1 * HEAD_SERVO_CHANGE;
 800124e:	4b0d      	ldr	r3, [pc, #52]	; (8001284 <UpdateHead+0x84>)
 8001250:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001254:	801a      	strh	r2, [r3, #0]
		if (headServoWidth <= HEAD_SERVO_MIN)
 8001256:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <UpdateHead+0x80>)
 8001258:	881b      	ldrh	r3, [r3, #0]
 800125a:	2b64      	cmp	r3, #100	; 0x64
 800125c:	d802      	bhi.n	8001264 <UpdateHead+0x64>
			headServoChange = HEAD_SERVO_CHANGE;
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <UpdateHead+0x84>)
 8001260:	2202      	movs	r2, #2
 8001262:	801a      	strh	r2, [r3, #0]
	}
	SetPWM(5, headServoWidth);
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <UpdateHead+0x80>)
 8001266:	881b      	ldrh	r3, [r3, #0]
 8001268:	4619      	mov	r1, r3
 800126a:	2005      	movs	r0, #5
 800126c:	f7ff ff72 	bl	8001154 <SetPWM>
 8001270:	e000      	b.n	8001274 <UpdateHead+0x74>
		return;
 8001272:	bf00      	nop
}
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000498 	.word	0x20000498
 800127c:	20000000 	.word	0x20000000
 8001280:	20000002 	.word	0x20000002
 8001284:	20000004 	.word	0x20000004

08001288 <getByte>:
uint8_t rx_data[2];
uint8_t tx_data[2] = { PIXY_SYNC_BYTE, 0 };

// Gets one byte from the Pixy cam
uint8_t getByte(uint8_t output)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af02      	add	r7, sp, #8
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef hal_status;
	uint8_t data = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001296:	2200      	movs	r2, #0
 8001298:	2140      	movs	r1, #64	; 0x40
 800129a:	480f      	ldr	r0, [pc, #60]	; (80012d8 <getByte+0x50>)
 800129c:	f002 fe4c 	bl	8003f38 <HAL_GPIO_WritePin>
	hal_status = HAL_SPI_TransmitReceive(&hspi1, &output, &data, 1, 0xFFFFFFFF);
 80012a0:	f107 020e 	add.w	r2, r7, #14
 80012a4:	1df9      	adds	r1, r7, #7
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2301      	movs	r3, #1
 80012ae:	480b      	ldr	r0, [pc, #44]	; (80012dc <getByte+0x54>)
 80012b0:	f004 fbc1 	bl	8005a36 <HAL_SPI_TransmitReceive>
 80012b4:	4603      	mov	r3, r0
 80012b6:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80012b8:	2201      	movs	r2, #1
 80012ba:	2140      	movs	r1, #64	; 0x40
 80012bc:	4806      	ldr	r0, [pc, #24]	; (80012d8 <getByte+0x50>)
 80012be:	f002 fe3b 	bl	8003f38 <HAL_GPIO_WritePin>

	if (hal_status != HAL_OK)
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d002      	beq.n	80012ce <getByte+0x46>
	{
		printf("not ok\n");
 80012c8:	4805      	ldr	r0, [pc, #20]	; (80012e0 <getByte+0x58>)
 80012ca:	f007 fc1b 	bl	8008b04 <puts>
	}

	return data;
 80012ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	48000400 	.word	0x48000400
 80012dc:	200002f8 	.word	0x200002f8
 80012e0:	0800b2e0 	.word	0x0800b2e0

080012e4 <getWord>:

// Gets a word (2 bytes) from the Pixy cam
uint16_t getWord(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
	uint16_t w;

	rx_data[0] = getByte(PIXY_SYNC_BYTE_DATA);
 80012ea:	205b      	movs	r0, #91	; 0x5b
 80012ec:	f7ff ffcc 	bl	8001288 <getByte>
 80012f0:	4603      	mov	r3, r0
 80012f2:	461a      	mov	r2, r3
 80012f4:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <getWord+0x44>)
 80012f6:	701a      	strb	r2, [r3, #0]
	rx_data[1] = getByte(0);
 80012f8:	2000      	movs	r0, #0
 80012fa:	f7ff ffc5 	bl	8001288 <getByte>
 80012fe:	4603      	mov	r3, r0
 8001300:	461a      	mov	r2, r3
 8001302:	4b09      	ldr	r3, [pc, #36]	; (8001328 <getWord+0x44>)
 8001304:	705a      	strb	r2, [r3, #1]

	w = rx_data[0];
 8001306:	4b08      	ldr	r3, [pc, #32]	; (8001328 <getWord+0x44>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	80fb      	strh	r3, [r7, #6]
	w <<= 8;
 800130c:	88fb      	ldrh	r3, [r7, #6]
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	80fb      	strh	r3, [r7, #6]
	w |= rx_data[1];
 8001312:	4b05      	ldr	r3, [pc, #20]	; (8001328 <getWord+0x44>)
 8001314:	785b      	ldrb	r3, [r3, #1]
 8001316:	b29a      	uxth	r2, r3
 8001318:	88fb      	ldrh	r3, [r7, #6]
 800131a:	4313      	orrs	r3, r2
 800131c:	80fb      	strh	r3, [r7, #6]

	return w;
 800131e:	88fb      	ldrh	r3, [r7, #6]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	2000049c 	.word	0x2000049c

0800132c <ResetAverage>:
uint16_t xValsIndex = 0;
float runningAverage = 0.0f;

// Resets the running average and array
void ResetAverage()
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
	xVals[0] = xVals[1] = xVals[2] = xVals[3] = 0;
 8001330:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <ResetAverage+0x34>)
 8001332:	2200      	movs	r2, #0
 8001334:	80da      	strh	r2, [r3, #6]
 8001336:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <ResetAverage+0x34>)
 8001338:	88da      	ldrh	r2, [r3, #6]
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <ResetAverage+0x34>)
 800133c:	809a      	strh	r2, [r3, #4]
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <ResetAverage+0x34>)
 8001340:	889a      	ldrh	r2, [r3, #4]
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <ResetAverage+0x34>)
 8001344:	805a      	strh	r2, [r3, #2]
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <ResetAverage+0x34>)
 8001348:	885a      	ldrh	r2, [r3, #2]
 800134a:	4b05      	ldr	r3, [pc, #20]	; (8001360 <ResetAverage+0x34>)
 800134c:	801a      	strh	r2, [r3, #0]
	runningAverage = 0.0f;
 800134e:	4b05      	ldr	r3, [pc, #20]	; (8001364 <ResetAverage+0x38>)
 8001350:	f04f 0200 	mov.w	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
}
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	200004a0 	.word	0x200004a0
 8001364:	200004ac 	.word	0x200004ac

08001368 <GetSignatureIndex>:

// Gets the index of whatever signature we're looking for in the block data from the Pixy cam
// I'm basically assuming whatever we're looking for will be the first piece of data in the blocks.
uint16_t GetSignatureIndex(uint32_t num_blocks, uint16_t sigVal)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	807b      	strh	r3, [r7, #2]
	int i = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
	while (i < num_blocks)
 8001378:	e015      	b.n	80013a6 <GetSignatureIndex+0x3e>
	{
		if (g_blocks[i].signature == sigVal)
 800137a:	4b10      	ldr	r3, [pc, #64]	; (80013bc <GetSignatureIndex+0x54>)
 800137c:	6819      	ldr	r1, [r3, #0]
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	4613      	mov	r3, r2
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	4413      	add	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	440b      	add	r3, r1
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	887a      	ldrh	r2, [r7, #2]
 800138e:	429a      	cmp	r2, r3
 8001390:	d106      	bne.n	80013a0 <GetSignatureIndex+0x38>
		{
			printf("index: %d\n", i);
 8001392:	68f9      	ldr	r1, [r7, #12]
 8001394:	480a      	ldr	r0, [pc, #40]	; (80013c0 <GetSignatureIndex+0x58>)
 8001396:	f007 fb2f 	bl	80089f8 <iprintf>
			return i;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	b29b      	uxth	r3, r3
 800139e:	e008      	b.n	80013b2 <GetSignatureIndex+0x4a>
		}
		i++;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	3301      	adds	r3, #1
 80013a4:	60fb      	str	r3, [r7, #12]
	while (i < num_blocks)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d8e5      	bhi.n	800137a <GetSignatureIndex+0x12>
	}
	return num_blocks;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	b29b      	uxth	r3, r3
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000494 	.word	0x20000494
 80013c0:	0800b2e8 	.word	0x0800b2e8

080013c4 <GetNextX>:
uint16_t noBallCounter = 0;
uint16_t objectWidth = 0;
// Gets the X value of the signature items and updates the running average
// sig = one of the two signatures defined above
void GetNextX(uint16_t sig)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	80fb      	strh	r3, [r7, #6]
	uint32_t num_blocks = getBlocks(PIXY_ARRAYSIZE);
 80013ce:	2064      	movs	r0, #100	; 0x64
 80013d0:	f7ff fe16 	bl	8001000 <getBlocks>
 80013d4:	4603      	mov	r3, r0
 80013d6:	617b      	str	r3, [r7, #20]
	if (!num_blocks)
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d10c      	bne.n	80013f8 <GetNextX+0x34>
	{
		noBallCounter += 1;
 80013de:	4b3c      	ldr	r3, [pc, #240]	; (80014d0 <GetNextX+0x10c>)
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	3301      	adds	r3, #1
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	4b3a      	ldr	r3, [pc, #232]	; (80014d0 <GetNextX+0x10c>)
 80013e8:	801a      	strh	r2, [r3, #0]
		if (noBallCounter >= NO_BALL_LIMIT)
 80013ea:	4b39      	ldr	r3, [pc, #228]	; (80014d0 <GetNextX+0x10c>)
 80013ec:	881b      	ldrh	r3, [r3, #0]
 80013ee:	2b31      	cmp	r3, #49	; 0x31
 80013f0:	d968      	bls.n	80014c4 <GetNextX+0x100>
			ResetAverage();
 80013f2:	f7ff ff9b 	bl	800132c <ResetAverage>
		return;
 80013f6:	e065      	b.n	80014c4 <GetNextX+0x100>
	}

	noBallCounter = 0;
 80013f8:	4b35      	ldr	r3, [pc, #212]	; (80014d0 <GetNextX+0x10c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	801a      	strh	r2, [r3, #0]

	uint16_t index = GetSignatureIndex(num_blocks, sig);
 80013fe:	88fb      	ldrh	r3, [r7, #6]
 8001400:	4619      	mov	r1, r3
 8001402:	6978      	ldr	r0, [r7, #20]
 8001404:	f7ff ffb0 	bl	8001368 <GetSignatureIndex>
 8001408:	4603      	mov	r3, r0
 800140a:	827b      	strh	r3, [r7, #18]
	if (index == num_blocks)
 800140c:	8a7b      	ldrh	r3, [r7, #18]
 800140e:	697a      	ldr	r2, [r7, #20]
 8001410:	429a      	cmp	r2, r3
 8001412:	d059      	beq.n	80014c8 <GetNextX+0x104>
		return;

	uint16_t newX = g_blocks[index].x;
 8001414:	4b2f      	ldr	r3, [pc, #188]	; (80014d4 <GetNextX+0x110>)
 8001416:	6819      	ldr	r1, [r3, #0]
 8001418:	8a7a      	ldrh	r2, [r7, #18]
 800141a:	4613      	mov	r3, r2
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	4413      	add	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	440b      	add	r3, r1
 8001424:	885b      	ldrh	r3, [r3, #2]
 8001426:	823b      	strh	r3, [r7, #16]
	int16_t diff = newX - xVals[xValsIndex];
 8001428:	4b2b      	ldr	r3, [pc, #172]	; (80014d8 <GetNextX+0x114>)
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	4b2b      	ldr	r3, [pc, #172]	; (80014dc <GetNextX+0x118>)
 8001430:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001434:	8a3a      	ldrh	r2, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	b29b      	uxth	r3, r3
 800143a:	81fb      	strh	r3, [r7, #14]
	runningAverage += diff * 0.25f;
 800143c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001440:	ee07 3a90 	vmov	s15, r3
 8001444:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001448:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800144c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001450:	4b23      	ldr	r3, [pc, #140]	; (80014e0 <GetNextX+0x11c>)
 8001452:	edd3 7a00 	vldr	s15, [r3]
 8001456:	ee77 7a27 	vadd.f32	s15, s14, s15
 800145a:	4b21      	ldr	r3, [pc, #132]	; (80014e0 <GetNextX+0x11c>)
 800145c:	edc3 7a00 	vstr	s15, [r3]

	xVals[xValsIndex] = newX;
 8001460:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <GetNextX+0x114>)
 8001462:	881b      	ldrh	r3, [r3, #0]
 8001464:	4619      	mov	r1, r3
 8001466:	4a1d      	ldr	r2, [pc, #116]	; (80014dc <GetNextX+0x118>)
 8001468:	8a3b      	ldrh	r3, [r7, #16]
 800146a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	xValsIndex = (xValsIndex + 1) % 4;
 800146e:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <GetNextX+0x114>)
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	3301      	adds	r3, #1
 8001474:	425a      	negs	r2, r3
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	f002 0203 	and.w	r2, r2, #3
 800147e:	bf58      	it	pl
 8001480:	4253      	negpl	r3, r2
 8001482:	b29a      	uxth	r2, r3
 8001484:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <GetNextX+0x114>)
 8001486:	801a      	strh	r2, [r3, #0]

	if (g_blocks[index].y >= HEIGHT && currentState == STATE_FIND_BALL)
 8001488:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <GetNextX+0x110>)
 800148a:	6819      	ldr	r1, [r3, #0]
 800148c:	8a7a      	ldrh	r2, [r7, #18]
 800148e:	4613      	mov	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	4413      	add	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	440b      	add	r3, r1
 8001498:	889b      	ldrh	r3, [r3, #4]
 800149a:	2bb8      	cmp	r3, #184	; 0xb8
 800149c:	d906      	bls.n	80014ac <GetNextX+0xe8>
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <GetNextX+0x120>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d102      	bne.n	80014ac <GetNextX+0xe8>
	{
		UpdateState(STATE_GRAB_BALL);
 80014a6:	2001      	movs	r0, #1
 80014a8:	f7ff fe8a 	bl	80011c0 <UpdateState>
	}

	objectWidth = g_blocks[index].width;
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <GetNextX+0x110>)
 80014ae:	6819      	ldr	r1, [r3, #0]
 80014b0:	8a7a      	ldrh	r2, [r7, #18]
 80014b2:	4613      	mov	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4413      	add	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	440b      	add	r3, r1
 80014bc:	88da      	ldrh	r2, [r3, #6]
 80014be:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <GetNextX+0x124>)
 80014c0:	801a      	strh	r2, [r3, #0]
 80014c2:	e002      	b.n	80014ca <GetNextX+0x106>
		return;
 80014c4:	bf00      	nop
 80014c6:	e000      	b.n	80014ca <GetNextX+0x106>
		return;
 80014c8:	bf00      	nop
}
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	200004b0 	.word	0x200004b0
 80014d4:	20000494 	.word	0x20000494
 80014d8:	200004a8 	.word	0x200004a8
 80014dc:	200004a0 	.word	0x200004a0
 80014e0:	200004ac 	.word	0x200004ac
 80014e4:	20000000 	.word	0x20000000
 80014e8:	200004b2 	.word	0x200004b2

080014ec <UpdatePixyCam>:


// Updates the Pixy cam
void UpdatePixyCam()
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
	switch (currentState)
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <UpdatePixyCam+0x2c>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d009      	beq.n	800150c <UpdatePixyCam+0x20>
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	dc0b      	bgt.n	8001514 <UpdatePixyCam+0x28>
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <UpdatePixyCam+0x18>
 8001500:	2b01      	cmp	r3, #1
	{
	case STATE_FIND_BALL:
		GetNextX(PIXY_SIG_BALL);
		break;
	case STATE_GRAB_BALL:
		return; // pixy cam doesn't need to do anything here
 8001502:	e007      	b.n	8001514 <UpdatePixyCam+0x28>
		GetNextX(PIXY_SIG_BALL);
 8001504:	2001      	movs	r0, #1
 8001506:	f7ff ff5d 	bl	80013c4 <GetNextX>
		break;
 800150a:	e003      	b.n	8001514 <UpdatePixyCam+0x28>
	case STATE_RETURN_BALL:
		GetNextX(PIXY_SIG_RETURN);
 800150c:	2002      	movs	r0, #2
 800150e:	f7ff ff59 	bl	80013c4 <GetNextX>
		break;
 8001512:	bf00      	nop
	}
}
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000000 	.word	0x20000000

0800151c <SetWheelSpeed>:
// Sets the wheel speed
// speed = PWM value for the wheel
// wheel = which wheel to use
// Use the defines above.
void SetWheelSpeed(uint8_t wheel, uint8_t speed)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	460a      	mov	r2, r1
 8001526:	71fb      	strb	r3, [r7, #7]
 8001528:	4613      	mov	r3, r2
 800152a:	71bb      	strb	r3, [r7, #6]
	// still need to determine which timer is controlling which wheel
	// speed = PWM value
	SetPWM(wheel, speed);
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	b29b      	uxth	r3, r3
 8001530:	79ba      	ldrb	r2, [r7, #6]
 8001532:	b292      	uxth	r2, r2
 8001534:	4611      	mov	r1, r2
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff fe0c 	bl	8001154 <SetPWM>
}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <UpdateWheelSpeed>:
// avgMax = max value the running average can be
// avgMin = min value the running average can be
// speed = speed to set the wheels
// This will turn off one of the wheels depending on where the ball is
void UpdateWheelSpeed(uint16_t avgMax, uint16_t avgMin, uint8_t speed)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	80fb      	strh	r3, [r7, #6]
 800154e:	460b      	mov	r3, r1
 8001550:	80bb      	strh	r3, [r7, #4]
 8001552:	4613      	mov	r3, r2
 8001554:	70fb      	strb	r3, [r7, #3]
	uint8_t wheelLeftSpeed = speed;
 8001556:	78fb      	ldrb	r3, [r7, #3]
 8001558:	73fb      	strb	r3, [r7, #15]
	uint8_t wheelRightSpeed = speed;
 800155a:	78fb      	ldrb	r3, [r7, #3]
 800155c:	73bb      	strb	r3, [r7, #14]
	if (runningAverage < avgMin)
 800155e:	88bb      	ldrh	r3, [r7, #4]
 8001560:	ee07 3a90 	vmov	s15, r3
 8001564:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001568:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <UpdateWheelSpeed+0x74>)
 800156a:	edd3 7a00 	vldr	s15, [r3]
 800156e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001576:	dd01      	ble.n	800157c <UpdateWheelSpeed+0x38>
		wheelLeftSpeed = WHEEL_SPEED_ZERO;
 8001578:	238b      	movs	r3, #139	; 0x8b
 800157a:	73fb      	strb	r3, [r7, #15]
	if (runningAverage > avgMax)
 800157c:	88fb      	ldrh	r3, [r7, #6]
 800157e:	ee07 3a90 	vmov	s15, r3
 8001582:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001586:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <UpdateWheelSpeed+0x74>)
 8001588:	edd3 7a00 	vldr	s15, [r3]
 800158c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001594:	d501      	bpl.n	800159a <UpdateWheelSpeed+0x56>
		wheelRightSpeed = WHEEL_SPEED_ZERO;
 8001596:	238b      	movs	r3, #139	; 0x8b
 8001598:	73bb      	strb	r3, [r7, #14]

	SetWheelSpeed(WHEEL_LEFT, wheelLeftSpeed);
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	4619      	mov	r1, r3
 800159e:	2002      	movs	r0, #2
 80015a0:	f7ff ffbc 	bl	800151c <SetWheelSpeed>
	SetWheelSpeed(WHEEL_RIGHT, wheelRightSpeed);
 80015a4:	7bbb      	ldrb	r3, [r7, #14]
 80015a6:	4619      	mov	r1, r3
 80015a8:	2003      	movs	r0, #3
 80015aa:	f7ff ffb7 	bl	800151c <SetWheelSpeed>
}
 80015ae:	bf00      	nop
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	200004ac 	.word	0x200004ac

080015bc <UpdateWheels>:

// Updates the wheels
void UpdateWheels()
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
	uint8_t speed = WHEEL_SPEED_FULL;
 80015c2:	2350      	movs	r3, #80	; 0x50
 80015c4:	71fb      	strb	r3, [r7, #7]
	switch (currentState)
 80015c6:	4b13      	ldr	r3, [pc, #76]	; (8001614 <UpdateWheels+0x58>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d016      	beq.n	80015fc <UpdateWheels+0x40>
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	dc1b      	bgt.n	800160a <UpdateWheels+0x4e>
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d002      	beq.n	80015dc <UpdateWheels+0x20>
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d007      	beq.n	80015ea <UpdateWheels+0x2e>
		break;
	case STATE_RETURN_BALL:
		UpdateWheelSpeed(MAX_RETURN_X, MIN_RETURN_X, speed);
		break;
	}
}
 80015da:	e016      	b.n	800160a <UpdateWheels+0x4e>
		UpdateWheelSpeed(MAX_BALL_X, MIN_BALL_X, speed);
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	461a      	mov	r2, r3
 80015e0:	2182      	movs	r1, #130	; 0x82
 80015e2:	20be      	movs	r0, #190	; 0xbe
 80015e4:	f7ff ffae 	bl	8001544 <UpdateWheelSpeed>
		break;
 80015e8:	e00f      	b.n	800160a <UpdateWheels+0x4e>
		SetWheelSpeed(WHEEL_LEFT, WHEEL_SPEED_HALF);
 80015ea:	2164      	movs	r1, #100	; 0x64
 80015ec:	2002      	movs	r0, #2
 80015ee:	f7ff ff95 	bl	800151c <SetWheelSpeed>
		SetWheelSpeed(WHEEL_RIGHT, WHEEL_SPEED_HALF);
 80015f2:	2164      	movs	r1, #100	; 0x64
 80015f4:	2003      	movs	r0, #3
 80015f6:	f7ff ff91 	bl	800151c <SetWheelSpeed>
		break;
 80015fa:	e006      	b.n	800160a <UpdateWheels+0x4e>
		UpdateWheelSpeed(MAX_RETURN_X, MIN_RETURN_X, speed);
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	461a      	mov	r2, r3
 8001600:	2164      	movs	r1, #100	; 0x64
 8001602:	20dc      	movs	r0, #220	; 0xdc
 8001604:	f7ff ff9e 	bl	8001544 <UpdateWheelSpeed>
		break;
 8001608:	bf00      	nop
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000000 	.word	0x20000000

08001618 <CheckIR>:

uint8_t counter = 0;
uint16_t irtimer = 0;
// Checks the value reported by the IR sensor
uint8_t CheckIR()
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
	uint16_t adcVal = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Start(&hadc1);
 8001622:	4839      	ldr	r0, [pc, #228]	; (8001708 <CheckIR+0xf0>)
 8001624:	f001 fc76 	bl	8002f14 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 0xFFFFFFFF);
 8001628:	f04f 31ff 	mov.w	r1, #4294967295
 800162c:	4836      	ldr	r0, [pc, #216]	; (8001708 <CheckIR+0xf0>)
 800162e:	f001 fcd4 	bl	8002fda <HAL_ADC_PollForConversion>
	adcVal = HAL_ADC_GetValue(&hadc1);
 8001632:	4835      	ldr	r0, [pc, #212]	; (8001708 <CheckIR+0xf0>)
 8001634:	f001 fd60 	bl	80030f8 <HAL_ADC_GetValue>
 8001638:	4603      	mov	r3, r0
 800163a:	80fb      	strh	r3, [r7, #6]
	float distVal = exp((log(adcVal) - 10.66) / (-1.123));
 800163c:	88fb      	ldrh	r3, [r7, #6]
 800163e:	4618      	mov	r0, r3
 8001640:	f7fe ff78 	bl	8000534 <__aeabi_ui2d>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	ec43 2b10 	vmov	d0, r2, r3
 800164c:	f009 fa70 	bl	800ab30 <log>
 8001650:	ec51 0b10 	vmov	r0, r1, d0
 8001654:	a328      	add	r3, pc, #160	; (adr r3, 80016f8 <CheckIR+0xe0>)
 8001656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165a:	f7fe fe2d 	bl	80002b8 <__aeabi_dsub>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4610      	mov	r0, r2
 8001664:	4619      	mov	r1, r3
 8001666:	a326      	add	r3, pc, #152	; (adr r3, 8001700 <CheckIR+0xe8>)
 8001668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166c:	f7ff f906 	bl	800087c <__aeabi_ddiv>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	ec43 2b17 	vmov	d7, r2, r3
 8001678:	eeb0 0a47 	vmov.f32	s0, s14
 800167c:	eef0 0a67 	vmov.f32	s1, s15
 8001680:	f009 fa0e 	bl	800aaa0 <exp>
 8001684:	ec53 2b10 	vmov	r2, r3, d0
 8001688:	4610      	mov	r0, r2
 800168a:	4619      	mov	r1, r3
 800168c:	f7ff faa4 	bl	8000bd8 <__aeabi_d2f>
 8001690:	4603      	mov	r3, r0
 8001692:	603b      	str	r3, [r7, #0]
	//printf("distVal: %f\n", distVal);
	if (distVal <= DIST_TO_BALL)
 8001694:	edd7 7a00 	vldr	s15, [r7]
 8001698:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 800169c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a4:	d806      	bhi.n	80016b4 <CheckIR+0x9c>
		counter += 1;
 80016a6:	4b19      	ldr	r3, [pc, #100]	; (800170c <CheckIR+0xf4>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	3301      	adds	r3, #1
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	4b17      	ldr	r3, [pc, #92]	; (800170c <CheckIR+0xf4>)
 80016b0:	701a      	strb	r2, [r3, #0]
 80016b2:	e002      	b.n	80016ba <CheckIR+0xa2>
	else
		counter = 0;
 80016b4:	4b15      	ldr	r3, [pc, #84]	; (800170c <CheckIR+0xf4>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]

	irtimer += 1;
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <CheckIR+0xf8>)
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	3301      	adds	r3, #1
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	4b13      	ldr	r3, [pc, #76]	; (8001710 <CheckIR+0xf8>)
 80016c4:	801a      	strh	r2, [r3, #0]
	if (irtimer >= irTimerMax)
 80016c6:	4b12      	ldr	r3, [pc, #72]	; (8001710 <CheckIR+0xf8>)
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80016ce:	d305      	bcc.n	80016dc <CheckIR+0xc4>
	{
		UpdateState(STATE_FIND_BALL);
 80016d0:	2000      	movs	r0, #0
 80016d2:	f7ff fd75 	bl	80011c0 <UpdateState>
		irtimer = 0;
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <CheckIR+0xf8>)
 80016d8:	2200      	movs	r2, #0
 80016da:	801a      	strh	r2, [r3, #0]
	}
	if (counter >= maxCount)
 80016dc:	4b0b      	ldr	r3, [pc, #44]	; (800170c <CheckIR+0xf4>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d904      	bls.n	80016ee <CheckIR+0xd6>
	{
		irtimer = 0;
 80016e4:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <CheckIR+0xf8>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	801a      	strh	r2, [r3, #0]
		return 1;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e000      	b.n	80016f0 <CheckIR+0xd8>
	}
	return 0;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	851eb852 	.word	0x851eb852
 80016fc:	402551eb 	.word	0x402551eb
 8001700:	d916872b 	.word	0xd916872b
 8001704:	bff1f7ce 	.word	0xbff1f7ce
 8001708:	20000200 	.word	0x20000200
 800170c:	200004b4 	.word	0x200004b4
 8001710:	200004b6 	.word	0x200004b6

08001714 <CloseClaw>:
#define WAIT_TIME		1000000
#define CLAW_WAIT_TIME	200000

// Closes the claw
void CloseClaw()
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
	SetPWM(4, CLAW_CLOSED);
 8001718:	21aa      	movs	r1, #170	; 0xaa
 800171a:	2004      	movs	r0, #4
 800171c:	f7ff fd1a 	bl	8001154 <SetPWM>
}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}

08001724 <OpenClaw>:

// Opens the claw
void OpenClaw()
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
	SetPWM(4, CLAW_OPEN);
 8001728:	216e      	movs	r1, #110	; 0x6e
 800172a:	2004      	movs	r0, #4
 800172c:	f7ff fd12 	bl	8001154 <SetPWM>
}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}

08001734 <WaitForClaw>:

void WaitForClaw()
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
	SetWheelSpeed(WHEEL_LEFT, WHEEL_SPEED_ZERO);
 800173a:	218b      	movs	r1, #139	; 0x8b
 800173c:	2002      	movs	r0, #2
 800173e:	f7ff feed 	bl	800151c <SetWheelSpeed>
	SetWheelSpeed(WHEEL_RIGHT, WHEEL_SPEED_ZERO);
 8001742:	218b      	movs	r1, #139	; 0x8b
 8001744:	2003      	movs	r0, #3
 8001746:	f7ff fee9 	bl	800151c <SetWheelSpeed>
	for (int i = 0; i < CLAW_WAIT_TIME; i++);
 800174a:	2300      	movs	r3, #0
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	e002      	b.n	8001756 <WaitForClaw+0x22>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3301      	adds	r3, #1
 8001754:	607b      	str	r3, [r7, #4]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a03      	ldr	r2, [pc, #12]	; (8001768 <WaitForClaw+0x34>)
 800175a:	4293      	cmp	r3, r2
 800175c:	ddf8      	ble.n	8001750 <WaitForClaw+0x1c>
}
 800175e:	bf00      	nop
 8001760:	bf00      	nop
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	00030d3f 	.word	0x00030d3f

0800176c <ReturnBall>:

// Routine for returning the ball
void ReturnBall()
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
	uint8_t speed = WHEEL_SPEED_MAX;
 8001772:	2300      	movs	r3, #0
 8001774:	70fb      	strb	r3, [r7, #3]
	//speed /= 2;

	// roll the ball forward
	SetWheelSpeed(WHEEL_LEFT, speed);
 8001776:	78fb      	ldrb	r3, [r7, #3]
 8001778:	4619      	mov	r1, r3
 800177a:	2002      	movs	r0, #2
 800177c:	f7ff fece 	bl	800151c <SetWheelSpeed>
	SetWheelSpeed(WHEEL_RIGHT, speed);
 8001780:	78fb      	ldrb	r3, [r7, #3]
 8001782:	4619      	mov	r1, r3
 8001784:	2003      	movs	r0, #3
 8001786:	f7ff fec9 	bl	800151c <SetWheelSpeed>
	OpenClaw();
 800178a:	f7ff ffcb 	bl	8001724 <OpenClaw>
	for (int i = 0; i < PUSH_TIME; i++);
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	e002      	b.n	800179a <ReturnBall+0x2e>
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	3301      	adds	r3, #1
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	4a17      	ldr	r2, [pc, #92]	; (80017fc <ReturnBall+0x90>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	ddf8      	ble.n	8001794 <ReturnBall+0x28>

	// stop for a little bit
	SetWheelSpeed(WHEEL_LEFT, WHEEL_SPEED_ZERO);
 80017a2:	218b      	movs	r1, #139	; 0x8b
 80017a4:	2002      	movs	r0, #2
 80017a6:	f7ff feb9 	bl	800151c <SetWheelSpeed>
	SetWheelSpeed(WHEEL_RIGHT, WHEEL_SPEED_ZERO);
 80017aa:	218b      	movs	r1, #139	; 0x8b
 80017ac:	2003      	movs	r0, #3
 80017ae:	f7ff feb5 	bl	800151c <SetWheelSpeed>
	//*
	for (int i = 0; i < WAIT_TIME; i++);
 80017b2:	2300      	movs	r3, #0
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	e002      	b.n	80017be <ReturnBall+0x52>
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	3301      	adds	r3, #1
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	4a0f      	ldr	r2, [pc, #60]	; (8001800 <ReturnBall+0x94>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	ddf8      	ble.n	80017b8 <ReturnBall+0x4c>

	// turn a bit so the camera doesn't immediately find the ball again
	speed = WHEEL_SPEED_FULL;
 80017c6:	2350      	movs	r3, #80	; 0x50
 80017c8:	70fb      	strb	r3, [r7, #3]
	SetWheelSpeed(WHEEL_LEFT, WHEEL_SPEED_ZERO);
 80017ca:	218b      	movs	r1, #139	; 0x8b
 80017cc:	2002      	movs	r0, #2
 80017ce:	f7ff fea5 	bl	800151c <SetWheelSpeed>
	SetWheelSpeed(WHEEL_RIGHT, speed);
 80017d2:	78fb      	ldrb	r3, [r7, #3]
 80017d4:	4619      	mov	r1, r3
 80017d6:	2003      	movs	r0, #3
 80017d8:	f7ff fea0 	bl	800151c <SetWheelSpeed>
	for (int i = 0; i < PUSH_TIME * 2; i++);
 80017dc:	2300      	movs	r3, #0
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	e002      	b.n	80017e8 <ReturnBall+0x7c>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	3301      	adds	r3, #1
 80017e6:	607b      	str	r3, [r7, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a06      	ldr	r2, [pc, #24]	; (8001804 <ReturnBall+0x98>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	ddf8      	ble.n	80017e2 <ReturnBall+0x76>
	//*/
}
 80017f0:	bf00      	nop
 80017f2:	bf00      	nop
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	00030d3f 	.word	0x00030d3f
 8001800:	000f423f 	.word	0x000f423f
 8001804:	00061a7f 	.word	0x00061a7f

08001808 <UpdateClaw>:

// Update the claw
void UpdateClaw()
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
	switch (currentState)
 800180c:	4b1b      	ldr	r3, [pc, #108]	; (800187c <UpdateClaw+0x74>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b02      	cmp	r3, #2
 8001812:	d012      	beq.n	800183a <UpdateClaw+0x32>
 8001814:	2b02      	cmp	r3, #2
 8001816:	dc2f      	bgt.n	8001878 <UpdateClaw+0x70>
 8001818:	2b00      	cmp	r3, #0
 800181a:	d02a      	beq.n	8001872 <UpdateClaw+0x6a>
 800181c:	2b01      	cmp	r3, #1
 800181e:	d12b      	bne.n	8001878 <UpdateClaw+0x70>
	{
	case STATE_FIND_BALL:
		return; // Claw shouldn't need to do anything here
	case STATE_GRAB_BALL:
    // if IR sensor detects ball
		if (CheckIR())
 8001820:	f7ff fefa 	bl	8001618 <CheckIR>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d025      	beq.n	8001876 <UpdateClaw+0x6e>
		{
			CloseClaw();
 800182a:	f7ff ff73 	bl	8001714 <CloseClaw>
			WaitForClaw();
 800182e:	f7ff ff81 	bl	8001734 <WaitForClaw>
			UpdateState(STATE_RETURN_BALL);
 8001832:	2002      	movs	r0, #2
 8001834:	f7ff fcc4 	bl	80011c0 <UpdateState>
		}
		break;
 8001838:	e01d      	b.n	8001876 <UpdateClaw+0x6e>
	case STATE_RETURN_BALL:
		if (runningAverage >= MIN_RETURN_X &&
 800183a:	4b11      	ldr	r3, [pc, #68]	; (8001880 <UpdateClaw+0x78>)
 800183c:	edd3 7a00 	vldr	s15, [r3]
 8001840:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001884 <UpdateClaw+0x7c>
 8001844:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184c:	da00      	bge.n	8001850 <UpdateClaw+0x48>
			runningAverage <= MAX_RETURN_X)
		{
			ReturnBall();
			UpdateState(STATE_FIND_BALL);
		}
		break;
 800184e:	e013      	b.n	8001878 <UpdateClaw+0x70>
			runningAverage <= MAX_RETURN_X)
 8001850:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <UpdateClaw+0x78>)
 8001852:	edd3 7a00 	vldr	s15, [r3]
		if (runningAverage >= MIN_RETURN_X &&
 8001856:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001888 <UpdateClaw+0x80>
 800185a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800185e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001862:	d900      	bls.n	8001866 <UpdateClaw+0x5e>
		break;
 8001864:	e008      	b.n	8001878 <UpdateClaw+0x70>
			ReturnBall();
 8001866:	f7ff ff81 	bl	800176c <ReturnBall>
			UpdateState(STATE_FIND_BALL);
 800186a:	2000      	movs	r0, #0
 800186c:	f7ff fca8 	bl	80011c0 <UpdateState>
		break;
 8001870:	e002      	b.n	8001878 <UpdateClaw+0x70>
		return; // Claw shouldn't need to do anything here
 8001872:	bf00      	nop
 8001874:	e000      	b.n	8001878 <UpdateClaw+0x70>
		break;
 8001876:	bf00      	nop
	}
}
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000000 	.word	0x20000000
 8001880:	200004ac 	.word	0x200004ac
 8001884:	42c80000 	.word	0x42c80000
 8001888:	435c0000 	.word	0x435c0000

0800188c <WheelsInit>:

// Initializes the timers for the wheels
void WheelsInit()
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001890:	2108      	movs	r1, #8
 8001892:	4808      	ldr	r0, [pc, #32]	; (80018b4 <WheelsInit+0x28>)
 8001894:	f004 fcf4 	bl	8006280 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001898:	2108      	movs	r1, #8
 800189a:	4807      	ldr	r0, [pc, #28]	; (80018b8 <WheelsInit+0x2c>)
 800189c:	f004 fcf0 	bl	8006280 <HAL_TIM_PWM_Start>
	SetWheelSpeed(WHEEL_LEFT, WHEEL_SPEED_ZERO);
 80018a0:	218b      	movs	r1, #139	; 0x8b
 80018a2:	2002      	movs	r0, #2
 80018a4:	f7ff fe3a 	bl	800151c <SetWheelSpeed>
	SetWheelSpeed(WHEEL_RIGHT, WHEEL_SPEED_ZERO);
 80018a8:	218b      	movs	r1, #139	; 0x8b
 80018aa:	2003      	movs	r0, #3
 80018ac:	f7ff fe36 	bl	800151c <SetWheelSpeed>
}
 80018b0:	bf00      	nop
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	2000035c 	.word	0x2000035c
 80018b8:	200003a8 	.word	0x200003a8

080018bc <ClawInit>:

// Initializes the timer for the claw
void ClawInit()
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80018c0:	2108      	movs	r1, #8
 80018c2:	4803      	ldr	r0, [pc, #12]	; (80018d0 <ClawInit+0x14>)
 80018c4:	f004 fcdc 	bl	8006280 <HAL_TIM_PWM_Start>
	OpenClaw();
 80018c8:	f7ff ff2c 	bl	8001724 <OpenClaw>
}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	200003f4 	.word	0x200003f4

080018d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018d8:	f000 ff81 	bl	80027de <HAL_Init>

  /* USER CODE BEGIN Init */
	pixy_init();
 80018dc:	f7ff fc2c 	bl	8001138 <pixy_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018e0:	f000 f842 	bl	8001968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018e4:	f000 fb30 	bl	8001f48 <MX_GPIO_Init>
  MX_SPI1_Init();
 80018e8:	f000 f934 	bl	8001b54 <MX_SPI1_Init>
  MX_LPUART1_UART_Init();
 80018ec:	f000 f8e6 	bl	8001abc <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 80018f0:	f000 f880 	bl	80019f4 <MX_ADC1_Init>
  MX_TIM2_Init();
 80018f4:	f000 f96c 	bl	8001bd0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80018f8:	f000 f9e0 	bl	8001cbc <MX_TIM3_Init>
  MX_TIM4_Init();
 80018fc:	f000 fa54 	bl	8001da8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001900:	f000 fac8 	bl	8001e94 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
	WheelsInit();
 8001904:	f7ff ffc2 	bl	800188c <WheelsInit>
	ClawInit();
 8001908:	f7ff ffd8 	bl	80018bc <ClawInit>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800190c:	2201      	movs	r2, #1
 800190e:	2102      	movs	r1, #2
 8001910:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001914:	f002 fb10 	bl	8003f38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8001918:	2201      	movs	r2, #1
 800191a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800191e:	480e      	ldr	r0, [pc, #56]	; (8001958 <main+0x84>)
 8001920:	f002 fb0a 	bl	8003f38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_SET);
 8001924:	2201      	movs	r2, #1
 8001926:	2102      	movs	r1, #2
 8001928:	480c      	ldr	r0, [pc, #48]	; (800195c <main+0x88>)
 800192a:	f002 fb05 	bl	8003f38 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 800192e:	2108      	movs	r1, #8
 8001930:	480b      	ldr	r0, [pc, #44]	; (8001960 <main+0x8c>)
 8001932:	f004 fca5 	bl	8006280 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		UpdateHead();
 8001936:	f7ff fc63 	bl	8001200 <UpdateHead>
		if (currentState == STATE_IDLE)
 800193a:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <main+0x90>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b04      	cmp	r3, #4
 8001940:	d102      	bne.n	8001948 <main+0x74>
		{
			CheckButton();
 8001942:	f7ff fc4d 	bl	80011e0 <CheckButton>
 8001946:	e7f6      	b.n	8001936 <main+0x62>
		}
		else
		{
			UpdatePixyCam();
 8001948:	f7ff fdd0 	bl	80014ec <UpdatePixyCam>
			UpdateWheels();
 800194c:	f7ff fe36 	bl	80015bc <UpdateWheels>
			UpdateClaw();
 8001950:	f7ff ff5a 	bl	8001808 <UpdateClaw>
		UpdateHead();
 8001954:	e7ef      	b.n	8001936 <main+0x62>
 8001956:	bf00      	nop
 8001958:	48001000 	.word	0x48001000
 800195c:	48001800 	.word	0x48001800
 8001960:	20000440 	.word	0x20000440
 8001964:	20000000 	.word	0x20000000

08001968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b096      	sub	sp, #88	; 0x58
 800196c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	2244      	movs	r2, #68	; 0x44
 8001974:	2100      	movs	r1, #0
 8001976:	4618      	mov	r0, r3
 8001978:	f006 faec 	bl	8007f54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800197c:	463b      	mov	r3, r7
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]
 8001984:	609a      	str	r2, [r3, #8]
 8001986:	60da      	str	r2, [r3, #12]
 8001988:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800198a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800198e:	f002 fb0b 	bl	8003fa8 <HAL_PWREx_ControlVoltageScaling>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001998:	f000 fbb2 	bl	8002100 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800199c:	2310      	movs	r3, #16
 800199e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80019a0:	2301      	movs	r3, #1
 80019a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80019a8:	2360      	movs	r3, #96	; 0x60
 80019aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019b0:	f107 0314 	add.w	r3, r7, #20
 80019b4:	4618      	mov	r0, r3
 80019b6:	f002 fbab 	bl	8004110 <HAL_RCC_OscConfig>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80019c0:	f000 fb9e 	bl	8002100 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019c4:	230f      	movs	r3, #15
 80019c6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80019c8:	2300      	movs	r3, #0
 80019ca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019d4:	2300      	movs	r3, #0
 80019d6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019d8:	463b      	mov	r3, r7
 80019da:	2100      	movs	r1, #0
 80019dc:	4618      	mov	r0, r3
 80019de:	f002 ffb1 	bl	8004944 <HAL_RCC_ClockConfig>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <SystemClock_Config+0x84>
  {
    Error_Handler();
 80019e8:	f000 fb8a 	bl	8002100 <Error_Handler>
  }
}
 80019ec:	bf00      	nop
 80019ee:	3758      	adds	r7, #88	; 0x58
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019fa:	463b      	mov	r3, r7
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
 8001a08:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001a0a:	4b29      	ldr	r3, [pc, #164]	; (8001ab0 <MX_ADC1_Init+0xbc>)
 8001a0c:	4a29      	ldr	r2, [pc, #164]	; (8001ab4 <MX_ADC1_Init+0xc0>)
 8001a0e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8001a10:	4b27      	ldr	r3, [pc, #156]	; (8001ab0 <MX_ADC1_Init+0xbc>)
 8001a12:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a16:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a18:	4b25      	ldr	r3, [pc, #148]	; (8001ab0 <MX_ADC1_Init+0xbc>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a1e:	4b24      	ldr	r3, [pc, #144]	; (8001ab0 <MX_ADC1_Init+0xbc>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a24:	4b22      	ldr	r3, [pc, #136]	; (8001ab0 <MX_ADC1_Init+0xbc>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a2a:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <MX_ADC1_Init+0xbc>)
 8001a2c:	2204      	movs	r2, #4
 8001a2e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001a30:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <MX_ADC1_Init+0xbc>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a36:	4b1e      	ldr	r3, [pc, #120]	; (8001ab0 <MX_ADC1_Init+0xbc>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001a3c:	4b1c      	ldr	r3, [pc, #112]	; (8001ab0 <MX_ADC1_Init+0xbc>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a42:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <MX_ADC1_Init+0xbc>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a4a:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <MX_ADC1_Init+0xbc>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a50:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <MX_ADC1_Init+0xbc>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a56:	4b16      	ldr	r3, [pc, #88]	; (8001ab0 <MX_ADC1_Init+0xbc>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a5e:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <MX_ADC1_Init+0xbc>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001a64:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <MX_ADC1_Init+0xbc>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a6c:	4810      	ldr	r0, [pc, #64]	; (8001ab0 <MX_ADC1_Init+0xbc>)
 8001a6e:	f001 f905 	bl	8002c7c <HAL_ADC_Init>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8001a78:	f000 fb42 	bl	8002100 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001a7c:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <MX_ADC1_Init+0xc4>)
 8001a7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a80:	2306      	movs	r3, #6
 8001a82:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001a84:	2307      	movs	r3, #7
 8001a86:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a88:	237f      	movs	r3, #127	; 0x7f
 8001a8a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a8c:	2304      	movs	r3, #4
 8001a8e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a94:	463b      	mov	r3, r7
 8001a96:	4619      	mov	r1, r3
 8001a98:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <MX_ADC1_Init+0xbc>)
 8001a9a:	f001 fb3b 	bl	8003114 <HAL_ADC_ConfigChannel>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001aa4:	f000 fb2c 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001aa8:	bf00      	nop
 8001aaa:	3718      	adds	r7, #24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20000200 	.word	0x20000200
 8001ab4:	50040000 	.word	0x50040000
 8001ab8:	04300002 	.word	0x04300002

08001abc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001ac0:	4b22      	ldr	r3, [pc, #136]	; (8001b4c <MX_LPUART1_UART_Init+0x90>)
 8001ac2:	4a23      	ldr	r2, [pc, #140]	; (8001b50 <MX_LPUART1_UART_Init+0x94>)
 8001ac4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001ac6:	4b21      	ldr	r3, [pc, #132]	; (8001b4c <MX_LPUART1_UART_Init+0x90>)
 8001ac8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001acc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ace:	4b1f      	ldr	r3, [pc, #124]	; (8001b4c <MX_LPUART1_UART_Init+0x90>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001ad4:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <MX_LPUART1_UART_Init+0x90>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001ada:	4b1c      	ldr	r3, [pc, #112]	; (8001b4c <MX_LPUART1_UART_Init+0x90>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001ae0:	4b1a      	ldr	r3, [pc, #104]	; (8001b4c <MX_LPUART1_UART_Init+0x90>)
 8001ae2:	220c      	movs	r2, #12
 8001ae4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ae6:	4b19      	ldr	r3, [pc, #100]	; (8001b4c <MX_LPUART1_UART_Init+0x90>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aec:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <MX_LPUART1_UART_Init+0x90>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001af2:	4b16      	ldr	r3, [pc, #88]	; (8001b4c <MX_LPUART1_UART_Init+0x90>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001af8:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <MX_LPUART1_UART_Init+0x90>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001afe:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <MX_LPUART1_UART_Init+0x90>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001b04:	4811      	ldr	r0, [pc, #68]	; (8001b4c <MX_LPUART1_UART_Init+0x90>)
 8001b06:	f005 fb57 	bl	80071b8 <HAL_UART_Init>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001b10:	f000 faf6 	bl	8002100 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b14:	2100      	movs	r1, #0
 8001b16:	480d      	ldr	r0, [pc, #52]	; (8001b4c <MX_LPUART1_UART_Init+0x90>)
 8001b18:	f006 f920 	bl	8007d5c <HAL_UARTEx_SetTxFifoThreshold>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001b22:	f000 faed 	bl	8002100 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b26:	2100      	movs	r1, #0
 8001b28:	4808      	ldr	r0, [pc, #32]	; (8001b4c <MX_LPUART1_UART_Init+0x90>)
 8001b2a:	f006 f955 	bl	8007dd8 <HAL_UARTEx_SetRxFifoThreshold>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001b34:	f000 fae4 	bl	8002100 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001b38:	4804      	ldr	r0, [pc, #16]	; (8001b4c <MX_LPUART1_UART_Init+0x90>)
 8001b3a:	f006 f8d6 	bl	8007cea <HAL_UARTEx_DisableFifoMode>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001b44:	f000 fadc 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20000268 	.word	0x20000268
 8001b50:	40008000 	.word	0x40008000

08001b54 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b58:	4b1b      	ldr	r3, [pc, #108]	; (8001bc8 <MX_SPI1_Init+0x74>)
 8001b5a:	4a1c      	ldr	r2, [pc, #112]	; (8001bcc <MX_SPI1_Init+0x78>)
 8001b5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b5e:	4b1a      	ldr	r3, [pc, #104]	; (8001bc8 <MX_SPI1_Init+0x74>)
 8001b60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b66:	4b18      	ldr	r3, [pc, #96]	; (8001bc8 <MX_SPI1_Init+0x74>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b6c:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <MX_SPI1_Init+0x74>)
 8001b6e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001b72:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b74:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <MX_SPI1_Init+0x74>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b7a:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <MX_SPI1_Init+0x74>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b80:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <MX_SPI1_Init+0x74>)
 8001b82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b86:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001b88:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <MX_SPI1_Init+0x74>)
 8001b8a:	2208      	movs	r2, #8
 8001b8c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	; (8001bc8 <MX_SPI1_Init+0x74>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <MX_SPI1_Init+0x74>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <MX_SPI1_Init+0x74>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001ba0:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <MX_SPI1_Init+0x74>)
 8001ba2:	2207      	movs	r2, #7
 8001ba4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ba6:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <MX_SPI1_Init+0x74>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <MX_SPI1_Init+0x74>)
 8001bae:	2208      	movs	r2, #8
 8001bb0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bb2:	4805      	ldr	r0, [pc, #20]	; (8001bc8 <MX_SPI1_Init+0x74>)
 8001bb4:	f003 fe9c 	bl	80058f0 <HAL_SPI_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001bbe:	f000 fa9f 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	200002f8 	.word	0x200002f8
 8001bcc:	40013000 	.word	0x40013000

08001bd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08e      	sub	sp, #56	; 0x38
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	605a      	str	r2, [r3, #4]
 8001be0:	609a      	str	r2, [r3, #8]
 8001be2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be4:	f107 031c 	add.w	r3, r7, #28
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bf0:	463b      	mov	r3, r7
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	605a      	str	r2, [r3, #4]
 8001bf8:	609a      	str	r2, [r3, #8]
 8001bfa:	60da      	str	r2, [r3, #12]
 8001bfc:	611a      	str	r2, [r3, #16]
 8001bfe:	615a      	str	r2, [r3, #20]
 8001c00:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c02:	4b2d      	ldr	r3, [pc, #180]	; (8001cb8 <MX_TIM2_Init+0xe8>)
 8001c04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c08:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c0a:	4b2b      	ldr	r3, [pc, #172]	; (8001cb8 <MX_TIM2_Init+0xe8>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c10:	4b29      	ldr	r3, [pc, #164]	; (8001cb8 <MX_TIM2_Init+0xe8>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 159;
 8001c16:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <MX_TIM2_Init+0xe8>)
 8001c18:	229f      	movs	r2, #159	; 0x9f
 8001c1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c1c:	4b26      	ldr	r3, [pc, #152]	; (8001cb8 <MX_TIM2_Init+0xe8>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c22:	4b25      	ldr	r3, [pc, #148]	; (8001cb8 <MX_TIM2_Init+0xe8>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c28:	4823      	ldr	r0, [pc, #140]	; (8001cb8 <MX_TIM2_Init+0xe8>)
 8001c2a:	f004 fa7b 	bl	8006124 <HAL_TIM_Base_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001c34:	f000 fa64 	bl	8002100 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c42:	4619      	mov	r1, r3
 8001c44:	481c      	ldr	r0, [pc, #112]	; (8001cb8 <MX_TIM2_Init+0xe8>)
 8001c46:	f004 fd35 	bl	80066b4 <HAL_TIM_ConfigClockSource>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001c50:	f000 fa56 	bl	8002100 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c54:	4818      	ldr	r0, [pc, #96]	; (8001cb8 <MX_TIM2_Init+0xe8>)
 8001c56:	f004 fabc 	bl	80061d2 <HAL_TIM_PWM_Init>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001c60:	f000 fa4e 	bl	8002100 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c64:	2300      	movs	r3, #0
 8001c66:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c6c:	f107 031c 	add.w	r3, r7, #28
 8001c70:	4619      	mov	r1, r3
 8001c72:	4811      	ldr	r0, [pc, #68]	; (8001cb8 <MX_TIM2_Init+0xe8>)
 8001c74:	f005 fa18 	bl	80070a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001c7e:	f000 fa3f 	bl	8002100 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c82:	2360      	movs	r3, #96	; 0x60
 8001c84:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 79;
 8001c86:	234f      	movs	r3, #79	; 0x4f
 8001c88:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c92:	463b      	mov	r3, r7
 8001c94:	2208      	movs	r2, #8
 8001c96:	4619      	mov	r1, r3
 8001c98:	4807      	ldr	r0, [pc, #28]	; (8001cb8 <MX_TIM2_Init+0xe8>)
 8001c9a:	f004 fbf7 	bl	800648c <HAL_TIM_PWM_ConfigChannel>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001ca4:	f000 fa2c 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ca8:	4803      	ldr	r0, [pc, #12]	; (8001cb8 <MX_TIM2_Init+0xe8>)
 8001caa:	f000 fbc5 	bl	8002438 <HAL_TIM_MspPostInit>

}
 8001cae:	bf00      	nop
 8001cb0:	3738      	adds	r7, #56	; 0x38
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	2000035c 	.word	0x2000035c

08001cbc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08e      	sub	sp, #56	; 0x38
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	605a      	str	r2, [r3, #4]
 8001ccc:	609a      	str	r2, [r3, #8]
 8001cce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd0:	f107 031c 	add.w	r3, r7, #28
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cdc:	463b      	mov	r3, r7
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	605a      	str	r2, [r3, #4]
 8001ce4:	609a      	str	r2, [r3, #8]
 8001ce6:	60da      	str	r2, [r3, #12]
 8001ce8:	611a      	str	r2, [r3, #16]
 8001cea:	615a      	str	r2, [r3, #20]
 8001cec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cee:	4b2c      	ldr	r3, [pc, #176]	; (8001da0 <MX_TIM3_Init+0xe4>)
 8001cf0:	4a2c      	ldr	r2, [pc, #176]	; (8001da4 <MX_TIM3_Init+0xe8>)
 8001cf2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001cf4:	4b2a      	ldr	r3, [pc, #168]	; (8001da0 <MX_TIM3_Init+0xe4>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cfa:	4b29      	ldr	r3, [pc, #164]	; (8001da0 <MX_TIM3_Init+0xe4>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 159;
 8001d00:	4b27      	ldr	r3, [pc, #156]	; (8001da0 <MX_TIM3_Init+0xe4>)
 8001d02:	229f      	movs	r2, #159	; 0x9f
 8001d04:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d06:	4b26      	ldr	r3, [pc, #152]	; (8001da0 <MX_TIM3_Init+0xe4>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d0c:	4b24      	ldr	r3, [pc, #144]	; (8001da0 <MX_TIM3_Init+0xe4>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d12:	4823      	ldr	r0, [pc, #140]	; (8001da0 <MX_TIM3_Init+0xe4>)
 8001d14:	f004 fa06 	bl	8006124 <HAL_TIM_Base_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001d1e:	f000 f9ef 	bl	8002100 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d26:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	481c      	ldr	r0, [pc, #112]	; (8001da0 <MX_TIM3_Init+0xe4>)
 8001d30:	f004 fcc0 	bl	80066b4 <HAL_TIM_ConfigClockSource>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001d3a:	f000 f9e1 	bl	8002100 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d3e:	4818      	ldr	r0, [pc, #96]	; (8001da0 <MX_TIM3_Init+0xe4>)
 8001d40:	f004 fa47 	bl	80061d2 <HAL_TIM_PWM_Init>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001d4a:	f000 f9d9 	bl	8002100 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d52:	2300      	movs	r3, #0
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d56:	f107 031c 	add.w	r3, r7, #28
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4810      	ldr	r0, [pc, #64]	; (8001da0 <MX_TIM3_Init+0xe4>)
 8001d5e:	f005 f9a3 	bl	80070a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001d68:	f000 f9ca 	bl	8002100 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d6c:	2360      	movs	r3, #96	; 0x60
 8001d6e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 79;
 8001d70:	234f      	movs	r3, #79	; 0x4f
 8001d72:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d7c:	463b      	mov	r3, r7
 8001d7e:	2208      	movs	r2, #8
 8001d80:	4619      	mov	r1, r3
 8001d82:	4807      	ldr	r0, [pc, #28]	; (8001da0 <MX_TIM3_Init+0xe4>)
 8001d84:	f004 fb82 	bl	800648c <HAL_TIM_PWM_ConfigChannel>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001d8e:	f000 f9b7 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d92:	4803      	ldr	r0, [pc, #12]	; (8001da0 <MX_TIM3_Init+0xe4>)
 8001d94:	f000 fb50 	bl	8002438 <HAL_TIM_MspPostInit>

}
 8001d98:	bf00      	nop
 8001d9a:	3738      	adds	r7, #56	; 0x38
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	200003a8 	.word	0x200003a8
 8001da4:	40000400 	.word	0x40000400

08001da8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08e      	sub	sp, #56	; 0x38
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	605a      	str	r2, [r3, #4]
 8001db8:	609a      	str	r2, [r3, #8]
 8001dba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dbc:	f107 031c 	add.w	r3, r7, #28
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dc8:	463b      	mov	r3, r7
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	605a      	str	r2, [r3, #4]
 8001dd0:	609a      	str	r2, [r3, #8]
 8001dd2:	60da      	str	r2, [r3, #12]
 8001dd4:	611a      	str	r2, [r3, #16]
 8001dd6:	615a      	str	r2, [r3, #20]
 8001dd8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001dda:	4b2c      	ldr	r3, [pc, #176]	; (8001e8c <MX_TIM4_Init+0xe4>)
 8001ddc:	4a2c      	ldr	r2, [pc, #176]	; (8001e90 <MX_TIM4_Init+0xe8>)
 8001dde:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 39;
 8001de0:	4b2a      	ldr	r3, [pc, #168]	; (8001e8c <MX_TIM4_Init+0xe4>)
 8001de2:	2227      	movs	r2, #39	; 0x27
 8001de4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de6:	4b29      	ldr	r3, [pc, #164]	; (8001e8c <MX_TIM4_Init+0xe4>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 249;
 8001dec:	4b27      	ldr	r3, [pc, #156]	; (8001e8c <MX_TIM4_Init+0xe4>)
 8001dee:	22f9      	movs	r2, #249	; 0xf9
 8001df0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df2:	4b26      	ldr	r3, [pc, #152]	; (8001e8c <MX_TIM4_Init+0xe4>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df8:	4b24      	ldr	r3, [pc, #144]	; (8001e8c <MX_TIM4_Init+0xe4>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001dfe:	4823      	ldr	r0, [pc, #140]	; (8001e8c <MX_TIM4_Init+0xe4>)
 8001e00:	f004 f990 	bl	8006124 <HAL_TIM_Base_Init>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001e0a:	f000 f979 	bl	8002100 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e12:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001e14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e18:	4619      	mov	r1, r3
 8001e1a:	481c      	ldr	r0, [pc, #112]	; (8001e8c <MX_TIM4_Init+0xe4>)
 8001e1c:	f004 fc4a 	bl	80066b4 <HAL_TIM_ConfigClockSource>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001e26:	f000 f96b 	bl	8002100 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001e2a:	4818      	ldr	r0, [pc, #96]	; (8001e8c <MX_TIM4_Init+0xe4>)
 8001e2c:	f004 f9d1 	bl	80061d2 <HAL_TIM_PWM_Init>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001e36:	f000 f963 	bl	8002100 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e42:	f107 031c 	add.w	r3, r7, #28
 8001e46:	4619      	mov	r1, r3
 8001e48:	4810      	ldr	r0, [pc, #64]	; (8001e8c <MX_TIM4_Init+0xe4>)
 8001e4a:	f005 f92d 	bl	80070a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001e54:	f000 f954 	bl	8002100 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e58:	2360      	movs	r3, #96	; 0x60
 8001e5a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 79;
 8001e5c:	234f      	movs	r3, #79	; 0x4f
 8001e5e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e60:	2300      	movs	r3, #0
 8001e62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e64:	2300      	movs	r3, #0
 8001e66:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e68:	463b      	mov	r3, r7
 8001e6a:	2208      	movs	r2, #8
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4807      	ldr	r0, [pc, #28]	; (8001e8c <MX_TIM4_Init+0xe4>)
 8001e70:	f004 fb0c 	bl	800648c <HAL_TIM_PWM_ConfigChannel>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001e7a:	f000 f941 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001e7e:	4803      	ldr	r0, [pc, #12]	; (8001e8c <MX_TIM4_Init+0xe4>)
 8001e80:	f000 fada 	bl	8002438 <HAL_TIM_MspPostInit>

}
 8001e84:	bf00      	nop
 8001e86:	3738      	adds	r7, #56	; 0x38
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	200003f4 	.word	0x200003f4
 8001e90:	40000800 	.word	0x40000800

08001e94 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08a      	sub	sp, #40	; 0x28
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e9a:	f107 031c 	add.w	r3, r7, #28
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]
 8001ea4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ea6:	463b      	mov	r3, r7
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	611a      	str	r2, [r3, #16]
 8001eb4:	615a      	str	r2, [r3, #20]
 8001eb6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001eb8:	4b21      	ldr	r3, [pc, #132]	; (8001f40 <MX_TIM5_Init+0xac>)
 8001eba:	4a22      	ldr	r2, [pc, #136]	; (8001f44 <MX_TIM5_Init+0xb0>)
 8001ebc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 39;
 8001ebe:	4b20      	ldr	r3, [pc, #128]	; (8001f40 <MX_TIM5_Init+0xac>)
 8001ec0:	2227      	movs	r2, #39	; 0x27
 8001ec2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec4:	4b1e      	ldr	r3, [pc, #120]	; (8001f40 <MX_TIM5_Init+0xac>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1999;
 8001eca:	4b1d      	ldr	r3, [pc, #116]	; (8001f40 <MX_TIM5_Init+0xac>)
 8001ecc:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001ed0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed2:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <MX_TIM5_Init+0xac>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ed8:	4b19      	ldr	r3, [pc, #100]	; (8001f40 <MX_TIM5_Init+0xac>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001ede:	4818      	ldr	r0, [pc, #96]	; (8001f40 <MX_TIM5_Init+0xac>)
 8001ee0:	f004 f977 	bl	80061d2 <HAL_TIM_PWM_Init>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8001eea:	f000 f909 	bl	8002100 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ef6:	f107 031c 	add.w	r3, r7, #28
 8001efa:	4619      	mov	r1, r3
 8001efc:	4810      	ldr	r0, [pc, #64]	; (8001f40 <MX_TIM5_Init+0xac>)
 8001efe:	f005 f8d3 	bl	80070a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001f08:	f000 f8fa 	bl	8002100 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f0c:	2360      	movs	r3, #96	; 0x60
 8001f0e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8001f10:	230a      	movs	r3, #10
 8001f12:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f14:	2300      	movs	r3, #0
 8001f16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f1c:	463b      	mov	r3, r7
 8001f1e:	2208      	movs	r2, #8
 8001f20:	4619      	mov	r1, r3
 8001f22:	4807      	ldr	r0, [pc, #28]	; (8001f40 <MX_TIM5_Init+0xac>)
 8001f24:	f004 fab2 	bl	800648c <HAL_TIM_PWM_ConfigChannel>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001f2e:	f000 f8e7 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001f32:	4803      	ldr	r0, [pc, #12]	; (8001f40 <MX_TIM5_Init+0xac>)
 8001f34:	f000 fa80 	bl	8002438 <HAL_TIM_MspPostInit>

}
 8001f38:	bf00      	nop
 8001f3a:	3728      	adds	r7, #40	; 0x28
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20000440 	.word	0x20000440
 8001f44:	40000c00 	.word	0x40000c00

08001f48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08c      	sub	sp, #48	; 0x30
 8001f4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4e:	f107 031c 	add.w	r3, r7, #28
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]
 8001f58:	609a      	str	r2, [r3, #8]
 8001f5a:	60da      	str	r2, [r3, #12]
 8001f5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f5e:	4b5b      	ldr	r3, [pc, #364]	; (80020cc <MX_GPIO_Init+0x184>)
 8001f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f62:	4a5a      	ldr	r2, [pc, #360]	; (80020cc <MX_GPIO_Init+0x184>)
 8001f64:	f043 0320 	orr.w	r3, r3, #32
 8001f68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f6a:	4b58      	ldr	r3, [pc, #352]	; (80020cc <MX_GPIO_Init+0x184>)
 8001f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6e:	f003 0320 	and.w	r3, r3, #32
 8001f72:	61bb      	str	r3, [r7, #24]
 8001f74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f76:	4b55      	ldr	r3, [pc, #340]	; (80020cc <MX_GPIO_Init+0x184>)
 8001f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7a:	4a54      	ldr	r2, [pc, #336]	; (80020cc <MX_GPIO_Init+0x184>)
 8001f7c:	f043 0304 	orr.w	r3, r3, #4
 8001f80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f82:	4b52      	ldr	r3, [pc, #328]	; (80020cc <MX_GPIO_Init+0x184>)
 8001f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8e:	4b4f      	ldr	r3, [pc, #316]	; (80020cc <MX_GPIO_Init+0x184>)
 8001f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f92:	4a4e      	ldr	r2, [pc, #312]	; (80020cc <MX_GPIO_Init+0x184>)
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f9a:	4b4c      	ldr	r3, [pc, #304]	; (80020cc <MX_GPIO_Init+0x184>)
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa6:	4b49      	ldr	r3, [pc, #292]	; (80020cc <MX_GPIO_Init+0x184>)
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001faa:	4a48      	ldr	r2, [pc, #288]	; (80020cc <MX_GPIO_Init+0x184>)
 8001fac:	f043 0302 	orr.w	r3, r3, #2
 8001fb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fb2:	4b46      	ldr	r3, [pc, #280]	; (80020cc <MX_GPIO_Init+0x184>)
 8001fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fbe:	4b43      	ldr	r3, [pc, #268]	; (80020cc <MX_GPIO_Init+0x184>)
 8001fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc2:	4a42      	ldr	r2, [pc, #264]	; (80020cc <MX_GPIO_Init+0x184>)
 8001fc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fca:	4b40      	ldr	r3, [pc, #256]	; (80020cc <MX_GPIO_Init+0x184>)
 8001fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fd6:	4b3d      	ldr	r3, [pc, #244]	; (80020cc <MX_GPIO_Init+0x184>)
 8001fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fda:	4a3c      	ldr	r2, [pc, #240]	; (80020cc <MX_GPIO_Init+0x184>)
 8001fdc:	f043 0310 	orr.w	r3, r3, #16
 8001fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fe2:	4b3a      	ldr	r3, [pc, #232]	; (80020cc <MX_GPIO_Init+0x184>)
 8001fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe6:	f003 0310 	and.w	r3, r3, #16
 8001fea:	607b      	str	r3, [r7, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fee:	4b37      	ldr	r3, [pc, #220]	; (80020cc <MX_GPIO_Init+0x184>)
 8001ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff2:	4a36      	ldr	r2, [pc, #216]	; (80020cc <MX_GPIO_Init+0x184>)
 8001ff4:	f043 0308 	orr.w	r3, r3, #8
 8001ff8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ffa:	4b34      	ldr	r3, [pc, #208]	; (80020cc <MX_GPIO_Init+0x184>)
 8001ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	603b      	str	r3, [r7, #0]
 8002004:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8002006:	f002 f873 	bl	80040f0 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800200a:	2200      	movs	r2, #0
 800200c:	2102      	movs	r1, #2
 800200e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002012:	f001 ff91 	bl	8003f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 8002016:	2200      	movs	r2, #0
 8002018:	2102      	movs	r1, #2
 800201a:	482d      	ldr	r0, [pc, #180]	; (80020d0 <MX_GPIO_Init+0x188>)
 800201c:	f001 ff8c 	bl	8003f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8002020:	2200      	movs	r2, #0
 8002022:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002026:	482b      	ldr	r0, [pc, #172]	; (80020d4 <MX_GPIO_Init+0x18c>)
 8002028:	f001 ff86 	bl	8003f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800202c:	2200      	movs	r2, #0
 800202e:	2140      	movs	r1, #64	; 0x40
 8002030:	4829      	ldr	r0, [pc, #164]	; (80020d8 <MX_GPIO_Init+0x190>)
 8002032:	f001 ff81 	bl	8003f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002036:	2302      	movs	r3, #2
 8002038:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800203a:	2301      	movs	r3, #1
 800203c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002042:	2300      	movs	r3, #0
 8002044:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002046:	f107 031c 	add.w	r3, r7, #28
 800204a:	4619      	mov	r1, r3
 800204c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002050:	f001 fdc8 	bl	8003be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002054:	2301      	movs	r3, #1
 8002056:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002058:	2300      	movs	r3, #0
 800205a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800205c:	2302      	movs	r3, #2
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002060:	f107 031c 	add.w	r3, r7, #28
 8002064:	4619      	mov	r1, r3
 8002066:	481a      	ldr	r0, [pc, #104]	; (80020d0 <MX_GPIO_Init+0x188>)
 8002068:	f001 fdbc 	bl	8003be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800206c:	2302      	movs	r3, #2
 800206e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002070:	2301      	movs	r3, #1
 8002072:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002078:	2300      	movs	r3, #0
 800207a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800207c:	f107 031c 	add.w	r3, r7, #28
 8002080:	4619      	mov	r1, r3
 8002082:	4813      	ldr	r0, [pc, #76]	; (80020d0 <MX_GPIO_Init+0x188>)
 8002084:	f001 fdae 	bl	8003be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002088:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800208c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800208e:	2301      	movs	r3, #1
 8002090:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002096:	2300      	movs	r3, #0
 8002098:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800209a:	f107 031c 	add.w	r3, r7, #28
 800209e:	4619      	mov	r1, r3
 80020a0:	480c      	ldr	r0, [pc, #48]	; (80020d4 <MX_GPIO_Init+0x18c>)
 80020a2:	f001 fd9f 	bl	8003be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80020a6:	2340      	movs	r3, #64	; 0x40
 80020a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020aa:	2301      	movs	r3, #1
 80020ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b2:	2300      	movs	r3, #0
 80020b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b6:	f107 031c 	add.w	r3, r7, #28
 80020ba:	4619      	mov	r1, r3
 80020bc:	4806      	ldr	r0, [pc, #24]	; (80020d8 <MX_GPIO_Init+0x190>)
 80020be:	f001 fd91 	bl	8003be4 <HAL_GPIO_Init>

}
 80020c2:	bf00      	nop
 80020c4:	3730      	adds	r7, #48	; 0x30
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40021000 	.word	0x40021000
 80020d0:	48001800 	.word	0x48001800
 80020d4:	48001000 	.word	0x48001000
 80020d8:	48000400 	.word	0x48000400

080020dc <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)&ch, 1, 0xFFFF);
 80020e4:	1d39      	adds	r1, r7, #4
 80020e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020ea:	2201      	movs	r2, #1
 80020ec:	4803      	ldr	r0, [pc, #12]	; (80020fc <__io_putchar+0x20>)
 80020ee:	f005 f8b3 	bl	8007258 <HAL_UART_Transmit>
	return ch;
 80020f2:	687b      	ldr	r3, [r7, #4]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20000268 	.word	0x20000268

08002100 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002104:	b672      	cpsid	i
}
 8002106:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002108:	e7fe      	b.n	8002108 <Error_Handler+0x8>
	...

0800210c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002112:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <HAL_MspInit+0x44>)
 8002114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002116:	4a0e      	ldr	r2, [pc, #56]	; (8002150 <HAL_MspInit+0x44>)
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	6613      	str	r3, [r2, #96]	; 0x60
 800211e:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <HAL_MspInit+0x44>)
 8002120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	607b      	str	r3, [r7, #4]
 8002128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <HAL_MspInit+0x44>)
 800212c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212e:	4a08      	ldr	r2, [pc, #32]	; (8002150 <HAL_MspInit+0x44>)
 8002130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002134:	6593      	str	r3, [r2, #88]	; 0x58
 8002136:	4b06      	ldr	r3, [pc, #24]	; (8002150 <HAL_MspInit+0x44>)
 8002138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213e:	603b      	str	r3, [r7, #0]
 8002140:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	40021000 	.word	0x40021000

08002154 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b0ae      	sub	sp, #184	; 0xb8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	60da      	str	r2, [r3, #12]
 800216a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800216c:	f107 0310 	add.w	r3, r7, #16
 8002170:	2294      	movs	r2, #148	; 0x94
 8002172:	2100      	movs	r1, #0
 8002174:	4618      	mov	r0, r3
 8002176:	f005 feed 	bl	8007f54 <memset>
  if(hadc->Instance==ADC1)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a27      	ldr	r2, [pc, #156]	; (800221c <HAL_ADC_MspInit+0xc8>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d146      	bne.n	8002212 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002184:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002188:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800218a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800218e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002192:	2301      	movs	r3, #1
 8002194:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002196:	2301      	movs	r3, #1
 8002198:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800219a:	2310      	movs	r3, #16
 800219c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800219e:	2302      	movs	r3, #2
 80021a0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80021a2:	2302      	movs	r3, #2
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80021a6:	2302      	movs	r3, #2
 80021a8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80021aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021b0:	f107 0310 	add.w	r3, r7, #16
 80021b4:	4618      	mov	r0, r3
 80021b6:	f002 fe83 	bl	8004ec0 <HAL_RCCEx_PeriphCLKConfig>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80021c0:	f7ff ff9e 	bl	8002100 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80021c4:	4b16      	ldr	r3, [pc, #88]	; (8002220 <HAL_ADC_MspInit+0xcc>)
 80021c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c8:	4a15      	ldr	r2, [pc, #84]	; (8002220 <HAL_ADC_MspInit+0xcc>)
 80021ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021d0:	4b13      	ldr	r3, [pc, #76]	; (8002220 <HAL_ADC_MspInit+0xcc>)
 80021d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021dc:	4b10      	ldr	r3, [pc, #64]	; (8002220 <HAL_ADC_MspInit+0xcc>)
 80021de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e0:	4a0f      	ldr	r2, [pc, #60]	; (8002220 <HAL_ADC_MspInit+0xcc>)
 80021e2:	f043 0304 	orr.w	r3, r3, #4
 80021e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021e8:	4b0d      	ldr	r3, [pc, #52]	; (8002220 <HAL_ADC_MspInit+0xcc>)
 80021ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	60bb      	str	r3, [r7, #8]
 80021f2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021f4:	2301      	movs	r3, #1
 80021f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80021fa:	230b      	movs	r3, #11
 80021fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002206:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800220a:	4619      	mov	r1, r3
 800220c:	4805      	ldr	r0, [pc, #20]	; (8002224 <HAL_ADC_MspInit+0xd0>)
 800220e:	f001 fce9 	bl	8003be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002212:	bf00      	nop
 8002214:	37b8      	adds	r7, #184	; 0xb8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	50040000 	.word	0x50040000
 8002220:	40021000 	.word	0x40021000
 8002224:	48000800 	.word	0x48000800

08002228 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b0ae      	sub	sp, #184	; 0xb8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002230:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	605a      	str	r2, [r3, #4]
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	60da      	str	r2, [r3, #12]
 800223e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002240:	f107 0310 	add.w	r3, r7, #16
 8002244:	2294      	movs	r2, #148	; 0x94
 8002246:	2100      	movs	r1, #0
 8002248:	4618      	mov	r0, r3
 800224a:	f005 fe83 	bl	8007f54 <memset>
  if(huart->Instance==LPUART1)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a22      	ldr	r2, [pc, #136]	; (80022dc <HAL_UART_MspInit+0xb4>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d13d      	bne.n	80022d4 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002258:	2320      	movs	r3, #32
 800225a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800225c:	2300      	movs	r3, #0
 800225e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002260:	f107 0310 	add.w	r3, r7, #16
 8002264:	4618      	mov	r0, r3
 8002266:	f002 fe2b 	bl	8004ec0 <HAL_RCCEx_PeriphCLKConfig>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002270:	f7ff ff46 	bl	8002100 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002274:	4b1a      	ldr	r3, [pc, #104]	; (80022e0 <HAL_UART_MspInit+0xb8>)
 8002276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002278:	4a19      	ldr	r2, [pc, #100]	; (80022e0 <HAL_UART_MspInit+0xb8>)
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002280:	4b17      	ldr	r3, [pc, #92]	; (80022e0 <HAL_UART_MspInit+0xb8>)
 8002282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800228c:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <HAL_UART_MspInit+0xb8>)
 800228e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002290:	4a13      	ldr	r2, [pc, #76]	; (80022e0 <HAL_UART_MspInit+0xb8>)
 8002292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002296:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002298:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <HAL_UART_MspInit+0xb8>)
 800229a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a0:	60bb      	str	r3, [r7, #8]
 80022a2:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80022a4:	f001 ff24 	bl	80040f0 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80022a8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80022ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b0:	2302      	movs	r3, #2
 80022b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022bc:	2303      	movs	r3, #3
 80022be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80022c2:	2308      	movs	r3, #8
 80022c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022c8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80022cc:	4619      	mov	r1, r3
 80022ce:	4805      	ldr	r0, [pc, #20]	; (80022e4 <HAL_UART_MspInit+0xbc>)
 80022d0:	f001 fc88 	bl	8003be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80022d4:	bf00      	nop
 80022d6:	37b8      	adds	r7, #184	; 0xb8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40008000 	.word	0x40008000
 80022e0:	40021000 	.word	0x40021000
 80022e4:	48001800 	.word	0x48001800

080022e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08a      	sub	sp, #40	; 0x28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f0:	f107 0314 	add.w	r3, r7, #20
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	60da      	str	r2, [r3, #12]
 80022fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a17      	ldr	r2, [pc, #92]	; (8002364 <HAL_SPI_MspInit+0x7c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d128      	bne.n	800235c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800230a:	4b17      	ldr	r3, [pc, #92]	; (8002368 <HAL_SPI_MspInit+0x80>)
 800230c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800230e:	4a16      	ldr	r2, [pc, #88]	; (8002368 <HAL_SPI_MspInit+0x80>)
 8002310:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002314:	6613      	str	r3, [r2, #96]	; 0x60
 8002316:	4b14      	ldr	r3, [pc, #80]	; (8002368 <HAL_SPI_MspInit+0x80>)
 8002318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800231a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800231e:	613b      	str	r3, [r7, #16]
 8002320:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002322:	4b11      	ldr	r3, [pc, #68]	; (8002368 <HAL_SPI_MspInit+0x80>)
 8002324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002326:	4a10      	ldr	r2, [pc, #64]	; (8002368 <HAL_SPI_MspInit+0x80>)
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800232e:	4b0e      	ldr	r3, [pc, #56]	; (8002368 <HAL_SPI_MspInit+0x80>)
 8002330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800233a:	23e0      	movs	r3, #224	; 0xe0
 800233c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233e:	2302      	movs	r3, #2
 8002340:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002346:	2303      	movs	r3, #3
 8002348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800234a:	2305      	movs	r3, #5
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800234e:	f107 0314 	add.w	r3, r7, #20
 8002352:	4619      	mov	r1, r3
 8002354:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002358:	f001 fc44 	bl	8003be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800235c:	bf00      	nop
 800235e:	3728      	adds	r7, #40	; 0x28
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40013000 	.word	0x40013000
 8002368:	40021000 	.word	0x40021000

0800236c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800236c:	b480      	push	{r7}
 800236e:	b087      	sub	sp, #28
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800237c:	d10c      	bne.n	8002398 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800237e:	4b1b      	ldr	r3, [pc, #108]	; (80023ec <HAL_TIM_Base_MspInit+0x80>)
 8002380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002382:	4a1a      	ldr	r2, [pc, #104]	; (80023ec <HAL_TIM_Base_MspInit+0x80>)
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	6593      	str	r3, [r2, #88]	; 0x58
 800238a:	4b18      	ldr	r3, [pc, #96]	; (80023ec <HAL_TIM_Base_MspInit+0x80>)
 800238c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002396:	e022      	b.n	80023de <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a14      	ldr	r2, [pc, #80]	; (80023f0 <HAL_TIM_Base_MspInit+0x84>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d10c      	bne.n	80023bc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023a2:	4b12      	ldr	r3, [pc, #72]	; (80023ec <HAL_TIM_Base_MspInit+0x80>)
 80023a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a6:	4a11      	ldr	r2, [pc, #68]	; (80023ec <HAL_TIM_Base_MspInit+0x80>)
 80023a8:	f043 0302 	orr.w	r3, r3, #2
 80023ac:	6593      	str	r3, [r2, #88]	; 0x58
 80023ae:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <HAL_TIM_Base_MspInit+0x80>)
 80023b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	613b      	str	r3, [r7, #16]
 80023b8:	693b      	ldr	r3, [r7, #16]
}
 80023ba:	e010      	b.n	80023de <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a0c      	ldr	r2, [pc, #48]	; (80023f4 <HAL_TIM_Base_MspInit+0x88>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d10b      	bne.n	80023de <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023c6:	4b09      	ldr	r3, [pc, #36]	; (80023ec <HAL_TIM_Base_MspInit+0x80>)
 80023c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ca:	4a08      	ldr	r2, [pc, #32]	; (80023ec <HAL_TIM_Base_MspInit+0x80>)
 80023cc:	f043 0304 	orr.w	r3, r3, #4
 80023d0:	6593      	str	r3, [r2, #88]	; 0x58
 80023d2:	4b06      	ldr	r3, [pc, #24]	; (80023ec <HAL_TIM_Base_MspInit+0x80>)
 80023d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d6:	f003 0304 	and.w	r3, r3, #4
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
}
 80023de:	bf00      	nop
 80023e0:	371c      	adds	r7, #28
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40021000 	.word	0x40021000
 80023f0:	40000400 	.word	0x40000400
 80023f4:	40000800 	.word	0x40000800

080023f8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a0a      	ldr	r2, [pc, #40]	; (8002430 <HAL_TIM_PWM_MspInit+0x38>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d10b      	bne.n	8002422 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800240a:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <HAL_TIM_PWM_MspInit+0x3c>)
 800240c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240e:	4a09      	ldr	r2, [pc, #36]	; (8002434 <HAL_TIM_PWM_MspInit+0x3c>)
 8002410:	f043 0308 	orr.w	r3, r3, #8
 8002414:	6593      	str	r3, [r2, #88]	; 0x58
 8002416:	4b07      	ldr	r3, [pc, #28]	; (8002434 <HAL_TIM_PWM_MspInit+0x3c>)
 8002418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002422:	bf00      	nop
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	40000c00 	.word	0x40000c00
 8002434:	40021000 	.word	0x40021000

08002438 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b08c      	sub	sp, #48	; 0x30
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002440:	f107 031c 	add.w	r3, r7, #28
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	60da      	str	r2, [r3, #12]
 800244e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002458:	d11d      	bne.n	8002496 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800245a:	4b44      	ldr	r3, [pc, #272]	; (800256c <HAL_TIM_MspPostInit+0x134>)
 800245c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245e:	4a43      	ldr	r2, [pc, #268]	; (800256c <HAL_TIM_MspPostInit+0x134>)
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002466:	4b41      	ldr	r3, [pc, #260]	; (800256c <HAL_TIM_MspPostInit+0x134>)
 8002468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	61bb      	str	r3, [r7, #24]
 8002470:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002472:	2304      	movs	r3, #4
 8002474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002476:	2302      	movs	r3, #2
 8002478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247a:	2300      	movs	r3, #0
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247e:	2300      	movs	r3, #0
 8002480:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002482:	2301      	movs	r3, #1
 8002484:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002486:	f107 031c 	add.w	r3, r7, #28
 800248a:	4619      	mov	r1, r3
 800248c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002490:	f001 fba8 	bl	8003be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002494:	e066      	b.n	8002564 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM3)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a35      	ldr	r2, [pc, #212]	; (8002570 <HAL_TIM_MspPostInit+0x138>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d11c      	bne.n	80024da <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024a0:	4b32      	ldr	r3, [pc, #200]	; (800256c <HAL_TIM_MspPostInit+0x134>)
 80024a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a4:	4a31      	ldr	r2, [pc, #196]	; (800256c <HAL_TIM_MspPostInit+0x134>)
 80024a6:	f043 0302 	orr.w	r3, r3, #2
 80024aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024ac:	4b2f      	ldr	r3, [pc, #188]	; (800256c <HAL_TIM_MspPostInit+0x134>)
 80024ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	617b      	str	r3, [r7, #20]
 80024b6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80024b8:	2301      	movs	r3, #1
 80024ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024bc:	2302      	movs	r3, #2
 80024be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c4:	2300      	movs	r3, #0
 80024c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80024c8:	2302      	movs	r3, #2
 80024ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024cc:	f107 031c 	add.w	r3, r7, #28
 80024d0:	4619      	mov	r1, r3
 80024d2:	4828      	ldr	r0, [pc, #160]	; (8002574 <HAL_TIM_MspPostInit+0x13c>)
 80024d4:	f001 fb86 	bl	8003be4 <HAL_GPIO_Init>
}
 80024d8:	e044      	b.n	8002564 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM4)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a26      	ldr	r2, [pc, #152]	; (8002578 <HAL_TIM_MspPostInit+0x140>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d11d      	bne.n	8002520 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024e4:	4b21      	ldr	r3, [pc, #132]	; (800256c <HAL_TIM_MspPostInit+0x134>)
 80024e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e8:	4a20      	ldr	r2, [pc, #128]	; (800256c <HAL_TIM_MspPostInit+0x134>)
 80024ea:	f043 0308 	orr.w	r3, r3, #8
 80024ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024f0:	4b1e      	ldr	r3, [pc, #120]	; (800256c <HAL_TIM_MspPostInit+0x134>)
 80024f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f4:	f003 0308 	and.w	r3, r3, #8
 80024f8:	613b      	str	r3, [r7, #16]
 80024fa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80024fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002502:	2302      	movs	r3, #2
 8002504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002506:	2300      	movs	r3, #0
 8002508:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250a:	2300      	movs	r3, #0
 800250c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800250e:	2302      	movs	r3, #2
 8002510:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002512:	f107 031c 	add.w	r3, r7, #28
 8002516:	4619      	mov	r1, r3
 8002518:	4818      	ldr	r0, [pc, #96]	; (800257c <HAL_TIM_MspPostInit+0x144>)
 800251a:	f001 fb63 	bl	8003be4 <HAL_GPIO_Init>
}
 800251e:	e021      	b.n	8002564 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM5)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a16      	ldr	r2, [pc, #88]	; (8002580 <HAL_TIM_MspPostInit+0x148>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d11c      	bne.n	8002564 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800252a:	4b10      	ldr	r3, [pc, #64]	; (800256c <HAL_TIM_MspPostInit+0x134>)
 800252c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800252e:	4a0f      	ldr	r2, [pc, #60]	; (800256c <HAL_TIM_MspPostInit+0x134>)
 8002530:	f043 0320 	orr.w	r3, r3, #32
 8002534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002536:	4b0d      	ldr	r3, [pc, #52]	; (800256c <HAL_TIM_MspPostInit+0x134>)
 8002538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800253a:	f003 0320 	and.w	r3, r3, #32
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002542:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002548:	2302      	movs	r3, #2
 800254a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254c:	2300      	movs	r3, #0
 800254e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002550:	2300      	movs	r3, #0
 8002552:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002554:	2302      	movs	r3, #2
 8002556:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002558:	f107 031c 	add.w	r3, r7, #28
 800255c:	4619      	mov	r1, r3
 800255e:	4809      	ldr	r0, [pc, #36]	; (8002584 <HAL_TIM_MspPostInit+0x14c>)
 8002560:	f001 fb40 	bl	8003be4 <HAL_GPIO_Init>
}
 8002564:	bf00      	nop
 8002566:	3730      	adds	r7, #48	; 0x30
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40021000 	.word	0x40021000
 8002570:	40000400 	.word	0x40000400
 8002574:	48000400 	.word	0x48000400
 8002578:	40000800 	.word	0x40000800
 800257c:	48000c00 	.word	0x48000c00
 8002580:	40000c00 	.word	0x40000c00
 8002584:	48001400 	.word	0x48001400

08002588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800258c:	e7fe      	b.n	800258c <NMI_Handler+0x4>

0800258e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800258e:	b480      	push	{r7}
 8002590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002592:	e7fe      	b.n	8002592 <HardFault_Handler+0x4>

08002594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002598:	e7fe      	b.n	8002598 <MemManage_Handler+0x4>

0800259a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800259a:	b480      	push	{r7}
 800259c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800259e:	e7fe      	b.n	800259e <BusFault_Handler+0x4>

080025a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025a4:	e7fe      	b.n	80025a4 <UsageFault_Handler+0x4>

080025a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025a6:	b480      	push	{r7}
 80025a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025b8:	bf00      	nop
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025c2:	b480      	push	{r7}
 80025c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025d4:	f000 f958 	bl	8002888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025d8:	bf00      	nop
 80025da:	bd80      	pop	{r7, pc}

080025dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
	return 1;
 80025e0:	2301      	movs	r3, #1
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <_kill>:

int _kill(int pid, int sig)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80025f6:	f005 fc7b 	bl	8007ef0 <__errno>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2216      	movs	r2, #22
 80025fe:	601a      	str	r2, [r3, #0]
	return -1;
 8002600:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002604:	4618      	mov	r0, r3
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <_exit>:

void _exit (int status)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002614:	f04f 31ff 	mov.w	r1, #4294967295
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f7ff ffe7 	bl	80025ec <_kill>
	while (1) {}		/* Make sure we hang here */
 800261e:	e7fe      	b.n	800261e <_exit+0x12>

08002620 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	e00a      	b.n	8002648 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002632:	f3af 8000 	nop.w
 8002636:	4601      	mov	r1, r0
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	1c5a      	adds	r2, r3, #1
 800263c:	60ba      	str	r2, [r7, #8]
 800263e:	b2ca      	uxtb	r2, r1
 8002640:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	3301      	adds	r3, #1
 8002646:	617b      	str	r3, [r7, #20]
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	429a      	cmp	r2, r3
 800264e:	dbf0      	blt.n	8002632 <_read+0x12>
	}

return len;
 8002650:	687b      	ldr	r3, [r7, #4]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b086      	sub	sp, #24
 800265e:	af00      	add	r7, sp, #0
 8002660:	60f8      	str	r0, [r7, #12]
 8002662:	60b9      	str	r1, [r7, #8]
 8002664:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002666:	2300      	movs	r3, #0
 8002668:	617b      	str	r3, [r7, #20]
 800266a:	e009      	b.n	8002680 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	1c5a      	adds	r2, r3, #1
 8002670:	60ba      	str	r2, [r7, #8]
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff fd31 	bl	80020dc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	3301      	adds	r3, #1
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	429a      	cmp	r2, r3
 8002686:	dbf1      	blt.n	800266c <_write+0x12>
	}
	return len;
 8002688:	687b      	ldr	r3, [r7, #4]
}
 800268a:	4618      	mov	r0, r3
 800268c:	3718      	adds	r7, #24
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <_close>:

int _close(int file)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
	return -1;
 800269a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800269e:	4618      	mov	r0, r3
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
 80026b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026ba:	605a      	str	r2, [r3, #4]
	return 0;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <_isatty>:

int _isatty(int file)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
	return 1;
 80026d2:	2301      	movs	r3, #1
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
	return 0;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
	...

080026fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002704:	4a14      	ldr	r2, [pc, #80]	; (8002758 <_sbrk+0x5c>)
 8002706:	4b15      	ldr	r3, [pc, #84]	; (800275c <_sbrk+0x60>)
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002710:	4b13      	ldr	r3, [pc, #76]	; (8002760 <_sbrk+0x64>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d102      	bne.n	800271e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002718:	4b11      	ldr	r3, [pc, #68]	; (8002760 <_sbrk+0x64>)
 800271a:	4a12      	ldr	r2, [pc, #72]	; (8002764 <_sbrk+0x68>)
 800271c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800271e:	4b10      	ldr	r3, [pc, #64]	; (8002760 <_sbrk+0x64>)
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4413      	add	r3, r2
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	429a      	cmp	r2, r3
 800272a:	d207      	bcs.n	800273c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800272c:	f005 fbe0 	bl	8007ef0 <__errno>
 8002730:	4603      	mov	r3, r0
 8002732:	220c      	movs	r2, #12
 8002734:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002736:	f04f 33ff 	mov.w	r3, #4294967295
 800273a:	e009      	b.n	8002750 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800273c:	4b08      	ldr	r3, [pc, #32]	; (8002760 <_sbrk+0x64>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002742:	4b07      	ldr	r3, [pc, #28]	; (8002760 <_sbrk+0x64>)
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4413      	add	r3, r2
 800274a:	4a05      	ldr	r2, [pc, #20]	; (8002760 <_sbrk+0x64>)
 800274c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800274e:	68fb      	ldr	r3, [r7, #12]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	200a0000 	.word	0x200a0000
 800275c:	00000400 	.word	0x00000400
 8002760:	200004b8 	.word	0x200004b8
 8002764:	200004d0 	.word	0x200004d0

08002768 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800276c:	4b06      	ldr	r3, [pc, #24]	; (8002788 <SystemInit+0x20>)
 800276e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002772:	4a05      	ldr	r2, [pc, #20]	; (8002788 <SystemInit+0x20>)
 8002774:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002778:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800277c:	bf00      	nop
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	e000ed00 	.word	0xe000ed00

0800278c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800278c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002790:	f7ff ffea 	bl	8002768 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002794:	480c      	ldr	r0, [pc, #48]	; (80027c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002796:	490d      	ldr	r1, [pc, #52]	; (80027cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002798:	4a0d      	ldr	r2, [pc, #52]	; (80027d0 <LoopForever+0xe>)
  movs r3, #0
 800279a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800279c:	e002      	b.n	80027a4 <LoopCopyDataInit>

0800279e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800279e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027a2:	3304      	adds	r3, #4

080027a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027a8:	d3f9      	bcc.n	800279e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027aa:	4a0a      	ldr	r2, [pc, #40]	; (80027d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027ac:	4c0a      	ldr	r4, [pc, #40]	; (80027d8 <LoopForever+0x16>)
  movs r3, #0
 80027ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027b0:	e001      	b.n	80027b6 <LoopFillZerobss>

080027b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027b4:	3204      	adds	r2, #4

080027b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027b8:	d3fb      	bcc.n	80027b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027ba:	f005 fb9f 	bl	8007efc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027be:	f7ff f889 	bl	80018d4 <main>

080027c2 <LoopForever>:

LoopForever:
    b LoopForever
 80027c2:	e7fe      	b.n	80027c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80027c4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80027c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027cc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80027d0:	0800b780 	.word	0x0800b780
  ldr r2, =_sbss
 80027d4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80027d8:	200004d0 	.word	0x200004d0

080027dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027dc:	e7fe      	b.n	80027dc <ADC1_IRQHandler>

080027de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b082      	sub	sp, #8
 80027e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027e4:	2300      	movs	r3, #0
 80027e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027e8:	2003      	movs	r0, #3
 80027ea:	f001 f9c7 	bl	8003b7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027ee:	200f      	movs	r0, #15
 80027f0:	f000 f80e 	bl	8002810 <HAL_InitTick>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d002      	beq.n	8002800 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	71fb      	strb	r3, [r7, #7]
 80027fe:	e001      	b.n	8002804 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002800:	f7ff fc84 	bl	800210c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002804:	79fb      	ldrb	r3, [r7, #7]
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002818:	2300      	movs	r3, #0
 800281a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800281c:	4b17      	ldr	r3, [pc, #92]	; (800287c <HAL_InitTick+0x6c>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d023      	beq.n	800286c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002824:	4b16      	ldr	r3, [pc, #88]	; (8002880 <HAL_InitTick+0x70>)
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	4b14      	ldr	r3, [pc, #80]	; (800287c <HAL_InitTick+0x6c>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	4619      	mov	r1, r3
 800282e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002832:	fbb3 f3f1 	udiv	r3, r3, r1
 8002836:	fbb2 f3f3 	udiv	r3, r2, r3
 800283a:	4618      	mov	r0, r3
 800283c:	f001 f9c5 	bl	8003bca <HAL_SYSTICK_Config>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10f      	bne.n	8002866 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b0f      	cmp	r3, #15
 800284a:	d809      	bhi.n	8002860 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800284c:	2200      	movs	r2, #0
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	f04f 30ff 	mov.w	r0, #4294967295
 8002854:	f001 f99d 	bl	8003b92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002858:	4a0a      	ldr	r2, [pc, #40]	; (8002884 <HAL_InitTick+0x74>)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	e007      	b.n	8002870 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	73fb      	strb	r3, [r7, #15]
 8002864:	e004      	b.n	8002870 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	73fb      	strb	r3, [r7, #15]
 800286a:	e001      	b.n	8002870 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002870:	7bfb      	ldrb	r3, [r7, #15]
}
 8002872:	4618      	mov	r0, r3
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	20000010 	.word	0x20000010
 8002880:	20000008 	.word	0x20000008
 8002884:	2000000c 	.word	0x2000000c

08002888 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800288c:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <HAL_IncTick+0x20>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	461a      	mov	r2, r3
 8002892:	4b06      	ldr	r3, [pc, #24]	; (80028ac <HAL_IncTick+0x24>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4413      	add	r3, r2
 8002898:	4a04      	ldr	r2, [pc, #16]	; (80028ac <HAL_IncTick+0x24>)
 800289a:	6013      	str	r3, [r2, #0]
}
 800289c:	bf00      	nop
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	20000010 	.word	0x20000010
 80028ac:	200004bc 	.word	0x200004bc

080028b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  return uwTick;
 80028b4:	4b03      	ldr	r3, [pc, #12]	; (80028c4 <HAL_GetTick+0x14>)
 80028b6:	681b      	ldr	r3, [r3, #0]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	200004bc 	.word	0x200004bc

080028c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	431a      	orrs	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	609a      	str	r2, [r3, #8]
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
 80028f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	431a      	orrs	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	609a      	str	r2, [r3, #8]
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002924:	4618      	mov	r0, r3
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002930:	b480      	push	{r7}
 8002932:	b087      	sub	sp, #28
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
 800293c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	3360      	adds	r3, #96	; 0x60
 8002942:	461a      	mov	r2, r3
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	4b08      	ldr	r3, [pc, #32]	; (8002974 <LL_ADC_SetOffset+0x44>)
 8002952:	4013      	ands	r3, r2
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	430a      	orrs	r2, r1
 800295e:	4313      	orrs	r3, r2
 8002960:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002968:	bf00      	nop
 800296a:	371c      	adds	r7, #28
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	03fff000 	.word	0x03fff000

08002978 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3360      	adds	r3, #96	; 0x60
 8002986:	461a      	mov	r2, r3
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002998:	4618      	mov	r0, r3
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b087      	sub	sp, #28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	3360      	adds	r3, #96	; 0x60
 80029b4:	461a      	mov	r2, r3
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	431a      	orrs	r2, r3
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80029ce:	bf00      	nop
 80029d0:	371c      	adds	r7, #28
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
 80029e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	615a      	str	r2, [r3, #20]
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002a14:	2301      	movs	r3, #1
 8002a16:	e000      	b.n	8002a1a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b087      	sub	sp, #28
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	60f8      	str	r0, [r7, #12]
 8002a2e:	60b9      	str	r1, [r7, #8]
 8002a30:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	3330      	adds	r3, #48	; 0x30
 8002a36:	461a      	mov	r2, r3
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	0a1b      	lsrs	r3, r3, #8
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	f003 030c 	and.w	r3, r3, #12
 8002a42:	4413      	add	r3, r2
 8002a44:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	f003 031f 	and.w	r3, r3, #31
 8002a50:	211f      	movs	r1, #31
 8002a52:	fa01 f303 	lsl.w	r3, r1, r3
 8002a56:	43db      	mvns	r3, r3
 8002a58:	401a      	ands	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	0e9b      	lsrs	r3, r3, #26
 8002a5e:	f003 011f 	and.w	r1, r3, #31
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	f003 031f 	and.w	r3, r3, #31
 8002a68:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a72:	bf00      	nop
 8002a74:	371c      	adds	r7, #28
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b087      	sub	sp, #28
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	60f8      	str	r0, [r7, #12]
 8002a86:	60b9      	str	r1, [r7, #8]
 8002a88:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	3314      	adds	r3, #20
 8002a8e:	461a      	mov	r2, r3
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	0e5b      	lsrs	r3, r3, #25
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	f003 0304 	and.w	r3, r3, #4
 8002a9a:	4413      	add	r3, r2
 8002a9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	0d1b      	lsrs	r3, r3, #20
 8002aa6:	f003 031f 	and.w	r3, r3, #31
 8002aaa:	2107      	movs	r1, #7
 8002aac:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	401a      	ands	r2, r3
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	0d1b      	lsrs	r3, r3, #20
 8002ab8:	f003 031f 	and.w	r3, r3, #31
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ac8:	bf00      	nop
 8002aca:	371c      	adds	r7, #28
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aec:	43db      	mvns	r3, r3
 8002aee:	401a      	ands	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f003 0318 	and.w	r3, r3, #24
 8002af6:	4908      	ldr	r1, [pc, #32]	; (8002b18 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002af8:	40d9      	lsrs	r1, r3
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	400b      	ands	r3, r1
 8002afe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b02:	431a      	orrs	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002b0a:	bf00      	nop
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	0007ffff 	.word	0x0007ffff

08002b1c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002b2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	6093      	str	r3, [r2, #8]
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b54:	d101      	bne.n	8002b5a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002b78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b7c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ba4:	d101      	bne.n	8002baa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002bc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bcc:	f043 0201 	orr.w	r2, r3, #1
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d101      	bne.n	8002bf8 <LL_ADC_IsEnabled+0x18>
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e000      	b.n	8002bfa <LL_ADC_IsEnabled+0x1a>
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c16:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c1a:	f043 0204 	orr.w	r2, r3, #4
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 0304 	and.w	r3, r3, #4
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d101      	bne.n	8002c46 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 0308 	and.w	r3, r3, #8
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d101      	bne.n	8002c6c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e000      	b.n	8002c6e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
	...

08002c7c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b088      	sub	sp, #32
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c84:	2300      	movs	r3, #0
 8002c86:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e12f      	b.n	8002ef6 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d109      	bne.n	8002cb8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f7ff fa55 	bl	8002154 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff ff3f 	bl	8002b40 <LL_ADC_IsDeepPowerDownEnabled>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d004      	beq.n	8002cd2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff ff25 	bl	8002b1c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff ff5a 	bl	8002b90 <LL_ADC_IsInternalRegulatorEnabled>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d115      	bne.n	8002d0e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7ff ff3e 	bl	8002b68 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cec:	4b84      	ldr	r3, [pc, #528]	; (8002f00 <HAL_ADC_Init+0x284>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	099b      	lsrs	r3, r3, #6
 8002cf2:	4a84      	ldr	r2, [pc, #528]	; (8002f04 <HAL_ADC_Init+0x288>)
 8002cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf8:	099b      	lsrs	r3, r3, #6
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d00:	e002      	b.n	8002d08 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	3b01      	subs	r3, #1
 8002d06:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f9      	bne.n	8002d02 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff ff3c 	bl	8002b90 <LL_ADC_IsInternalRegulatorEnabled>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10d      	bne.n	8002d3a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d22:	f043 0210 	orr.w	r2, r3, #16
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2e:	f043 0201 	orr.w	r2, r3, #1
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff ff75 	bl	8002c2e <LL_ADC_REG_IsConversionOngoing>
 8002d44:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d4a:	f003 0310 	and.w	r3, r3, #16
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f040 80c8 	bne.w	8002ee4 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f040 80c4 	bne.w	8002ee4 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d60:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d64:	f043 0202 	orr.w	r2, r3, #2
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff ff35 	bl	8002be0 <LL_ADC_IsEnabled>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10b      	bne.n	8002d94 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d7c:	4862      	ldr	r0, [pc, #392]	; (8002f08 <HAL_ADC_Init+0x28c>)
 8002d7e:	f7ff ff2f 	bl	8002be0 <LL_ADC_IsEnabled>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d105      	bne.n	8002d94 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	485f      	ldr	r0, [pc, #380]	; (8002f0c <HAL_ADC_Init+0x290>)
 8002d90:	f7ff fd9a 	bl	80028c8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	7e5b      	ldrb	r3, [r3, #25]
 8002d98:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d9e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002da4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002daa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002db2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d106      	bne.n	8002dd0 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	045b      	lsls	r3, r3, #17
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d009      	beq.n	8002dec <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ddc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68da      	ldr	r2, [r3, #12]
 8002df2:	4b47      	ldr	r3, [pc, #284]	; (8002f10 <HAL_ADC_Init+0x294>)
 8002df4:	4013      	ands	r3, r2
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	6812      	ldr	r2, [r2, #0]
 8002dfa:	69b9      	ldr	r1, [r7, #24]
 8002dfc:	430b      	orrs	r3, r1
 8002dfe:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff ff12 	bl	8002c2e <LL_ADC_REG_IsConversionOngoing>
 8002e0a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff ff1f 	bl	8002c54 <LL_ADC_INJ_IsConversionOngoing>
 8002e16:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d140      	bne.n	8002ea0 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d13d      	bne.n	8002ea0 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	7e1b      	ldrb	r3, [r3, #24]
 8002e2c:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e2e:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e36:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e46:	f023 0306 	bic.w	r3, r3, #6
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6812      	ldr	r2, [r2, #0]
 8002e4e:	69b9      	ldr	r1, [r7, #24]
 8002e50:	430b      	orrs	r3, r1
 8002e52:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d118      	bne.n	8002e90 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002e68:	f023 0304 	bic.w	r3, r3, #4
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e74:	4311      	orrs	r1, r2
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002e7a:	4311      	orrs	r1, r2
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e80:	430a      	orrs	r2, r1
 8002e82:	431a      	orrs	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f042 0201 	orr.w	r2, r2, #1
 8002e8c:	611a      	str	r2, [r3, #16]
 8002e8e:	e007      	b.n	8002ea0 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	691a      	ldr	r2, [r3, #16]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0201 	bic.w	r2, r2, #1
 8002e9e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d10c      	bne.n	8002ec2 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	f023 010f 	bic.w	r1, r3, #15
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	1e5a      	subs	r2, r3, #1
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	631a      	str	r2, [r3, #48]	; 0x30
 8002ec0:	e007      	b.n	8002ed2 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 020f 	bic.w	r2, r2, #15
 8002ed0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed6:	f023 0303 	bic.w	r3, r3, #3
 8002eda:	f043 0201 	orr.w	r2, r3, #1
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	659a      	str	r2, [r3, #88]	; 0x58
 8002ee2:	e007      	b.n	8002ef4 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee8:	f043 0210 	orr.w	r2, r3, #16
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ef4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3720      	adds	r7, #32
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	20000008 	.word	0x20000008
 8002f04:	053e2d63 	.word	0x053e2d63
 8002f08:	50040000 	.word	0x50040000
 8002f0c:	50040300 	.word	0x50040300
 8002f10:	fff0c007 	.word	0xfff0c007

08002f14 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff fe84 	bl	8002c2e <LL_ADC_REG_IsConversionOngoing>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d14f      	bne.n	8002fcc <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d101      	bne.n	8002f3a <HAL_ADC_Start+0x26>
 8002f36:	2302      	movs	r3, #2
 8002f38:	e04b      	b.n	8002fd2 <HAL_ADC_Start+0xbe>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 fce2 	bl	800390c <ADC_Enable>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002f4c:	7bfb      	ldrb	r3, [r7, #15]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d137      	bne.n	8002fc2 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f56:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f5a:	f023 0301 	bic.w	r3, r3, #1
 8002f5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f72:	d106      	bne.n	8002f82 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f78:	f023 0206 	bic.w	r2, r3, #6
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f80:	e002      	b.n	8002f88 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	221c      	movs	r2, #28
 8002f8e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d007      	beq.n	8002fb6 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002faa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff fe23 	bl	8002c06 <LL_ADC_REG_StartConversion>
 8002fc0:	e006      	b.n	8002fd0 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002fca:	e001      	b.n	8002fd0 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002fcc:	2302      	movs	r3, #2
 8002fce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b086      	sub	sp, #24
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	d102      	bne.n	8002ff2 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002fec:	2308      	movs	r3, #8
 8002fee:	617b      	str	r3, [r7, #20]
 8002ff0:	e010      	b.n	8003014 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d007      	beq.n	8003010 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003004:	f043 0220 	orr.w	r2, r3, #32
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e06f      	b.n	80030f0 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8003010:	2304      	movs	r3, #4
 8003012:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003014:	f7ff fc4c 	bl	80028b0 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800301a:	e021      	b.n	8003060 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003022:	d01d      	beq.n	8003060 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003024:	f7ff fc44 	bl	80028b0 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	429a      	cmp	r2, r3
 8003032:	d302      	bcc.n	800303a <HAL_ADC_PollForConversion+0x60>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d112      	bne.n	8003060 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	4013      	ands	r3, r2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10b      	bne.n	8003060 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304c:	f043 0204 	orr.w	r2, r3, #4
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e047      	b.n	80030f0 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	4013      	ands	r3, r2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d0d6      	beq.n	800301c <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003072:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff fcbe 	bl	8002a00 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d01c      	beq.n	80030c4 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	7e5b      	ldrb	r3, [r3, #25]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d118      	bne.n	80030c4 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0308 	and.w	r3, r3, #8
 800309c:	2b08      	cmp	r3, #8
 800309e:	d111      	bne.n	80030c4 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d105      	bne.n	80030c4 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030bc:	f043 0201 	orr.w	r2, r3, #1
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	2b08      	cmp	r3, #8
 80030d0:	d104      	bne.n	80030dc <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2208      	movs	r2, #8
 80030d8:	601a      	str	r2, [r3, #0]
 80030da:	e008      	b.n	80030ee <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d103      	bne.n	80030ee <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	220c      	movs	r2, #12
 80030ec:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3718      	adds	r7, #24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003106:	4618      	mov	r0, r3
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
	...

08003114 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b0b6      	sub	sp, #216	; 0xd8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800311e:	2300      	movs	r3, #0
 8003120:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003124:	2300      	movs	r3, #0
 8003126:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800312e:	2b01      	cmp	r3, #1
 8003130:	d101      	bne.n	8003136 <HAL_ADC_ConfigChannel+0x22>
 8003132:	2302      	movs	r3, #2
 8003134:	e3d5      	b.n	80038e2 <HAL_ADC_ConfigChannel+0x7ce>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff fd73 	bl	8002c2e <LL_ADC_REG_IsConversionOngoing>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	f040 83ba 	bne.w	80038c4 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2b05      	cmp	r3, #5
 8003156:	d824      	bhi.n	80031a2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	3b02      	subs	r3, #2
 800315e:	2b03      	cmp	r3, #3
 8003160:	d81b      	bhi.n	800319a <HAL_ADC_ConfigChannel+0x86>
 8003162:	a201      	add	r2, pc, #4	; (adr r2, 8003168 <HAL_ADC_ConfigChannel+0x54>)
 8003164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003168:	08003179 	.word	0x08003179
 800316c:	08003181 	.word	0x08003181
 8003170:	08003189 	.word	0x08003189
 8003174:	08003191 	.word	0x08003191
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	220c      	movs	r2, #12
 800317c:	605a      	str	r2, [r3, #4]
          break;
 800317e:	e011      	b.n	80031a4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	2212      	movs	r2, #18
 8003184:	605a      	str	r2, [r3, #4]
          break;
 8003186:	e00d      	b.n	80031a4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	2218      	movs	r2, #24
 800318c:	605a      	str	r2, [r3, #4]
          break;
 800318e:	e009      	b.n	80031a4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003196:	605a      	str	r2, [r3, #4]
          break;
 8003198:	e004      	b.n	80031a4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	2206      	movs	r2, #6
 800319e:	605a      	str	r2, [r3, #4]
          break;
 80031a0:	e000      	b.n	80031a4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80031a2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6818      	ldr	r0, [r3, #0]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	6859      	ldr	r1, [r3, #4]
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	461a      	mov	r2, r3
 80031b2:	f7ff fc38 	bl	8002a26 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff fd37 	bl	8002c2e <LL_ADC_REG_IsConversionOngoing>
 80031c0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff fd43 	bl	8002c54 <LL_ADC_INJ_IsConversionOngoing>
 80031ce:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80031d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f040 81c1 	bne.w	800355e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80031dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f040 81bc 	bne.w	800355e <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031ee:	d10f      	bne.n	8003210 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6818      	ldr	r0, [r3, #0]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2200      	movs	r2, #0
 80031fa:	4619      	mov	r1, r3
 80031fc:	f7ff fc3f 	bl	8002a7e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff fbe6 	bl	80029da <LL_ADC_SetSamplingTimeCommonConfig>
 800320e:	e00e      	b.n	800322e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6818      	ldr	r0, [r3, #0]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	6819      	ldr	r1, [r3, #0]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	461a      	mov	r2, r3
 800321e:	f7ff fc2e 	bl	8002a7e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2100      	movs	r1, #0
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff fbd6 	bl	80029da <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	695a      	ldr	r2, [r3, #20]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	08db      	lsrs	r3, r3, #3
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	2b04      	cmp	r3, #4
 800324e:	d00a      	beq.n	8003266 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6818      	ldr	r0, [r3, #0]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	6919      	ldr	r1, [r3, #16]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003260:	f7ff fb66 	bl	8002930 <LL_ADC_SetOffset>
 8003264:	e17b      	b.n	800355e <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2100      	movs	r1, #0
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff fb83 	bl	8002978 <LL_ADC_GetOffsetChannel>
 8003272:	4603      	mov	r3, r0
 8003274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003278:	2b00      	cmp	r3, #0
 800327a:	d10a      	bne.n	8003292 <HAL_ADC_ConfigChannel+0x17e>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2100      	movs	r1, #0
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff fb78 	bl	8002978 <LL_ADC_GetOffsetChannel>
 8003288:	4603      	mov	r3, r0
 800328a:	0e9b      	lsrs	r3, r3, #26
 800328c:	f003 021f 	and.w	r2, r3, #31
 8003290:	e01e      	b.n	80032d0 <HAL_ADC_ConfigChannel+0x1bc>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2100      	movs	r1, #0
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff fb6d 	bl	8002978 <LL_ADC_GetOffsetChannel>
 800329e:	4603      	mov	r3, r0
 80032a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80032a8:	fa93 f3a3 	rbit	r3, r3
 80032ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80032b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80032b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d101      	bne.n	80032c4 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80032c0:	2320      	movs	r3, #32
 80032c2:	e004      	b.n	80032ce <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80032c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032c8:	fab3 f383 	clz	r3, r3
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d105      	bne.n	80032e8 <HAL_ADC_ConfigChannel+0x1d4>
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	0e9b      	lsrs	r3, r3, #26
 80032e2:	f003 031f 	and.w	r3, r3, #31
 80032e6:	e018      	b.n	800331a <HAL_ADC_ConfigChannel+0x206>
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80032f4:	fa93 f3a3 	rbit	r3, r3
 80032f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80032fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003300:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003304:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 800330c:	2320      	movs	r3, #32
 800330e:	e004      	b.n	800331a <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8003310:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003314:	fab3 f383 	clz	r3, r3
 8003318:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800331a:	429a      	cmp	r2, r3
 800331c:	d106      	bne.n	800332c <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2200      	movs	r2, #0
 8003324:	2100      	movs	r1, #0
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff fb3c 	bl	80029a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2101      	movs	r1, #1
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff fb20 	bl	8002978 <LL_ADC_GetOffsetChannel>
 8003338:	4603      	mov	r3, r0
 800333a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10a      	bne.n	8003358 <HAL_ADC_ConfigChannel+0x244>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2101      	movs	r1, #1
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff fb15 	bl	8002978 <LL_ADC_GetOffsetChannel>
 800334e:	4603      	mov	r3, r0
 8003350:	0e9b      	lsrs	r3, r3, #26
 8003352:	f003 021f 	and.w	r2, r3, #31
 8003356:	e01e      	b.n	8003396 <HAL_ADC_ConfigChannel+0x282>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2101      	movs	r1, #1
 800335e:	4618      	mov	r0, r3
 8003360:	f7ff fb0a 	bl	8002978 <LL_ADC_GetOffsetChannel>
 8003364:	4603      	mov	r3, r0
 8003366:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800336e:	fa93 f3a3 	rbit	r3, r3
 8003372:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003376:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800337a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800337e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8003386:	2320      	movs	r3, #32
 8003388:	e004      	b.n	8003394 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800338a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800338e:	fab3 f383 	clz	r3, r3
 8003392:	b2db      	uxtb	r3, r3
 8003394:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d105      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x29a>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	0e9b      	lsrs	r3, r3, #26
 80033a8:	f003 031f 	and.w	r3, r3, #31
 80033ac:	e018      	b.n	80033e0 <HAL_ADC_ConfigChannel+0x2cc>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80033ba:	fa93 f3a3 	rbit	r3, r3
 80033be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80033c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80033c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80033ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80033d2:	2320      	movs	r3, #32
 80033d4:	e004      	b.n	80033e0 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80033d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033da:	fab3 f383 	clz	r3, r3
 80033de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d106      	bne.n	80033f2 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2200      	movs	r2, #0
 80033ea:	2101      	movs	r1, #1
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff fad9 	bl	80029a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2102      	movs	r1, #2
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff fabd 	bl	8002978 <LL_ADC_GetOffsetChannel>
 80033fe:	4603      	mov	r3, r0
 8003400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10a      	bne.n	800341e <HAL_ADC_ConfigChannel+0x30a>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2102      	movs	r1, #2
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff fab2 	bl	8002978 <LL_ADC_GetOffsetChannel>
 8003414:	4603      	mov	r3, r0
 8003416:	0e9b      	lsrs	r3, r3, #26
 8003418:	f003 021f 	and.w	r2, r3, #31
 800341c:	e01e      	b.n	800345c <HAL_ADC_ConfigChannel+0x348>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2102      	movs	r1, #2
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff faa7 	bl	8002978 <LL_ADC_GetOffsetChannel>
 800342a:	4603      	mov	r3, r0
 800342c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003430:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003434:	fa93 f3a3 	rbit	r3, r3
 8003438:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800343c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003440:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003444:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 800344c:	2320      	movs	r3, #32
 800344e:	e004      	b.n	800345a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8003450:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003454:	fab3 f383 	clz	r3, r3
 8003458:	b2db      	uxtb	r3, r3
 800345a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003464:	2b00      	cmp	r3, #0
 8003466:	d105      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x360>
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	0e9b      	lsrs	r3, r3, #26
 800346e:	f003 031f 	and.w	r3, r3, #31
 8003472:	e016      	b.n	80034a2 <HAL_ADC_ConfigChannel+0x38e>
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003480:	fa93 f3a3 	rbit	r3, r3
 8003484:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003486:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003488:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800348c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8003494:	2320      	movs	r3, #32
 8003496:	e004      	b.n	80034a2 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003498:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800349c:	fab3 f383 	clz	r3, r3
 80034a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d106      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2200      	movs	r2, #0
 80034ac:	2102      	movs	r1, #2
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff fa78 	bl	80029a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2103      	movs	r1, #3
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff fa5c 	bl	8002978 <LL_ADC_GetOffsetChannel>
 80034c0:	4603      	mov	r3, r0
 80034c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10a      	bne.n	80034e0 <HAL_ADC_ConfigChannel+0x3cc>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2103      	movs	r1, #3
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff fa51 	bl	8002978 <LL_ADC_GetOffsetChannel>
 80034d6:	4603      	mov	r3, r0
 80034d8:	0e9b      	lsrs	r3, r3, #26
 80034da:	f003 021f 	and.w	r2, r3, #31
 80034de:	e017      	b.n	8003510 <HAL_ADC_ConfigChannel+0x3fc>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2103      	movs	r1, #3
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7ff fa46 	bl	8002978 <LL_ADC_GetOffsetChannel>
 80034ec:	4603      	mov	r3, r0
 80034ee:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034f2:	fa93 f3a3 	rbit	r3, r3
 80034f6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80034f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034fa:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80034fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003502:	2320      	movs	r3, #32
 8003504:	e003      	b.n	800350e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003506:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003508:	fab3 f383 	clz	r3, r3
 800350c:	b2db      	uxtb	r3, r3
 800350e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003518:	2b00      	cmp	r3, #0
 800351a:	d105      	bne.n	8003528 <HAL_ADC_ConfigChannel+0x414>
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	0e9b      	lsrs	r3, r3, #26
 8003522:	f003 031f 	and.w	r3, r3, #31
 8003526:	e011      	b.n	800354c <HAL_ADC_ConfigChannel+0x438>
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003530:	fa93 f3a3 	rbit	r3, r3
 8003534:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003536:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003538:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800353a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003540:	2320      	movs	r3, #32
 8003542:	e003      	b.n	800354c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003546:	fab3 f383 	clz	r3, r3
 800354a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800354c:	429a      	cmp	r2, r3
 800354e:	d106      	bne.n	800355e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2200      	movs	r2, #0
 8003556:	2103      	movs	r1, #3
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff fa23 	bl	80029a4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff fb3c 	bl	8002be0 <LL_ADC_IsEnabled>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	f040 8140 	bne.w	80037f0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6818      	ldr	r0, [r3, #0]
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	6819      	ldr	r1, [r3, #0]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	461a      	mov	r2, r3
 800357e:	f7ff faa9 	bl	8002ad4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	4a8f      	ldr	r2, [pc, #572]	; (80037c4 <HAL_ADC_ConfigChannel+0x6b0>)
 8003588:	4293      	cmp	r3, r2
 800358a:	f040 8131 	bne.w	80037f0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10b      	bne.n	80035b6 <HAL_ADC_ConfigChannel+0x4a2>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	0e9b      	lsrs	r3, r3, #26
 80035a4:	3301      	adds	r3, #1
 80035a6:	f003 031f 	and.w	r3, r3, #31
 80035aa:	2b09      	cmp	r3, #9
 80035ac:	bf94      	ite	ls
 80035ae:	2301      	movls	r3, #1
 80035b0:	2300      	movhi	r3, #0
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	e019      	b.n	80035ea <HAL_ADC_ConfigChannel+0x4d6>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035be:	fa93 f3a3 	rbit	r3, r3
 80035c2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80035c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035c6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80035c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80035ce:	2320      	movs	r3, #32
 80035d0:	e003      	b.n	80035da <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80035d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035d4:	fab3 f383 	clz	r3, r3
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	3301      	adds	r3, #1
 80035dc:	f003 031f 	and.w	r3, r3, #31
 80035e0:	2b09      	cmp	r3, #9
 80035e2:	bf94      	ite	ls
 80035e4:	2301      	movls	r3, #1
 80035e6:	2300      	movhi	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d079      	beq.n	80036e2 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d107      	bne.n	800360a <HAL_ADC_ConfigChannel+0x4f6>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	0e9b      	lsrs	r3, r3, #26
 8003600:	3301      	adds	r3, #1
 8003602:	069b      	lsls	r3, r3, #26
 8003604:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003608:	e015      	b.n	8003636 <HAL_ADC_ConfigChannel+0x522>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003610:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003612:	fa93 f3a3 	rbit	r3, r3
 8003616:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800361a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800361c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8003622:	2320      	movs	r3, #32
 8003624:	e003      	b.n	800362e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8003626:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003628:	fab3 f383 	clz	r3, r3
 800362c:	b2db      	uxtb	r3, r3
 800362e:	3301      	adds	r3, #1
 8003630:	069b      	lsls	r3, r3, #26
 8003632:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800363e:	2b00      	cmp	r3, #0
 8003640:	d109      	bne.n	8003656 <HAL_ADC_ConfigChannel+0x542>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	0e9b      	lsrs	r3, r3, #26
 8003648:	3301      	adds	r3, #1
 800364a:	f003 031f 	and.w	r3, r3, #31
 800364e:	2101      	movs	r1, #1
 8003650:	fa01 f303 	lsl.w	r3, r1, r3
 8003654:	e017      	b.n	8003686 <HAL_ADC_ConfigChannel+0x572>
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800365e:	fa93 f3a3 	rbit	r3, r3
 8003662:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003666:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003668:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800366e:	2320      	movs	r3, #32
 8003670:	e003      	b.n	800367a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8003672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003674:	fab3 f383 	clz	r3, r3
 8003678:	b2db      	uxtb	r3, r3
 800367a:	3301      	adds	r3, #1
 800367c:	f003 031f 	and.w	r3, r3, #31
 8003680:	2101      	movs	r1, #1
 8003682:	fa01 f303 	lsl.w	r3, r1, r3
 8003686:	ea42 0103 	orr.w	r1, r2, r3
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10a      	bne.n	80036ac <HAL_ADC_ConfigChannel+0x598>
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	0e9b      	lsrs	r3, r3, #26
 800369c:	3301      	adds	r3, #1
 800369e:	f003 021f 	and.w	r2, r3, #31
 80036a2:	4613      	mov	r3, r2
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	4413      	add	r3, r2
 80036a8:	051b      	lsls	r3, r3, #20
 80036aa:	e018      	b.n	80036de <HAL_ADC_ConfigChannel+0x5ca>
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b4:	fa93 f3a3 	rbit	r3, r3
 80036b8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80036ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80036be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80036c4:	2320      	movs	r3, #32
 80036c6:	e003      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80036c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ca:	fab3 f383 	clz	r3, r3
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	3301      	adds	r3, #1
 80036d2:	f003 021f 	and.w	r2, r3, #31
 80036d6:	4613      	mov	r3, r2
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	4413      	add	r3, r2
 80036dc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036de:	430b      	orrs	r3, r1
 80036e0:	e081      	b.n	80037e6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d107      	bne.n	80036fe <HAL_ADC_ConfigChannel+0x5ea>
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	0e9b      	lsrs	r3, r3, #26
 80036f4:	3301      	adds	r3, #1
 80036f6:	069b      	lsls	r3, r3, #26
 80036f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036fc:	e015      	b.n	800372a <HAL_ADC_ConfigChannel+0x616>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003706:	fa93 f3a3 	rbit	r3, r3
 800370a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800370c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8003716:	2320      	movs	r3, #32
 8003718:	e003      	b.n	8003722 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800371a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371c:	fab3 f383 	clz	r3, r3
 8003720:	b2db      	uxtb	r3, r3
 8003722:	3301      	adds	r3, #1
 8003724:	069b      	lsls	r3, r3, #26
 8003726:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003732:	2b00      	cmp	r3, #0
 8003734:	d109      	bne.n	800374a <HAL_ADC_ConfigChannel+0x636>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	0e9b      	lsrs	r3, r3, #26
 800373c:	3301      	adds	r3, #1
 800373e:	f003 031f 	and.w	r3, r3, #31
 8003742:	2101      	movs	r1, #1
 8003744:	fa01 f303 	lsl.w	r3, r1, r3
 8003748:	e017      	b.n	800377a <HAL_ADC_ConfigChannel+0x666>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	fa93 f3a3 	rbit	r3, r3
 8003756:	61fb      	str	r3, [r7, #28]
  return result;
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8003762:	2320      	movs	r3, #32
 8003764:	e003      	b.n	800376e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	fab3 f383 	clz	r3, r3
 800376c:	b2db      	uxtb	r3, r3
 800376e:	3301      	adds	r3, #1
 8003770:	f003 031f 	and.w	r3, r3, #31
 8003774:	2101      	movs	r1, #1
 8003776:	fa01 f303 	lsl.w	r3, r1, r3
 800377a:	ea42 0103 	orr.w	r1, r2, r3
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10d      	bne.n	80037a6 <HAL_ADC_ConfigChannel+0x692>
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	0e9b      	lsrs	r3, r3, #26
 8003790:	3301      	adds	r3, #1
 8003792:	f003 021f 	and.w	r2, r3, #31
 8003796:	4613      	mov	r3, r2
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	4413      	add	r3, r2
 800379c:	3b1e      	subs	r3, #30
 800379e:	051b      	lsls	r3, r3, #20
 80037a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037a4:	e01e      	b.n	80037e4 <HAL_ADC_ConfigChannel+0x6d0>
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	fa93 f3a3 	rbit	r3, r3
 80037b2:	613b      	str	r3, [r7, #16]
  return result;
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d104      	bne.n	80037c8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80037be:	2320      	movs	r3, #32
 80037c0:	e006      	b.n	80037d0 <HAL_ADC_ConfigChannel+0x6bc>
 80037c2:	bf00      	nop
 80037c4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	fab3 f383 	clz	r3, r3
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	3301      	adds	r3, #1
 80037d2:	f003 021f 	and.w	r2, r3, #31
 80037d6:	4613      	mov	r3, r2
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	4413      	add	r3, r2
 80037dc:	3b1e      	subs	r3, #30
 80037de:	051b      	lsls	r3, r3, #20
 80037e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037e4:	430b      	orrs	r3, r1
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	6892      	ldr	r2, [r2, #8]
 80037ea:	4619      	mov	r1, r3
 80037ec:	f7ff f947 	bl	8002a7e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	4b3d      	ldr	r3, [pc, #244]	; (80038ec <HAL_ADC_ConfigChannel+0x7d8>)
 80037f6:	4013      	ands	r3, r2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d06c      	beq.n	80038d6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037fc:	483c      	ldr	r0, [pc, #240]	; (80038f0 <HAL_ADC_ConfigChannel+0x7dc>)
 80037fe:	f7ff f889 	bl	8002914 <LL_ADC_GetCommonPathInternalCh>
 8003802:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a3a      	ldr	r2, [pc, #232]	; (80038f4 <HAL_ADC_ConfigChannel+0x7e0>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d127      	bne.n	8003860 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003810:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003814:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d121      	bne.n	8003860 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a35      	ldr	r2, [pc, #212]	; (80038f8 <HAL_ADC_ConfigChannel+0x7e4>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d157      	bne.n	80038d6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003826:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800382a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800382e:	4619      	mov	r1, r3
 8003830:	482f      	ldr	r0, [pc, #188]	; (80038f0 <HAL_ADC_ConfigChannel+0x7dc>)
 8003832:	f7ff f85c 	bl	80028ee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003836:	4b31      	ldr	r3, [pc, #196]	; (80038fc <HAL_ADC_ConfigChannel+0x7e8>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	099b      	lsrs	r3, r3, #6
 800383c:	4a30      	ldr	r2, [pc, #192]	; (8003900 <HAL_ADC_ConfigChannel+0x7ec>)
 800383e:	fba2 2303 	umull	r2, r3, r2, r3
 8003842:	099b      	lsrs	r3, r3, #6
 8003844:	1c5a      	adds	r2, r3, #1
 8003846:	4613      	mov	r3, r2
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	4413      	add	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003850:	e002      	b.n	8003858 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	3b01      	subs	r3, #1
 8003856:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1f9      	bne.n	8003852 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800385e:	e03a      	b.n	80038d6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a27      	ldr	r2, [pc, #156]	; (8003904 <HAL_ADC_ConfigChannel+0x7f0>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d113      	bne.n	8003892 <HAL_ADC_ConfigChannel+0x77e>
 800386a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800386e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10d      	bne.n	8003892 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a1f      	ldr	r2, [pc, #124]	; (80038f8 <HAL_ADC_ConfigChannel+0x7e4>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d12a      	bne.n	80038d6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003880:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003884:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003888:	4619      	mov	r1, r3
 800388a:	4819      	ldr	r0, [pc, #100]	; (80038f0 <HAL_ADC_ConfigChannel+0x7dc>)
 800388c:	f7ff f82f 	bl	80028ee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003890:	e021      	b.n	80038d6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a1c      	ldr	r2, [pc, #112]	; (8003908 <HAL_ADC_ConfigChannel+0x7f4>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d11c      	bne.n	80038d6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800389c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d116      	bne.n	80038d6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a12      	ldr	r2, [pc, #72]	; (80038f8 <HAL_ADC_ConfigChannel+0x7e4>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d111      	bne.n	80038d6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038ba:	4619      	mov	r1, r3
 80038bc:	480c      	ldr	r0, [pc, #48]	; (80038f0 <HAL_ADC_ConfigChannel+0x7dc>)
 80038be:	f7ff f816 	bl	80028ee <LL_ADC_SetCommonPathInternalCh>
 80038c2:	e008      	b.n	80038d6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c8:	f043 0220 	orr.w	r2, r3, #32
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80038de:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	37d8      	adds	r7, #216	; 0xd8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	80080000 	.word	0x80080000
 80038f0:	50040300 	.word	0x50040300
 80038f4:	c7520000 	.word	0xc7520000
 80038f8:	50040000 	.word	0x50040000
 80038fc:	20000008 	.word	0x20000008
 8003900:	053e2d63 	.word	0x053e2d63
 8003904:	cb840000 	.word	0xcb840000
 8003908:	80000001 	.word	0x80000001

0800390c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003914:	2300      	movs	r3, #0
 8003916:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff f95f 	bl	8002be0 <LL_ADC_IsEnabled>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d169      	bne.n	80039fc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689a      	ldr	r2, [r3, #8]
 800392e:	4b36      	ldr	r3, [pc, #216]	; (8003a08 <ADC_Enable+0xfc>)
 8003930:	4013      	ands	r3, r2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00d      	beq.n	8003952 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393a:	f043 0210 	orr.w	r2, r3, #16
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003946:	f043 0201 	orr.w	r2, r3, #1
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e055      	b.n	80039fe <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4618      	mov	r0, r3
 8003958:	f7ff f92e 	bl	8002bb8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800395c:	482b      	ldr	r0, [pc, #172]	; (8003a0c <ADC_Enable+0x100>)
 800395e:	f7fe ffd9 	bl	8002914 <LL_ADC_GetCommonPathInternalCh>
 8003962:	4603      	mov	r3, r0
 8003964:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d013      	beq.n	8003994 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800396c:	4b28      	ldr	r3, [pc, #160]	; (8003a10 <ADC_Enable+0x104>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	099b      	lsrs	r3, r3, #6
 8003972:	4a28      	ldr	r2, [pc, #160]	; (8003a14 <ADC_Enable+0x108>)
 8003974:	fba2 2303 	umull	r2, r3, r2, r3
 8003978:	099b      	lsrs	r3, r3, #6
 800397a:	1c5a      	adds	r2, r3, #1
 800397c:	4613      	mov	r3, r2
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	4413      	add	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003986:	e002      	b.n	800398e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	3b01      	subs	r3, #1
 800398c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1f9      	bne.n	8003988 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003994:	f7fe ff8c 	bl	80028b0 <HAL_GetTick>
 8003998:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800399a:	e028      	b.n	80039ee <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff f91d 	bl	8002be0 <LL_ADC_IsEnabled>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d104      	bne.n	80039b6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff f901 	bl	8002bb8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80039b6:	f7fe ff7b 	bl	80028b0 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d914      	bls.n	80039ee <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d00d      	beq.n	80039ee <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d6:	f043 0210 	orr.w	r2, r3, #16
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e2:	f043 0201 	orr.w	r2, r3, #1
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e007      	b.n	80039fe <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d1cf      	bne.n	800399c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	8000003f 	.word	0x8000003f
 8003a0c:	50040300 	.word	0x50040300
 8003a10:	20000008 	.word	0x20000008
 8003a14:	053e2d63 	.word	0x053e2d63

08003a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a28:	4b0c      	ldr	r3, [pc, #48]	; (8003a5c <__NVIC_SetPriorityGrouping+0x44>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a34:	4013      	ands	r3, r2
 8003a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a4a:	4a04      	ldr	r2, [pc, #16]	; (8003a5c <__NVIC_SetPriorityGrouping+0x44>)
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	60d3      	str	r3, [r2, #12]
}
 8003a50:	bf00      	nop
 8003a52:	3714      	adds	r7, #20
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	e000ed00 	.word	0xe000ed00

08003a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a64:	4b04      	ldr	r3, [pc, #16]	; (8003a78 <__NVIC_GetPriorityGrouping+0x18>)
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	0a1b      	lsrs	r3, r3, #8
 8003a6a:	f003 0307 	and.w	r3, r3, #7
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	e000ed00 	.word	0xe000ed00

08003a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4603      	mov	r3, r0
 8003a84:	6039      	str	r1, [r7, #0]
 8003a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	db0a      	blt.n	8003aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	490c      	ldr	r1, [pc, #48]	; (8003ac8 <__NVIC_SetPriority+0x4c>)
 8003a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a9a:	0112      	lsls	r2, r2, #4
 8003a9c:	b2d2      	uxtb	r2, r2
 8003a9e:	440b      	add	r3, r1
 8003aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003aa4:	e00a      	b.n	8003abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	4908      	ldr	r1, [pc, #32]	; (8003acc <__NVIC_SetPriority+0x50>)
 8003aac:	79fb      	ldrb	r3, [r7, #7]
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	3b04      	subs	r3, #4
 8003ab4:	0112      	lsls	r2, r2, #4
 8003ab6:	b2d2      	uxtb	r2, r2
 8003ab8:	440b      	add	r3, r1
 8003aba:	761a      	strb	r2, [r3, #24]
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	e000e100 	.word	0xe000e100
 8003acc:	e000ed00 	.word	0xe000ed00

08003ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b089      	sub	sp, #36	; 0x24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f003 0307 	and.w	r3, r3, #7
 8003ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	f1c3 0307 	rsb	r3, r3, #7
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	bf28      	it	cs
 8003aee:	2304      	movcs	r3, #4
 8003af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	3304      	adds	r3, #4
 8003af6:	2b06      	cmp	r3, #6
 8003af8:	d902      	bls.n	8003b00 <NVIC_EncodePriority+0x30>
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	3b03      	subs	r3, #3
 8003afe:	e000      	b.n	8003b02 <NVIC_EncodePriority+0x32>
 8003b00:	2300      	movs	r3, #0
 8003b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b04:	f04f 32ff 	mov.w	r2, #4294967295
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	43da      	mvns	r2, r3
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	401a      	ands	r2, r3
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b18:	f04f 31ff 	mov.w	r1, #4294967295
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b22:	43d9      	mvns	r1, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b28:	4313      	orrs	r3, r2
         );
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3724      	adds	r7, #36	; 0x24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
	...

08003b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3b01      	subs	r3, #1
 8003b44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b48:	d301      	bcc.n	8003b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e00f      	b.n	8003b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b4e:	4a0a      	ldr	r2, [pc, #40]	; (8003b78 <SysTick_Config+0x40>)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	3b01      	subs	r3, #1
 8003b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b56:	210f      	movs	r1, #15
 8003b58:	f04f 30ff 	mov.w	r0, #4294967295
 8003b5c:	f7ff ff8e 	bl	8003a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b60:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <SysTick_Config+0x40>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b66:	4b04      	ldr	r3, [pc, #16]	; (8003b78 <SysTick_Config+0x40>)
 8003b68:	2207      	movs	r2, #7
 8003b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	e000e010 	.word	0xe000e010

08003b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f7ff ff47 	bl	8003a18 <__NVIC_SetPriorityGrouping>
}
 8003b8a:	bf00      	nop
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b086      	sub	sp, #24
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	4603      	mov	r3, r0
 8003b9a:	60b9      	str	r1, [r7, #8]
 8003b9c:	607a      	str	r2, [r7, #4]
 8003b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ba4:	f7ff ff5c 	bl	8003a60 <__NVIC_GetPriorityGrouping>
 8003ba8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	68b9      	ldr	r1, [r7, #8]
 8003bae:	6978      	ldr	r0, [r7, #20]
 8003bb0:	f7ff ff8e 	bl	8003ad0 <NVIC_EncodePriority>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bba:	4611      	mov	r1, r2
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7ff ff5d 	bl	8003a7c <__NVIC_SetPriority>
}
 8003bc2:	bf00      	nop
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b082      	sub	sp, #8
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7ff ffb0 	bl	8003b38 <SysTick_Config>
 8003bd8:	4603      	mov	r3, r0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
	...

08003be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b087      	sub	sp, #28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bf2:	e166      	b.n	8003ec2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8003c00:	4013      	ands	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 8158 	beq.w	8003ebc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f003 0303 	and.w	r3, r3, #3
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d005      	beq.n	8003c24 <HAL_GPIO_Init+0x40>
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f003 0303 	and.w	r3, r3, #3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d130      	bne.n	8003c86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	2203      	movs	r2, #3
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	43db      	mvns	r3, r3
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	68da      	ldr	r2, [r3, #12]
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	fa02 f303 	lsl.w	r3, r2, r3
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c62:	43db      	mvns	r3, r3
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	4013      	ands	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	091b      	lsrs	r3, r3, #4
 8003c70:	f003 0201 	and.w	r2, r3, #1
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f003 0303 	and.w	r3, r3, #3
 8003c8e:	2b03      	cmp	r3, #3
 8003c90:	d017      	beq.n	8003cc2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	2203      	movs	r2, #3
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	689a      	ldr	r2, [r3, #8]
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f003 0303 	and.w	r3, r3, #3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d123      	bne.n	8003d16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	08da      	lsrs	r2, r3, #3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	3208      	adds	r2, #8
 8003cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f003 0307 	and.w	r3, r3, #7
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	220f      	movs	r2, #15
 8003ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cea:	43db      	mvns	r3, r3
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	691a      	ldr	r2, [r3, #16]
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	08da      	lsrs	r2, r3, #3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	3208      	adds	r2, #8
 8003d10:	6939      	ldr	r1, [r7, #16]
 8003d12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	2203      	movs	r2, #3
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	43db      	mvns	r3, r3
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f003 0203 	and.w	r2, r3, #3
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f000 80b2 	beq.w	8003ebc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d58:	4b61      	ldr	r3, [pc, #388]	; (8003ee0 <HAL_GPIO_Init+0x2fc>)
 8003d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d5c:	4a60      	ldr	r2, [pc, #384]	; (8003ee0 <HAL_GPIO_Init+0x2fc>)
 8003d5e:	f043 0301 	orr.w	r3, r3, #1
 8003d62:	6613      	str	r3, [r2, #96]	; 0x60
 8003d64:	4b5e      	ldr	r3, [pc, #376]	; (8003ee0 <HAL_GPIO_Init+0x2fc>)
 8003d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	60bb      	str	r3, [r7, #8]
 8003d6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d70:	4a5c      	ldr	r2, [pc, #368]	; (8003ee4 <HAL_GPIO_Init+0x300>)
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	089b      	lsrs	r3, r3, #2
 8003d76:	3302      	adds	r3, #2
 8003d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f003 0303 	and.w	r3, r3, #3
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	220f      	movs	r2, #15
 8003d88:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	4013      	ands	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d9a:	d02b      	beq.n	8003df4 <HAL_GPIO_Init+0x210>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a52      	ldr	r2, [pc, #328]	; (8003ee8 <HAL_GPIO_Init+0x304>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d025      	beq.n	8003df0 <HAL_GPIO_Init+0x20c>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a51      	ldr	r2, [pc, #324]	; (8003eec <HAL_GPIO_Init+0x308>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d01f      	beq.n	8003dec <HAL_GPIO_Init+0x208>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a50      	ldr	r2, [pc, #320]	; (8003ef0 <HAL_GPIO_Init+0x30c>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d019      	beq.n	8003de8 <HAL_GPIO_Init+0x204>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a4f      	ldr	r2, [pc, #316]	; (8003ef4 <HAL_GPIO_Init+0x310>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d013      	beq.n	8003de4 <HAL_GPIO_Init+0x200>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a4e      	ldr	r2, [pc, #312]	; (8003ef8 <HAL_GPIO_Init+0x314>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d00d      	beq.n	8003de0 <HAL_GPIO_Init+0x1fc>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a4d      	ldr	r2, [pc, #308]	; (8003efc <HAL_GPIO_Init+0x318>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d007      	beq.n	8003ddc <HAL_GPIO_Init+0x1f8>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a4c      	ldr	r2, [pc, #304]	; (8003f00 <HAL_GPIO_Init+0x31c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d101      	bne.n	8003dd8 <HAL_GPIO_Init+0x1f4>
 8003dd4:	2307      	movs	r3, #7
 8003dd6:	e00e      	b.n	8003df6 <HAL_GPIO_Init+0x212>
 8003dd8:	2308      	movs	r3, #8
 8003dda:	e00c      	b.n	8003df6 <HAL_GPIO_Init+0x212>
 8003ddc:	2306      	movs	r3, #6
 8003dde:	e00a      	b.n	8003df6 <HAL_GPIO_Init+0x212>
 8003de0:	2305      	movs	r3, #5
 8003de2:	e008      	b.n	8003df6 <HAL_GPIO_Init+0x212>
 8003de4:	2304      	movs	r3, #4
 8003de6:	e006      	b.n	8003df6 <HAL_GPIO_Init+0x212>
 8003de8:	2303      	movs	r3, #3
 8003dea:	e004      	b.n	8003df6 <HAL_GPIO_Init+0x212>
 8003dec:	2302      	movs	r3, #2
 8003dee:	e002      	b.n	8003df6 <HAL_GPIO_Init+0x212>
 8003df0:	2301      	movs	r3, #1
 8003df2:	e000      	b.n	8003df6 <HAL_GPIO_Init+0x212>
 8003df4:	2300      	movs	r3, #0
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	f002 0203 	and.w	r2, r2, #3
 8003dfc:	0092      	lsls	r2, r2, #2
 8003dfe:	4093      	lsls	r3, r2
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e06:	4937      	ldr	r1, [pc, #220]	; (8003ee4 <HAL_GPIO_Init+0x300>)
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	089b      	lsrs	r3, r3, #2
 8003e0c:	3302      	adds	r3, #2
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e14:	4b3b      	ldr	r3, [pc, #236]	; (8003f04 <HAL_GPIO_Init+0x320>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	43db      	mvns	r3, r3
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	4013      	ands	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d003      	beq.n	8003e38 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e38:	4a32      	ldr	r2, [pc, #200]	; (8003f04 <HAL_GPIO_Init+0x320>)
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e3e:	4b31      	ldr	r3, [pc, #196]	; (8003f04 <HAL_GPIO_Init+0x320>)
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	43db      	mvns	r3, r3
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d003      	beq.n	8003e62 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e62:	4a28      	ldr	r2, [pc, #160]	; (8003f04 <HAL_GPIO_Init+0x320>)
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003e68:	4b26      	ldr	r3, [pc, #152]	; (8003f04 <HAL_GPIO_Init+0x320>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	43db      	mvns	r3, r3
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	4013      	ands	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d003      	beq.n	8003e8c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e8c:	4a1d      	ldr	r2, [pc, #116]	; (8003f04 <HAL_GPIO_Init+0x320>)
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003e92:	4b1c      	ldr	r3, [pc, #112]	; (8003f04 <HAL_GPIO_Init+0x320>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	43db      	mvns	r3, r3
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003eb6:	4a13      	ldr	r2, [pc, #76]	; (8003f04 <HAL_GPIO_Init+0x320>)
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f47f ae91 	bne.w	8003bf4 <HAL_GPIO_Init+0x10>
  }
}
 8003ed2:	bf00      	nop
 8003ed4:	bf00      	nop
 8003ed6:	371c      	adds	r7, #28
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	40010000 	.word	0x40010000
 8003ee8:	48000400 	.word	0x48000400
 8003eec:	48000800 	.word	0x48000800
 8003ef0:	48000c00 	.word	0x48000c00
 8003ef4:	48001000 	.word	0x48001000
 8003ef8:	48001400 	.word	0x48001400
 8003efc:	48001800 	.word	0x48001800
 8003f00:	48001c00 	.word	0x48001c00
 8003f04:	40010400 	.word	0x40010400

08003f08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	460b      	mov	r3, r1
 8003f12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	691a      	ldr	r2, [r3, #16]
 8003f18:	887b      	ldrh	r3, [r7, #2]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d002      	beq.n	8003f26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f20:	2301      	movs	r3, #1
 8003f22:	73fb      	strb	r3, [r7, #15]
 8003f24:	e001      	b.n	8003f2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f26:	2300      	movs	r3, #0
 8003f28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3714      	adds	r7, #20
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	460b      	mov	r3, r1
 8003f42:	807b      	strh	r3, [r7, #2]
 8003f44:	4613      	mov	r3, r2
 8003f46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f48:	787b      	ldrb	r3, [r7, #1]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f4e:	887a      	ldrh	r2, [r7, #2]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f54:	e002      	b.n	8003f5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f56:	887a      	ldrh	r2, [r7, #2]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f6c:	4b0d      	ldr	r3, [pc, #52]	; (8003fa4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f78:	d102      	bne.n	8003f80 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003f7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f7e:	e00b      	b.n	8003f98 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003f80:	4b08      	ldr	r3, [pc, #32]	; (8003fa4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f8e:	d102      	bne.n	8003f96 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003f90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f94:	e000      	b.n	8003f98 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003f96:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	40007000 	.word	0x40007000

08003fa8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d141      	bne.n	800403a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fb6:	4b4b      	ldr	r3, [pc, #300]	; (80040e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc2:	d131      	bne.n	8004028 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fc4:	4b47      	ldr	r3, [pc, #284]	; (80040e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fca:	4a46      	ldr	r2, [pc, #280]	; (80040e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fd4:	4b43      	ldr	r3, [pc, #268]	; (80040e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fdc:	4a41      	ldr	r2, [pc, #260]	; (80040e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fe2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003fe4:	4b40      	ldr	r3, [pc, #256]	; (80040e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2232      	movs	r2, #50	; 0x32
 8003fea:	fb02 f303 	mul.w	r3, r2, r3
 8003fee:	4a3f      	ldr	r2, [pc, #252]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff4:	0c9b      	lsrs	r3, r3, #18
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ffa:	e002      	b.n	8004002 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	3b01      	subs	r3, #1
 8004000:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004002:	4b38      	ldr	r3, [pc, #224]	; (80040e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800400a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800400e:	d102      	bne.n	8004016 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1f2      	bne.n	8003ffc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004016:	4b33      	ldr	r3, [pc, #204]	; (80040e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800401e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004022:	d158      	bne.n	80040d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e057      	b.n	80040d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004028:	4b2e      	ldr	r3, [pc, #184]	; (80040e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800402a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800402e:	4a2d      	ldr	r2, [pc, #180]	; (80040e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004034:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004038:	e04d      	b.n	80040d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004040:	d141      	bne.n	80040c6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004042:	4b28      	ldr	r3, [pc, #160]	; (80040e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800404a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800404e:	d131      	bne.n	80040b4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004050:	4b24      	ldr	r3, [pc, #144]	; (80040e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004052:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004056:	4a23      	ldr	r2, [pc, #140]	; (80040e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800405c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004060:	4b20      	ldr	r3, [pc, #128]	; (80040e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004068:	4a1e      	ldr	r2, [pc, #120]	; (80040e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800406a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800406e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004070:	4b1d      	ldr	r3, [pc, #116]	; (80040e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2232      	movs	r2, #50	; 0x32
 8004076:	fb02 f303 	mul.w	r3, r2, r3
 800407a:	4a1c      	ldr	r2, [pc, #112]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 800407c:	fba2 2303 	umull	r2, r3, r2, r3
 8004080:	0c9b      	lsrs	r3, r3, #18
 8004082:	3301      	adds	r3, #1
 8004084:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004086:	e002      	b.n	800408e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	3b01      	subs	r3, #1
 800408c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800408e:	4b15      	ldr	r3, [pc, #84]	; (80040e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800409a:	d102      	bne.n	80040a2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1f2      	bne.n	8004088 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040a2:	4b10      	ldr	r3, [pc, #64]	; (80040e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ae:	d112      	bne.n	80040d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e011      	b.n	80040d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040b4:	4b0b      	ldr	r3, [pc, #44]	; (80040e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040ba:	4a0a      	ldr	r2, [pc, #40]	; (80040e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80040c4:	e007      	b.n	80040d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80040c6:	4b07      	ldr	r3, [pc, #28]	; (80040e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040ce:	4a05      	ldr	r2, [pc, #20]	; (80040e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040d4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3714      	adds	r7, #20
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	40007000 	.word	0x40007000
 80040e8:	20000008 	.word	0x20000008
 80040ec:	431bde83 	.word	0x431bde83

080040f0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80040f4:	4b05      	ldr	r3, [pc, #20]	; (800410c <HAL_PWREx_EnableVddIO2+0x1c>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	4a04      	ldr	r2, [pc, #16]	; (800410c <HAL_PWREx_EnableVddIO2+0x1c>)
 80040fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040fe:	6053      	str	r3, [r2, #4]
}
 8004100:	bf00      	nop
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	40007000 	.word	0x40007000

08004110 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b088      	sub	sp, #32
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d102      	bne.n	8004124 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	f000 bc08 	b.w	8004934 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004124:	4b96      	ldr	r3, [pc, #600]	; (8004380 <HAL_RCC_OscConfig+0x270>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f003 030c 	and.w	r3, r3, #12
 800412c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800412e:	4b94      	ldr	r3, [pc, #592]	; (8004380 <HAL_RCC_OscConfig+0x270>)
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	f003 0303 	and.w	r3, r3, #3
 8004136:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0310 	and.w	r3, r3, #16
 8004140:	2b00      	cmp	r3, #0
 8004142:	f000 80e4 	beq.w	800430e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d007      	beq.n	800415c <HAL_RCC_OscConfig+0x4c>
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	2b0c      	cmp	r3, #12
 8004150:	f040 808b 	bne.w	800426a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	2b01      	cmp	r3, #1
 8004158:	f040 8087 	bne.w	800426a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800415c:	4b88      	ldr	r3, [pc, #544]	; (8004380 <HAL_RCC_OscConfig+0x270>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d005      	beq.n	8004174 <HAL_RCC_OscConfig+0x64>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e3df      	b.n	8004934 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a1a      	ldr	r2, [r3, #32]
 8004178:	4b81      	ldr	r3, [pc, #516]	; (8004380 <HAL_RCC_OscConfig+0x270>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0308 	and.w	r3, r3, #8
 8004180:	2b00      	cmp	r3, #0
 8004182:	d004      	beq.n	800418e <HAL_RCC_OscConfig+0x7e>
 8004184:	4b7e      	ldr	r3, [pc, #504]	; (8004380 <HAL_RCC_OscConfig+0x270>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800418c:	e005      	b.n	800419a <HAL_RCC_OscConfig+0x8a>
 800418e:	4b7c      	ldr	r3, [pc, #496]	; (8004380 <HAL_RCC_OscConfig+0x270>)
 8004190:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004194:	091b      	lsrs	r3, r3, #4
 8004196:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800419a:	4293      	cmp	r3, r2
 800419c:	d223      	bcs.n	80041e6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 fdcc 	bl	8004d40 <RCC_SetFlashLatencyFromMSIRange>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e3c0      	b.n	8004934 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041b2:	4b73      	ldr	r3, [pc, #460]	; (8004380 <HAL_RCC_OscConfig+0x270>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a72      	ldr	r2, [pc, #456]	; (8004380 <HAL_RCC_OscConfig+0x270>)
 80041b8:	f043 0308 	orr.w	r3, r3, #8
 80041bc:	6013      	str	r3, [r2, #0]
 80041be:	4b70      	ldr	r3, [pc, #448]	; (8004380 <HAL_RCC_OscConfig+0x270>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	496d      	ldr	r1, [pc, #436]	; (8004380 <HAL_RCC_OscConfig+0x270>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041d0:	4b6b      	ldr	r3, [pc, #428]	; (8004380 <HAL_RCC_OscConfig+0x270>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	69db      	ldr	r3, [r3, #28]
 80041dc:	021b      	lsls	r3, r3, #8
 80041de:	4968      	ldr	r1, [pc, #416]	; (8004380 <HAL_RCC_OscConfig+0x270>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	604b      	str	r3, [r1, #4]
 80041e4:	e025      	b.n	8004232 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041e6:	4b66      	ldr	r3, [pc, #408]	; (8004380 <HAL_RCC_OscConfig+0x270>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a65      	ldr	r2, [pc, #404]	; (8004380 <HAL_RCC_OscConfig+0x270>)
 80041ec:	f043 0308 	orr.w	r3, r3, #8
 80041f0:	6013      	str	r3, [r2, #0]
 80041f2:	4b63      	ldr	r3, [pc, #396]	; (8004380 <HAL_RCC_OscConfig+0x270>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	4960      	ldr	r1, [pc, #384]	; (8004380 <HAL_RCC_OscConfig+0x270>)
 8004200:	4313      	orrs	r3, r2
 8004202:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004204:	4b5e      	ldr	r3, [pc, #376]	; (8004380 <HAL_RCC_OscConfig+0x270>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	69db      	ldr	r3, [r3, #28]
 8004210:	021b      	lsls	r3, r3, #8
 8004212:	495b      	ldr	r1, [pc, #364]	; (8004380 <HAL_RCC_OscConfig+0x270>)
 8004214:	4313      	orrs	r3, r2
 8004216:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d109      	bne.n	8004232 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	4618      	mov	r0, r3
 8004224:	f000 fd8c 	bl	8004d40 <RCC_SetFlashLatencyFromMSIRange>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e380      	b.n	8004934 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004232:	f000 fcc1 	bl	8004bb8 <HAL_RCC_GetSysClockFreq>
 8004236:	4602      	mov	r2, r0
 8004238:	4b51      	ldr	r3, [pc, #324]	; (8004380 <HAL_RCC_OscConfig+0x270>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	091b      	lsrs	r3, r3, #4
 800423e:	f003 030f 	and.w	r3, r3, #15
 8004242:	4950      	ldr	r1, [pc, #320]	; (8004384 <HAL_RCC_OscConfig+0x274>)
 8004244:	5ccb      	ldrb	r3, [r1, r3]
 8004246:	f003 031f 	and.w	r3, r3, #31
 800424a:	fa22 f303 	lsr.w	r3, r2, r3
 800424e:	4a4e      	ldr	r2, [pc, #312]	; (8004388 <HAL_RCC_OscConfig+0x278>)
 8004250:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004252:	4b4e      	ldr	r3, [pc, #312]	; (800438c <HAL_RCC_OscConfig+0x27c>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4618      	mov	r0, r3
 8004258:	f7fe fada 	bl	8002810 <HAL_InitTick>
 800425c:	4603      	mov	r3, r0
 800425e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004260:	7bfb      	ldrb	r3, [r7, #15]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d052      	beq.n	800430c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004266:	7bfb      	ldrb	r3, [r7, #15]
 8004268:	e364      	b.n	8004934 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d032      	beq.n	80042d8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004272:	4b43      	ldr	r3, [pc, #268]	; (8004380 <HAL_RCC_OscConfig+0x270>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a42      	ldr	r2, [pc, #264]	; (8004380 <HAL_RCC_OscConfig+0x270>)
 8004278:	f043 0301 	orr.w	r3, r3, #1
 800427c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800427e:	f7fe fb17 	bl	80028b0 <HAL_GetTick>
 8004282:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004284:	e008      	b.n	8004298 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004286:	f7fe fb13 	bl	80028b0 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d901      	bls.n	8004298 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e34d      	b.n	8004934 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004298:	4b39      	ldr	r3, [pc, #228]	; (8004380 <HAL_RCC_OscConfig+0x270>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d0f0      	beq.n	8004286 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042a4:	4b36      	ldr	r3, [pc, #216]	; (8004380 <HAL_RCC_OscConfig+0x270>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a35      	ldr	r2, [pc, #212]	; (8004380 <HAL_RCC_OscConfig+0x270>)
 80042aa:	f043 0308 	orr.w	r3, r3, #8
 80042ae:	6013      	str	r3, [r2, #0]
 80042b0:	4b33      	ldr	r3, [pc, #204]	; (8004380 <HAL_RCC_OscConfig+0x270>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	4930      	ldr	r1, [pc, #192]	; (8004380 <HAL_RCC_OscConfig+0x270>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042c2:	4b2f      	ldr	r3, [pc, #188]	; (8004380 <HAL_RCC_OscConfig+0x270>)
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	021b      	lsls	r3, r3, #8
 80042d0:	492b      	ldr	r1, [pc, #172]	; (8004380 <HAL_RCC_OscConfig+0x270>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	604b      	str	r3, [r1, #4]
 80042d6:	e01a      	b.n	800430e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80042d8:	4b29      	ldr	r3, [pc, #164]	; (8004380 <HAL_RCC_OscConfig+0x270>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a28      	ldr	r2, [pc, #160]	; (8004380 <HAL_RCC_OscConfig+0x270>)
 80042de:	f023 0301 	bic.w	r3, r3, #1
 80042e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042e4:	f7fe fae4 	bl	80028b0 <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042ec:	f7fe fae0 	bl	80028b0 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e31a      	b.n	8004934 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042fe:	4b20      	ldr	r3, [pc, #128]	; (8004380 <HAL_RCC_OscConfig+0x270>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1f0      	bne.n	80042ec <HAL_RCC_OscConfig+0x1dc>
 800430a:	e000      	b.n	800430e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800430c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d073      	beq.n	8004402 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	2b08      	cmp	r3, #8
 800431e:	d005      	beq.n	800432c <HAL_RCC_OscConfig+0x21c>
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	2b0c      	cmp	r3, #12
 8004324:	d10e      	bne.n	8004344 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	2b03      	cmp	r3, #3
 800432a:	d10b      	bne.n	8004344 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800432c:	4b14      	ldr	r3, [pc, #80]	; (8004380 <HAL_RCC_OscConfig+0x270>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d063      	beq.n	8004400 <HAL_RCC_OscConfig+0x2f0>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d15f      	bne.n	8004400 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e2f7      	b.n	8004934 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800434c:	d106      	bne.n	800435c <HAL_RCC_OscConfig+0x24c>
 800434e:	4b0c      	ldr	r3, [pc, #48]	; (8004380 <HAL_RCC_OscConfig+0x270>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a0b      	ldr	r2, [pc, #44]	; (8004380 <HAL_RCC_OscConfig+0x270>)
 8004354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004358:	6013      	str	r3, [r2, #0]
 800435a:	e025      	b.n	80043a8 <HAL_RCC_OscConfig+0x298>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004364:	d114      	bne.n	8004390 <HAL_RCC_OscConfig+0x280>
 8004366:	4b06      	ldr	r3, [pc, #24]	; (8004380 <HAL_RCC_OscConfig+0x270>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a05      	ldr	r2, [pc, #20]	; (8004380 <HAL_RCC_OscConfig+0x270>)
 800436c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004370:	6013      	str	r3, [r2, #0]
 8004372:	4b03      	ldr	r3, [pc, #12]	; (8004380 <HAL_RCC_OscConfig+0x270>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a02      	ldr	r2, [pc, #8]	; (8004380 <HAL_RCC_OscConfig+0x270>)
 8004378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800437c:	6013      	str	r3, [r2, #0]
 800437e:	e013      	b.n	80043a8 <HAL_RCC_OscConfig+0x298>
 8004380:	40021000 	.word	0x40021000
 8004384:	0800b2f4 	.word	0x0800b2f4
 8004388:	20000008 	.word	0x20000008
 800438c:	2000000c 	.word	0x2000000c
 8004390:	4ba0      	ldr	r3, [pc, #640]	; (8004614 <HAL_RCC_OscConfig+0x504>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a9f      	ldr	r2, [pc, #636]	; (8004614 <HAL_RCC_OscConfig+0x504>)
 8004396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800439a:	6013      	str	r3, [r2, #0]
 800439c:	4b9d      	ldr	r3, [pc, #628]	; (8004614 <HAL_RCC_OscConfig+0x504>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a9c      	ldr	r2, [pc, #624]	; (8004614 <HAL_RCC_OscConfig+0x504>)
 80043a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d013      	beq.n	80043d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b0:	f7fe fa7e 	bl	80028b0 <HAL_GetTick>
 80043b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043b6:	e008      	b.n	80043ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043b8:	f7fe fa7a 	bl	80028b0 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b64      	cmp	r3, #100	; 0x64
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e2b4      	b.n	8004934 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043ca:	4b92      	ldr	r3, [pc, #584]	; (8004614 <HAL_RCC_OscConfig+0x504>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d0f0      	beq.n	80043b8 <HAL_RCC_OscConfig+0x2a8>
 80043d6:	e014      	b.n	8004402 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d8:	f7fe fa6a 	bl	80028b0 <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043e0:	f7fe fa66 	bl	80028b0 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b64      	cmp	r3, #100	; 0x64
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e2a0      	b.n	8004934 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043f2:	4b88      	ldr	r3, [pc, #544]	; (8004614 <HAL_RCC_OscConfig+0x504>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1f0      	bne.n	80043e0 <HAL_RCC_OscConfig+0x2d0>
 80043fe:	e000      	b.n	8004402 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d060      	beq.n	80044d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	2b04      	cmp	r3, #4
 8004412:	d005      	beq.n	8004420 <HAL_RCC_OscConfig+0x310>
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	2b0c      	cmp	r3, #12
 8004418:	d119      	bne.n	800444e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	2b02      	cmp	r3, #2
 800441e:	d116      	bne.n	800444e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004420:	4b7c      	ldr	r3, [pc, #496]	; (8004614 <HAL_RCC_OscConfig+0x504>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004428:	2b00      	cmp	r3, #0
 800442a:	d005      	beq.n	8004438 <HAL_RCC_OscConfig+0x328>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d101      	bne.n	8004438 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e27d      	b.n	8004934 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004438:	4b76      	ldr	r3, [pc, #472]	; (8004614 <HAL_RCC_OscConfig+0x504>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	061b      	lsls	r3, r3, #24
 8004446:	4973      	ldr	r1, [pc, #460]	; (8004614 <HAL_RCC_OscConfig+0x504>)
 8004448:	4313      	orrs	r3, r2
 800444a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800444c:	e040      	b.n	80044d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d023      	beq.n	800449e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004456:	4b6f      	ldr	r3, [pc, #444]	; (8004614 <HAL_RCC_OscConfig+0x504>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a6e      	ldr	r2, [pc, #440]	; (8004614 <HAL_RCC_OscConfig+0x504>)
 800445c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004460:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004462:	f7fe fa25 	bl	80028b0 <HAL_GetTick>
 8004466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004468:	e008      	b.n	800447c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800446a:	f7fe fa21 	bl	80028b0 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	2b02      	cmp	r3, #2
 8004476:	d901      	bls.n	800447c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e25b      	b.n	8004934 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800447c:	4b65      	ldr	r3, [pc, #404]	; (8004614 <HAL_RCC_OscConfig+0x504>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004484:	2b00      	cmp	r3, #0
 8004486:	d0f0      	beq.n	800446a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004488:	4b62      	ldr	r3, [pc, #392]	; (8004614 <HAL_RCC_OscConfig+0x504>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	061b      	lsls	r3, r3, #24
 8004496:	495f      	ldr	r1, [pc, #380]	; (8004614 <HAL_RCC_OscConfig+0x504>)
 8004498:	4313      	orrs	r3, r2
 800449a:	604b      	str	r3, [r1, #4]
 800449c:	e018      	b.n	80044d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800449e:	4b5d      	ldr	r3, [pc, #372]	; (8004614 <HAL_RCC_OscConfig+0x504>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a5c      	ldr	r2, [pc, #368]	; (8004614 <HAL_RCC_OscConfig+0x504>)
 80044a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044aa:	f7fe fa01 	bl	80028b0 <HAL_GetTick>
 80044ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044b0:	e008      	b.n	80044c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044b2:	f7fe f9fd 	bl	80028b0 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e237      	b.n	8004934 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044c4:	4b53      	ldr	r3, [pc, #332]	; (8004614 <HAL_RCC_OscConfig+0x504>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1f0      	bne.n	80044b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0308 	and.w	r3, r3, #8
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d03c      	beq.n	8004556 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d01c      	beq.n	800451e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044e4:	4b4b      	ldr	r3, [pc, #300]	; (8004614 <HAL_RCC_OscConfig+0x504>)
 80044e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044ea:	4a4a      	ldr	r2, [pc, #296]	; (8004614 <HAL_RCC_OscConfig+0x504>)
 80044ec:	f043 0301 	orr.w	r3, r3, #1
 80044f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f4:	f7fe f9dc 	bl	80028b0 <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044fc:	f7fe f9d8 	bl	80028b0 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e212      	b.n	8004934 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800450e:	4b41      	ldr	r3, [pc, #260]	; (8004614 <HAL_RCC_OscConfig+0x504>)
 8004510:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d0ef      	beq.n	80044fc <HAL_RCC_OscConfig+0x3ec>
 800451c:	e01b      	b.n	8004556 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800451e:	4b3d      	ldr	r3, [pc, #244]	; (8004614 <HAL_RCC_OscConfig+0x504>)
 8004520:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004524:	4a3b      	ldr	r2, [pc, #236]	; (8004614 <HAL_RCC_OscConfig+0x504>)
 8004526:	f023 0301 	bic.w	r3, r3, #1
 800452a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800452e:	f7fe f9bf 	bl	80028b0 <HAL_GetTick>
 8004532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004534:	e008      	b.n	8004548 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004536:	f7fe f9bb 	bl	80028b0 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d901      	bls.n	8004548 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e1f5      	b.n	8004934 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004548:	4b32      	ldr	r3, [pc, #200]	; (8004614 <HAL_RCC_OscConfig+0x504>)
 800454a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1ef      	bne.n	8004536 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0304 	and.w	r3, r3, #4
 800455e:	2b00      	cmp	r3, #0
 8004560:	f000 80a6 	beq.w	80046b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004564:	2300      	movs	r3, #0
 8004566:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004568:	4b2a      	ldr	r3, [pc, #168]	; (8004614 <HAL_RCC_OscConfig+0x504>)
 800456a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800456c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10d      	bne.n	8004590 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004574:	4b27      	ldr	r3, [pc, #156]	; (8004614 <HAL_RCC_OscConfig+0x504>)
 8004576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004578:	4a26      	ldr	r2, [pc, #152]	; (8004614 <HAL_RCC_OscConfig+0x504>)
 800457a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800457e:	6593      	str	r3, [r2, #88]	; 0x58
 8004580:	4b24      	ldr	r3, [pc, #144]	; (8004614 <HAL_RCC_OscConfig+0x504>)
 8004582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004588:	60bb      	str	r3, [r7, #8]
 800458a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800458c:	2301      	movs	r3, #1
 800458e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004590:	4b21      	ldr	r3, [pc, #132]	; (8004618 <HAL_RCC_OscConfig+0x508>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004598:	2b00      	cmp	r3, #0
 800459a:	d118      	bne.n	80045ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800459c:	4b1e      	ldr	r3, [pc, #120]	; (8004618 <HAL_RCC_OscConfig+0x508>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a1d      	ldr	r2, [pc, #116]	; (8004618 <HAL_RCC_OscConfig+0x508>)
 80045a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045a8:	f7fe f982 	bl	80028b0 <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045b0:	f7fe f97e 	bl	80028b0 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e1b8      	b.n	8004934 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045c2:	4b15      	ldr	r3, [pc, #84]	; (8004618 <HAL_RCC_OscConfig+0x508>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0f0      	beq.n	80045b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d108      	bne.n	80045e8 <HAL_RCC_OscConfig+0x4d8>
 80045d6:	4b0f      	ldr	r3, [pc, #60]	; (8004614 <HAL_RCC_OscConfig+0x504>)
 80045d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045dc:	4a0d      	ldr	r2, [pc, #52]	; (8004614 <HAL_RCC_OscConfig+0x504>)
 80045de:	f043 0301 	orr.w	r3, r3, #1
 80045e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045e6:	e029      	b.n	800463c <HAL_RCC_OscConfig+0x52c>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	2b05      	cmp	r3, #5
 80045ee:	d115      	bne.n	800461c <HAL_RCC_OscConfig+0x50c>
 80045f0:	4b08      	ldr	r3, [pc, #32]	; (8004614 <HAL_RCC_OscConfig+0x504>)
 80045f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f6:	4a07      	ldr	r2, [pc, #28]	; (8004614 <HAL_RCC_OscConfig+0x504>)
 80045f8:	f043 0304 	orr.w	r3, r3, #4
 80045fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004600:	4b04      	ldr	r3, [pc, #16]	; (8004614 <HAL_RCC_OscConfig+0x504>)
 8004602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004606:	4a03      	ldr	r2, [pc, #12]	; (8004614 <HAL_RCC_OscConfig+0x504>)
 8004608:	f043 0301 	orr.w	r3, r3, #1
 800460c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004610:	e014      	b.n	800463c <HAL_RCC_OscConfig+0x52c>
 8004612:	bf00      	nop
 8004614:	40021000 	.word	0x40021000
 8004618:	40007000 	.word	0x40007000
 800461c:	4b9d      	ldr	r3, [pc, #628]	; (8004894 <HAL_RCC_OscConfig+0x784>)
 800461e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004622:	4a9c      	ldr	r2, [pc, #624]	; (8004894 <HAL_RCC_OscConfig+0x784>)
 8004624:	f023 0301 	bic.w	r3, r3, #1
 8004628:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800462c:	4b99      	ldr	r3, [pc, #612]	; (8004894 <HAL_RCC_OscConfig+0x784>)
 800462e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004632:	4a98      	ldr	r2, [pc, #608]	; (8004894 <HAL_RCC_OscConfig+0x784>)
 8004634:	f023 0304 	bic.w	r3, r3, #4
 8004638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d016      	beq.n	8004672 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004644:	f7fe f934 	bl	80028b0 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800464a:	e00a      	b.n	8004662 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800464c:	f7fe f930 	bl	80028b0 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	f241 3288 	movw	r2, #5000	; 0x1388
 800465a:	4293      	cmp	r3, r2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e168      	b.n	8004934 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004662:	4b8c      	ldr	r3, [pc, #560]	; (8004894 <HAL_RCC_OscConfig+0x784>)
 8004664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d0ed      	beq.n	800464c <HAL_RCC_OscConfig+0x53c>
 8004670:	e015      	b.n	800469e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004672:	f7fe f91d 	bl	80028b0 <HAL_GetTick>
 8004676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004678:	e00a      	b.n	8004690 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800467a:	f7fe f919 	bl	80028b0 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	f241 3288 	movw	r2, #5000	; 0x1388
 8004688:	4293      	cmp	r3, r2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e151      	b.n	8004934 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004690:	4b80      	ldr	r3, [pc, #512]	; (8004894 <HAL_RCC_OscConfig+0x784>)
 8004692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1ed      	bne.n	800467a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800469e:	7ffb      	ldrb	r3, [r7, #31]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d105      	bne.n	80046b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046a4:	4b7b      	ldr	r3, [pc, #492]	; (8004894 <HAL_RCC_OscConfig+0x784>)
 80046a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a8:	4a7a      	ldr	r2, [pc, #488]	; (8004894 <HAL_RCC_OscConfig+0x784>)
 80046aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0320 	and.w	r3, r3, #32
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d03c      	beq.n	8004736 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d01c      	beq.n	80046fe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80046c4:	4b73      	ldr	r3, [pc, #460]	; (8004894 <HAL_RCC_OscConfig+0x784>)
 80046c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046ca:	4a72      	ldr	r2, [pc, #456]	; (8004894 <HAL_RCC_OscConfig+0x784>)
 80046cc:	f043 0301 	orr.w	r3, r3, #1
 80046d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d4:	f7fe f8ec 	bl	80028b0 <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046da:	e008      	b.n	80046ee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046dc:	f7fe f8e8 	bl	80028b0 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e122      	b.n	8004934 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046ee:	4b69      	ldr	r3, [pc, #420]	; (8004894 <HAL_RCC_OscConfig+0x784>)
 80046f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d0ef      	beq.n	80046dc <HAL_RCC_OscConfig+0x5cc>
 80046fc:	e01b      	b.n	8004736 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80046fe:	4b65      	ldr	r3, [pc, #404]	; (8004894 <HAL_RCC_OscConfig+0x784>)
 8004700:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004704:	4a63      	ldr	r2, [pc, #396]	; (8004894 <HAL_RCC_OscConfig+0x784>)
 8004706:	f023 0301 	bic.w	r3, r3, #1
 800470a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800470e:	f7fe f8cf 	bl	80028b0 <HAL_GetTick>
 8004712:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004714:	e008      	b.n	8004728 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004716:	f7fe f8cb 	bl	80028b0 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b02      	cmp	r3, #2
 8004722:	d901      	bls.n	8004728 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e105      	b.n	8004934 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004728:	4b5a      	ldr	r3, [pc, #360]	; (8004894 <HAL_RCC_OscConfig+0x784>)
 800472a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1ef      	bne.n	8004716 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 80f9 	beq.w	8004932 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004744:	2b02      	cmp	r3, #2
 8004746:	f040 80cf 	bne.w	80048e8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800474a:	4b52      	ldr	r3, [pc, #328]	; (8004894 <HAL_RCC_OscConfig+0x784>)
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	f003 0203 	and.w	r2, r3, #3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475a:	429a      	cmp	r2, r3
 800475c:	d12c      	bne.n	80047b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004768:	3b01      	subs	r3, #1
 800476a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800476c:	429a      	cmp	r2, r3
 800476e:	d123      	bne.n	80047b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800477a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800477c:	429a      	cmp	r2, r3
 800477e:	d11b      	bne.n	80047b8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800478c:	429a      	cmp	r2, r3
 800478e:	d113      	bne.n	80047b8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800479a:	085b      	lsrs	r3, r3, #1
 800479c:	3b01      	subs	r3, #1
 800479e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d109      	bne.n	80047b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	085b      	lsrs	r3, r3, #1
 80047b0:	3b01      	subs	r3, #1
 80047b2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d071      	beq.n	800489c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	2b0c      	cmp	r3, #12
 80047bc:	d068      	beq.n	8004890 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80047be:	4b35      	ldr	r3, [pc, #212]	; (8004894 <HAL_RCC_OscConfig+0x784>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d105      	bne.n	80047d6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80047ca:	4b32      	ldr	r3, [pc, #200]	; (8004894 <HAL_RCC_OscConfig+0x784>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e0ac      	b.n	8004934 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80047da:	4b2e      	ldr	r3, [pc, #184]	; (8004894 <HAL_RCC_OscConfig+0x784>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a2d      	ldr	r2, [pc, #180]	; (8004894 <HAL_RCC_OscConfig+0x784>)
 80047e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047e4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80047e6:	f7fe f863 	bl	80028b0 <HAL_GetTick>
 80047ea:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047ec:	e008      	b.n	8004800 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ee:	f7fe f85f 	bl	80028b0 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e099      	b.n	8004934 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004800:	4b24      	ldr	r3, [pc, #144]	; (8004894 <HAL_RCC_OscConfig+0x784>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1f0      	bne.n	80047ee <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800480c:	4b21      	ldr	r3, [pc, #132]	; (8004894 <HAL_RCC_OscConfig+0x784>)
 800480e:	68da      	ldr	r2, [r3, #12]
 8004810:	4b21      	ldr	r3, [pc, #132]	; (8004898 <HAL_RCC_OscConfig+0x788>)
 8004812:	4013      	ands	r3, r2
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800481c:	3a01      	subs	r2, #1
 800481e:	0112      	lsls	r2, r2, #4
 8004820:	4311      	orrs	r1, r2
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004826:	0212      	lsls	r2, r2, #8
 8004828:	4311      	orrs	r1, r2
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800482e:	0852      	lsrs	r2, r2, #1
 8004830:	3a01      	subs	r2, #1
 8004832:	0552      	lsls	r2, r2, #21
 8004834:	4311      	orrs	r1, r2
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800483a:	0852      	lsrs	r2, r2, #1
 800483c:	3a01      	subs	r2, #1
 800483e:	0652      	lsls	r2, r2, #25
 8004840:	4311      	orrs	r1, r2
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004846:	06d2      	lsls	r2, r2, #27
 8004848:	430a      	orrs	r2, r1
 800484a:	4912      	ldr	r1, [pc, #72]	; (8004894 <HAL_RCC_OscConfig+0x784>)
 800484c:	4313      	orrs	r3, r2
 800484e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004850:	4b10      	ldr	r3, [pc, #64]	; (8004894 <HAL_RCC_OscConfig+0x784>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a0f      	ldr	r2, [pc, #60]	; (8004894 <HAL_RCC_OscConfig+0x784>)
 8004856:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800485a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800485c:	4b0d      	ldr	r3, [pc, #52]	; (8004894 <HAL_RCC_OscConfig+0x784>)
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	4a0c      	ldr	r2, [pc, #48]	; (8004894 <HAL_RCC_OscConfig+0x784>)
 8004862:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004866:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004868:	f7fe f822 	bl	80028b0 <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004870:	f7fe f81e 	bl	80028b0 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e058      	b.n	8004934 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004882:	4b04      	ldr	r3, [pc, #16]	; (8004894 <HAL_RCC_OscConfig+0x784>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d0f0      	beq.n	8004870 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800488e:	e050      	b.n	8004932 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e04f      	b.n	8004934 <HAL_RCC_OscConfig+0x824>
 8004894:	40021000 	.word	0x40021000
 8004898:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800489c:	4b27      	ldr	r3, [pc, #156]	; (800493c <HAL_RCC_OscConfig+0x82c>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d144      	bne.n	8004932 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80048a8:	4b24      	ldr	r3, [pc, #144]	; (800493c <HAL_RCC_OscConfig+0x82c>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a23      	ldr	r2, [pc, #140]	; (800493c <HAL_RCC_OscConfig+0x82c>)
 80048ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048b4:	4b21      	ldr	r3, [pc, #132]	; (800493c <HAL_RCC_OscConfig+0x82c>)
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	4a20      	ldr	r2, [pc, #128]	; (800493c <HAL_RCC_OscConfig+0x82c>)
 80048ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80048c0:	f7fd fff6 	bl	80028b0 <HAL_GetTick>
 80048c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048c8:	f7fd fff2 	bl	80028b0 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e02c      	b.n	8004934 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048da:	4b18      	ldr	r3, [pc, #96]	; (800493c <HAL_RCC_OscConfig+0x82c>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d0f0      	beq.n	80048c8 <HAL_RCC_OscConfig+0x7b8>
 80048e6:	e024      	b.n	8004932 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	2b0c      	cmp	r3, #12
 80048ec:	d01f      	beq.n	800492e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ee:	4b13      	ldr	r3, [pc, #76]	; (800493c <HAL_RCC_OscConfig+0x82c>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a12      	ldr	r2, [pc, #72]	; (800493c <HAL_RCC_OscConfig+0x82c>)
 80048f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048fa:	f7fd ffd9 	bl	80028b0 <HAL_GetTick>
 80048fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004900:	e008      	b.n	8004914 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004902:	f7fd ffd5 	bl	80028b0 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d901      	bls.n	8004914 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e00f      	b.n	8004934 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004914:	4b09      	ldr	r3, [pc, #36]	; (800493c <HAL_RCC_OscConfig+0x82c>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1f0      	bne.n	8004902 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004920:	4b06      	ldr	r3, [pc, #24]	; (800493c <HAL_RCC_OscConfig+0x82c>)
 8004922:	68da      	ldr	r2, [r3, #12]
 8004924:	4905      	ldr	r1, [pc, #20]	; (800493c <HAL_RCC_OscConfig+0x82c>)
 8004926:	4b06      	ldr	r3, [pc, #24]	; (8004940 <HAL_RCC_OscConfig+0x830>)
 8004928:	4013      	ands	r3, r2
 800492a:	60cb      	str	r3, [r1, #12]
 800492c:	e001      	b.n	8004932 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e000      	b.n	8004934 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3720      	adds	r7, #32
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	40021000 	.word	0x40021000
 8004940:	feeefffc 	.word	0xfeeefffc

08004944 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800494e:	2300      	movs	r3, #0
 8004950:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d101      	bne.n	800495c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e11d      	b.n	8004b98 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800495c:	4b90      	ldr	r3, [pc, #576]	; (8004ba0 <HAL_RCC_ClockConfig+0x25c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 030f 	and.w	r3, r3, #15
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	429a      	cmp	r2, r3
 8004968:	d910      	bls.n	800498c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800496a:	4b8d      	ldr	r3, [pc, #564]	; (8004ba0 <HAL_RCC_ClockConfig+0x25c>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f023 020f 	bic.w	r2, r3, #15
 8004972:	498b      	ldr	r1, [pc, #556]	; (8004ba0 <HAL_RCC_ClockConfig+0x25c>)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	4313      	orrs	r3, r2
 8004978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800497a:	4b89      	ldr	r3, [pc, #548]	; (8004ba0 <HAL_RCC_ClockConfig+0x25c>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 030f 	and.w	r3, r3, #15
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	429a      	cmp	r2, r3
 8004986:	d001      	beq.n	800498c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e105      	b.n	8004b98 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d010      	beq.n	80049ba <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689a      	ldr	r2, [r3, #8]
 800499c:	4b81      	ldr	r3, [pc, #516]	; (8004ba4 <HAL_RCC_ClockConfig+0x260>)
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d908      	bls.n	80049ba <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049a8:	4b7e      	ldr	r3, [pc, #504]	; (8004ba4 <HAL_RCC_ClockConfig+0x260>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	497b      	ldr	r1, [pc, #492]	; (8004ba4 <HAL_RCC_ClockConfig+0x260>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d079      	beq.n	8004aba <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	2b03      	cmp	r3, #3
 80049cc:	d11e      	bne.n	8004a0c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ce:	4b75      	ldr	r3, [pc, #468]	; (8004ba4 <HAL_RCC_ClockConfig+0x260>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e0dc      	b.n	8004b98 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80049de:	f000 fa09 	bl	8004df4 <RCC_GetSysClockFreqFromPLLSource>
 80049e2:	4603      	mov	r3, r0
 80049e4:	4a70      	ldr	r2, [pc, #448]	; (8004ba8 <HAL_RCC_ClockConfig+0x264>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d946      	bls.n	8004a78 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80049ea:	4b6e      	ldr	r3, [pc, #440]	; (8004ba4 <HAL_RCC_ClockConfig+0x260>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d140      	bne.n	8004a78 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80049f6:	4b6b      	ldr	r3, [pc, #428]	; (8004ba4 <HAL_RCC_ClockConfig+0x260>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049fe:	4a69      	ldr	r2, [pc, #420]	; (8004ba4 <HAL_RCC_ClockConfig+0x260>)
 8004a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a04:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004a06:	2380      	movs	r3, #128	; 0x80
 8004a08:	617b      	str	r3, [r7, #20]
 8004a0a:	e035      	b.n	8004a78 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d107      	bne.n	8004a24 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a14:	4b63      	ldr	r3, [pc, #396]	; (8004ba4 <HAL_RCC_ClockConfig+0x260>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d115      	bne.n	8004a4c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e0b9      	b.n	8004b98 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d107      	bne.n	8004a3c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a2c:	4b5d      	ldr	r3, [pc, #372]	; (8004ba4 <HAL_RCC_ClockConfig+0x260>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d109      	bne.n	8004a4c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e0ad      	b.n	8004b98 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a3c:	4b59      	ldr	r3, [pc, #356]	; (8004ba4 <HAL_RCC_ClockConfig+0x260>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d101      	bne.n	8004a4c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e0a5      	b.n	8004b98 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004a4c:	f000 f8b4 	bl	8004bb8 <HAL_RCC_GetSysClockFreq>
 8004a50:	4603      	mov	r3, r0
 8004a52:	4a55      	ldr	r2, [pc, #340]	; (8004ba8 <HAL_RCC_ClockConfig+0x264>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d90f      	bls.n	8004a78 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004a58:	4b52      	ldr	r3, [pc, #328]	; (8004ba4 <HAL_RCC_ClockConfig+0x260>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d109      	bne.n	8004a78 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a64:	4b4f      	ldr	r3, [pc, #316]	; (8004ba4 <HAL_RCC_ClockConfig+0x260>)
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a6c:	4a4d      	ldr	r2, [pc, #308]	; (8004ba4 <HAL_RCC_ClockConfig+0x260>)
 8004a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a72:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004a74:	2380      	movs	r3, #128	; 0x80
 8004a76:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a78:	4b4a      	ldr	r3, [pc, #296]	; (8004ba4 <HAL_RCC_ClockConfig+0x260>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f023 0203 	bic.w	r2, r3, #3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	4947      	ldr	r1, [pc, #284]	; (8004ba4 <HAL_RCC_ClockConfig+0x260>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a8a:	f7fd ff11 	bl	80028b0 <HAL_GetTick>
 8004a8e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a90:	e00a      	b.n	8004aa8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a92:	f7fd ff0d 	bl	80028b0 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e077      	b.n	8004b98 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aa8:	4b3e      	ldr	r3, [pc, #248]	; (8004ba4 <HAL_RCC_ClockConfig+0x260>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f003 020c 	and.w	r2, r3, #12
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d1eb      	bne.n	8004a92 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	2b80      	cmp	r3, #128	; 0x80
 8004abe:	d105      	bne.n	8004acc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004ac0:	4b38      	ldr	r3, [pc, #224]	; (8004ba4 <HAL_RCC_ClockConfig+0x260>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	4a37      	ldr	r2, [pc, #220]	; (8004ba4 <HAL_RCC_ClockConfig+0x260>)
 8004ac6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004aca:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d010      	beq.n	8004afa <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	4b31      	ldr	r3, [pc, #196]	; (8004ba4 <HAL_RCC_ClockConfig+0x260>)
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d208      	bcs.n	8004afa <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ae8:	4b2e      	ldr	r3, [pc, #184]	; (8004ba4 <HAL_RCC_ClockConfig+0x260>)
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	492b      	ldr	r1, [pc, #172]	; (8004ba4 <HAL_RCC_ClockConfig+0x260>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004afa:	4b29      	ldr	r3, [pc, #164]	; (8004ba0 <HAL_RCC_ClockConfig+0x25c>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 030f 	and.w	r3, r3, #15
 8004b02:	683a      	ldr	r2, [r7, #0]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d210      	bcs.n	8004b2a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b08:	4b25      	ldr	r3, [pc, #148]	; (8004ba0 <HAL_RCC_ClockConfig+0x25c>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f023 020f 	bic.w	r2, r3, #15
 8004b10:	4923      	ldr	r1, [pc, #140]	; (8004ba0 <HAL_RCC_ClockConfig+0x25c>)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b18:	4b21      	ldr	r3, [pc, #132]	; (8004ba0 <HAL_RCC_ClockConfig+0x25c>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 030f 	and.w	r3, r3, #15
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d001      	beq.n	8004b2a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e036      	b.n	8004b98 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0304 	and.w	r3, r3, #4
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d008      	beq.n	8004b48 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b36:	4b1b      	ldr	r3, [pc, #108]	; (8004ba4 <HAL_RCC_ClockConfig+0x260>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	4918      	ldr	r1, [pc, #96]	; (8004ba4 <HAL_RCC_ClockConfig+0x260>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0308 	and.w	r3, r3, #8
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d009      	beq.n	8004b68 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b54:	4b13      	ldr	r3, [pc, #76]	; (8004ba4 <HAL_RCC_ClockConfig+0x260>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	00db      	lsls	r3, r3, #3
 8004b62:	4910      	ldr	r1, [pc, #64]	; (8004ba4 <HAL_RCC_ClockConfig+0x260>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b68:	f000 f826 	bl	8004bb8 <HAL_RCC_GetSysClockFreq>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	4b0d      	ldr	r3, [pc, #52]	; (8004ba4 <HAL_RCC_ClockConfig+0x260>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	091b      	lsrs	r3, r3, #4
 8004b74:	f003 030f 	and.w	r3, r3, #15
 8004b78:	490c      	ldr	r1, [pc, #48]	; (8004bac <HAL_RCC_ClockConfig+0x268>)
 8004b7a:	5ccb      	ldrb	r3, [r1, r3]
 8004b7c:	f003 031f 	and.w	r3, r3, #31
 8004b80:	fa22 f303 	lsr.w	r3, r2, r3
 8004b84:	4a0a      	ldr	r2, [pc, #40]	; (8004bb0 <HAL_RCC_ClockConfig+0x26c>)
 8004b86:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004b88:	4b0a      	ldr	r3, [pc, #40]	; (8004bb4 <HAL_RCC_ClockConfig+0x270>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7fd fe3f 	bl	8002810 <HAL_InitTick>
 8004b92:	4603      	mov	r3, r0
 8004b94:	73fb      	strb	r3, [r7, #15]

  return status;
 8004b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3718      	adds	r7, #24
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	40022000 	.word	0x40022000
 8004ba4:	40021000 	.word	0x40021000
 8004ba8:	04c4b400 	.word	0x04c4b400
 8004bac:	0800b2f4 	.word	0x0800b2f4
 8004bb0:	20000008 	.word	0x20000008
 8004bb4:	2000000c 	.word	0x2000000c

08004bb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b089      	sub	sp, #36	; 0x24
 8004bbc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	61fb      	str	r3, [r7, #28]
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bc6:	4b3e      	ldr	r3, [pc, #248]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f003 030c 	and.w	r3, r3, #12
 8004bce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bd0:	4b3b      	ldr	r3, [pc, #236]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f003 0303 	and.w	r3, r3, #3
 8004bd8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d005      	beq.n	8004bec <HAL_RCC_GetSysClockFreq+0x34>
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	2b0c      	cmp	r3, #12
 8004be4:	d121      	bne.n	8004c2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d11e      	bne.n	8004c2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004bec:	4b34      	ldr	r3, [pc, #208]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0308 	and.w	r3, r3, #8
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d107      	bne.n	8004c08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004bf8:	4b31      	ldr	r3, [pc, #196]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bfe:	0a1b      	lsrs	r3, r3, #8
 8004c00:	f003 030f 	and.w	r3, r3, #15
 8004c04:	61fb      	str	r3, [r7, #28]
 8004c06:	e005      	b.n	8004c14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c08:	4b2d      	ldr	r3, [pc, #180]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	091b      	lsrs	r3, r3, #4
 8004c0e:	f003 030f 	and.w	r3, r3, #15
 8004c12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c14:	4a2b      	ldr	r2, [pc, #172]	; (8004cc4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10d      	bne.n	8004c40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c28:	e00a      	b.n	8004c40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	2b04      	cmp	r3, #4
 8004c2e:	d102      	bne.n	8004c36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c30:	4b25      	ldr	r3, [pc, #148]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c32:	61bb      	str	r3, [r7, #24]
 8004c34:	e004      	b.n	8004c40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	2b08      	cmp	r3, #8
 8004c3a:	d101      	bne.n	8004c40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c3c:	4b23      	ldr	r3, [pc, #140]	; (8004ccc <HAL_RCC_GetSysClockFreq+0x114>)
 8004c3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	2b0c      	cmp	r3, #12
 8004c44:	d134      	bne.n	8004cb0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c46:	4b1e      	ldr	r3, [pc, #120]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d003      	beq.n	8004c5e <HAL_RCC_GetSysClockFreq+0xa6>
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2b03      	cmp	r3, #3
 8004c5a:	d003      	beq.n	8004c64 <HAL_RCC_GetSysClockFreq+0xac>
 8004c5c:	e005      	b.n	8004c6a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004c5e:	4b1a      	ldr	r3, [pc, #104]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c60:	617b      	str	r3, [r7, #20]
      break;
 8004c62:	e005      	b.n	8004c70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004c64:	4b19      	ldr	r3, [pc, #100]	; (8004ccc <HAL_RCC_GetSysClockFreq+0x114>)
 8004c66:	617b      	str	r3, [r7, #20]
      break;
 8004c68:	e002      	b.n	8004c70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	617b      	str	r3, [r7, #20]
      break;
 8004c6e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c70:	4b13      	ldr	r3, [pc, #76]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	091b      	lsrs	r3, r3, #4
 8004c76:	f003 030f 	and.w	r3, r3, #15
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004c7e:	4b10      	ldr	r3, [pc, #64]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	0a1b      	lsrs	r3, r3, #8
 8004c84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	fb03 f202 	mul.w	r2, r3, r2
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c94:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c96:	4b0a      	ldr	r3, [pc, #40]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	0e5b      	lsrs	r3, r3, #25
 8004c9c:	f003 0303 	and.w	r3, r3, #3
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	005b      	lsls	r3, r3, #1
 8004ca4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004cb0:	69bb      	ldr	r3, [r7, #24]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3724      	adds	r7, #36	; 0x24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	40021000 	.word	0x40021000
 8004cc4:	0800b30c 	.word	0x0800b30c
 8004cc8:	00f42400 	.word	0x00f42400
 8004ccc:	007a1200 	.word	0x007a1200

08004cd0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cd4:	4b03      	ldr	r3, [pc, #12]	; (8004ce4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	20000008 	.word	0x20000008

08004ce8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004cec:	f7ff fff0 	bl	8004cd0 <HAL_RCC_GetHCLKFreq>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	4b06      	ldr	r3, [pc, #24]	; (8004d0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	0a1b      	lsrs	r3, r3, #8
 8004cf8:	f003 0307 	and.w	r3, r3, #7
 8004cfc:	4904      	ldr	r1, [pc, #16]	; (8004d10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004cfe:	5ccb      	ldrb	r3, [r1, r3]
 8004d00:	f003 031f 	and.w	r3, r3, #31
 8004d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	40021000 	.word	0x40021000
 8004d10:	0800b304 	.word	0x0800b304

08004d14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d18:	f7ff ffda 	bl	8004cd0 <HAL_RCC_GetHCLKFreq>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	4b06      	ldr	r3, [pc, #24]	; (8004d38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	0adb      	lsrs	r3, r3, #11
 8004d24:	f003 0307 	and.w	r3, r3, #7
 8004d28:	4904      	ldr	r1, [pc, #16]	; (8004d3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d2a:	5ccb      	ldrb	r3, [r1, r3]
 8004d2c:	f003 031f 	and.w	r3, r3, #31
 8004d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	40021000 	.word	0x40021000
 8004d3c:	0800b304 	.word	0x0800b304

08004d40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004d48:	2300      	movs	r3, #0
 8004d4a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d4c:	4b27      	ldr	r3, [pc, #156]	; (8004dec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004d58:	f7ff f906 	bl	8003f68 <HAL_PWREx_GetVoltageRange>
 8004d5c:	6178      	str	r0, [r7, #20]
 8004d5e:	e014      	b.n	8004d8a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d60:	4b22      	ldr	r3, [pc, #136]	; (8004dec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d64:	4a21      	ldr	r2, [pc, #132]	; (8004dec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d6a:	6593      	str	r3, [r2, #88]	; 0x58
 8004d6c:	4b1f      	ldr	r3, [pc, #124]	; (8004dec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d74:	60fb      	str	r3, [r7, #12]
 8004d76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004d78:	f7ff f8f6 	bl	8003f68 <HAL_PWREx_GetVoltageRange>
 8004d7c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004d7e:	4b1b      	ldr	r3, [pc, #108]	; (8004dec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d82:	4a1a      	ldr	r2, [pc, #104]	; (8004dec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d88:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d90:	d10b      	bne.n	8004daa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b80      	cmp	r3, #128	; 0x80
 8004d96:	d913      	bls.n	8004dc0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2ba0      	cmp	r3, #160	; 0xa0
 8004d9c:	d902      	bls.n	8004da4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d9e:	2302      	movs	r3, #2
 8004da0:	613b      	str	r3, [r7, #16]
 8004da2:	e00d      	b.n	8004dc0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004da4:	2301      	movs	r3, #1
 8004da6:	613b      	str	r3, [r7, #16]
 8004da8:	e00a      	b.n	8004dc0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b7f      	cmp	r3, #127	; 0x7f
 8004dae:	d902      	bls.n	8004db6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004db0:	2302      	movs	r3, #2
 8004db2:	613b      	str	r3, [r7, #16]
 8004db4:	e004      	b.n	8004dc0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b70      	cmp	r3, #112	; 0x70
 8004dba:	d101      	bne.n	8004dc0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004dc0:	4b0b      	ldr	r3, [pc, #44]	; (8004df0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f023 020f 	bic.w	r2, r3, #15
 8004dc8:	4909      	ldr	r1, [pc, #36]	; (8004df0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004dd0:	4b07      	ldr	r3, [pc, #28]	; (8004df0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 030f 	and.w	r3, r3, #15
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d001      	beq.n	8004de2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e000      	b.n	8004de4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3718      	adds	r7, #24
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	40021000 	.word	0x40021000
 8004df0:	40022000 	.word	0x40022000

08004df4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b087      	sub	sp, #28
 8004df8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004dfa:	4b2d      	ldr	r3, [pc, #180]	; (8004eb0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	f003 0303 	and.w	r3, r3, #3
 8004e02:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2b03      	cmp	r3, #3
 8004e08:	d00b      	beq.n	8004e22 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2b03      	cmp	r3, #3
 8004e0e:	d825      	bhi.n	8004e5c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d008      	beq.n	8004e28 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d11f      	bne.n	8004e5c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004e1c:	4b25      	ldr	r3, [pc, #148]	; (8004eb4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004e1e:	613b      	str	r3, [r7, #16]
    break;
 8004e20:	e01f      	b.n	8004e62 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004e22:	4b25      	ldr	r3, [pc, #148]	; (8004eb8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004e24:	613b      	str	r3, [r7, #16]
    break;
 8004e26:	e01c      	b.n	8004e62 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004e28:	4b21      	ldr	r3, [pc, #132]	; (8004eb0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0308 	and.w	r3, r3, #8
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d107      	bne.n	8004e44 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e34:	4b1e      	ldr	r3, [pc, #120]	; (8004eb0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e3a:	0a1b      	lsrs	r3, r3, #8
 8004e3c:	f003 030f 	and.w	r3, r3, #15
 8004e40:	617b      	str	r3, [r7, #20]
 8004e42:	e005      	b.n	8004e50 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e44:	4b1a      	ldr	r3, [pc, #104]	; (8004eb0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	091b      	lsrs	r3, r3, #4
 8004e4a:	f003 030f 	and.w	r3, r3, #15
 8004e4e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004e50:	4a1a      	ldr	r2, [pc, #104]	; (8004ebc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e58:	613b      	str	r3, [r7, #16]
    break;
 8004e5a:	e002      	b.n	8004e62 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	613b      	str	r3, [r7, #16]
    break;
 8004e60:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e62:	4b13      	ldr	r3, [pc, #76]	; (8004eb0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	091b      	lsrs	r3, r3, #4
 8004e68:	f003 030f 	and.w	r3, r3, #15
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e70:	4b0f      	ldr	r3, [pc, #60]	; (8004eb0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	0a1b      	lsrs	r3, r3, #8
 8004e76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	fb03 f202 	mul.w	r2, r3, r2
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e86:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e88:	4b09      	ldr	r3, [pc, #36]	; (8004eb0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	0e5b      	lsrs	r3, r3, #25
 8004e8e:	f003 0303 	and.w	r3, r3, #3
 8004e92:	3301      	adds	r3, #1
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004ea2:	683b      	ldr	r3, [r7, #0]
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	371c      	adds	r7, #28
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	00f42400 	.word	0x00f42400
 8004eb8:	007a1200 	.word	0x007a1200
 8004ebc:	0800b30c 	.word	0x0800b30c

08004ec0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ec8:	2300      	movs	r3, #0
 8004eca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ecc:	2300      	movs	r3, #0
 8004ece:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d040      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ee0:	2b80      	cmp	r3, #128	; 0x80
 8004ee2:	d02a      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004ee4:	2b80      	cmp	r3, #128	; 0x80
 8004ee6:	d825      	bhi.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004ee8:	2b60      	cmp	r3, #96	; 0x60
 8004eea:	d026      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004eec:	2b60      	cmp	r3, #96	; 0x60
 8004eee:	d821      	bhi.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004ef0:	2b40      	cmp	r3, #64	; 0x40
 8004ef2:	d006      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004ef4:	2b40      	cmp	r3, #64	; 0x40
 8004ef6:	d81d      	bhi.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d009      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004efc:	2b20      	cmp	r3, #32
 8004efe:	d010      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004f00:	e018      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f02:	4b89      	ldr	r3, [pc, #548]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	4a88      	ldr	r2, [pc, #544]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f0c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f0e:	e015      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	3304      	adds	r3, #4
 8004f14:	2100      	movs	r1, #0
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 fb02 	bl	8005520 <RCCEx_PLLSAI1_Config>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f20:	e00c      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	3320      	adds	r3, #32
 8004f26:	2100      	movs	r1, #0
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f000 fbed 	bl	8005708 <RCCEx_PLLSAI2_Config>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f32:	e003      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	74fb      	strb	r3, [r7, #19]
      break;
 8004f38:	e000      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004f3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f3c:	7cfb      	ldrb	r3, [r7, #19]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10b      	bne.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f42:	4b79      	ldr	r3, [pc, #484]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f48:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f50:	4975      	ldr	r1, [pc, #468]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004f58:	e001      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f5a:	7cfb      	ldrb	r3, [r7, #19]
 8004f5c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d047      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f72:	d030      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f78:	d82a      	bhi.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004f7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f7e:	d02a      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004f80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f84:	d824      	bhi.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004f86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f8a:	d008      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f90:	d81e      	bhi.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00a      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004f96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f9a:	d010      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004f9c:	e018      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f9e:	4b62      	ldr	r3, [pc, #392]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	4a61      	ldr	r2, [pc, #388]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fa8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004faa:	e015      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	3304      	adds	r3, #4
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f000 fab4 	bl	8005520 <RCCEx_PLLSAI1_Config>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004fbc:	e00c      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	3320      	adds	r3, #32
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f000 fb9f 	bl	8005708 <RCCEx_PLLSAI2_Config>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004fce:	e003      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	74fb      	strb	r3, [r7, #19]
      break;
 8004fd4:	e000      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004fd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fd8:	7cfb      	ldrb	r3, [r7, #19]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10b      	bne.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004fde:	4b52      	ldr	r3, [pc, #328]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fe0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fe4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fec:	494e      	ldr	r1, [pc, #312]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004ff4:	e001      	b.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff6:	7cfb      	ldrb	r3, [r7, #19]
 8004ff8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 809f 	beq.w	8005146 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005008:	2300      	movs	r3, #0
 800500a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800500c:	4b46      	ldr	r3, [pc, #280]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800500e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005018:	2301      	movs	r3, #1
 800501a:	e000      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800501c:	2300      	movs	r3, #0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00d      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005022:	4b41      	ldr	r3, [pc, #260]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005026:	4a40      	ldr	r2, [pc, #256]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800502c:	6593      	str	r3, [r2, #88]	; 0x58
 800502e:	4b3e      	ldr	r3, [pc, #248]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005036:	60bb      	str	r3, [r7, #8]
 8005038:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800503a:	2301      	movs	r3, #1
 800503c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800503e:	4b3b      	ldr	r3, [pc, #236]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a3a      	ldr	r2, [pc, #232]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005048:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800504a:	f7fd fc31 	bl	80028b0 <HAL_GetTick>
 800504e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005050:	e009      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005052:	f7fd fc2d 	bl	80028b0 <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	2b02      	cmp	r3, #2
 800505e:	d902      	bls.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	74fb      	strb	r3, [r7, #19]
        break;
 8005064:	e005      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005066:	4b31      	ldr	r3, [pc, #196]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800506e:	2b00      	cmp	r3, #0
 8005070:	d0ef      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005072:	7cfb      	ldrb	r3, [r7, #19]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d15b      	bne.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005078:	4b2b      	ldr	r3, [pc, #172]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800507a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800507e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005082:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d01f      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	429a      	cmp	r2, r3
 8005094:	d019      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005096:	4b24      	ldr	r3, [pc, #144]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800509c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050a0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050a2:	4b21      	ldr	r3, [pc, #132]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a8:	4a1f      	ldr	r2, [pc, #124]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050b2:	4b1d      	ldr	r3, [pc, #116]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b8:	4a1b      	ldr	r2, [pc, #108]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80050c2:	4a19      	ldr	r2, [pc, #100]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d016      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d4:	f7fd fbec 	bl	80028b0 <HAL_GetTick>
 80050d8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050da:	e00b      	b.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050dc:	f7fd fbe8 	bl	80028b0 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d902      	bls.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	74fb      	strb	r3, [r7, #19]
            break;
 80050f2:	e006      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050f4:	4b0c      	ldr	r3, [pc, #48]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d0ec      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005102:	7cfb      	ldrb	r3, [r7, #19]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10c      	bne.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005108:	4b07      	ldr	r3, [pc, #28]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800510a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005118:	4903      	ldr	r1, [pc, #12]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800511a:	4313      	orrs	r3, r2
 800511c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005120:	e008      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005122:	7cfb      	ldrb	r3, [r7, #19]
 8005124:	74bb      	strb	r3, [r7, #18]
 8005126:	e005      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005128:	40021000 	.word	0x40021000
 800512c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005130:	7cfb      	ldrb	r3, [r7, #19]
 8005132:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005134:	7c7b      	ldrb	r3, [r7, #17]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d105      	bne.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800513a:	4ba0      	ldr	r3, [pc, #640]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800513c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800513e:	4a9f      	ldr	r2, [pc, #636]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005140:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005144:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00a      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005152:	4b9a      	ldr	r3, [pc, #616]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005158:	f023 0203 	bic.w	r2, r3, #3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005160:	4996      	ldr	r1, [pc, #600]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005162:	4313      	orrs	r3, r2
 8005164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00a      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005174:	4b91      	ldr	r3, [pc, #580]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517a:	f023 020c 	bic.w	r2, r3, #12
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005182:	498e      	ldr	r1, [pc, #568]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005184:	4313      	orrs	r3, r2
 8005186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0304 	and.w	r3, r3, #4
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00a      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005196:	4b89      	ldr	r3, [pc, #548]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800519c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a4:	4985      	ldr	r1, [pc, #532]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0308 	and.w	r3, r3, #8
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00a      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80051b8:	4b80      	ldr	r3, [pc, #512]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051c6:	497d      	ldr	r1, [pc, #500]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0310 	and.w	r3, r3, #16
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00a      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80051da:	4b78      	ldr	r3, [pc, #480]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051e8:	4974      	ldr	r1, [pc, #464]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0320 	and.w	r3, r3, #32
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00a      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051fc:	4b6f      	ldr	r3, [pc, #444]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005202:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800520a:	496c      	ldr	r1, [pc, #432]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800520c:	4313      	orrs	r3, r2
 800520e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00a      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800521e:	4b67      	ldr	r3, [pc, #412]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005224:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800522c:	4963      	ldr	r1, [pc, #396]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800522e:	4313      	orrs	r3, r2
 8005230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00a      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005240:	4b5e      	ldr	r3, [pc, #376]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005246:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800524e:	495b      	ldr	r1, [pc, #364]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005250:	4313      	orrs	r3, r2
 8005252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00a      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005262:	4b56      	ldr	r3, [pc, #344]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005268:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005270:	4952      	ldr	r1, [pc, #328]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005272:	4313      	orrs	r3, r2
 8005274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00a      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005284:	4b4d      	ldr	r3, [pc, #308]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800528a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005292:	494a      	ldr	r1, [pc, #296]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005294:	4313      	orrs	r3, r2
 8005296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00a      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052a6:	4b45      	ldr	r3, [pc, #276]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052b4:	4941      	ldr	r1, [pc, #260]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00a      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80052c8:	4b3c      	ldr	r3, [pc, #240]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052ce:	f023 0203 	bic.w	r2, r3, #3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052d6:	4939      	ldr	r1, [pc, #228]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d028      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052ea:	4b34      	ldr	r3, [pc, #208]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052f8:	4930      	ldr	r1, [pc, #192]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005304:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005308:	d106      	bne.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800530a:	4b2c      	ldr	r3, [pc, #176]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	4a2b      	ldr	r2, [pc, #172]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005310:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005314:	60d3      	str	r3, [r2, #12]
 8005316:	e011      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800531c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005320:	d10c      	bne.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	3304      	adds	r3, #4
 8005326:	2101      	movs	r1, #1
 8005328:	4618      	mov	r0, r3
 800532a:	f000 f8f9 	bl	8005520 <RCCEx_PLLSAI1_Config>
 800532e:	4603      	mov	r3, r0
 8005330:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005332:	7cfb      	ldrb	r3, [r7, #19]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d001      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005338:	7cfb      	ldrb	r3, [r7, #19]
 800533a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d04d      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800534c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005350:	d108      	bne.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005352:	4b1a      	ldr	r3, [pc, #104]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005354:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005358:	4a18      	ldr	r2, [pc, #96]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800535a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800535e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005362:	e012      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005364:	4b15      	ldr	r3, [pc, #84]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005366:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800536a:	4a14      	ldr	r2, [pc, #80]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800536c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005370:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005374:	4b11      	ldr	r3, [pc, #68]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800537a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005382:	490e      	ldr	r1, [pc, #56]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005384:	4313      	orrs	r3, r2
 8005386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800538e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005392:	d106      	bne.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005394:	4b09      	ldr	r3, [pc, #36]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	4a08      	ldr	r2, [pc, #32]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800539a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800539e:	60d3      	str	r3, [r2, #12]
 80053a0:	e020      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053aa:	d109      	bne.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80053ac:	4b03      	ldr	r3, [pc, #12]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	4a02      	ldr	r2, [pc, #8]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053b6:	60d3      	str	r3, [r2, #12]
 80053b8:	e014      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80053ba:	bf00      	nop
 80053bc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053c8:	d10c      	bne.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	3304      	adds	r3, #4
 80053ce:	2101      	movs	r1, #1
 80053d0:	4618      	mov	r0, r3
 80053d2:	f000 f8a5 	bl	8005520 <RCCEx_PLLSAI1_Config>
 80053d6:	4603      	mov	r3, r0
 80053d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053da:	7cfb      	ldrb	r3, [r7, #19]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d001      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80053e0:	7cfb      	ldrb	r3, [r7, #19]
 80053e2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d028      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053f0:	4b4a      	ldr	r3, [pc, #296]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053fe:	4947      	ldr	r1, [pc, #284]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005400:	4313      	orrs	r3, r2
 8005402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800540a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800540e:	d106      	bne.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005410:	4b42      	ldr	r3, [pc, #264]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	4a41      	ldr	r2, [pc, #260]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005416:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800541a:	60d3      	str	r3, [r2, #12]
 800541c:	e011      	b.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005422:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005426:	d10c      	bne.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	3304      	adds	r3, #4
 800542c:	2101      	movs	r1, #1
 800542e:	4618      	mov	r0, r3
 8005430:	f000 f876 	bl	8005520 <RCCEx_PLLSAI1_Config>
 8005434:	4603      	mov	r3, r0
 8005436:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005438:	7cfb      	ldrb	r3, [r7, #19]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800543e:	7cfb      	ldrb	r3, [r7, #19]
 8005440:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d01e      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800544e:	4b33      	ldr	r3, [pc, #204]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005454:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800545e:	492f      	ldr	r1, [pc, #188]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005460:	4313      	orrs	r3, r2
 8005462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800546c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005470:	d10c      	bne.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	3304      	adds	r3, #4
 8005476:	2102      	movs	r1, #2
 8005478:	4618      	mov	r0, r3
 800547a:	f000 f851 	bl	8005520 <RCCEx_PLLSAI1_Config>
 800547e:	4603      	mov	r3, r0
 8005480:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005482:	7cfb      	ldrb	r3, [r7, #19]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d001      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005488:	7cfb      	ldrb	r3, [r7, #19]
 800548a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00b      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005498:	4b20      	ldr	r3, [pc, #128]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800549a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800549e:	f023 0204 	bic.w	r2, r3, #4
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054a8:	491c      	ldr	r1, [pc, #112]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00b      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80054bc:	4b17      	ldr	r3, [pc, #92]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054c2:	f023 0218 	bic.w	r2, r3, #24
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054cc:	4913      	ldr	r1, [pc, #76]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d017      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80054e0:	4b0e      	ldr	r3, [pc, #56]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054f0:	490a      	ldr	r1, [pc, #40]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005502:	d105      	bne.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005504:	4b05      	ldr	r3, [pc, #20]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	4a04      	ldr	r2, [pc, #16]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800550a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800550e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005510:	7cbb      	ldrb	r3, [r7, #18]
}
 8005512:	4618      	mov	r0, r3
 8005514:	3718      	adds	r7, #24
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	40021000 	.word	0x40021000

08005520 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800552a:	2300      	movs	r3, #0
 800552c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800552e:	4b72      	ldr	r3, [pc, #456]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	f003 0303 	and.w	r3, r3, #3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00e      	beq.n	8005558 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800553a:	4b6f      	ldr	r3, [pc, #444]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	f003 0203 	and.w	r2, r3, #3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	429a      	cmp	r2, r3
 8005548:	d103      	bne.n	8005552 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
       ||
 800554e:	2b00      	cmp	r3, #0
 8005550:	d142      	bne.n	80055d8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	73fb      	strb	r3, [r7, #15]
 8005556:	e03f      	b.n	80055d8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2b03      	cmp	r3, #3
 800555e:	d018      	beq.n	8005592 <RCCEx_PLLSAI1_Config+0x72>
 8005560:	2b03      	cmp	r3, #3
 8005562:	d825      	bhi.n	80055b0 <RCCEx_PLLSAI1_Config+0x90>
 8005564:	2b01      	cmp	r3, #1
 8005566:	d002      	beq.n	800556e <RCCEx_PLLSAI1_Config+0x4e>
 8005568:	2b02      	cmp	r3, #2
 800556a:	d009      	beq.n	8005580 <RCCEx_PLLSAI1_Config+0x60>
 800556c:	e020      	b.n	80055b0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800556e:	4b62      	ldr	r3, [pc, #392]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0302 	and.w	r3, r3, #2
 8005576:	2b00      	cmp	r3, #0
 8005578:	d11d      	bne.n	80055b6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800557e:	e01a      	b.n	80055b6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005580:	4b5d      	ldr	r3, [pc, #372]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005588:	2b00      	cmp	r3, #0
 800558a:	d116      	bne.n	80055ba <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005590:	e013      	b.n	80055ba <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005592:	4b59      	ldr	r3, [pc, #356]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10f      	bne.n	80055be <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800559e:	4b56      	ldr	r3, [pc, #344]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d109      	bne.n	80055be <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80055ae:	e006      	b.n	80055be <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	73fb      	strb	r3, [r7, #15]
      break;
 80055b4:	e004      	b.n	80055c0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80055b6:	bf00      	nop
 80055b8:	e002      	b.n	80055c0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80055ba:	bf00      	nop
 80055bc:	e000      	b.n	80055c0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80055be:	bf00      	nop
    }

    if(status == HAL_OK)
 80055c0:	7bfb      	ldrb	r3, [r7, #15]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d108      	bne.n	80055d8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80055c6:	4b4c      	ldr	r3, [pc, #304]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	f023 0203 	bic.w	r2, r3, #3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4949      	ldr	r1, [pc, #292]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80055d8:	7bfb      	ldrb	r3, [r7, #15]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f040 8086 	bne.w	80056ec <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80055e0:	4b45      	ldr	r3, [pc, #276]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a44      	ldr	r2, [pc, #272]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80055ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055ec:	f7fd f960 	bl	80028b0 <HAL_GetTick>
 80055f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80055f2:	e009      	b.n	8005608 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055f4:	f7fd f95c 	bl	80028b0 <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d902      	bls.n	8005608 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	73fb      	strb	r3, [r7, #15]
        break;
 8005606:	e005      	b.n	8005614 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005608:	4b3b      	ldr	r3, [pc, #236]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1ef      	bne.n	80055f4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005614:	7bfb      	ldrb	r3, [r7, #15]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d168      	bne.n	80056ec <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d113      	bne.n	8005648 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005620:	4b35      	ldr	r3, [pc, #212]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005622:	691a      	ldr	r2, [r3, #16]
 8005624:	4b35      	ldr	r3, [pc, #212]	; (80056fc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005626:	4013      	ands	r3, r2
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	6892      	ldr	r2, [r2, #8]
 800562c:	0211      	lsls	r1, r2, #8
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	68d2      	ldr	r2, [r2, #12]
 8005632:	06d2      	lsls	r2, r2, #27
 8005634:	4311      	orrs	r1, r2
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	6852      	ldr	r2, [r2, #4]
 800563a:	3a01      	subs	r2, #1
 800563c:	0112      	lsls	r2, r2, #4
 800563e:	430a      	orrs	r2, r1
 8005640:	492d      	ldr	r1, [pc, #180]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005642:	4313      	orrs	r3, r2
 8005644:	610b      	str	r3, [r1, #16]
 8005646:	e02d      	b.n	80056a4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d115      	bne.n	800567a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800564e:	4b2a      	ldr	r3, [pc, #168]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005650:	691a      	ldr	r2, [r3, #16]
 8005652:	4b2b      	ldr	r3, [pc, #172]	; (8005700 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005654:	4013      	ands	r3, r2
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	6892      	ldr	r2, [r2, #8]
 800565a:	0211      	lsls	r1, r2, #8
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	6912      	ldr	r2, [r2, #16]
 8005660:	0852      	lsrs	r2, r2, #1
 8005662:	3a01      	subs	r2, #1
 8005664:	0552      	lsls	r2, r2, #21
 8005666:	4311      	orrs	r1, r2
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	6852      	ldr	r2, [r2, #4]
 800566c:	3a01      	subs	r2, #1
 800566e:	0112      	lsls	r2, r2, #4
 8005670:	430a      	orrs	r2, r1
 8005672:	4921      	ldr	r1, [pc, #132]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005674:	4313      	orrs	r3, r2
 8005676:	610b      	str	r3, [r1, #16]
 8005678:	e014      	b.n	80056a4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800567a:	4b1f      	ldr	r3, [pc, #124]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800567c:	691a      	ldr	r2, [r3, #16]
 800567e:	4b21      	ldr	r3, [pc, #132]	; (8005704 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005680:	4013      	ands	r3, r2
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	6892      	ldr	r2, [r2, #8]
 8005686:	0211      	lsls	r1, r2, #8
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	6952      	ldr	r2, [r2, #20]
 800568c:	0852      	lsrs	r2, r2, #1
 800568e:	3a01      	subs	r2, #1
 8005690:	0652      	lsls	r2, r2, #25
 8005692:	4311      	orrs	r1, r2
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	6852      	ldr	r2, [r2, #4]
 8005698:	3a01      	subs	r2, #1
 800569a:	0112      	lsls	r2, r2, #4
 800569c:	430a      	orrs	r2, r1
 800569e:	4916      	ldr	r1, [pc, #88]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80056a4:	4b14      	ldr	r3, [pc, #80]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a13      	ldr	r2, [pc, #76]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80056ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056b0:	f7fd f8fe 	bl	80028b0 <HAL_GetTick>
 80056b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80056b6:	e009      	b.n	80056cc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056b8:	f7fd f8fa 	bl	80028b0 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d902      	bls.n	80056cc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	73fb      	strb	r3, [r7, #15]
          break;
 80056ca:	e005      	b.n	80056d8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80056cc:	4b0a      	ldr	r3, [pc, #40]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d0ef      	beq.n	80056b8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80056d8:	7bfb      	ldrb	r3, [r7, #15]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d106      	bne.n	80056ec <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80056de:	4b06      	ldr	r3, [pc, #24]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056e0:	691a      	ldr	r2, [r3, #16]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	4904      	ldr	r1, [pc, #16]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80056ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	40021000 	.word	0x40021000
 80056fc:	07ff800f 	.word	0x07ff800f
 8005700:	ff9f800f 	.word	0xff9f800f
 8005704:	f9ff800f 	.word	0xf9ff800f

08005708 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005712:	2300      	movs	r3, #0
 8005714:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005716:	4b72      	ldr	r3, [pc, #456]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	f003 0303 	and.w	r3, r3, #3
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00e      	beq.n	8005740 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005722:	4b6f      	ldr	r3, [pc, #444]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	f003 0203 	and.w	r2, r3, #3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	429a      	cmp	r2, r3
 8005730:	d103      	bne.n	800573a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
       ||
 8005736:	2b00      	cmp	r3, #0
 8005738:	d142      	bne.n	80057c0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	73fb      	strb	r3, [r7, #15]
 800573e:	e03f      	b.n	80057c0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2b03      	cmp	r3, #3
 8005746:	d018      	beq.n	800577a <RCCEx_PLLSAI2_Config+0x72>
 8005748:	2b03      	cmp	r3, #3
 800574a:	d825      	bhi.n	8005798 <RCCEx_PLLSAI2_Config+0x90>
 800574c:	2b01      	cmp	r3, #1
 800574e:	d002      	beq.n	8005756 <RCCEx_PLLSAI2_Config+0x4e>
 8005750:	2b02      	cmp	r3, #2
 8005752:	d009      	beq.n	8005768 <RCCEx_PLLSAI2_Config+0x60>
 8005754:	e020      	b.n	8005798 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005756:	4b62      	ldr	r3, [pc, #392]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	2b00      	cmp	r3, #0
 8005760:	d11d      	bne.n	800579e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005766:	e01a      	b.n	800579e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005768:	4b5d      	ldr	r3, [pc, #372]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005770:	2b00      	cmp	r3, #0
 8005772:	d116      	bne.n	80057a2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005778:	e013      	b.n	80057a2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800577a:	4b59      	ldr	r3, [pc, #356]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10f      	bne.n	80057a6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005786:	4b56      	ldr	r3, [pc, #344]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d109      	bne.n	80057a6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005796:	e006      	b.n	80057a6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	73fb      	strb	r3, [r7, #15]
      break;
 800579c:	e004      	b.n	80057a8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800579e:	bf00      	nop
 80057a0:	e002      	b.n	80057a8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80057a2:	bf00      	nop
 80057a4:	e000      	b.n	80057a8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80057a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80057a8:	7bfb      	ldrb	r3, [r7, #15]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d108      	bne.n	80057c0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80057ae:	4b4c      	ldr	r3, [pc, #304]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	f023 0203 	bic.w	r2, r3, #3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4949      	ldr	r1, [pc, #292]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057bc:	4313      	orrs	r3, r2
 80057be:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80057c0:	7bfb      	ldrb	r3, [r7, #15]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	f040 8086 	bne.w	80058d4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80057c8:	4b45      	ldr	r3, [pc, #276]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a44      	ldr	r2, [pc, #272]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057d4:	f7fd f86c 	bl	80028b0 <HAL_GetTick>
 80057d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80057da:	e009      	b.n	80057f0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80057dc:	f7fd f868 	bl	80028b0 <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d902      	bls.n	80057f0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	73fb      	strb	r3, [r7, #15]
        break;
 80057ee:	e005      	b.n	80057fc <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80057f0:	4b3b      	ldr	r3, [pc, #236]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d1ef      	bne.n	80057dc <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80057fc:	7bfb      	ldrb	r3, [r7, #15]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d168      	bne.n	80058d4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d113      	bne.n	8005830 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005808:	4b35      	ldr	r3, [pc, #212]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800580a:	695a      	ldr	r2, [r3, #20]
 800580c:	4b35      	ldr	r3, [pc, #212]	; (80058e4 <RCCEx_PLLSAI2_Config+0x1dc>)
 800580e:	4013      	ands	r3, r2
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	6892      	ldr	r2, [r2, #8]
 8005814:	0211      	lsls	r1, r2, #8
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	68d2      	ldr	r2, [r2, #12]
 800581a:	06d2      	lsls	r2, r2, #27
 800581c:	4311      	orrs	r1, r2
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	6852      	ldr	r2, [r2, #4]
 8005822:	3a01      	subs	r2, #1
 8005824:	0112      	lsls	r2, r2, #4
 8005826:	430a      	orrs	r2, r1
 8005828:	492d      	ldr	r1, [pc, #180]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800582a:	4313      	orrs	r3, r2
 800582c:	614b      	str	r3, [r1, #20]
 800582e:	e02d      	b.n	800588c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d115      	bne.n	8005862 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005836:	4b2a      	ldr	r3, [pc, #168]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005838:	695a      	ldr	r2, [r3, #20]
 800583a:	4b2b      	ldr	r3, [pc, #172]	; (80058e8 <RCCEx_PLLSAI2_Config+0x1e0>)
 800583c:	4013      	ands	r3, r2
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	6892      	ldr	r2, [r2, #8]
 8005842:	0211      	lsls	r1, r2, #8
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	6912      	ldr	r2, [r2, #16]
 8005848:	0852      	lsrs	r2, r2, #1
 800584a:	3a01      	subs	r2, #1
 800584c:	0552      	lsls	r2, r2, #21
 800584e:	4311      	orrs	r1, r2
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	6852      	ldr	r2, [r2, #4]
 8005854:	3a01      	subs	r2, #1
 8005856:	0112      	lsls	r2, r2, #4
 8005858:	430a      	orrs	r2, r1
 800585a:	4921      	ldr	r1, [pc, #132]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800585c:	4313      	orrs	r3, r2
 800585e:	614b      	str	r3, [r1, #20]
 8005860:	e014      	b.n	800588c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005862:	4b1f      	ldr	r3, [pc, #124]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005864:	695a      	ldr	r2, [r3, #20]
 8005866:	4b21      	ldr	r3, [pc, #132]	; (80058ec <RCCEx_PLLSAI2_Config+0x1e4>)
 8005868:	4013      	ands	r3, r2
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	6892      	ldr	r2, [r2, #8]
 800586e:	0211      	lsls	r1, r2, #8
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	6952      	ldr	r2, [r2, #20]
 8005874:	0852      	lsrs	r2, r2, #1
 8005876:	3a01      	subs	r2, #1
 8005878:	0652      	lsls	r2, r2, #25
 800587a:	4311      	orrs	r1, r2
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	6852      	ldr	r2, [r2, #4]
 8005880:	3a01      	subs	r2, #1
 8005882:	0112      	lsls	r2, r2, #4
 8005884:	430a      	orrs	r2, r1
 8005886:	4916      	ldr	r1, [pc, #88]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005888:	4313      	orrs	r3, r2
 800588a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800588c:	4b14      	ldr	r3, [pc, #80]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a13      	ldr	r2, [pc, #76]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005896:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005898:	f7fd f80a 	bl	80028b0 <HAL_GetTick>
 800589c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800589e:	e009      	b.n	80058b4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80058a0:	f7fd f806 	bl	80028b0 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d902      	bls.n	80058b4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	73fb      	strb	r3, [r7, #15]
          break;
 80058b2:	e005      	b.n	80058c0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80058b4:	4b0a      	ldr	r3, [pc, #40]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0ef      	beq.n	80058a0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80058c0:	7bfb      	ldrb	r3, [r7, #15]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d106      	bne.n	80058d4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80058c6:	4b06      	ldr	r3, [pc, #24]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058c8:	695a      	ldr	r2, [r3, #20]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	4904      	ldr	r1, [pc, #16]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80058d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	40021000 	.word	0x40021000
 80058e4:	07ff800f 	.word	0x07ff800f
 80058e8:	ff9f800f 	.word	0xff9f800f
 80058ec:	f9ff800f 	.word	0xf9ff800f

080058f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d101      	bne.n	8005902 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e095      	b.n	8005a2e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005906:	2b00      	cmp	r3, #0
 8005908:	d108      	bne.n	800591c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005912:	d009      	beq.n	8005928 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	61da      	str	r2, [r3, #28]
 800591a:	e005      	b.n	8005928 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005934:	b2db      	uxtb	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d106      	bne.n	8005948 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7fc fcd0 	bl	80022e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2202      	movs	r2, #2
 800594c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800595e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005968:	d902      	bls.n	8005970 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800596a:	2300      	movs	r3, #0
 800596c:	60fb      	str	r3, [r7, #12]
 800596e:	e002      	b.n	8005976 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005974:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800597e:	d007      	beq.n	8005990 <HAL_SPI_Init+0xa0>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005988:	d002      	beq.n	8005990 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80059a0:	431a      	orrs	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	431a      	orrs	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	695b      	ldr	r3, [r3, #20]
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	431a      	orrs	r2, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059be:	431a      	orrs	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	69db      	ldr	r3, [r3, #28]
 80059c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059c8:	431a      	orrs	r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d2:	ea42 0103 	orr.w	r1, r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059da:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	430a      	orrs	r2, r1
 80059e4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	0c1b      	lsrs	r3, r3, #16
 80059ec:	f003 0204 	and.w	r2, r3, #4
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f4:	f003 0310 	and.w	r3, r3, #16
 80059f8:	431a      	orrs	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059fe:	f003 0308 	and.w	r3, r3, #8
 8005a02:	431a      	orrs	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005a0c:	ea42 0103 	orr.w	r1, r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b08a      	sub	sp, #40	; 0x28
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	60f8      	str	r0, [r7, #12]
 8005a3e:	60b9      	str	r1, [r7, #8]
 8005a40:	607a      	str	r2, [r7, #4]
 8005a42:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a44:	2301      	movs	r3, #1
 8005a46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d101      	bne.n	8005a5c <HAL_SPI_TransmitReceive+0x26>
 8005a58:	2302      	movs	r3, #2
 8005a5a:	e1fb      	b.n	8005e54 <HAL_SPI_TransmitReceive+0x41e>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a64:	f7fc ff24 	bl	80028b0 <HAL_GetTick>
 8005a68:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a70:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005a78:	887b      	ldrh	r3, [r7, #2]
 8005a7a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005a7c:	887b      	ldrh	r3, [r7, #2]
 8005a7e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a80:	7efb      	ldrb	r3, [r7, #27]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d00e      	beq.n	8005aa4 <HAL_SPI_TransmitReceive+0x6e>
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a8c:	d106      	bne.n	8005a9c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d102      	bne.n	8005a9c <HAL_SPI_TransmitReceive+0x66>
 8005a96:	7efb      	ldrb	r3, [r7, #27]
 8005a98:	2b04      	cmp	r3, #4
 8005a9a:	d003      	beq.n	8005aa4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005aa2:	e1cd      	b.n	8005e40 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d005      	beq.n	8005ab6 <HAL_SPI_TransmitReceive+0x80>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <HAL_SPI_TransmitReceive+0x80>
 8005ab0:	887b      	ldrh	r3, [r7, #2]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d103      	bne.n	8005abe <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005abc:	e1c0      	b.n	8005e40 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	2b04      	cmp	r3, #4
 8005ac8:	d003      	beq.n	8005ad2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2205      	movs	r2, #5
 8005ace:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	887a      	ldrh	r2, [r7, #2]
 8005ae2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	887a      	ldrh	r2, [r7, #2]
 8005aea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	887a      	ldrh	r2, [r7, #2]
 8005af8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	887a      	ldrh	r2, [r7, #2]
 8005afe:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b14:	d802      	bhi.n	8005b1c <HAL_SPI_TransmitReceive+0xe6>
 8005b16:	8a3b      	ldrh	r3, [r7, #16]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d908      	bls.n	8005b2e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b2a:	605a      	str	r2, [r3, #4]
 8005b2c:	e007      	b.n	8005b3e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	685a      	ldr	r2, [r3, #4]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b3c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b48:	2b40      	cmp	r3, #64	; 0x40
 8005b4a:	d007      	beq.n	8005b5c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b64:	d97c      	bls.n	8005c60 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d002      	beq.n	8005b74 <HAL_SPI_TransmitReceive+0x13e>
 8005b6e:	8a7b      	ldrh	r3, [r7, #18]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d169      	bne.n	8005c48 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b78:	881a      	ldrh	r2, [r3, #0]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b84:	1c9a      	adds	r2, r3, #2
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	3b01      	subs	r3, #1
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b98:	e056      	b.n	8005c48 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f003 0302 	and.w	r3, r3, #2
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d11b      	bne.n	8005be0 <HAL_SPI_TransmitReceive+0x1aa>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d016      	beq.n	8005be0 <HAL_SPI_TransmitReceive+0x1aa>
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d113      	bne.n	8005be0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bbc:	881a      	ldrh	r2, [r3, #0]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc8:	1c9a      	adds	r2, r3, #2
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d11c      	bne.n	8005c28 <HAL_SPI_TransmitReceive+0x1f2>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d016      	beq.n	8005c28 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68da      	ldr	r2, [r3, #12]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c04:	b292      	uxth	r2, r2
 8005c06:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0c:	1c9a      	adds	r2, r3, #2
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c24:	2301      	movs	r3, #1
 8005c26:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c28:	f7fc fe42 	bl	80028b0 <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d807      	bhi.n	8005c48 <HAL_SPI_TransmitReceive+0x212>
 8005c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c3e:	d003      	beq.n	8005c48 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005c46:	e0fb      	b.n	8005e40 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1a3      	bne.n	8005b9a <HAL_SPI_TransmitReceive+0x164>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d19d      	bne.n	8005b9a <HAL_SPI_TransmitReceive+0x164>
 8005c5e:	e0df      	b.n	8005e20 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d003      	beq.n	8005c70 <HAL_SPI_TransmitReceive+0x23a>
 8005c68:	8a7b      	ldrh	r3, [r7, #18]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	f040 80cb 	bne.w	8005e06 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d912      	bls.n	8005ca0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7e:	881a      	ldrh	r2, [r3, #0]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8a:	1c9a      	adds	r2, r3, #2
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	3b02      	subs	r3, #2
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c9e:	e0b2      	b.n	8005e06 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	330c      	adds	r3, #12
 8005caa:	7812      	ldrb	r2, [r2, #0]
 8005cac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb2:	1c5a      	adds	r2, r3, #1
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cc6:	e09e      	b.n	8005e06 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f003 0302 	and.w	r3, r3, #2
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d134      	bne.n	8005d40 <HAL_SPI_TransmitReceive+0x30a>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d02f      	beq.n	8005d40 <HAL_SPI_TransmitReceive+0x30a>
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d12c      	bne.n	8005d40 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d912      	bls.n	8005d16 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf4:	881a      	ldrh	r2, [r3, #0]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d00:	1c9a      	adds	r2, r3, #2
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	3b02      	subs	r3, #2
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d14:	e012      	b.n	8005d3c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	330c      	adds	r3, #12
 8005d20:	7812      	ldrb	r2, [r2, #0]
 8005d22:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d28:	1c5a      	adds	r2, r3, #1
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	3b01      	subs	r3, #1
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d148      	bne.n	8005de0 <HAL_SPI_TransmitReceive+0x3aa>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d042      	beq.n	8005de0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d923      	bls.n	8005dae <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68da      	ldr	r2, [r3, #12]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d70:	b292      	uxth	r2, r2
 8005d72:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d78:	1c9a      	adds	r2, r3, #2
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	3b02      	subs	r3, #2
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d81f      	bhi.n	8005ddc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	685a      	ldr	r2, [r3, #4]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005daa:	605a      	str	r2, [r3, #4]
 8005dac:	e016      	b.n	8005ddc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f103 020c 	add.w	r2, r3, #12
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dba:	7812      	ldrb	r2, [r2, #0]
 8005dbc:	b2d2      	uxtb	r2, r2
 8005dbe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc4:	1c5a      	adds	r2, r3, #1
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005de0:	f7fc fd66 	bl	80028b0 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d803      	bhi.n	8005df8 <HAL_SPI_TransmitReceive+0x3c2>
 8005df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df6:	d102      	bne.n	8005dfe <HAL_SPI_TransmitReceive+0x3c8>
 8005df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d103      	bne.n	8005e06 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005e04:	e01c      	b.n	8005e40 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f47f af5b 	bne.w	8005cc8 <HAL_SPI_TransmitReceive+0x292>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f47f af54 	bne.w	8005cc8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e20:	69fa      	ldr	r2, [r7, #28]
 8005e22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f000 f937 	bl	8006098 <SPI_EndRxTxTransaction>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d006      	beq.n	8005e3e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2220      	movs	r2, #32
 8005e3a:	661a      	str	r2, [r3, #96]	; 0x60
 8005e3c:	e000      	b.n	8005e40 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005e3e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005e50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3728      	adds	r7, #40	; 0x28
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b088      	sub	sp, #32
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	603b      	str	r3, [r7, #0]
 8005e68:	4613      	mov	r3, r2
 8005e6a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e6c:	f7fc fd20 	bl	80028b0 <HAL_GetTick>
 8005e70:	4602      	mov	r2, r0
 8005e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e74:	1a9b      	subs	r3, r3, r2
 8005e76:	683a      	ldr	r2, [r7, #0]
 8005e78:	4413      	add	r3, r2
 8005e7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e7c:	f7fc fd18 	bl	80028b0 <HAL_GetTick>
 8005e80:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e82:	4b39      	ldr	r3, [pc, #228]	; (8005f68 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	015b      	lsls	r3, r3, #5
 8005e88:	0d1b      	lsrs	r3, r3, #20
 8005e8a:	69fa      	ldr	r2, [r7, #28]
 8005e8c:	fb02 f303 	mul.w	r3, r2, r3
 8005e90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e92:	e054      	b.n	8005f3e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e9a:	d050      	beq.n	8005f3e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e9c:	f7fc fd08 	bl	80028b0 <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	69fa      	ldr	r2, [r7, #28]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d902      	bls.n	8005eb2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d13d      	bne.n	8005f2e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	685a      	ldr	r2, [r3, #4]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ec0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005eca:	d111      	bne.n	8005ef0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ed4:	d004      	beq.n	8005ee0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ede:	d107      	bne.n	8005ef0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ef8:	d10f      	bne.n	8005f1a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f08:	601a      	str	r2, [r3, #0]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e017      	b.n	8005f5e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d101      	bne.n	8005f38 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f34:	2300      	movs	r3, #0
 8005f36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	689a      	ldr	r2, [r3, #8]
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	4013      	ands	r3, r2
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	bf0c      	ite	eq
 8005f4e:	2301      	moveq	r3, #1
 8005f50:	2300      	movne	r3, #0
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	461a      	mov	r2, r3
 8005f56:	79fb      	ldrb	r3, [r7, #7]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d19b      	bne.n	8005e94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3720      	adds	r7, #32
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	20000008 	.word	0x20000008

08005f6c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b08a      	sub	sp, #40	; 0x28
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
 8005f78:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005f7e:	f7fc fc97 	bl	80028b0 <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f86:	1a9b      	subs	r3, r3, r2
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005f8e:	f7fc fc8f 	bl	80028b0 <HAL_GetTick>
 8005f92:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	330c      	adds	r3, #12
 8005f9a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005f9c:	4b3d      	ldr	r3, [pc, #244]	; (8006094 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4413      	add	r3, r2
 8005fa6:	00da      	lsls	r2, r3, #3
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	0d1b      	lsrs	r3, r3, #20
 8005fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fae:	fb02 f303 	mul.w	r3, r2, r3
 8005fb2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005fb4:	e060      	b.n	8006078 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005fbc:	d107      	bne.n	8005fce <SPI_WaitFifoStateUntilTimeout+0x62>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d104      	bne.n	8005fce <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005fcc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd4:	d050      	beq.n	8006078 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fd6:	f7fc fc6b 	bl	80028b0 <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	6a3b      	ldr	r3, [r7, #32]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d902      	bls.n	8005fec <SPI_WaitFifoStateUntilTimeout+0x80>
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d13d      	bne.n	8006068 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	685a      	ldr	r2, [r3, #4]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ffa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006004:	d111      	bne.n	800602a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800600e:	d004      	beq.n	800601a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006018:	d107      	bne.n	800602a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006028:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800602e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006032:	d10f      	bne.n	8006054 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006042:	601a      	str	r2, [r3, #0]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006052:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2200      	movs	r2, #0
 8006060:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006064:	2303      	movs	r3, #3
 8006066:	e010      	b.n	800608a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800606e:	2300      	movs	r3, #0
 8006070:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	3b01      	subs	r3, #1
 8006076:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689a      	ldr	r2, [r3, #8]
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	4013      	ands	r3, r2
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	429a      	cmp	r2, r3
 8006086:	d196      	bne.n	8005fb6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3728      	adds	r7, #40	; 0x28
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	20000008 	.word	0x20000008

08006098 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af02      	add	r7, sp, #8
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	9300      	str	r3, [sp, #0]
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f7ff ff5b 	bl	8005f6c <SPI_WaitFifoStateUntilTimeout>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d007      	beq.n	80060cc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060c0:	f043 0220 	orr.w	r2, r3, #32
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	e027      	b.n	800611c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	9300      	str	r3, [sp, #0]
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	2200      	movs	r2, #0
 80060d4:	2180      	movs	r1, #128	; 0x80
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	f7ff fec0 	bl	8005e5c <SPI_WaitFlagStateUntilTimeout>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d007      	beq.n	80060f2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060e6:	f043 0220 	orr.w	r2, r3, #32
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e014      	b.n	800611c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	9300      	str	r3, [sp, #0]
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	f7ff ff34 	bl	8005f6c <SPI_WaitFifoStateUntilTimeout>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d007      	beq.n	800611a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800610e:	f043 0220 	orr.w	r2, r3, #32
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e000      	b.n	800611c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e049      	b.n	80061ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d106      	bne.n	8006150 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7fc f90e 	bl	800236c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2202      	movs	r2, #2
 8006154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	3304      	adds	r3, #4
 8006160:	4619      	mov	r1, r3
 8006162:	4610      	mov	r0, r2
 8006164:	f000 fb70 	bl	8006848 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b082      	sub	sp, #8
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d101      	bne.n	80061e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e049      	b.n	8006278 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d106      	bne.n	80061fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f7fc f8fd 	bl	80023f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2202      	movs	r2, #2
 8006202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	3304      	adds	r3, #4
 800620e:	4619      	mov	r1, r3
 8006210:	4610      	mov	r0, r2
 8006212:	f000 fb19 	bl	8006848 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2201      	movs	r2, #1
 800622a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2201      	movs	r2, #1
 800624a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2201      	movs	r2, #1
 8006252:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2201      	movs	r2, #1
 800625a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2201      	movs	r2, #1
 8006262:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2201      	movs	r2, #1
 800626a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2201      	movs	r2, #1
 8006272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3708      	adds	r7, #8
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d109      	bne.n	80062a4 <HAL_TIM_PWM_Start+0x24>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006296:	b2db      	uxtb	r3, r3
 8006298:	2b01      	cmp	r3, #1
 800629a:	bf14      	ite	ne
 800629c:	2301      	movne	r3, #1
 800629e:	2300      	moveq	r3, #0
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	e03c      	b.n	800631e <HAL_TIM_PWM_Start+0x9e>
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	2b04      	cmp	r3, #4
 80062a8:	d109      	bne.n	80062be <HAL_TIM_PWM_Start+0x3e>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	bf14      	ite	ne
 80062b6:	2301      	movne	r3, #1
 80062b8:	2300      	moveq	r3, #0
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	e02f      	b.n	800631e <HAL_TIM_PWM_Start+0x9e>
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	2b08      	cmp	r3, #8
 80062c2:	d109      	bne.n	80062d8 <HAL_TIM_PWM_Start+0x58>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	bf14      	ite	ne
 80062d0:	2301      	movne	r3, #1
 80062d2:	2300      	moveq	r3, #0
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	e022      	b.n	800631e <HAL_TIM_PWM_Start+0x9e>
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	2b0c      	cmp	r3, #12
 80062dc:	d109      	bne.n	80062f2 <HAL_TIM_PWM_Start+0x72>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	bf14      	ite	ne
 80062ea:	2301      	movne	r3, #1
 80062ec:	2300      	moveq	r3, #0
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	e015      	b.n	800631e <HAL_TIM_PWM_Start+0x9e>
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	2b10      	cmp	r3, #16
 80062f6:	d109      	bne.n	800630c <HAL_TIM_PWM_Start+0x8c>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	2b01      	cmp	r3, #1
 8006302:	bf14      	ite	ne
 8006304:	2301      	movne	r3, #1
 8006306:	2300      	moveq	r3, #0
 8006308:	b2db      	uxtb	r3, r3
 800630a:	e008      	b.n	800631e <HAL_TIM_PWM_Start+0x9e>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b01      	cmp	r3, #1
 8006316:	bf14      	ite	ne
 8006318:	2301      	movne	r3, #1
 800631a:	2300      	moveq	r3, #0
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b00      	cmp	r3, #0
 8006320:	d001      	beq.n	8006326 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e09c      	b.n	8006460 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d104      	bne.n	8006336 <HAL_TIM_PWM_Start+0xb6>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2202      	movs	r2, #2
 8006330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006334:	e023      	b.n	800637e <HAL_TIM_PWM_Start+0xfe>
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	2b04      	cmp	r3, #4
 800633a:	d104      	bne.n	8006346 <HAL_TIM_PWM_Start+0xc6>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2202      	movs	r2, #2
 8006340:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006344:	e01b      	b.n	800637e <HAL_TIM_PWM_Start+0xfe>
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	2b08      	cmp	r3, #8
 800634a:	d104      	bne.n	8006356 <HAL_TIM_PWM_Start+0xd6>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2202      	movs	r2, #2
 8006350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006354:	e013      	b.n	800637e <HAL_TIM_PWM_Start+0xfe>
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	2b0c      	cmp	r3, #12
 800635a:	d104      	bne.n	8006366 <HAL_TIM_PWM_Start+0xe6>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2202      	movs	r2, #2
 8006360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006364:	e00b      	b.n	800637e <HAL_TIM_PWM_Start+0xfe>
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	2b10      	cmp	r3, #16
 800636a:	d104      	bne.n	8006376 <HAL_TIM_PWM_Start+0xf6>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2202      	movs	r2, #2
 8006370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006374:	e003      	b.n	800637e <HAL_TIM_PWM_Start+0xfe>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2202      	movs	r2, #2
 800637a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2201      	movs	r2, #1
 8006384:	6839      	ldr	r1, [r7, #0]
 8006386:	4618      	mov	r0, r3
 8006388:	f000 fe68 	bl	800705c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a35      	ldr	r2, [pc, #212]	; (8006468 <HAL_TIM_PWM_Start+0x1e8>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d013      	beq.n	80063be <HAL_TIM_PWM_Start+0x13e>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a34      	ldr	r2, [pc, #208]	; (800646c <HAL_TIM_PWM_Start+0x1ec>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d00e      	beq.n	80063be <HAL_TIM_PWM_Start+0x13e>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a32      	ldr	r2, [pc, #200]	; (8006470 <HAL_TIM_PWM_Start+0x1f0>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d009      	beq.n	80063be <HAL_TIM_PWM_Start+0x13e>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a31      	ldr	r2, [pc, #196]	; (8006474 <HAL_TIM_PWM_Start+0x1f4>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d004      	beq.n	80063be <HAL_TIM_PWM_Start+0x13e>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a2f      	ldr	r2, [pc, #188]	; (8006478 <HAL_TIM_PWM_Start+0x1f8>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d101      	bne.n	80063c2 <HAL_TIM_PWM_Start+0x142>
 80063be:	2301      	movs	r3, #1
 80063c0:	e000      	b.n	80063c4 <HAL_TIM_PWM_Start+0x144>
 80063c2:	2300      	movs	r3, #0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d007      	beq.n	80063d8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063d6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a22      	ldr	r2, [pc, #136]	; (8006468 <HAL_TIM_PWM_Start+0x1e8>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d01d      	beq.n	800641e <HAL_TIM_PWM_Start+0x19e>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ea:	d018      	beq.n	800641e <HAL_TIM_PWM_Start+0x19e>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a22      	ldr	r2, [pc, #136]	; (800647c <HAL_TIM_PWM_Start+0x1fc>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d013      	beq.n	800641e <HAL_TIM_PWM_Start+0x19e>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a21      	ldr	r2, [pc, #132]	; (8006480 <HAL_TIM_PWM_Start+0x200>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d00e      	beq.n	800641e <HAL_TIM_PWM_Start+0x19e>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a1f      	ldr	r2, [pc, #124]	; (8006484 <HAL_TIM_PWM_Start+0x204>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d009      	beq.n	800641e <HAL_TIM_PWM_Start+0x19e>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a17      	ldr	r2, [pc, #92]	; (800646c <HAL_TIM_PWM_Start+0x1ec>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d004      	beq.n	800641e <HAL_TIM_PWM_Start+0x19e>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a15      	ldr	r2, [pc, #84]	; (8006470 <HAL_TIM_PWM_Start+0x1f0>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d115      	bne.n	800644a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	689a      	ldr	r2, [r3, #8]
 8006424:	4b18      	ldr	r3, [pc, #96]	; (8006488 <HAL_TIM_PWM_Start+0x208>)
 8006426:	4013      	ands	r3, r2
 8006428:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2b06      	cmp	r3, #6
 800642e:	d015      	beq.n	800645c <HAL_TIM_PWM_Start+0x1dc>
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006436:	d011      	beq.n	800645c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f042 0201 	orr.w	r2, r2, #1
 8006446:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006448:	e008      	b.n	800645c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f042 0201 	orr.w	r2, r2, #1
 8006458:	601a      	str	r2, [r3, #0]
 800645a:	e000      	b.n	800645e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800645c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	40012c00 	.word	0x40012c00
 800646c:	40013400 	.word	0x40013400
 8006470:	40014000 	.word	0x40014000
 8006474:	40014400 	.word	0x40014400
 8006478:	40014800 	.word	0x40014800
 800647c:	40000400 	.word	0x40000400
 8006480:	40000800 	.word	0x40000800
 8006484:	40000c00 	.word	0x40000c00
 8006488:	00010007 	.word	0x00010007

0800648c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b086      	sub	sp, #24
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006498:	2300      	movs	r3, #0
 800649a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d101      	bne.n	80064aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80064a6:	2302      	movs	r3, #2
 80064a8:	e0ff      	b.n	80066aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2b14      	cmp	r3, #20
 80064b6:	f200 80f0 	bhi.w	800669a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80064ba:	a201      	add	r2, pc, #4	; (adr r2, 80064c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80064bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c0:	08006515 	.word	0x08006515
 80064c4:	0800669b 	.word	0x0800669b
 80064c8:	0800669b 	.word	0x0800669b
 80064cc:	0800669b 	.word	0x0800669b
 80064d0:	08006555 	.word	0x08006555
 80064d4:	0800669b 	.word	0x0800669b
 80064d8:	0800669b 	.word	0x0800669b
 80064dc:	0800669b 	.word	0x0800669b
 80064e0:	08006597 	.word	0x08006597
 80064e4:	0800669b 	.word	0x0800669b
 80064e8:	0800669b 	.word	0x0800669b
 80064ec:	0800669b 	.word	0x0800669b
 80064f0:	080065d7 	.word	0x080065d7
 80064f4:	0800669b 	.word	0x0800669b
 80064f8:	0800669b 	.word	0x0800669b
 80064fc:	0800669b 	.word	0x0800669b
 8006500:	08006619 	.word	0x08006619
 8006504:	0800669b 	.word	0x0800669b
 8006508:	0800669b 	.word	0x0800669b
 800650c:	0800669b 	.word	0x0800669b
 8006510:	08006659 	.word	0x08006659
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68b9      	ldr	r1, [r7, #8]
 800651a:	4618      	mov	r0, r3
 800651c:	f000 fa2e 	bl	800697c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	699a      	ldr	r2, [r3, #24]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f042 0208 	orr.w	r2, r2, #8
 800652e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	699a      	ldr	r2, [r3, #24]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f022 0204 	bic.w	r2, r2, #4
 800653e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	6999      	ldr	r1, [r3, #24]
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	691a      	ldr	r2, [r3, #16]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	430a      	orrs	r2, r1
 8006550:	619a      	str	r2, [r3, #24]
      break;
 8006552:	e0a5      	b.n	80066a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68b9      	ldr	r1, [r7, #8]
 800655a:	4618      	mov	r0, r3
 800655c:	f000 fa9e 	bl	8006a9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	699a      	ldr	r2, [r3, #24]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800656e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	699a      	ldr	r2, [r3, #24]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800657e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	6999      	ldr	r1, [r3, #24]
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	021a      	lsls	r2, r3, #8
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	430a      	orrs	r2, r1
 8006592:	619a      	str	r2, [r3, #24]
      break;
 8006594:	e084      	b.n	80066a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68b9      	ldr	r1, [r7, #8]
 800659c:	4618      	mov	r0, r3
 800659e:	f000 fb07 	bl	8006bb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	69da      	ldr	r2, [r3, #28]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f042 0208 	orr.w	r2, r2, #8
 80065b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	69da      	ldr	r2, [r3, #28]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f022 0204 	bic.w	r2, r2, #4
 80065c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	69d9      	ldr	r1, [r3, #28]
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	691a      	ldr	r2, [r3, #16]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	430a      	orrs	r2, r1
 80065d2:	61da      	str	r2, [r3, #28]
      break;
 80065d4:	e064      	b.n	80066a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68b9      	ldr	r1, [r7, #8]
 80065dc:	4618      	mov	r0, r3
 80065de:	f000 fb6f 	bl	8006cc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	69da      	ldr	r2, [r3, #28]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	69da      	ldr	r2, [r3, #28]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006600:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	69d9      	ldr	r1, [r3, #28]
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	021a      	lsls	r2, r3, #8
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	430a      	orrs	r2, r1
 8006614:	61da      	str	r2, [r3, #28]
      break;
 8006616:	e043      	b.n	80066a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68b9      	ldr	r1, [r7, #8]
 800661e:	4618      	mov	r0, r3
 8006620:	f000 fbb8 	bl	8006d94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f042 0208 	orr.w	r2, r2, #8
 8006632:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f022 0204 	bic.w	r2, r2, #4
 8006642:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	691a      	ldr	r2, [r3, #16]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	430a      	orrs	r2, r1
 8006654:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006656:	e023      	b.n	80066a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68b9      	ldr	r1, [r7, #8]
 800665e:	4618      	mov	r0, r3
 8006660:	f000 fbfc 	bl	8006e5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006672:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006682:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	021a      	lsls	r2, r3, #8
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	430a      	orrs	r2, r1
 8006696:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006698:	e002      	b.n	80066a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	75fb      	strb	r3, [r7, #23]
      break;
 800669e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3718      	adds	r7, #24
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop

080066b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066be:	2300      	movs	r3, #0
 80066c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d101      	bne.n	80066d0 <HAL_TIM_ConfigClockSource+0x1c>
 80066cc:	2302      	movs	r3, #2
 80066ce:	e0b6      	b.n	800683e <HAL_TIM_ConfigClockSource+0x18a>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2202      	movs	r2, #2
 80066dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80066f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68ba      	ldr	r2, [r7, #8]
 8006702:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800670c:	d03e      	beq.n	800678c <HAL_TIM_ConfigClockSource+0xd8>
 800670e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006712:	f200 8087 	bhi.w	8006824 <HAL_TIM_ConfigClockSource+0x170>
 8006716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800671a:	f000 8086 	beq.w	800682a <HAL_TIM_ConfigClockSource+0x176>
 800671e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006722:	d87f      	bhi.n	8006824 <HAL_TIM_ConfigClockSource+0x170>
 8006724:	2b70      	cmp	r3, #112	; 0x70
 8006726:	d01a      	beq.n	800675e <HAL_TIM_ConfigClockSource+0xaa>
 8006728:	2b70      	cmp	r3, #112	; 0x70
 800672a:	d87b      	bhi.n	8006824 <HAL_TIM_ConfigClockSource+0x170>
 800672c:	2b60      	cmp	r3, #96	; 0x60
 800672e:	d050      	beq.n	80067d2 <HAL_TIM_ConfigClockSource+0x11e>
 8006730:	2b60      	cmp	r3, #96	; 0x60
 8006732:	d877      	bhi.n	8006824 <HAL_TIM_ConfigClockSource+0x170>
 8006734:	2b50      	cmp	r3, #80	; 0x50
 8006736:	d03c      	beq.n	80067b2 <HAL_TIM_ConfigClockSource+0xfe>
 8006738:	2b50      	cmp	r3, #80	; 0x50
 800673a:	d873      	bhi.n	8006824 <HAL_TIM_ConfigClockSource+0x170>
 800673c:	2b40      	cmp	r3, #64	; 0x40
 800673e:	d058      	beq.n	80067f2 <HAL_TIM_ConfigClockSource+0x13e>
 8006740:	2b40      	cmp	r3, #64	; 0x40
 8006742:	d86f      	bhi.n	8006824 <HAL_TIM_ConfigClockSource+0x170>
 8006744:	2b30      	cmp	r3, #48	; 0x30
 8006746:	d064      	beq.n	8006812 <HAL_TIM_ConfigClockSource+0x15e>
 8006748:	2b30      	cmp	r3, #48	; 0x30
 800674a:	d86b      	bhi.n	8006824 <HAL_TIM_ConfigClockSource+0x170>
 800674c:	2b20      	cmp	r3, #32
 800674e:	d060      	beq.n	8006812 <HAL_TIM_ConfigClockSource+0x15e>
 8006750:	2b20      	cmp	r3, #32
 8006752:	d867      	bhi.n	8006824 <HAL_TIM_ConfigClockSource+0x170>
 8006754:	2b00      	cmp	r3, #0
 8006756:	d05c      	beq.n	8006812 <HAL_TIM_ConfigClockSource+0x15e>
 8006758:	2b10      	cmp	r3, #16
 800675a:	d05a      	beq.n	8006812 <HAL_TIM_ConfigClockSource+0x15e>
 800675c:	e062      	b.n	8006824 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6818      	ldr	r0, [r3, #0]
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	6899      	ldr	r1, [r3, #8]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	685a      	ldr	r2, [r3, #4]
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	f000 fc55 	bl	800701c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006780:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68ba      	ldr	r2, [r7, #8]
 8006788:	609a      	str	r2, [r3, #8]
      break;
 800678a:	e04f      	b.n	800682c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6818      	ldr	r0, [r3, #0]
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	6899      	ldr	r1, [r3, #8]
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	685a      	ldr	r2, [r3, #4]
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	f000 fc3e 	bl	800701c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	689a      	ldr	r2, [r3, #8]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067ae:	609a      	str	r2, [r3, #8]
      break;
 80067b0:	e03c      	b.n	800682c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6818      	ldr	r0, [r3, #0]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	6859      	ldr	r1, [r3, #4]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	461a      	mov	r2, r3
 80067c0:	f000 fbb2 	bl	8006f28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2150      	movs	r1, #80	; 0x50
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 fc0b 	bl	8006fe6 <TIM_ITRx_SetConfig>
      break;
 80067d0:	e02c      	b.n	800682c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6818      	ldr	r0, [r3, #0]
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	6859      	ldr	r1, [r3, #4]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	461a      	mov	r2, r3
 80067e0:	f000 fbd1 	bl	8006f86 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2160      	movs	r1, #96	; 0x60
 80067ea:	4618      	mov	r0, r3
 80067ec:	f000 fbfb 	bl	8006fe6 <TIM_ITRx_SetConfig>
      break;
 80067f0:	e01c      	b.n	800682c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6818      	ldr	r0, [r3, #0]
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	6859      	ldr	r1, [r3, #4]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	461a      	mov	r2, r3
 8006800:	f000 fb92 	bl	8006f28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	2140      	movs	r1, #64	; 0x40
 800680a:	4618      	mov	r0, r3
 800680c:	f000 fbeb 	bl	8006fe6 <TIM_ITRx_SetConfig>
      break;
 8006810:	e00c      	b.n	800682c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4619      	mov	r1, r3
 800681c:	4610      	mov	r0, r2
 800681e:	f000 fbe2 	bl	8006fe6 <TIM_ITRx_SetConfig>
      break;
 8006822:	e003      	b.n	800682c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	73fb      	strb	r3, [r7, #15]
      break;
 8006828:	e000      	b.n	800682c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800682a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800683c:	7bfb      	ldrb	r3, [r7, #15]
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
	...

08006848 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006848:	b480      	push	{r7}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a40      	ldr	r2, [pc, #256]	; (800695c <TIM_Base_SetConfig+0x114>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d013      	beq.n	8006888 <TIM_Base_SetConfig+0x40>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006866:	d00f      	beq.n	8006888 <TIM_Base_SetConfig+0x40>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a3d      	ldr	r2, [pc, #244]	; (8006960 <TIM_Base_SetConfig+0x118>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d00b      	beq.n	8006888 <TIM_Base_SetConfig+0x40>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a3c      	ldr	r2, [pc, #240]	; (8006964 <TIM_Base_SetConfig+0x11c>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d007      	beq.n	8006888 <TIM_Base_SetConfig+0x40>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a3b      	ldr	r2, [pc, #236]	; (8006968 <TIM_Base_SetConfig+0x120>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d003      	beq.n	8006888 <TIM_Base_SetConfig+0x40>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a3a      	ldr	r2, [pc, #232]	; (800696c <TIM_Base_SetConfig+0x124>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d108      	bne.n	800689a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800688e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	4313      	orrs	r3, r2
 8006898:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a2f      	ldr	r2, [pc, #188]	; (800695c <TIM_Base_SetConfig+0x114>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d01f      	beq.n	80068e2 <TIM_Base_SetConfig+0x9a>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068a8:	d01b      	beq.n	80068e2 <TIM_Base_SetConfig+0x9a>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a2c      	ldr	r2, [pc, #176]	; (8006960 <TIM_Base_SetConfig+0x118>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d017      	beq.n	80068e2 <TIM_Base_SetConfig+0x9a>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a2b      	ldr	r2, [pc, #172]	; (8006964 <TIM_Base_SetConfig+0x11c>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d013      	beq.n	80068e2 <TIM_Base_SetConfig+0x9a>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a2a      	ldr	r2, [pc, #168]	; (8006968 <TIM_Base_SetConfig+0x120>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d00f      	beq.n	80068e2 <TIM_Base_SetConfig+0x9a>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a29      	ldr	r2, [pc, #164]	; (800696c <TIM_Base_SetConfig+0x124>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d00b      	beq.n	80068e2 <TIM_Base_SetConfig+0x9a>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a28      	ldr	r2, [pc, #160]	; (8006970 <TIM_Base_SetConfig+0x128>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d007      	beq.n	80068e2 <TIM_Base_SetConfig+0x9a>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a27      	ldr	r2, [pc, #156]	; (8006974 <TIM_Base_SetConfig+0x12c>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d003      	beq.n	80068e2 <TIM_Base_SetConfig+0x9a>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a26      	ldr	r2, [pc, #152]	; (8006978 <TIM_Base_SetConfig+0x130>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d108      	bne.n	80068f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	4313      	orrs	r3, r2
 8006900:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	689a      	ldr	r2, [r3, #8]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a10      	ldr	r2, [pc, #64]	; (800695c <TIM_Base_SetConfig+0x114>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d00f      	beq.n	8006940 <TIM_Base_SetConfig+0xf8>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a12      	ldr	r2, [pc, #72]	; (800696c <TIM_Base_SetConfig+0x124>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d00b      	beq.n	8006940 <TIM_Base_SetConfig+0xf8>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a11      	ldr	r2, [pc, #68]	; (8006970 <TIM_Base_SetConfig+0x128>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d007      	beq.n	8006940 <TIM_Base_SetConfig+0xf8>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a10      	ldr	r2, [pc, #64]	; (8006974 <TIM_Base_SetConfig+0x12c>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d003      	beq.n	8006940 <TIM_Base_SetConfig+0xf8>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a0f      	ldr	r2, [pc, #60]	; (8006978 <TIM_Base_SetConfig+0x130>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d103      	bne.n	8006948 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	691a      	ldr	r2, [r3, #16]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	615a      	str	r2, [r3, #20]
}
 800694e:	bf00      	nop
 8006950:	3714      	adds	r7, #20
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	40012c00 	.word	0x40012c00
 8006960:	40000400 	.word	0x40000400
 8006964:	40000800 	.word	0x40000800
 8006968:	40000c00 	.word	0x40000c00
 800696c:	40013400 	.word	0x40013400
 8006970:	40014000 	.word	0x40014000
 8006974:	40014400 	.word	0x40014400
 8006978:	40014800 	.word	0x40014800

0800697c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800697c:	b480      	push	{r7}
 800697e:	b087      	sub	sp, #28
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a1b      	ldr	r3, [r3, #32]
 800698a:	f023 0201 	bic.w	r2, r3, #1
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a1b      	ldr	r3, [r3, #32]
 8006996:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	699b      	ldr	r3, [r3, #24]
 80069a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f023 0303 	bic.w	r3, r3, #3
 80069b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	4313      	orrs	r3, r2
 80069c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	f023 0302 	bic.w	r3, r3, #2
 80069c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a2c      	ldr	r2, [pc, #176]	; (8006a88 <TIM_OC1_SetConfig+0x10c>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d00f      	beq.n	80069fc <TIM_OC1_SetConfig+0x80>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a2b      	ldr	r2, [pc, #172]	; (8006a8c <TIM_OC1_SetConfig+0x110>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d00b      	beq.n	80069fc <TIM_OC1_SetConfig+0x80>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a2a      	ldr	r2, [pc, #168]	; (8006a90 <TIM_OC1_SetConfig+0x114>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d007      	beq.n	80069fc <TIM_OC1_SetConfig+0x80>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a29      	ldr	r2, [pc, #164]	; (8006a94 <TIM_OC1_SetConfig+0x118>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d003      	beq.n	80069fc <TIM_OC1_SetConfig+0x80>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a28      	ldr	r2, [pc, #160]	; (8006a98 <TIM_OC1_SetConfig+0x11c>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d10c      	bne.n	8006a16 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	f023 0308 	bic.w	r3, r3, #8
 8006a02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	697a      	ldr	r2, [r7, #20]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	f023 0304 	bic.w	r3, r3, #4
 8006a14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a1b      	ldr	r2, [pc, #108]	; (8006a88 <TIM_OC1_SetConfig+0x10c>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d00f      	beq.n	8006a3e <TIM_OC1_SetConfig+0xc2>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a1a      	ldr	r2, [pc, #104]	; (8006a8c <TIM_OC1_SetConfig+0x110>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d00b      	beq.n	8006a3e <TIM_OC1_SetConfig+0xc2>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a19      	ldr	r2, [pc, #100]	; (8006a90 <TIM_OC1_SetConfig+0x114>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d007      	beq.n	8006a3e <TIM_OC1_SetConfig+0xc2>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a18      	ldr	r2, [pc, #96]	; (8006a94 <TIM_OC1_SetConfig+0x118>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d003      	beq.n	8006a3e <TIM_OC1_SetConfig+0xc2>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a17      	ldr	r2, [pc, #92]	; (8006a98 <TIM_OC1_SetConfig+0x11c>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d111      	bne.n	8006a62 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	693a      	ldr	r2, [r7, #16]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	699b      	ldr	r3, [r3, #24]
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	685a      	ldr	r2, [r3, #4]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	697a      	ldr	r2, [r7, #20]
 8006a7a:	621a      	str	r2, [r3, #32]
}
 8006a7c:	bf00      	nop
 8006a7e:	371c      	adds	r7, #28
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr
 8006a88:	40012c00 	.word	0x40012c00
 8006a8c:	40013400 	.word	0x40013400
 8006a90:	40014000 	.word	0x40014000
 8006a94:	40014400 	.word	0x40014400
 8006a98:	40014800 	.word	0x40014800

08006a9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	f023 0210 	bic.w	r2, r3, #16
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	021b      	lsls	r3, r3, #8
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	f023 0320 	bic.w	r3, r3, #32
 8006aea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	011b      	lsls	r3, r3, #4
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a28      	ldr	r2, [pc, #160]	; (8006b9c <TIM_OC2_SetConfig+0x100>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d003      	beq.n	8006b08 <TIM_OC2_SetConfig+0x6c>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a27      	ldr	r2, [pc, #156]	; (8006ba0 <TIM_OC2_SetConfig+0x104>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d10d      	bne.n	8006b24 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	011b      	lsls	r3, r3, #4
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a1d      	ldr	r2, [pc, #116]	; (8006b9c <TIM_OC2_SetConfig+0x100>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d00f      	beq.n	8006b4c <TIM_OC2_SetConfig+0xb0>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a1c      	ldr	r2, [pc, #112]	; (8006ba0 <TIM_OC2_SetConfig+0x104>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d00b      	beq.n	8006b4c <TIM_OC2_SetConfig+0xb0>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a1b      	ldr	r2, [pc, #108]	; (8006ba4 <TIM_OC2_SetConfig+0x108>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d007      	beq.n	8006b4c <TIM_OC2_SetConfig+0xb0>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a1a      	ldr	r2, [pc, #104]	; (8006ba8 <TIM_OC2_SetConfig+0x10c>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d003      	beq.n	8006b4c <TIM_OC2_SetConfig+0xb0>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a19      	ldr	r2, [pc, #100]	; (8006bac <TIM_OC2_SetConfig+0x110>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d113      	bne.n	8006b74 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	695b      	ldr	r3, [r3, #20]
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	685a      	ldr	r2, [r3, #4]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	697a      	ldr	r2, [r7, #20]
 8006b8c:	621a      	str	r2, [r3, #32]
}
 8006b8e:	bf00      	nop
 8006b90:	371c      	adds	r7, #28
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	40012c00 	.word	0x40012c00
 8006ba0:	40013400 	.word	0x40013400
 8006ba4:	40014000 	.word	0x40014000
 8006ba8:	40014400 	.word	0x40014400
 8006bac:	40014800 	.word	0x40014800

08006bb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b087      	sub	sp, #28
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	69db      	ldr	r3, [r3, #28]
 8006bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f023 0303 	bic.w	r3, r3, #3
 8006bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	021b      	lsls	r3, r3, #8
 8006c04:	697a      	ldr	r2, [r7, #20]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a27      	ldr	r2, [pc, #156]	; (8006cac <TIM_OC3_SetConfig+0xfc>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d003      	beq.n	8006c1a <TIM_OC3_SetConfig+0x6a>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a26      	ldr	r2, [pc, #152]	; (8006cb0 <TIM_OC3_SetConfig+0x100>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d10d      	bne.n	8006c36 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	021b      	lsls	r3, r3, #8
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a1c      	ldr	r2, [pc, #112]	; (8006cac <TIM_OC3_SetConfig+0xfc>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d00f      	beq.n	8006c5e <TIM_OC3_SetConfig+0xae>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a1b      	ldr	r2, [pc, #108]	; (8006cb0 <TIM_OC3_SetConfig+0x100>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d00b      	beq.n	8006c5e <TIM_OC3_SetConfig+0xae>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a1a      	ldr	r2, [pc, #104]	; (8006cb4 <TIM_OC3_SetConfig+0x104>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d007      	beq.n	8006c5e <TIM_OC3_SetConfig+0xae>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a19      	ldr	r2, [pc, #100]	; (8006cb8 <TIM_OC3_SetConfig+0x108>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d003      	beq.n	8006c5e <TIM_OC3_SetConfig+0xae>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a18      	ldr	r2, [pc, #96]	; (8006cbc <TIM_OC3_SetConfig+0x10c>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d113      	bne.n	8006c86 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	011b      	lsls	r3, r3, #4
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	011b      	lsls	r3, r3, #4
 8006c80:	693a      	ldr	r2, [r7, #16]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	685a      	ldr	r2, [r3, #4]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	697a      	ldr	r2, [r7, #20]
 8006c9e:	621a      	str	r2, [r3, #32]
}
 8006ca0:	bf00      	nop
 8006ca2:	371c      	adds	r7, #28
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	40012c00 	.word	0x40012c00
 8006cb0:	40013400 	.word	0x40013400
 8006cb4:	40014000 	.word	0x40014000
 8006cb8:	40014400 	.word	0x40014400
 8006cbc:	40014800 	.word	0x40014800

08006cc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b087      	sub	sp, #28
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a1b      	ldr	r3, [r3, #32]
 8006cce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a1b      	ldr	r3, [r3, #32]
 8006cda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	69db      	ldr	r3, [r3, #28]
 8006ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	021b      	lsls	r3, r3, #8
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	031b      	lsls	r3, r3, #12
 8006d16:	693a      	ldr	r2, [r7, #16]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a18      	ldr	r2, [pc, #96]	; (8006d80 <TIM_OC4_SetConfig+0xc0>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d00f      	beq.n	8006d44 <TIM_OC4_SetConfig+0x84>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a17      	ldr	r2, [pc, #92]	; (8006d84 <TIM_OC4_SetConfig+0xc4>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d00b      	beq.n	8006d44 <TIM_OC4_SetConfig+0x84>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a16      	ldr	r2, [pc, #88]	; (8006d88 <TIM_OC4_SetConfig+0xc8>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d007      	beq.n	8006d44 <TIM_OC4_SetConfig+0x84>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a15      	ldr	r2, [pc, #84]	; (8006d8c <TIM_OC4_SetConfig+0xcc>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d003      	beq.n	8006d44 <TIM_OC4_SetConfig+0x84>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a14      	ldr	r2, [pc, #80]	; (8006d90 <TIM_OC4_SetConfig+0xd0>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d109      	bne.n	8006d58 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	695b      	ldr	r3, [r3, #20]
 8006d50:	019b      	lsls	r3, r3, #6
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	685a      	ldr	r2, [r3, #4]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	621a      	str	r2, [r3, #32]
}
 8006d72:	bf00      	nop
 8006d74:	371c      	adds	r7, #28
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	40012c00 	.word	0x40012c00
 8006d84:	40013400 	.word	0x40013400
 8006d88:	40014000 	.word	0x40014000
 8006d8c:	40014400 	.word	0x40014400
 8006d90:	40014800 	.word	0x40014800

08006d94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b087      	sub	sp, #28
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a1b      	ldr	r3, [r3, #32]
 8006da2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a1b      	ldr	r3, [r3, #32]
 8006dae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006dd8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	041b      	lsls	r3, r3, #16
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a17      	ldr	r2, [pc, #92]	; (8006e48 <TIM_OC5_SetConfig+0xb4>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d00f      	beq.n	8006e0e <TIM_OC5_SetConfig+0x7a>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a16      	ldr	r2, [pc, #88]	; (8006e4c <TIM_OC5_SetConfig+0xb8>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d00b      	beq.n	8006e0e <TIM_OC5_SetConfig+0x7a>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a15      	ldr	r2, [pc, #84]	; (8006e50 <TIM_OC5_SetConfig+0xbc>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d007      	beq.n	8006e0e <TIM_OC5_SetConfig+0x7a>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a14      	ldr	r2, [pc, #80]	; (8006e54 <TIM_OC5_SetConfig+0xc0>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d003      	beq.n	8006e0e <TIM_OC5_SetConfig+0x7a>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4a13      	ldr	r2, [pc, #76]	; (8006e58 <TIM_OC5_SetConfig+0xc4>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d109      	bne.n	8006e22 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	695b      	ldr	r3, [r3, #20]
 8006e1a:	021b      	lsls	r3, r3, #8
 8006e1c:	697a      	ldr	r2, [r7, #20]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	697a      	ldr	r2, [r7, #20]
 8006e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	685a      	ldr	r2, [r3, #4]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	693a      	ldr	r2, [r7, #16]
 8006e3a:	621a      	str	r2, [r3, #32]
}
 8006e3c:	bf00      	nop
 8006e3e:	371c      	adds	r7, #28
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr
 8006e48:	40012c00 	.word	0x40012c00
 8006e4c:	40013400 	.word	0x40013400
 8006e50:	40014000 	.word	0x40014000
 8006e54:	40014400 	.word	0x40014400
 8006e58:	40014800 	.word	0x40014800

08006e5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b087      	sub	sp, #28
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a1b      	ldr	r3, [r3, #32]
 8006e6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a1b      	ldr	r3, [r3, #32]
 8006e76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	021b      	lsls	r3, r3, #8
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ea2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	051b      	lsls	r3, r3, #20
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a18      	ldr	r2, [pc, #96]	; (8006f14 <TIM_OC6_SetConfig+0xb8>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d00f      	beq.n	8006ed8 <TIM_OC6_SetConfig+0x7c>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a17      	ldr	r2, [pc, #92]	; (8006f18 <TIM_OC6_SetConfig+0xbc>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d00b      	beq.n	8006ed8 <TIM_OC6_SetConfig+0x7c>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a16      	ldr	r2, [pc, #88]	; (8006f1c <TIM_OC6_SetConfig+0xc0>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d007      	beq.n	8006ed8 <TIM_OC6_SetConfig+0x7c>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a15      	ldr	r2, [pc, #84]	; (8006f20 <TIM_OC6_SetConfig+0xc4>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d003      	beq.n	8006ed8 <TIM_OC6_SetConfig+0x7c>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a14      	ldr	r2, [pc, #80]	; (8006f24 <TIM_OC6_SetConfig+0xc8>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d109      	bne.n	8006eec <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ede:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	695b      	ldr	r3, [r3, #20]
 8006ee4:	029b      	lsls	r3, r3, #10
 8006ee6:	697a      	ldr	r2, [r7, #20]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	697a      	ldr	r2, [r7, #20]
 8006ef0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	685a      	ldr	r2, [r3, #4]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	693a      	ldr	r2, [r7, #16]
 8006f04:	621a      	str	r2, [r3, #32]
}
 8006f06:	bf00      	nop
 8006f08:	371c      	adds	r7, #28
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	40012c00 	.word	0x40012c00
 8006f18:	40013400 	.word	0x40013400
 8006f1c:	40014000 	.word	0x40014000
 8006f20:	40014400 	.word	0x40014400
 8006f24:	40014800 	.word	0x40014800

08006f28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b087      	sub	sp, #28
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6a1b      	ldr	r3, [r3, #32]
 8006f38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	f023 0201 	bic.w	r2, r3, #1
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	011b      	lsls	r3, r3, #4
 8006f58:	693a      	ldr	r2, [r7, #16]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	f023 030a 	bic.w	r3, r3, #10
 8006f64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f66:	697a      	ldr	r2, [r7, #20]
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	693a      	ldr	r2, [r7, #16]
 8006f72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	697a      	ldr	r2, [r7, #20]
 8006f78:	621a      	str	r2, [r3, #32]
}
 8006f7a:	bf00      	nop
 8006f7c:	371c      	adds	r7, #28
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr

08006f86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f86:	b480      	push	{r7}
 8006f88:	b087      	sub	sp, #28
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	60f8      	str	r0, [r7, #12]
 8006f8e:	60b9      	str	r1, [r7, #8]
 8006f90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6a1b      	ldr	r3, [r3, #32]
 8006f96:	f023 0210 	bic.w	r2, r3, #16
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	699b      	ldr	r3, [r3, #24]
 8006fa2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6a1b      	ldr	r3, [r3, #32]
 8006fa8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006fb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	031b      	lsls	r3, r3, #12
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006fc2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	011b      	lsls	r3, r3, #4
 8006fc8:	693a      	ldr	r2, [r7, #16]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	697a      	ldr	r2, [r7, #20]
 8006fd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	693a      	ldr	r2, [r7, #16]
 8006fd8:	621a      	str	r2, [r3, #32]
}
 8006fda:	bf00      	nop
 8006fdc:	371c      	adds	r7, #28
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006fe6:	b480      	push	{r7}
 8006fe8:	b085      	sub	sp, #20
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ffc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ffe:	683a      	ldr	r2, [r7, #0]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	4313      	orrs	r3, r2
 8007004:	f043 0307 	orr.w	r3, r3, #7
 8007008:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	609a      	str	r2, [r3, #8]
}
 8007010:	bf00      	nop
 8007012:	3714      	adds	r7, #20
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800701c:	b480      	push	{r7}
 800701e:	b087      	sub	sp, #28
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
 8007028:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007036:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	021a      	lsls	r2, r3, #8
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	431a      	orrs	r2, r3
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	4313      	orrs	r3, r2
 8007044:	697a      	ldr	r2, [r7, #20]
 8007046:	4313      	orrs	r3, r2
 8007048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	697a      	ldr	r2, [r7, #20]
 800704e:	609a      	str	r2, [r3, #8]
}
 8007050:	bf00      	nop
 8007052:	371c      	adds	r7, #28
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800705c:	b480      	push	{r7}
 800705e:	b087      	sub	sp, #28
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	f003 031f 	and.w	r3, r3, #31
 800706e:	2201      	movs	r2, #1
 8007070:	fa02 f303 	lsl.w	r3, r2, r3
 8007074:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6a1a      	ldr	r2, [r3, #32]
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	43db      	mvns	r3, r3
 800707e:	401a      	ands	r2, r3
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6a1a      	ldr	r2, [r3, #32]
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	f003 031f 	and.w	r3, r3, #31
 800708e:	6879      	ldr	r1, [r7, #4]
 8007090:	fa01 f303 	lsl.w	r3, r1, r3
 8007094:	431a      	orrs	r2, r3
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	621a      	str	r2, [r3, #32]
}
 800709a:	bf00      	nop
 800709c:	371c      	adds	r7, #28
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
	...

080070a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d101      	bne.n	80070c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070bc:	2302      	movs	r3, #2
 80070be:	e068      	b.n	8007192 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2202      	movs	r2, #2
 80070cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a2e      	ldr	r2, [pc, #184]	; (80071a0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d004      	beq.n	80070f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a2d      	ldr	r2, [pc, #180]	; (80071a4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d108      	bne.n	8007106 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80070fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	4313      	orrs	r3, r2
 8007104:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800710c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	4313      	orrs	r3, r2
 8007116:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a1e      	ldr	r2, [pc, #120]	; (80071a0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d01d      	beq.n	8007166 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007132:	d018      	beq.n	8007166 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a1b      	ldr	r2, [pc, #108]	; (80071a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d013      	beq.n	8007166 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a1a      	ldr	r2, [pc, #104]	; (80071ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d00e      	beq.n	8007166 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a18      	ldr	r2, [pc, #96]	; (80071b0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d009      	beq.n	8007166 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a13      	ldr	r2, [pc, #76]	; (80071a4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d004      	beq.n	8007166 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a14      	ldr	r2, [pc, #80]	; (80071b4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d10c      	bne.n	8007180 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800716c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	68ba      	ldr	r2, [r7, #8]
 8007174:	4313      	orrs	r3, r2
 8007176:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68ba      	ldr	r2, [r7, #8]
 800717e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3714      	adds	r7, #20
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	40012c00 	.word	0x40012c00
 80071a4:	40013400 	.word	0x40013400
 80071a8:	40000400 	.word	0x40000400
 80071ac:	40000800 	.word	0x40000800
 80071b0:	40000c00 	.word	0x40000c00
 80071b4:	40014000 	.word	0x40014000

080071b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d101      	bne.n	80071ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e042      	b.n	8007250 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d106      	bne.n	80071e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f7fb f823 	bl	8002228 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2224      	movs	r2, #36	; 0x24
 80071e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f022 0201 	bic.w	r2, r2, #1
 80071f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 f8c4 	bl	8007388 <UART_SetConfig>
 8007200:	4603      	mov	r3, r0
 8007202:	2b01      	cmp	r3, #1
 8007204:	d101      	bne.n	800720a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e022      	b.n	8007250 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800720e:	2b00      	cmp	r3, #0
 8007210:	d002      	beq.n	8007218 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fbb4 	bl	8007980 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	685a      	ldr	r2, [r3, #4]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007226:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	689a      	ldr	r2, [r3, #8]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007236:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f042 0201 	orr.w	r2, r2, #1
 8007246:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 fc3b 	bl	8007ac4 <UART_CheckIdleState>
 800724e:	4603      	mov	r3, r0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3708      	adds	r7, #8
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b08a      	sub	sp, #40	; 0x28
 800725c:	af02      	add	r7, sp, #8
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	603b      	str	r3, [r7, #0]
 8007264:	4613      	mov	r3, r2
 8007266:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800726e:	2b20      	cmp	r3, #32
 8007270:	f040 8084 	bne.w	800737c <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d002      	beq.n	8007280 <HAL_UART_Transmit+0x28>
 800727a:	88fb      	ldrh	r3, [r7, #6]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d101      	bne.n	8007284 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	e07c      	b.n	800737e <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800728a:	2b01      	cmp	r3, #1
 800728c:	d101      	bne.n	8007292 <HAL_UART_Transmit+0x3a>
 800728e:	2302      	movs	r3, #2
 8007290:	e075      	b.n	800737e <HAL_UART_Transmit+0x126>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2201      	movs	r2, #1
 8007296:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2200      	movs	r2, #0
 800729e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2221      	movs	r2, #33	; 0x21
 80072a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80072aa:	f7fb fb01 	bl	80028b0 <HAL_GetTick>
 80072ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	88fa      	ldrh	r2, [r7, #6]
 80072b4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	88fa      	ldrh	r2, [r7, #6]
 80072bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072c8:	d108      	bne.n	80072dc <HAL_UART_Transmit+0x84>
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d104      	bne.n	80072dc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80072d2:	2300      	movs	r3, #0
 80072d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	61bb      	str	r3, [r7, #24]
 80072da:	e003      	b.n	80072e4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072e0:	2300      	movs	r3, #0
 80072e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80072ec:	e02d      	b.n	800734a <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	9300      	str	r3, [sp, #0]
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	2200      	movs	r2, #0
 80072f6:	2180      	movs	r1, #128	; 0x80
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f000 fc2e 	bl	8007b5a <UART_WaitOnFlagUntilTimeout>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d001      	beq.n	8007308 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007304:	2303      	movs	r3, #3
 8007306:	e03a      	b.n	800737e <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d10b      	bne.n	8007326 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	881a      	ldrh	r2, [r3, #0]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800731a:	b292      	uxth	r2, r2
 800731c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	3302      	adds	r3, #2
 8007322:	61bb      	str	r3, [r7, #24]
 8007324:	e008      	b.n	8007338 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	781a      	ldrb	r2, [r3, #0]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	b292      	uxth	r2, r2
 8007330:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	3301      	adds	r3, #1
 8007336:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800733e:	b29b      	uxth	r3, r3
 8007340:	3b01      	subs	r3, #1
 8007342:	b29a      	uxth	r2, r3
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007350:	b29b      	uxth	r3, r3
 8007352:	2b00      	cmp	r3, #0
 8007354:	d1cb      	bne.n	80072ee <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	9300      	str	r3, [sp, #0]
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	2200      	movs	r2, #0
 800735e:	2140      	movs	r1, #64	; 0x40
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f000 fbfa 	bl	8007b5a <UART_WaitOnFlagUntilTimeout>
 8007366:	4603      	mov	r3, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d001      	beq.n	8007370 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 800736c:	2303      	movs	r3, #3
 800736e:	e006      	b.n	800737e <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2220      	movs	r2, #32
 8007374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007378:	2300      	movs	r3, #0
 800737a:	e000      	b.n	800737e <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 800737c:	2302      	movs	r3, #2
  }
}
 800737e:	4618      	mov	r0, r3
 8007380:	3720      	adds	r7, #32
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
	...

08007388 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007388:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800738c:	b08c      	sub	sp, #48	; 0x30
 800738e:	af00      	add	r7, sp, #0
 8007390:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007392:	2300      	movs	r3, #0
 8007394:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	689a      	ldr	r2, [r3, #8]
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	431a      	orrs	r2, r3
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	695b      	ldr	r3, [r3, #20]
 80073a6:	431a      	orrs	r2, r3
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	69db      	ldr	r3, [r3, #28]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	4baa      	ldr	r3, [pc, #680]	; (8007660 <UART_SetConfig+0x2d8>)
 80073b8:	4013      	ands	r3, r2
 80073ba:	697a      	ldr	r2, [r7, #20]
 80073bc:	6812      	ldr	r2, [r2, #0]
 80073be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073c0:	430b      	orrs	r3, r1
 80073c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	68da      	ldr	r2, [r3, #12]
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	430a      	orrs	r2, r1
 80073d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	699b      	ldr	r3, [r3, #24]
 80073de:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a9f      	ldr	r2, [pc, #636]	; (8007664 <UART_SetConfig+0x2dc>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d004      	beq.n	80073f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073f0:	4313      	orrs	r3, r2
 80073f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80073fe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007402:	697a      	ldr	r2, [r7, #20]
 8007404:	6812      	ldr	r2, [r2, #0]
 8007406:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007408:	430b      	orrs	r3, r1
 800740a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007412:	f023 010f 	bic.w	r1, r3, #15
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	430a      	orrs	r2, r1
 8007420:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a90      	ldr	r2, [pc, #576]	; (8007668 <UART_SetConfig+0x2e0>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d125      	bne.n	8007478 <UART_SetConfig+0xf0>
 800742c:	4b8f      	ldr	r3, [pc, #572]	; (800766c <UART_SetConfig+0x2e4>)
 800742e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007432:	f003 0303 	and.w	r3, r3, #3
 8007436:	2b03      	cmp	r3, #3
 8007438:	d81a      	bhi.n	8007470 <UART_SetConfig+0xe8>
 800743a:	a201      	add	r2, pc, #4	; (adr r2, 8007440 <UART_SetConfig+0xb8>)
 800743c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007440:	08007451 	.word	0x08007451
 8007444:	08007461 	.word	0x08007461
 8007448:	08007459 	.word	0x08007459
 800744c:	08007469 	.word	0x08007469
 8007450:	2301      	movs	r3, #1
 8007452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007456:	e116      	b.n	8007686 <UART_SetConfig+0x2fe>
 8007458:	2302      	movs	r3, #2
 800745a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800745e:	e112      	b.n	8007686 <UART_SetConfig+0x2fe>
 8007460:	2304      	movs	r3, #4
 8007462:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007466:	e10e      	b.n	8007686 <UART_SetConfig+0x2fe>
 8007468:	2308      	movs	r3, #8
 800746a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800746e:	e10a      	b.n	8007686 <UART_SetConfig+0x2fe>
 8007470:	2310      	movs	r3, #16
 8007472:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007476:	e106      	b.n	8007686 <UART_SetConfig+0x2fe>
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a7c      	ldr	r2, [pc, #496]	; (8007670 <UART_SetConfig+0x2e8>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d138      	bne.n	80074f4 <UART_SetConfig+0x16c>
 8007482:	4b7a      	ldr	r3, [pc, #488]	; (800766c <UART_SetConfig+0x2e4>)
 8007484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007488:	f003 030c 	and.w	r3, r3, #12
 800748c:	2b0c      	cmp	r3, #12
 800748e:	d82d      	bhi.n	80074ec <UART_SetConfig+0x164>
 8007490:	a201      	add	r2, pc, #4	; (adr r2, 8007498 <UART_SetConfig+0x110>)
 8007492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007496:	bf00      	nop
 8007498:	080074cd 	.word	0x080074cd
 800749c:	080074ed 	.word	0x080074ed
 80074a0:	080074ed 	.word	0x080074ed
 80074a4:	080074ed 	.word	0x080074ed
 80074a8:	080074dd 	.word	0x080074dd
 80074ac:	080074ed 	.word	0x080074ed
 80074b0:	080074ed 	.word	0x080074ed
 80074b4:	080074ed 	.word	0x080074ed
 80074b8:	080074d5 	.word	0x080074d5
 80074bc:	080074ed 	.word	0x080074ed
 80074c0:	080074ed 	.word	0x080074ed
 80074c4:	080074ed 	.word	0x080074ed
 80074c8:	080074e5 	.word	0x080074e5
 80074cc:	2300      	movs	r3, #0
 80074ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074d2:	e0d8      	b.n	8007686 <UART_SetConfig+0x2fe>
 80074d4:	2302      	movs	r3, #2
 80074d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074da:	e0d4      	b.n	8007686 <UART_SetConfig+0x2fe>
 80074dc:	2304      	movs	r3, #4
 80074de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074e2:	e0d0      	b.n	8007686 <UART_SetConfig+0x2fe>
 80074e4:	2308      	movs	r3, #8
 80074e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074ea:	e0cc      	b.n	8007686 <UART_SetConfig+0x2fe>
 80074ec:	2310      	movs	r3, #16
 80074ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074f2:	e0c8      	b.n	8007686 <UART_SetConfig+0x2fe>
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a5e      	ldr	r2, [pc, #376]	; (8007674 <UART_SetConfig+0x2ec>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d125      	bne.n	800754a <UART_SetConfig+0x1c2>
 80074fe:	4b5b      	ldr	r3, [pc, #364]	; (800766c <UART_SetConfig+0x2e4>)
 8007500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007504:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007508:	2b30      	cmp	r3, #48	; 0x30
 800750a:	d016      	beq.n	800753a <UART_SetConfig+0x1b2>
 800750c:	2b30      	cmp	r3, #48	; 0x30
 800750e:	d818      	bhi.n	8007542 <UART_SetConfig+0x1ba>
 8007510:	2b20      	cmp	r3, #32
 8007512:	d00a      	beq.n	800752a <UART_SetConfig+0x1a2>
 8007514:	2b20      	cmp	r3, #32
 8007516:	d814      	bhi.n	8007542 <UART_SetConfig+0x1ba>
 8007518:	2b00      	cmp	r3, #0
 800751a:	d002      	beq.n	8007522 <UART_SetConfig+0x19a>
 800751c:	2b10      	cmp	r3, #16
 800751e:	d008      	beq.n	8007532 <UART_SetConfig+0x1aa>
 8007520:	e00f      	b.n	8007542 <UART_SetConfig+0x1ba>
 8007522:	2300      	movs	r3, #0
 8007524:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007528:	e0ad      	b.n	8007686 <UART_SetConfig+0x2fe>
 800752a:	2302      	movs	r3, #2
 800752c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007530:	e0a9      	b.n	8007686 <UART_SetConfig+0x2fe>
 8007532:	2304      	movs	r3, #4
 8007534:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007538:	e0a5      	b.n	8007686 <UART_SetConfig+0x2fe>
 800753a:	2308      	movs	r3, #8
 800753c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007540:	e0a1      	b.n	8007686 <UART_SetConfig+0x2fe>
 8007542:	2310      	movs	r3, #16
 8007544:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007548:	e09d      	b.n	8007686 <UART_SetConfig+0x2fe>
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a4a      	ldr	r2, [pc, #296]	; (8007678 <UART_SetConfig+0x2f0>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d125      	bne.n	80075a0 <UART_SetConfig+0x218>
 8007554:	4b45      	ldr	r3, [pc, #276]	; (800766c <UART_SetConfig+0x2e4>)
 8007556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800755a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800755e:	2bc0      	cmp	r3, #192	; 0xc0
 8007560:	d016      	beq.n	8007590 <UART_SetConfig+0x208>
 8007562:	2bc0      	cmp	r3, #192	; 0xc0
 8007564:	d818      	bhi.n	8007598 <UART_SetConfig+0x210>
 8007566:	2b80      	cmp	r3, #128	; 0x80
 8007568:	d00a      	beq.n	8007580 <UART_SetConfig+0x1f8>
 800756a:	2b80      	cmp	r3, #128	; 0x80
 800756c:	d814      	bhi.n	8007598 <UART_SetConfig+0x210>
 800756e:	2b00      	cmp	r3, #0
 8007570:	d002      	beq.n	8007578 <UART_SetConfig+0x1f0>
 8007572:	2b40      	cmp	r3, #64	; 0x40
 8007574:	d008      	beq.n	8007588 <UART_SetConfig+0x200>
 8007576:	e00f      	b.n	8007598 <UART_SetConfig+0x210>
 8007578:	2300      	movs	r3, #0
 800757a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800757e:	e082      	b.n	8007686 <UART_SetConfig+0x2fe>
 8007580:	2302      	movs	r3, #2
 8007582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007586:	e07e      	b.n	8007686 <UART_SetConfig+0x2fe>
 8007588:	2304      	movs	r3, #4
 800758a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800758e:	e07a      	b.n	8007686 <UART_SetConfig+0x2fe>
 8007590:	2308      	movs	r3, #8
 8007592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007596:	e076      	b.n	8007686 <UART_SetConfig+0x2fe>
 8007598:	2310      	movs	r3, #16
 800759a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800759e:	e072      	b.n	8007686 <UART_SetConfig+0x2fe>
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a35      	ldr	r2, [pc, #212]	; (800767c <UART_SetConfig+0x2f4>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d12a      	bne.n	8007600 <UART_SetConfig+0x278>
 80075aa:	4b30      	ldr	r3, [pc, #192]	; (800766c <UART_SetConfig+0x2e4>)
 80075ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075b8:	d01a      	beq.n	80075f0 <UART_SetConfig+0x268>
 80075ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075be:	d81b      	bhi.n	80075f8 <UART_SetConfig+0x270>
 80075c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075c4:	d00c      	beq.n	80075e0 <UART_SetConfig+0x258>
 80075c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075ca:	d815      	bhi.n	80075f8 <UART_SetConfig+0x270>
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d003      	beq.n	80075d8 <UART_SetConfig+0x250>
 80075d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075d4:	d008      	beq.n	80075e8 <UART_SetConfig+0x260>
 80075d6:	e00f      	b.n	80075f8 <UART_SetConfig+0x270>
 80075d8:	2300      	movs	r3, #0
 80075da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075de:	e052      	b.n	8007686 <UART_SetConfig+0x2fe>
 80075e0:	2302      	movs	r3, #2
 80075e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075e6:	e04e      	b.n	8007686 <UART_SetConfig+0x2fe>
 80075e8:	2304      	movs	r3, #4
 80075ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075ee:	e04a      	b.n	8007686 <UART_SetConfig+0x2fe>
 80075f0:	2308      	movs	r3, #8
 80075f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075f6:	e046      	b.n	8007686 <UART_SetConfig+0x2fe>
 80075f8:	2310      	movs	r3, #16
 80075fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075fe:	e042      	b.n	8007686 <UART_SetConfig+0x2fe>
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a17      	ldr	r2, [pc, #92]	; (8007664 <UART_SetConfig+0x2dc>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d13a      	bne.n	8007680 <UART_SetConfig+0x2f8>
 800760a:	4b18      	ldr	r3, [pc, #96]	; (800766c <UART_SetConfig+0x2e4>)
 800760c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007610:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007614:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007618:	d01a      	beq.n	8007650 <UART_SetConfig+0x2c8>
 800761a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800761e:	d81b      	bhi.n	8007658 <UART_SetConfig+0x2d0>
 8007620:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007624:	d00c      	beq.n	8007640 <UART_SetConfig+0x2b8>
 8007626:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800762a:	d815      	bhi.n	8007658 <UART_SetConfig+0x2d0>
 800762c:	2b00      	cmp	r3, #0
 800762e:	d003      	beq.n	8007638 <UART_SetConfig+0x2b0>
 8007630:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007634:	d008      	beq.n	8007648 <UART_SetConfig+0x2c0>
 8007636:	e00f      	b.n	8007658 <UART_SetConfig+0x2d0>
 8007638:	2300      	movs	r3, #0
 800763a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800763e:	e022      	b.n	8007686 <UART_SetConfig+0x2fe>
 8007640:	2302      	movs	r3, #2
 8007642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007646:	e01e      	b.n	8007686 <UART_SetConfig+0x2fe>
 8007648:	2304      	movs	r3, #4
 800764a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800764e:	e01a      	b.n	8007686 <UART_SetConfig+0x2fe>
 8007650:	2308      	movs	r3, #8
 8007652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007656:	e016      	b.n	8007686 <UART_SetConfig+0x2fe>
 8007658:	2310      	movs	r3, #16
 800765a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800765e:	e012      	b.n	8007686 <UART_SetConfig+0x2fe>
 8007660:	cfff69f3 	.word	0xcfff69f3
 8007664:	40008000 	.word	0x40008000
 8007668:	40013800 	.word	0x40013800
 800766c:	40021000 	.word	0x40021000
 8007670:	40004400 	.word	0x40004400
 8007674:	40004800 	.word	0x40004800
 8007678:	40004c00 	.word	0x40004c00
 800767c:	40005000 	.word	0x40005000
 8007680:	2310      	movs	r3, #16
 8007682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4aae      	ldr	r2, [pc, #696]	; (8007944 <UART_SetConfig+0x5bc>)
 800768c:	4293      	cmp	r3, r2
 800768e:	f040 8097 	bne.w	80077c0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007692:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007696:	2b08      	cmp	r3, #8
 8007698:	d823      	bhi.n	80076e2 <UART_SetConfig+0x35a>
 800769a:	a201      	add	r2, pc, #4	; (adr r2, 80076a0 <UART_SetConfig+0x318>)
 800769c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a0:	080076c5 	.word	0x080076c5
 80076a4:	080076e3 	.word	0x080076e3
 80076a8:	080076cd 	.word	0x080076cd
 80076ac:	080076e3 	.word	0x080076e3
 80076b0:	080076d3 	.word	0x080076d3
 80076b4:	080076e3 	.word	0x080076e3
 80076b8:	080076e3 	.word	0x080076e3
 80076bc:	080076e3 	.word	0x080076e3
 80076c0:	080076db 	.word	0x080076db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076c4:	f7fd fb10 	bl	8004ce8 <HAL_RCC_GetPCLK1Freq>
 80076c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80076ca:	e010      	b.n	80076ee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076cc:	4b9e      	ldr	r3, [pc, #632]	; (8007948 <UART_SetConfig+0x5c0>)
 80076ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80076d0:	e00d      	b.n	80076ee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076d2:	f7fd fa71 	bl	8004bb8 <HAL_RCC_GetSysClockFreq>
 80076d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80076d8:	e009      	b.n	80076ee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80076e0:	e005      	b.n	80076ee <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80076e2:	2300      	movs	r3, #0
 80076e4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80076ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80076ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f000 8130 	beq.w	8007956 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fa:	4a94      	ldr	r2, [pc, #592]	; (800794c <UART_SetConfig+0x5c4>)
 80076fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007700:	461a      	mov	r2, r3
 8007702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007704:	fbb3 f3f2 	udiv	r3, r3, r2
 8007708:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	685a      	ldr	r2, [r3, #4]
 800770e:	4613      	mov	r3, r2
 8007710:	005b      	lsls	r3, r3, #1
 8007712:	4413      	add	r3, r2
 8007714:	69ba      	ldr	r2, [r7, #24]
 8007716:	429a      	cmp	r2, r3
 8007718:	d305      	bcc.n	8007726 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007720:	69ba      	ldr	r2, [r7, #24]
 8007722:	429a      	cmp	r2, r3
 8007724:	d903      	bls.n	800772e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800772c:	e113      	b.n	8007956 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800772e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007730:	2200      	movs	r2, #0
 8007732:	60bb      	str	r3, [r7, #8]
 8007734:	60fa      	str	r2, [r7, #12]
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773a:	4a84      	ldr	r2, [pc, #528]	; (800794c <UART_SetConfig+0x5c4>)
 800773c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007740:	b29b      	uxth	r3, r3
 8007742:	2200      	movs	r2, #0
 8007744:	603b      	str	r3, [r7, #0]
 8007746:	607a      	str	r2, [r7, #4]
 8007748:	e9d7 2300 	ldrd	r2, r3, [r7]
 800774c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007750:	f7f9 fa92 	bl	8000c78 <__aeabi_uldivmod>
 8007754:	4602      	mov	r2, r0
 8007756:	460b      	mov	r3, r1
 8007758:	4610      	mov	r0, r2
 800775a:	4619      	mov	r1, r3
 800775c:	f04f 0200 	mov.w	r2, #0
 8007760:	f04f 0300 	mov.w	r3, #0
 8007764:	020b      	lsls	r3, r1, #8
 8007766:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800776a:	0202      	lsls	r2, r0, #8
 800776c:	6979      	ldr	r1, [r7, #20]
 800776e:	6849      	ldr	r1, [r1, #4]
 8007770:	0849      	lsrs	r1, r1, #1
 8007772:	2000      	movs	r0, #0
 8007774:	460c      	mov	r4, r1
 8007776:	4605      	mov	r5, r0
 8007778:	eb12 0804 	adds.w	r8, r2, r4
 800777c:	eb43 0905 	adc.w	r9, r3, r5
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	469a      	mov	sl, r3
 8007788:	4693      	mov	fp, r2
 800778a:	4652      	mov	r2, sl
 800778c:	465b      	mov	r3, fp
 800778e:	4640      	mov	r0, r8
 8007790:	4649      	mov	r1, r9
 8007792:	f7f9 fa71 	bl	8000c78 <__aeabi_uldivmod>
 8007796:	4602      	mov	r2, r0
 8007798:	460b      	mov	r3, r1
 800779a:	4613      	mov	r3, r2
 800779c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800779e:	6a3b      	ldr	r3, [r7, #32]
 80077a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077a4:	d308      	bcc.n	80077b8 <UART_SetConfig+0x430>
 80077a6:	6a3b      	ldr	r3, [r7, #32]
 80077a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077ac:	d204      	bcs.n	80077b8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	6a3a      	ldr	r2, [r7, #32]
 80077b4:	60da      	str	r2, [r3, #12]
 80077b6:	e0ce      	b.n	8007956 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80077be:	e0ca      	b.n	8007956 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	69db      	ldr	r3, [r3, #28]
 80077c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077c8:	d166      	bne.n	8007898 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80077ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80077ce:	2b08      	cmp	r3, #8
 80077d0:	d827      	bhi.n	8007822 <UART_SetConfig+0x49a>
 80077d2:	a201      	add	r2, pc, #4	; (adr r2, 80077d8 <UART_SetConfig+0x450>)
 80077d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d8:	080077fd 	.word	0x080077fd
 80077dc:	08007805 	.word	0x08007805
 80077e0:	0800780d 	.word	0x0800780d
 80077e4:	08007823 	.word	0x08007823
 80077e8:	08007813 	.word	0x08007813
 80077ec:	08007823 	.word	0x08007823
 80077f0:	08007823 	.word	0x08007823
 80077f4:	08007823 	.word	0x08007823
 80077f8:	0800781b 	.word	0x0800781b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077fc:	f7fd fa74 	bl	8004ce8 <HAL_RCC_GetPCLK1Freq>
 8007800:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007802:	e014      	b.n	800782e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007804:	f7fd fa86 	bl	8004d14 <HAL_RCC_GetPCLK2Freq>
 8007808:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800780a:	e010      	b.n	800782e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800780c:	4b4e      	ldr	r3, [pc, #312]	; (8007948 <UART_SetConfig+0x5c0>)
 800780e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007810:	e00d      	b.n	800782e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007812:	f7fd f9d1 	bl	8004bb8 <HAL_RCC_GetSysClockFreq>
 8007816:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007818:	e009      	b.n	800782e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800781a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800781e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007820:	e005      	b.n	800782e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007822:	2300      	movs	r3, #0
 8007824:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800782c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800782e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007830:	2b00      	cmp	r3, #0
 8007832:	f000 8090 	beq.w	8007956 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783a:	4a44      	ldr	r2, [pc, #272]	; (800794c <UART_SetConfig+0x5c4>)
 800783c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007840:	461a      	mov	r2, r3
 8007842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007844:	fbb3 f3f2 	udiv	r3, r3, r2
 8007848:	005a      	lsls	r2, r3, #1
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	085b      	lsrs	r3, r3, #1
 8007850:	441a      	add	r2, r3
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	fbb2 f3f3 	udiv	r3, r2, r3
 800785a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800785c:	6a3b      	ldr	r3, [r7, #32]
 800785e:	2b0f      	cmp	r3, #15
 8007860:	d916      	bls.n	8007890 <UART_SetConfig+0x508>
 8007862:	6a3b      	ldr	r3, [r7, #32]
 8007864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007868:	d212      	bcs.n	8007890 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800786a:	6a3b      	ldr	r3, [r7, #32]
 800786c:	b29b      	uxth	r3, r3
 800786e:	f023 030f 	bic.w	r3, r3, #15
 8007872:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007874:	6a3b      	ldr	r3, [r7, #32]
 8007876:	085b      	lsrs	r3, r3, #1
 8007878:	b29b      	uxth	r3, r3
 800787a:	f003 0307 	and.w	r3, r3, #7
 800787e:	b29a      	uxth	r2, r3
 8007880:	8bfb      	ldrh	r3, [r7, #30]
 8007882:	4313      	orrs	r3, r2
 8007884:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	8bfa      	ldrh	r2, [r7, #30]
 800788c:	60da      	str	r2, [r3, #12]
 800788e:	e062      	b.n	8007956 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007896:	e05e      	b.n	8007956 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007898:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800789c:	2b08      	cmp	r3, #8
 800789e:	d828      	bhi.n	80078f2 <UART_SetConfig+0x56a>
 80078a0:	a201      	add	r2, pc, #4	; (adr r2, 80078a8 <UART_SetConfig+0x520>)
 80078a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a6:	bf00      	nop
 80078a8:	080078cd 	.word	0x080078cd
 80078ac:	080078d5 	.word	0x080078d5
 80078b0:	080078dd 	.word	0x080078dd
 80078b4:	080078f3 	.word	0x080078f3
 80078b8:	080078e3 	.word	0x080078e3
 80078bc:	080078f3 	.word	0x080078f3
 80078c0:	080078f3 	.word	0x080078f3
 80078c4:	080078f3 	.word	0x080078f3
 80078c8:	080078eb 	.word	0x080078eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078cc:	f7fd fa0c 	bl	8004ce8 <HAL_RCC_GetPCLK1Freq>
 80078d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80078d2:	e014      	b.n	80078fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078d4:	f7fd fa1e 	bl	8004d14 <HAL_RCC_GetPCLK2Freq>
 80078d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80078da:	e010      	b.n	80078fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078dc:	4b1a      	ldr	r3, [pc, #104]	; (8007948 <UART_SetConfig+0x5c0>)
 80078de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80078e0:	e00d      	b.n	80078fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078e2:	f7fd f969 	bl	8004bb8 <HAL_RCC_GetSysClockFreq>
 80078e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80078e8:	e009      	b.n	80078fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80078f0:	e005      	b.n	80078fe <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80078f2:	2300      	movs	r3, #0
 80078f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80078fc:	bf00      	nop
    }

    if (pclk != 0U)
 80078fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007900:	2b00      	cmp	r3, #0
 8007902:	d028      	beq.n	8007956 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007908:	4a10      	ldr	r2, [pc, #64]	; (800794c <UART_SetConfig+0x5c4>)
 800790a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800790e:	461a      	mov	r2, r3
 8007910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007912:	fbb3 f2f2 	udiv	r2, r3, r2
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	085b      	lsrs	r3, r3, #1
 800791c:	441a      	add	r2, r3
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	fbb2 f3f3 	udiv	r3, r2, r3
 8007926:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007928:	6a3b      	ldr	r3, [r7, #32]
 800792a:	2b0f      	cmp	r3, #15
 800792c:	d910      	bls.n	8007950 <UART_SetConfig+0x5c8>
 800792e:	6a3b      	ldr	r3, [r7, #32]
 8007930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007934:	d20c      	bcs.n	8007950 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007936:	6a3b      	ldr	r3, [r7, #32]
 8007938:	b29a      	uxth	r2, r3
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	60da      	str	r2, [r3, #12]
 8007940:	e009      	b.n	8007956 <UART_SetConfig+0x5ce>
 8007942:	bf00      	nop
 8007944:	40008000 	.word	0x40008000
 8007948:	00f42400 	.word	0x00f42400
 800794c:	0800b33c 	.word	0x0800b33c
      }
      else
      {
        ret = HAL_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	2201      	movs	r2, #1
 800795a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	2201      	movs	r2, #1
 8007962:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	2200      	movs	r2, #0
 800796a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	2200      	movs	r2, #0
 8007970:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007972:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007976:	4618      	mov	r0, r3
 8007978:	3730      	adds	r7, #48	; 0x30
 800797a:	46bd      	mov	sp, r7
 800797c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007980 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800798c:	f003 0301 	and.w	r3, r3, #1
 8007990:	2b00      	cmp	r3, #0
 8007992:	d00a      	beq.n	80079aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	430a      	orrs	r2, r1
 80079a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ae:	f003 0302 	and.w	r3, r3, #2
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00a      	beq.n	80079cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	430a      	orrs	r2, r1
 80079ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d0:	f003 0304 	and.w	r3, r3, #4
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d00a      	beq.n	80079ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	430a      	orrs	r2, r1
 80079ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f2:	f003 0308 	and.w	r3, r3, #8
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d00a      	beq.n	8007a10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	430a      	orrs	r2, r1
 8007a0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a14:	f003 0310 	and.w	r3, r3, #16
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00a      	beq.n	8007a32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	430a      	orrs	r2, r1
 8007a30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a36:	f003 0320 	and.w	r3, r3, #32
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00a      	beq.n	8007a54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	430a      	orrs	r2, r1
 8007a52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d01a      	beq.n	8007a96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	430a      	orrs	r2, r1
 8007a74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a7e:	d10a      	bne.n	8007a96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	430a      	orrs	r2, r1
 8007a94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00a      	beq.n	8007ab8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	430a      	orrs	r2, r1
 8007ab6:	605a      	str	r2, [r3, #4]
  }
}
 8007ab8:	bf00      	nop
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b086      	sub	sp, #24
 8007ac8:	af02      	add	r7, sp, #8
 8007aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ad4:	f7fa feec 	bl	80028b0 <HAL_GetTick>
 8007ad8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 0308 	and.w	r3, r3, #8
 8007ae4:	2b08      	cmp	r3, #8
 8007ae6:	d10e      	bne.n	8007b06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ae8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007aec:	9300      	str	r3, [sp, #0]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f82f 	bl	8007b5a <UART_WaitOnFlagUntilTimeout>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d001      	beq.n	8007b06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b02:	2303      	movs	r3, #3
 8007b04:	e025      	b.n	8007b52 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f003 0304 	and.w	r3, r3, #4
 8007b10:	2b04      	cmp	r3, #4
 8007b12:	d10e      	bne.n	8007b32 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b18:	9300      	str	r3, [sp, #0]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 f819 	bl	8007b5a <UART_WaitOnFlagUntilTimeout>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d001      	beq.n	8007b32 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	e00f      	b.n	8007b52 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2220      	movs	r2, #32
 8007b36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2220      	movs	r2, #32
 8007b3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b09c      	sub	sp, #112	; 0x70
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	60f8      	str	r0, [r7, #12]
 8007b62:	60b9      	str	r1, [r7, #8]
 8007b64:	603b      	str	r3, [r7, #0]
 8007b66:	4613      	mov	r3, r2
 8007b68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b6a:	e0a9      	b.n	8007cc0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b72:	f000 80a5 	beq.w	8007cc0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b76:	f7fa fe9b 	bl	80028b0 <HAL_GetTick>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	1ad3      	subs	r3, r2, r3
 8007b80:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d302      	bcc.n	8007b8c <UART_WaitOnFlagUntilTimeout+0x32>
 8007b86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d140      	bne.n	8007c0e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b94:	e853 3f00 	ldrex	r3, [r3]
 8007b98:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007ba0:	667b      	str	r3, [r7, #100]	; 0x64
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007baa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bac:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007bb0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007bb2:	e841 2300 	strex	r3, r2, [r1]
 8007bb6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007bb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d1e6      	bne.n	8007b8c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	3308      	adds	r3, #8
 8007bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bc8:	e853 3f00 	ldrex	r3, [r3]
 8007bcc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd0:	f023 0301 	bic.w	r3, r3, #1
 8007bd4:	663b      	str	r3, [r7, #96]	; 0x60
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	3308      	adds	r3, #8
 8007bdc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007bde:	64ba      	str	r2, [r7, #72]	; 0x48
 8007be0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007be4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007be6:	e841 2300 	strex	r3, r2, [r1]
 8007bea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007bec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d1e5      	bne.n	8007bbe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2220      	movs	r2, #32
 8007bf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2220      	movs	r2, #32
 8007bfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	e069      	b.n	8007ce2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 0304 	and.w	r3, r3, #4
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d051      	beq.n	8007cc0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	69db      	ldr	r3, [r3, #28]
 8007c22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c2a:	d149      	bne.n	8007cc0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c34:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3e:	e853 3f00 	ldrex	r3, [r3]
 8007c42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c46:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007c4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	461a      	mov	r2, r3
 8007c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c54:	637b      	str	r3, [r7, #52]	; 0x34
 8007c56:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c5c:	e841 2300 	strex	r3, r2, [r1]
 8007c60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d1e6      	bne.n	8007c36 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	3308      	adds	r3, #8
 8007c6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	e853 3f00 	ldrex	r3, [r3]
 8007c76:	613b      	str	r3, [r7, #16]
   return(result);
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	f023 0301 	bic.w	r3, r3, #1
 8007c7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	3308      	adds	r3, #8
 8007c86:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007c88:	623a      	str	r2, [r7, #32]
 8007c8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8c:	69f9      	ldr	r1, [r7, #28]
 8007c8e:	6a3a      	ldr	r2, [r7, #32]
 8007c90:	e841 2300 	strex	r3, r2, [r1]
 8007c94:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d1e5      	bne.n	8007c68 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2220      	movs	r2, #32
 8007ca0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2220      	movs	r2, #32
 8007ca8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2220      	movs	r2, #32
 8007cb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	e010      	b.n	8007ce2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	69da      	ldr	r2, [r3, #28]
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	4013      	ands	r3, r2
 8007cca:	68ba      	ldr	r2, [r7, #8]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	bf0c      	ite	eq
 8007cd0:	2301      	moveq	r3, #1
 8007cd2:	2300      	movne	r3, #0
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	79fb      	ldrb	r3, [r7, #7]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	f43f af46 	beq.w	8007b6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3770      	adds	r7, #112	; 0x70
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007cea:	b480      	push	{r7}
 8007cec:	b085      	sub	sp, #20
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d101      	bne.n	8007d00 <HAL_UARTEx_DisableFifoMode+0x16>
 8007cfc:	2302      	movs	r3, #2
 8007cfe:	e027      	b.n	8007d50 <HAL_UARTEx_DisableFifoMode+0x66>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2224      	movs	r2, #36	; 0x24
 8007d0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f022 0201 	bic.w	r2, r2, #1
 8007d26:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007d2e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	68fa      	ldr	r2, [r7, #12]
 8007d3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2220      	movs	r2, #32
 8007d42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3714      	adds	r7, #20
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d101      	bne.n	8007d74 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007d70:	2302      	movs	r3, #2
 8007d72:	e02d      	b.n	8007dd0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2224      	movs	r2, #36	; 0x24
 8007d80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f022 0201 	bic.w	r2, r2, #1
 8007d9a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	683a      	ldr	r2, [r7, #0]
 8007dac:	430a      	orrs	r2, r1
 8007dae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 f84f 	bl	8007e54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68fa      	ldr	r2, [r7, #12]
 8007dbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2220      	movs	r2, #32
 8007dc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007dce:	2300      	movs	r3, #0
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3710      	adds	r7, #16
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d101      	bne.n	8007df0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007dec:	2302      	movs	r3, #2
 8007dee:	e02d      	b.n	8007e4c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2224      	movs	r2, #36	; 0x24
 8007dfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f022 0201 	bic.w	r2, r2, #1
 8007e16:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	683a      	ldr	r2, [r7, #0]
 8007e28:	430a      	orrs	r2, r1
 8007e2a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 f811 	bl	8007e54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2220      	movs	r2, #32
 8007e3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007e4a:	2300      	movs	r3, #0
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3710      	adds	r7, #16
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d108      	bne.n	8007e76 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007e74:	e031      	b.n	8007eda <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007e76:	2308      	movs	r3, #8
 8007e78:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007e7a:	2308      	movs	r3, #8
 8007e7c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	0e5b      	lsrs	r3, r3, #25
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	f003 0307 	and.w	r3, r3, #7
 8007e8c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	0f5b      	lsrs	r3, r3, #29
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	f003 0307 	and.w	r3, r3, #7
 8007e9c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ea0:	7b3a      	ldrb	r2, [r7, #12]
 8007ea2:	4911      	ldr	r1, [pc, #68]	; (8007ee8 <UARTEx_SetNbDataToProcess+0x94>)
 8007ea4:	5c8a      	ldrb	r2, [r1, r2]
 8007ea6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007eaa:	7b3a      	ldrb	r2, [r7, #12]
 8007eac:	490f      	ldr	r1, [pc, #60]	; (8007eec <UARTEx_SetNbDataToProcess+0x98>)
 8007eae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007eb0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007eb4:	b29a      	uxth	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ebc:	7bfb      	ldrb	r3, [r7, #15]
 8007ebe:	7b7a      	ldrb	r2, [r7, #13]
 8007ec0:	4909      	ldr	r1, [pc, #36]	; (8007ee8 <UARTEx_SetNbDataToProcess+0x94>)
 8007ec2:	5c8a      	ldrb	r2, [r1, r2]
 8007ec4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007ec8:	7b7a      	ldrb	r2, [r7, #13]
 8007eca:	4908      	ldr	r1, [pc, #32]	; (8007eec <UARTEx_SetNbDataToProcess+0x98>)
 8007ecc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ece:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ed2:	b29a      	uxth	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007eda:	bf00      	nop
 8007edc:	3714      	adds	r7, #20
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	0800b354 	.word	0x0800b354
 8007eec:	0800b35c 	.word	0x0800b35c

08007ef0 <__errno>:
 8007ef0:	4b01      	ldr	r3, [pc, #4]	; (8007ef8 <__errno+0x8>)
 8007ef2:	6818      	ldr	r0, [r3, #0]
 8007ef4:	4770      	bx	lr
 8007ef6:	bf00      	nop
 8007ef8:	20000014 	.word	0x20000014

08007efc <__libc_init_array>:
 8007efc:	b570      	push	{r4, r5, r6, lr}
 8007efe:	4d0d      	ldr	r5, [pc, #52]	; (8007f34 <__libc_init_array+0x38>)
 8007f00:	4c0d      	ldr	r4, [pc, #52]	; (8007f38 <__libc_init_array+0x3c>)
 8007f02:	1b64      	subs	r4, r4, r5
 8007f04:	10a4      	asrs	r4, r4, #2
 8007f06:	2600      	movs	r6, #0
 8007f08:	42a6      	cmp	r6, r4
 8007f0a:	d109      	bne.n	8007f20 <__libc_init_array+0x24>
 8007f0c:	4d0b      	ldr	r5, [pc, #44]	; (8007f3c <__libc_init_array+0x40>)
 8007f0e:	4c0c      	ldr	r4, [pc, #48]	; (8007f40 <__libc_init_array+0x44>)
 8007f10:	f003 f9d2 	bl	800b2b8 <_init>
 8007f14:	1b64      	subs	r4, r4, r5
 8007f16:	10a4      	asrs	r4, r4, #2
 8007f18:	2600      	movs	r6, #0
 8007f1a:	42a6      	cmp	r6, r4
 8007f1c:	d105      	bne.n	8007f2a <__libc_init_array+0x2e>
 8007f1e:	bd70      	pop	{r4, r5, r6, pc}
 8007f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f24:	4798      	blx	r3
 8007f26:	3601      	adds	r6, #1
 8007f28:	e7ee      	b.n	8007f08 <__libc_init_array+0xc>
 8007f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f2e:	4798      	blx	r3
 8007f30:	3601      	adds	r6, #1
 8007f32:	e7f2      	b.n	8007f1a <__libc_init_array+0x1e>
 8007f34:	0800b778 	.word	0x0800b778
 8007f38:	0800b778 	.word	0x0800b778
 8007f3c:	0800b778 	.word	0x0800b778
 8007f40:	0800b77c 	.word	0x0800b77c

08007f44 <malloc>:
 8007f44:	4b02      	ldr	r3, [pc, #8]	; (8007f50 <malloc+0xc>)
 8007f46:	4601      	mov	r1, r0
 8007f48:	6818      	ldr	r0, [r3, #0]
 8007f4a:	f000 b877 	b.w	800803c <_malloc_r>
 8007f4e:	bf00      	nop
 8007f50:	20000014 	.word	0x20000014

08007f54 <memset>:
 8007f54:	4402      	add	r2, r0
 8007f56:	4603      	mov	r3, r0
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d100      	bne.n	8007f5e <memset+0xa>
 8007f5c:	4770      	bx	lr
 8007f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8007f62:	e7f9      	b.n	8007f58 <memset+0x4>

08007f64 <_free_r>:
 8007f64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f66:	2900      	cmp	r1, #0
 8007f68:	d044      	beq.n	8007ff4 <_free_r+0x90>
 8007f6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f6e:	9001      	str	r0, [sp, #4]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f1a1 0404 	sub.w	r4, r1, #4
 8007f76:	bfb8      	it	lt
 8007f78:	18e4      	addlt	r4, r4, r3
 8007f7a:	f001 ff49 	bl	8009e10 <__malloc_lock>
 8007f7e:	4a1e      	ldr	r2, [pc, #120]	; (8007ff8 <_free_r+0x94>)
 8007f80:	9801      	ldr	r0, [sp, #4]
 8007f82:	6813      	ldr	r3, [r2, #0]
 8007f84:	b933      	cbnz	r3, 8007f94 <_free_r+0x30>
 8007f86:	6063      	str	r3, [r4, #4]
 8007f88:	6014      	str	r4, [r2, #0]
 8007f8a:	b003      	add	sp, #12
 8007f8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f90:	f001 bf44 	b.w	8009e1c <__malloc_unlock>
 8007f94:	42a3      	cmp	r3, r4
 8007f96:	d908      	bls.n	8007faa <_free_r+0x46>
 8007f98:	6825      	ldr	r5, [r4, #0]
 8007f9a:	1961      	adds	r1, r4, r5
 8007f9c:	428b      	cmp	r3, r1
 8007f9e:	bf01      	itttt	eq
 8007fa0:	6819      	ldreq	r1, [r3, #0]
 8007fa2:	685b      	ldreq	r3, [r3, #4]
 8007fa4:	1949      	addeq	r1, r1, r5
 8007fa6:	6021      	streq	r1, [r4, #0]
 8007fa8:	e7ed      	b.n	8007f86 <_free_r+0x22>
 8007faa:	461a      	mov	r2, r3
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	b10b      	cbz	r3, 8007fb4 <_free_r+0x50>
 8007fb0:	42a3      	cmp	r3, r4
 8007fb2:	d9fa      	bls.n	8007faa <_free_r+0x46>
 8007fb4:	6811      	ldr	r1, [r2, #0]
 8007fb6:	1855      	adds	r5, r2, r1
 8007fb8:	42a5      	cmp	r5, r4
 8007fba:	d10b      	bne.n	8007fd4 <_free_r+0x70>
 8007fbc:	6824      	ldr	r4, [r4, #0]
 8007fbe:	4421      	add	r1, r4
 8007fc0:	1854      	adds	r4, r2, r1
 8007fc2:	42a3      	cmp	r3, r4
 8007fc4:	6011      	str	r1, [r2, #0]
 8007fc6:	d1e0      	bne.n	8007f8a <_free_r+0x26>
 8007fc8:	681c      	ldr	r4, [r3, #0]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	6053      	str	r3, [r2, #4]
 8007fce:	4421      	add	r1, r4
 8007fd0:	6011      	str	r1, [r2, #0]
 8007fd2:	e7da      	b.n	8007f8a <_free_r+0x26>
 8007fd4:	d902      	bls.n	8007fdc <_free_r+0x78>
 8007fd6:	230c      	movs	r3, #12
 8007fd8:	6003      	str	r3, [r0, #0]
 8007fda:	e7d6      	b.n	8007f8a <_free_r+0x26>
 8007fdc:	6825      	ldr	r5, [r4, #0]
 8007fde:	1961      	adds	r1, r4, r5
 8007fe0:	428b      	cmp	r3, r1
 8007fe2:	bf04      	itt	eq
 8007fe4:	6819      	ldreq	r1, [r3, #0]
 8007fe6:	685b      	ldreq	r3, [r3, #4]
 8007fe8:	6063      	str	r3, [r4, #4]
 8007fea:	bf04      	itt	eq
 8007fec:	1949      	addeq	r1, r1, r5
 8007fee:	6021      	streq	r1, [r4, #0]
 8007ff0:	6054      	str	r4, [r2, #4]
 8007ff2:	e7ca      	b.n	8007f8a <_free_r+0x26>
 8007ff4:	b003      	add	sp, #12
 8007ff6:	bd30      	pop	{r4, r5, pc}
 8007ff8:	200004c0 	.word	0x200004c0

08007ffc <sbrk_aligned>:
 8007ffc:	b570      	push	{r4, r5, r6, lr}
 8007ffe:	4e0e      	ldr	r6, [pc, #56]	; (8008038 <sbrk_aligned+0x3c>)
 8008000:	460c      	mov	r4, r1
 8008002:	6831      	ldr	r1, [r6, #0]
 8008004:	4605      	mov	r5, r0
 8008006:	b911      	cbnz	r1, 800800e <sbrk_aligned+0x12>
 8008008:	f000 fd84 	bl	8008b14 <_sbrk_r>
 800800c:	6030      	str	r0, [r6, #0]
 800800e:	4621      	mov	r1, r4
 8008010:	4628      	mov	r0, r5
 8008012:	f000 fd7f 	bl	8008b14 <_sbrk_r>
 8008016:	1c43      	adds	r3, r0, #1
 8008018:	d00a      	beq.n	8008030 <sbrk_aligned+0x34>
 800801a:	1cc4      	adds	r4, r0, #3
 800801c:	f024 0403 	bic.w	r4, r4, #3
 8008020:	42a0      	cmp	r0, r4
 8008022:	d007      	beq.n	8008034 <sbrk_aligned+0x38>
 8008024:	1a21      	subs	r1, r4, r0
 8008026:	4628      	mov	r0, r5
 8008028:	f000 fd74 	bl	8008b14 <_sbrk_r>
 800802c:	3001      	adds	r0, #1
 800802e:	d101      	bne.n	8008034 <sbrk_aligned+0x38>
 8008030:	f04f 34ff 	mov.w	r4, #4294967295
 8008034:	4620      	mov	r0, r4
 8008036:	bd70      	pop	{r4, r5, r6, pc}
 8008038:	200004c4 	.word	0x200004c4

0800803c <_malloc_r>:
 800803c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008040:	1ccd      	adds	r5, r1, #3
 8008042:	f025 0503 	bic.w	r5, r5, #3
 8008046:	3508      	adds	r5, #8
 8008048:	2d0c      	cmp	r5, #12
 800804a:	bf38      	it	cc
 800804c:	250c      	movcc	r5, #12
 800804e:	2d00      	cmp	r5, #0
 8008050:	4607      	mov	r7, r0
 8008052:	db01      	blt.n	8008058 <_malloc_r+0x1c>
 8008054:	42a9      	cmp	r1, r5
 8008056:	d905      	bls.n	8008064 <_malloc_r+0x28>
 8008058:	230c      	movs	r3, #12
 800805a:	603b      	str	r3, [r7, #0]
 800805c:	2600      	movs	r6, #0
 800805e:	4630      	mov	r0, r6
 8008060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008064:	4e2e      	ldr	r6, [pc, #184]	; (8008120 <_malloc_r+0xe4>)
 8008066:	f001 fed3 	bl	8009e10 <__malloc_lock>
 800806a:	6833      	ldr	r3, [r6, #0]
 800806c:	461c      	mov	r4, r3
 800806e:	bb34      	cbnz	r4, 80080be <_malloc_r+0x82>
 8008070:	4629      	mov	r1, r5
 8008072:	4638      	mov	r0, r7
 8008074:	f7ff ffc2 	bl	8007ffc <sbrk_aligned>
 8008078:	1c43      	adds	r3, r0, #1
 800807a:	4604      	mov	r4, r0
 800807c:	d14d      	bne.n	800811a <_malloc_r+0xde>
 800807e:	6834      	ldr	r4, [r6, #0]
 8008080:	4626      	mov	r6, r4
 8008082:	2e00      	cmp	r6, #0
 8008084:	d140      	bne.n	8008108 <_malloc_r+0xcc>
 8008086:	6823      	ldr	r3, [r4, #0]
 8008088:	4631      	mov	r1, r6
 800808a:	4638      	mov	r0, r7
 800808c:	eb04 0803 	add.w	r8, r4, r3
 8008090:	f000 fd40 	bl	8008b14 <_sbrk_r>
 8008094:	4580      	cmp	r8, r0
 8008096:	d13a      	bne.n	800810e <_malloc_r+0xd2>
 8008098:	6821      	ldr	r1, [r4, #0]
 800809a:	3503      	adds	r5, #3
 800809c:	1a6d      	subs	r5, r5, r1
 800809e:	f025 0503 	bic.w	r5, r5, #3
 80080a2:	3508      	adds	r5, #8
 80080a4:	2d0c      	cmp	r5, #12
 80080a6:	bf38      	it	cc
 80080a8:	250c      	movcc	r5, #12
 80080aa:	4629      	mov	r1, r5
 80080ac:	4638      	mov	r0, r7
 80080ae:	f7ff ffa5 	bl	8007ffc <sbrk_aligned>
 80080b2:	3001      	adds	r0, #1
 80080b4:	d02b      	beq.n	800810e <_malloc_r+0xd2>
 80080b6:	6823      	ldr	r3, [r4, #0]
 80080b8:	442b      	add	r3, r5
 80080ba:	6023      	str	r3, [r4, #0]
 80080bc:	e00e      	b.n	80080dc <_malloc_r+0xa0>
 80080be:	6822      	ldr	r2, [r4, #0]
 80080c0:	1b52      	subs	r2, r2, r5
 80080c2:	d41e      	bmi.n	8008102 <_malloc_r+0xc6>
 80080c4:	2a0b      	cmp	r2, #11
 80080c6:	d916      	bls.n	80080f6 <_malloc_r+0xba>
 80080c8:	1961      	adds	r1, r4, r5
 80080ca:	42a3      	cmp	r3, r4
 80080cc:	6025      	str	r5, [r4, #0]
 80080ce:	bf18      	it	ne
 80080d0:	6059      	strne	r1, [r3, #4]
 80080d2:	6863      	ldr	r3, [r4, #4]
 80080d4:	bf08      	it	eq
 80080d6:	6031      	streq	r1, [r6, #0]
 80080d8:	5162      	str	r2, [r4, r5]
 80080da:	604b      	str	r3, [r1, #4]
 80080dc:	4638      	mov	r0, r7
 80080de:	f104 060b 	add.w	r6, r4, #11
 80080e2:	f001 fe9b 	bl	8009e1c <__malloc_unlock>
 80080e6:	f026 0607 	bic.w	r6, r6, #7
 80080ea:	1d23      	adds	r3, r4, #4
 80080ec:	1af2      	subs	r2, r6, r3
 80080ee:	d0b6      	beq.n	800805e <_malloc_r+0x22>
 80080f0:	1b9b      	subs	r3, r3, r6
 80080f2:	50a3      	str	r3, [r4, r2]
 80080f4:	e7b3      	b.n	800805e <_malloc_r+0x22>
 80080f6:	6862      	ldr	r2, [r4, #4]
 80080f8:	42a3      	cmp	r3, r4
 80080fa:	bf0c      	ite	eq
 80080fc:	6032      	streq	r2, [r6, #0]
 80080fe:	605a      	strne	r2, [r3, #4]
 8008100:	e7ec      	b.n	80080dc <_malloc_r+0xa0>
 8008102:	4623      	mov	r3, r4
 8008104:	6864      	ldr	r4, [r4, #4]
 8008106:	e7b2      	b.n	800806e <_malloc_r+0x32>
 8008108:	4634      	mov	r4, r6
 800810a:	6876      	ldr	r6, [r6, #4]
 800810c:	e7b9      	b.n	8008082 <_malloc_r+0x46>
 800810e:	230c      	movs	r3, #12
 8008110:	603b      	str	r3, [r7, #0]
 8008112:	4638      	mov	r0, r7
 8008114:	f001 fe82 	bl	8009e1c <__malloc_unlock>
 8008118:	e7a1      	b.n	800805e <_malloc_r+0x22>
 800811a:	6025      	str	r5, [r4, #0]
 800811c:	e7de      	b.n	80080dc <_malloc_r+0xa0>
 800811e:	bf00      	nop
 8008120:	200004c0 	.word	0x200004c0

08008124 <__cvt>:
 8008124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008128:	ec55 4b10 	vmov	r4, r5, d0
 800812c:	2d00      	cmp	r5, #0
 800812e:	460e      	mov	r6, r1
 8008130:	4619      	mov	r1, r3
 8008132:	462b      	mov	r3, r5
 8008134:	bfbb      	ittet	lt
 8008136:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800813a:	461d      	movlt	r5, r3
 800813c:	2300      	movge	r3, #0
 800813e:	232d      	movlt	r3, #45	; 0x2d
 8008140:	700b      	strb	r3, [r1, #0]
 8008142:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008144:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008148:	4691      	mov	r9, r2
 800814a:	f023 0820 	bic.w	r8, r3, #32
 800814e:	bfbc      	itt	lt
 8008150:	4622      	movlt	r2, r4
 8008152:	4614      	movlt	r4, r2
 8008154:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008158:	d005      	beq.n	8008166 <__cvt+0x42>
 800815a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800815e:	d100      	bne.n	8008162 <__cvt+0x3e>
 8008160:	3601      	adds	r6, #1
 8008162:	2102      	movs	r1, #2
 8008164:	e000      	b.n	8008168 <__cvt+0x44>
 8008166:	2103      	movs	r1, #3
 8008168:	ab03      	add	r3, sp, #12
 800816a:	9301      	str	r3, [sp, #4]
 800816c:	ab02      	add	r3, sp, #8
 800816e:	9300      	str	r3, [sp, #0]
 8008170:	ec45 4b10 	vmov	d0, r4, r5
 8008174:	4653      	mov	r3, sl
 8008176:	4632      	mov	r2, r6
 8008178:	f000 fe2a 	bl	8008dd0 <_dtoa_r>
 800817c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008180:	4607      	mov	r7, r0
 8008182:	d102      	bne.n	800818a <__cvt+0x66>
 8008184:	f019 0f01 	tst.w	r9, #1
 8008188:	d022      	beq.n	80081d0 <__cvt+0xac>
 800818a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800818e:	eb07 0906 	add.w	r9, r7, r6
 8008192:	d110      	bne.n	80081b6 <__cvt+0x92>
 8008194:	783b      	ldrb	r3, [r7, #0]
 8008196:	2b30      	cmp	r3, #48	; 0x30
 8008198:	d10a      	bne.n	80081b0 <__cvt+0x8c>
 800819a:	2200      	movs	r2, #0
 800819c:	2300      	movs	r3, #0
 800819e:	4620      	mov	r0, r4
 80081a0:	4629      	mov	r1, r5
 80081a2:	f7f8 fca9 	bl	8000af8 <__aeabi_dcmpeq>
 80081a6:	b918      	cbnz	r0, 80081b0 <__cvt+0x8c>
 80081a8:	f1c6 0601 	rsb	r6, r6, #1
 80081ac:	f8ca 6000 	str.w	r6, [sl]
 80081b0:	f8da 3000 	ldr.w	r3, [sl]
 80081b4:	4499      	add	r9, r3
 80081b6:	2200      	movs	r2, #0
 80081b8:	2300      	movs	r3, #0
 80081ba:	4620      	mov	r0, r4
 80081bc:	4629      	mov	r1, r5
 80081be:	f7f8 fc9b 	bl	8000af8 <__aeabi_dcmpeq>
 80081c2:	b108      	cbz	r0, 80081c8 <__cvt+0xa4>
 80081c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80081c8:	2230      	movs	r2, #48	; 0x30
 80081ca:	9b03      	ldr	r3, [sp, #12]
 80081cc:	454b      	cmp	r3, r9
 80081ce:	d307      	bcc.n	80081e0 <__cvt+0xbc>
 80081d0:	9b03      	ldr	r3, [sp, #12]
 80081d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081d4:	1bdb      	subs	r3, r3, r7
 80081d6:	4638      	mov	r0, r7
 80081d8:	6013      	str	r3, [r2, #0]
 80081da:	b004      	add	sp, #16
 80081dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081e0:	1c59      	adds	r1, r3, #1
 80081e2:	9103      	str	r1, [sp, #12]
 80081e4:	701a      	strb	r2, [r3, #0]
 80081e6:	e7f0      	b.n	80081ca <__cvt+0xa6>

080081e8 <__exponent>:
 80081e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081ea:	4603      	mov	r3, r0
 80081ec:	2900      	cmp	r1, #0
 80081ee:	bfb8      	it	lt
 80081f0:	4249      	neglt	r1, r1
 80081f2:	f803 2b02 	strb.w	r2, [r3], #2
 80081f6:	bfb4      	ite	lt
 80081f8:	222d      	movlt	r2, #45	; 0x2d
 80081fa:	222b      	movge	r2, #43	; 0x2b
 80081fc:	2909      	cmp	r1, #9
 80081fe:	7042      	strb	r2, [r0, #1]
 8008200:	dd2a      	ble.n	8008258 <__exponent+0x70>
 8008202:	f10d 0407 	add.w	r4, sp, #7
 8008206:	46a4      	mov	ip, r4
 8008208:	270a      	movs	r7, #10
 800820a:	46a6      	mov	lr, r4
 800820c:	460a      	mov	r2, r1
 800820e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008212:	fb07 1516 	mls	r5, r7, r6, r1
 8008216:	3530      	adds	r5, #48	; 0x30
 8008218:	2a63      	cmp	r2, #99	; 0x63
 800821a:	f104 34ff 	add.w	r4, r4, #4294967295
 800821e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008222:	4631      	mov	r1, r6
 8008224:	dcf1      	bgt.n	800820a <__exponent+0x22>
 8008226:	3130      	adds	r1, #48	; 0x30
 8008228:	f1ae 0502 	sub.w	r5, lr, #2
 800822c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008230:	1c44      	adds	r4, r0, #1
 8008232:	4629      	mov	r1, r5
 8008234:	4561      	cmp	r1, ip
 8008236:	d30a      	bcc.n	800824e <__exponent+0x66>
 8008238:	f10d 0209 	add.w	r2, sp, #9
 800823c:	eba2 020e 	sub.w	r2, r2, lr
 8008240:	4565      	cmp	r5, ip
 8008242:	bf88      	it	hi
 8008244:	2200      	movhi	r2, #0
 8008246:	4413      	add	r3, r2
 8008248:	1a18      	subs	r0, r3, r0
 800824a:	b003      	add	sp, #12
 800824c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800824e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008252:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008256:	e7ed      	b.n	8008234 <__exponent+0x4c>
 8008258:	2330      	movs	r3, #48	; 0x30
 800825a:	3130      	adds	r1, #48	; 0x30
 800825c:	7083      	strb	r3, [r0, #2]
 800825e:	70c1      	strb	r1, [r0, #3]
 8008260:	1d03      	adds	r3, r0, #4
 8008262:	e7f1      	b.n	8008248 <__exponent+0x60>

08008264 <_printf_float>:
 8008264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008268:	ed2d 8b02 	vpush	{d8}
 800826c:	b08d      	sub	sp, #52	; 0x34
 800826e:	460c      	mov	r4, r1
 8008270:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008274:	4616      	mov	r6, r2
 8008276:	461f      	mov	r7, r3
 8008278:	4605      	mov	r5, r0
 800827a:	f001 fd4f 	bl	8009d1c <_localeconv_r>
 800827e:	f8d0 a000 	ldr.w	sl, [r0]
 8008282:	4650      	mov	r0, sl
 8008284:	f7f7 ffbc 	bl	8000200 <strlen>
 8008288:	2300      	movs	r3, #0
 800828a:	930a      	str	r3, [sp, #40]	; 0x28
 800828c:	6823      	ldr	r3, [r4, #0]
 800828e:	9305      	str	r3, [sp, #20]
 8008290:	f8d8 3000 	ldr.w	r3, [r8]
 8008294:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008298:	3307      	adds	r3, #7
 800829a:	f023 0307 	bic.w	r3, r3, #7
 800829e:	f103 0208 	add.w	r2, r3, #8
 80082a2:	f8c8 2000 	str.w	r2, [r8]
 80082a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082aa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80082ae:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80082b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80082b6:	9307      	str	r3, [sp, #28]
 80082b8:	f8cd 8018 	str.w	r8, [sp, #24]
 80082bc:	ee08 0a10 	vmov	s16, r0
 80082c0:	4b9f      	ldr	r3, [pc, #636]	; (8008540 <_printf_float+0x2dc>)
 80082c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80082c6:	f04f 32ff 	mov.w	r2, #4294967295
 80082ca:	f7f8 fc47 	bl	8000b5c <__aeabi_dcmpun>
 80082ce:	bb88      	cbnz	r0, 8008334 <_printf_float+0xd0>
 80082d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80082d4:	4b9a      	ldr	r3, [pc, #616]	; (8008540 <_printf_float+0x2dc>)
 80082d6:	f04f 32ff 	mov.w	r2, #4294967295
 80082da:	f7f8 fc21 	bl	8000b20 <__aeabi_dcmple>
 80082de:	bb48      	cbnz	r0, 8008334 <_printf_float+0xd0>
 80082e0:	2200      	movs	r2, #0
 80082e2:	2300      	movs	r3, #0
 80082e4:	4640      	mov	r0, r8
 80082e6:	4649      	mov	r1, r9
 80082e8:	f7f8 fc10 	bl	8000b0c <__aeabi_dcmplt>
 80082ec:	b110      	cbz	r0, 80082f4 <_printf_float+0x90>
 80082ee:	232d      	movs	r3, #45	; 0x2d
 80082f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082f4:	4b93      	ldr	r3, [pc, #588]	; (8008544 <_printf_float+0x2e0>)
 80082f6:	4894      	ldr	r0, [pc, #592]	; (8008548 <_printf_float+0x2e4>)
 80082f8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80082fc:	bf94      	ite	ls
 80082fe:	4698      	movls	r8, r3
 8008300:	4680      	movhi	r8, r0
 8008302:	2303      	movs	r3, #3
 8008304:	6123      	str	r3, [r4, #16]
 8008306:	9b05      	ldr	r3, [sp, #20]
 8008308:	f023 0204 	bic.w	r2, r3, #4
 800830c:	6022      	str	r2, [r4, #0]
 800830e:	f04f 0900 	mov.w	r9, #0
 8008312:	9700      	str	r7, [sp, #0]
 8008314:	4633      	mov	r3, r6
 8008316:	aa0b      	add	r2, sp, #44	; 0x2c
 8008318:	4621      	mov	r1, r4
 800831a:	4628      	mov	r0, r5
 800831c:	f000 f9d8 	bl	80086d0 <_printf_common>
 8008320:	3001      	adds	r0, #1
 8008322:	f040 8090 	bne.w	8008446 <_printf_float+0x1e2>
 8008326:	f04f 30ff 	mov.w	r0, #4294967295
 800832a:	b00d      	add	sp, #52	; 0x34
 800832c:	ecbd 8b02 	vpop	{d8}
 8008330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008334:	4642      	mov	r2, r8
 8008336:	464b      	mov	r3, r9
 8008338:	4640      	mov	r0, r8
 800833a:	4649      	mov	r1, r9
 800833c:	f7f8 fc0e 	bl	8000b5c <__aeabi_dcmpun>
 8008340:	b140      	cbz	r0, 8008354 <_printf_float+0xf0>
 8008342:	464b      	mov	r3, r9
 8008344:	2b00      	cmp	r3, #0
 8008346:	bfbc      	itt	lt
 8008348:	232d      	movlt	r3, #45	; 0x2d
 800834a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800834e:	487f      	ldr	r0, [pc, #508]	; (800854c <_printf_float+0x2e8>)
 8008350:	4b7f      	ldr	r3, [pc, #508]	; (8008550 <_printf_float+0x2ec>)
 8008352:	e7d1      	b.n	80082f8 <_printf_float+0x94>
 8008354:	6863      	ldr	r3, [r4, #4]
 8008356:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800835a:	9206      	str	r2, [sp, #24]
 800835c:	1c5a      	adds	r2, r3, #1
 800835e:	d13f      	bne.n	80083e0 <_printf_float+0x17c>
 8008360:	2306      	movs	r3, #6
 8008362:	6063      	str	r3, [r4, #4]
 8008364:	9b05      	ldr	r3, [sp, #20]
 8008366:	6861      	ldr	r1, [r4, #4]
 8008368:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800836c:	2300      	movs	r3, #0
 800836e:	9303      	str	r3, [sp, #12]
 8008370:	ab0a      	add	r3, sp, #40	; 0x28
 8008372:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008376:	ab09      	add	r3, sp, #36	; 0x24
 8008378:	ec49 8b10 	vmov	d0, r8, r9
 800837c:	9300      	str	r3, [sp, #0]
 800837e:	6022      	str	r2, [r4, #0]
 8008380:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008384:	4628      	mov	r0, r5
 8008386:	f7ff fecd 	bl	8008124 <__cvt>
 800838a:	9b06      	ldr	r3, [sp, #24]
 800838c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800838e:	2b47      	cmp	r3, #71	; 0x47
 8008390:	4680      	mov	r8, r0
 8008392:	d108      	bne.n	80083a6 <_printf_float+0x142>
 8008394:	1cc8      	adds	r0, r1, #3
 8008396:	db02      	blt.n	800839e <_printf_float+0x13a>
 8008398:	6863      	ldr	r3, [r4, #4]
 800839a:	4299      	cmp	r1, r3
 800839c:	dd41      	ble.n	8008422 <_printf_float+0x1be>
 800839e:	f1ab 0b02 	sub.w	fp, fp, #2
 80083a2:	fa5f fb8b 	uxtb.w	fp, fp
 80083a6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80083aa:	d820      	bhi.n	80083ee <_printf_float+0x18a>
 80083ac:	3901      	subs	r1, #1
 80083ae:	465a      	mov	r2, fp
 80083b0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80083b4:	9109      	str	r1, [sp, #36]	; 0x24
 80083b6:	f7ff ff17 	bl	80081e8 <__exponent>
 80083ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083bc:	1813      	adds	r3, r2, r0
 80083be:	2a01      	cmp	r2, #1
 80083c0:	4681      	mov	r9, r0
 80083c2:	6123      	str	r3, [r4, #16]
 80083c4:	dc02      	bgt.n	80083cc <_printf_float+0x168>
 80083c6:	6822      	ldr	r2, [r4, #0]
 80083c8:	07d2      	lsls	r2, r2, #31
 80083ca:	d501      	bpl.n	80083d0 <_printf_float+0x16c>
 80083cc:	3301      	adds	r3, #1
 80083ce:	6123      	str	r3, [r4, #16]
 80083d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d09c      	beq.n	8008312 <_printf_float+0xae>
 80083d8:	232d      	movs	r3, #45	; 0x2d
 80083da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083de:	e798      	b.n	8008312 <_printf_float+0xae>
 80083e0:	9a06      	ldr	r2, [sp, #24]
 80083e2:	2a47      	cmp	r2, #71	; 0x47
 80083e4:	d1be      	bne.n	8008364 <_printf_float+0x100>
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d1bc      	bne.n	8008364 <_printf_float+0x100>
 80083ea:	2301      	movs	r3, #1
 80083ec:	e7b9      	b.n	8008362 <_printf_float+0xfe>
 80083ee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80083f2:	d118      	bne.n	8008426 <_printf_float+0x1c2>
 80083f4:	2900      	cmp	r1, #0
 80083f6:	6863      	ldr	r3, [r4, #4]
 80083f8:	dd0b      	ble.n	8008412 <_printf_float+0x1ae>
 80083fa:	6121      	str	r1, [r4, #16]
 80083fc:	b913      	cbnz	r3, 8008404 <_printf_float+0x1a0>
 80083fe:	6822      	ldr	r2, [r4, #0]
 8008400:	07d0      	lsls	r0, r2, #31
 8008402:	d502      	bpl.n	800840a <_printf_float+0x1a6>
 8008404:	3301      	adds	r3, #1
 8008406:	440b      	add	r3, r1
 8008408:	6123      	str	r3, [r4, #16]
 800840a:	65a1      	str	r1, [r4, #88]	; 0x58
 800840c:	f04f 0900 	mov.w	r9, #0
 8008410:	e7de      	b.n	80083d0 <_printf_float+0x16c>
 8008412:	b913      	cbnz	r3, 800841a <_printf_float+0x1b6>
 8008414:	6822      	ldr	r2, [r4, #0]
 8008416:	07d2      	lsls	r2, r2, #31
 8008418:	d501      	bpl.n	800841e <_printf_float+0x1ba>
 800841a:	3302      	adds	r3, #2
 800841c:	e7f4      	b.n	8008408 <_printf_float+0x1a4>
 800841e:	2301      	movs	r3, #1
 8008420:	e7f2      	b.n	8008408 <_printf_float+0x1a4>
 8008422:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008428:	4299      	cmp	r1, r3
 800842a:	db05      	blt.n	8008438 <_printf_float+0x1d4>
 800842c:	6823      	ldr	r3, [r4, #0]
 800842e:	6121      	str	r1, [r4, #16]
 8008430:	07d8      	lsls	r0, r3, #31
 8008432:	d5ea      	bpl.n	800840a <_printf_float+0x1a6>
 8008434:	1c4b      	adds	r3, r1, #1
 8008436:	e7e7      	b.n	8008408 <_printf_float+0x1a4>
 8008438:	2900      	cmp	r1, #0
 800843a:	bfd4      	ite	le
 800843c:	f1c1 0202 	rsble	r2, r1, #2
 8008440:	2201      	movgt	r2, #1
 8008442:	4413      	add	r3, r2
 8008444:	e7e0      	b.n	8008408 <_printf_float+0x1a4>
 8008446:	6823      	ldr	r3, [r4, #0]
 8008448:	055a      	lsls	r2, r3, #21
 800844a:	d407      	bmi.n	800845c <_printf_float+0x1f8>
 800844c:	6923      	ldr	r3, [r4, #16]
 800844e:	4642      	mov	r2, r8
 8008450:	4631      	mov	r1, r6
 8008452:	4628      	mov	r0, r5
 8008454:	47b8      	blx	r7
 8008456:	3001      	adds	r0, #1
 8008458:	d12c      	bne.n	80084b4 <_printf_float+0x250>
 800845a:	e764      	b.n	8008326 <_printf_float+0xc2>
 800845c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008460:	f240 80e0 	bls.w	8008624 <_printf_float+0x3c0>
 8008464:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008468:	2200      	movs	r2, #0
 800846a:	2300      	movs	r3, #0
 800846c:	f7f8 fb44 	bl	8000af8 <__aeabi_dcmpeq>
 8008470:	2800      	cmp	r0, #0
 8008472:	d034      	beq.n	80084de <_printf_float+0x27a>
 8008474:	4a37      	ldr	r2, [pc, #220]	; (8008554 <_printf_float+0x2f0>)
 8008476:	2301      	movs	r3, #1
 8008478:	4631      	mov	r1, r6
 800847a:	4628      	mov	r0, r5
 800847c:	47b8      	blx	r7
 800847e:	3001      	adds	r0, #1
 8008480:	f43f af51 	beq.w	8008326 <_printf_float+0xc2>
 8008484:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008488:	429a      	cmp	r2, r3
 800848a:	db02      	blt.n	8008492 <_printf_float+0x22e>
 800848c:	6823      	ldr	r3, [r4, #0]
 800848e:	07d8      	lsls	r0, r3, #31
 8008490:	d510      	bpl.n	80084b4 <_printf_float+0x250>
 8008492:	ee18 3a10 	vmov	r3, s16
 8008496:	4652      	mov	r2, sl
 8008498:	4631      	mov	r1, r6
 800849a:	4628      	mov	r0, r5
 800849c:	47b8      	blx	r7
 800849e:	3001      	adds	r0, #1
 80084a0:	f43f af41 	beq.w	8008326 <_printf_float+0xc2>
 80084a4:	f04f 0800 	mov.w	r8, #0
 80084a8:	f104 091a 	add.w	r9, r4, #26
 80084ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084ae:	3b01      	subs	r3, #1
 80084b0:	4543      	cmp	r3, r8
 80084b2:	dc09      	bgt.n	80084c8 <_printf_float+0x264>
 80084b4:	6823      	ldr	r3, [r4, #0]
 80084b6:	079b      	lsls	r3, r3, #30
 80084b8:	f100 8105 	bmi.w	80086c6 <_printf_float+0x462>
 80084bc:	68e0      	ldr	r0, [r4, #12]
 80084be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084c0:	4298      	cmp	r0, r3
 80084c2:	bfb8      	it	lt
 80084c4:	4618      	movlt	r0, r3
 80084c6:	e730      	b.n	800832a <_printf_float+0xc6>
 80084c8:	2301      	movs	r3, #1
 80084ca:	464a      	mov	r2, r9
 80084cc:	4631      	mov	r1, r6
 80084ce:	4628      	mov	r0, r5
 80084d0:	47b8      	blx	r7
 80084d2:	3001      	adds	r0, #1
 80084d4:	f43f af27 	beq.w	8008326 <_printf_float+0xc2>
 80084d8:	f108 0801 	add.w	r8, r8, #1
 80084dc:	e7e6      	b.n	80084ac <_printf_float+0x248>
 80084de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	dc39      	bgt.n	8008558 <_printf_float+0x2f4>
 80084e4:	4a1b      	ldr	r2, [pc, #108]	; (8008554 <_printf_float+0x2f0>)
 80084e6:	2301      	movs	r3, #1
 80084e8:	4631      	mov	r1, r6
 80084ea:	4628      	mov	r0, r5
 80084ec:	47b8      	blx	r7
 80084ee:	3001      	adds	r0, #1
 80084f0:	f43f af19 	beq.w	8008326 <_printf_float+0xc2>
 80084f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084f8:	4313      	orrs	r3, r2
 80084fa:	d102      	bne.n	8008502 <_printf_float+0x29e>
 80084fc:	6823      	ldr	r3, [r4, #0]
 80084fe:	07d9      	lsls	r1, r3, #31
 8008500:	d5d8      	bpl.n	80084b4 <_printf_float+0x250>
 8008502:	ee18 3a10 	vmov	r3, s16
 8008506:	4652      	mov	r2, sl
 8008508:	4631      	mov	r1, r6
 800850a:	4628      	mov	r0, r5
 800850c:	47b8      	blx	r7
 800850e:	3001      	adds	r0, #1
 8008510:	f43f af09 	beq.w	8008326 <_printf_float+0xc2>
 8008514:	f04f 0900 	mov.w	r9, #0
 8008518:	f104 0a1a 	add.w	sl, r4, #26
 800851c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800851e:	425b      	negs	r3, r3
 8008520:	454b      	cmp	r3, r9
 8008522:	dc01      	bgt.n	8008528 <_printf_float+0x2c4>
 8008524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008526:	e792      	b.n	800844e <_printf_float+0x1ea>
 8008528:	2301      	movs	r3, #1
 800852a:	4652      	mov	r2, sl
 800852c:	4631      	mov	r1, r6
 800852e:	4628      	mov	r0, r5
 8008530:	47b8      	blx	r7
 8008532:	3001      	adds	r0, #1
 8008534:	f43f aef7 	beq.w	8008326 <_printf_float+0xc2>
 8008538:	f109 0901 	add.w	r9, r9, #1
 800853c:	e7ee      	b.n	800851c <_printf_float+0x2b8>
 800853e:	bf00      	nop
 8008540:	7fefffff 	.word	0x7fefffff
 8008544:	0800b368 	.word	0x0800b368
 8008548:	0800b36c 	.word	0x0800b36c
 800854c:	0800b374 	.word	0x0800b374
 8008550:	0800b370 	.word	0x0800b370
 8008554:	0800b378 	.word	0x0800b378
 8008558:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800855a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800855c:	429a      	cmp	r2, r3
 800855e:	bfa8      	it	ge
 8008560:	461a      	movge	r2, r3
 8008562:	2a00      	cmp	r2, #0
 8008564:	4691      	mov	r9, r2
 8008566:	dc37      	bgt.n	80085d8 <_printf_float+0x374>
 8008568:	f04f 0b00 	mov.w	fp, #0
 800856c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008570:	f104 021a 	add.w	r2, r4, #26
 8008574:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008576:	9305      	str	r3, [sp, #20]
 8008578:	eba3 0309 	sub.w	r3, r3, r9
 800857c:	455b      	cmp	r3, fp
 800857e:	dc33      	bgt.n	80085e8 <_printf_float+0x384>
 8008580:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008584:	429a      	cmp	r2, r3
 8008586:	db3b      	blt.n	8008600 <_printf_float+0x39c>
 8008588:	6823      	ldr	r3, [r4, #0]
 800858a:	07da      	lsls	r2, r3, #31
 800858c:	d438      	bmi.n	8008600 <_printf_float+0x39c>
 800858e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008590:	9a05      	ldr	r2, [sp, #20]
 8008592:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008594:	1a9a      	subs	r2, r3, r2
 8008596:	eba3 0901 	sub.w	r9, r3, r1
 800859a:	4591      	cmp	r9, r2
 800859c:	bfa8      	it	ge
 800859e:	4691      	movge	r9, r2
 80085a0:	f1b9 0f00 	cmp.w	r9, #0
 80085a4:	dc35      	bgt.n	8008612 <_printf_float+0x3ae>
 80085a6:	f04f 0800 	mov.w	r8, #0
 80085aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80085ae:	f104 0a1a 	add.w	sl, r4, #26
 80085b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085b6:	1a9b      	subs	r3, r3, r2
 80085b8:	eba3 0309 	sub.w	r3, r3, r9
 80085bc:	4543      	cmp	r3, r8
 80085be:	f77f af79 	ble.w	80084b4 <_printf_float+0x250>
 80085c2:	2301      	movs	r3, #1
 80085c4:	4652      	mov	r2, sl
 80085c6:	4631      	mov	r1, r6
 80085c8:	4628      	mov	r0, r5
 80085ca:	47b8      	blx	r7
 80085cc:	3001      	adds	r0, #1
 80085ce:	f43f aeaa 	beq.w	8008326 <_printf_float+0xc2>
 80085d2:	f108 0801 	add.w	r8, r8, #1
 80085d6:	e7ec      	b.n	80085b2 <_printf_float+0x34e>
 80085d8:	4613      	mov	r3, r2
 80085da:	4631      	mov	r1, r6
 80085dc:	4642      	mov	r2, r8
 80085de:	4628      	mov	r0, r5
 80085e0:	47b8      	blx	r7
 80085e2:	3001      	adds	r0, #1
 80085e4:	d1c0      	bne.n	8008568 <_printf_float+0x304>
 80085e6:	e69e      	b.n	8008326 <_printf_float+0xc2>
 80085e8:	2301      	movs	r3, #1
 80085ea:	4631      	mov	r1, r6
 80085ec:	4628      	mov	r0, r5
 80085ee:	9205      	str	r2, [sp, #20]
 80085f0:	47b8      	blx	r7
 80085f2:	3001      	adds	r0, #1
 80085f4:	f43f ae97 	beq.w	8008326 <_printf_float+0xc2>
 80085f8:	9a05      	ldr	r2, [sp, #20]
 80085fa:	f10b 0b01 	add.w	fp, fp, #1
 80085fe:	e7b9      	b.n	8008574 <_printf_float+0x310>
 8008600:	ee18 3a10 	vmov	r3, s16
 8008604:	4652      	mov	r2, sl
 8008606:	4631      	mov	r1, r6
 8008608:	4628      	mov	r0, r5
 800860a:	47b8      	blx	r7
 800860c:	3001      	adds	r0, #1
 800860e:	d1be      	bne.n	800858e <_printf_float+0x32a>
 8008610:	e689      	b.n	8008326 <_printf_float+0xc2>
 8008612:	9a05      	ldr	r2, [sp, #20]
 8008614:	464b      	mov	r3, r9
 8008616:	4442      	add	r2, r8
 8008618:	4631      	mov	r1, r6
 800861a:	4628      	mov	r0, r5
 800861c:	47b8      	blx	r7
 800861e:	3001      	adds	r0, #1
 8008620:	d1c1      	bne.n	80085a6 <_printf_float+0x342>
 8008622:	e680      	b.n	8008326 <_printf_float+0xc2>
 8008624:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008626:	2a01      	cmp	r2, #1
 8008628:	dc01      	bgt.n	800862e <_printf_float+0x3ca>
 800862a:	07db      	lsls	r3, r3, #31
 800862c:	d538      	bpl.n	80086a0 <_printf_float+0x43c>
 800862e:	2301      	movs	r3, #1
 8008630:	4642      	mov	r2, r8
 8008632:	4631      	mov	r1, r6
 8008634:	4628      	mov	r0, r5
 8008636:	47b8      	blx	r7
 8008638:	3001      	adds	r0, #1
 800863a:	f43f ae74 	beq.w	8008326 <_printf_float+0xc2>
 800863e:	ee18 3a10 	vmov	r3, s16
 8008642:	4652      	mov	r2, sl
 8008644:	4631      	mov	r1, r6
 8008646:	4628      	mov	r0, r5
 8008648:	47b8      	blx	r7
 800864a:	3001      	adds	r0, #1
 800864c:	f43f ae6b 	beq.w	8008326 <_printf_float+0xc2>
 8008650:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008654:	2200      	movs	r2, #0
 8008656:	2300      	movs	r3, #0
 8008658:	f7f8 fa4e 	bl	8000af8 <__aeabi_dcmpeq>
 800865c:	b9d8      	cbnz	r0, 8008696 <_printf_float+0x432>
 800865e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008660:	f108 0201 	add.w	r2, r8, #1
 8008664:	3b01      	subs	r3, #1
 8008666:	4631      	mov	r1, r6
 8008668:	4628      	mov	r0, r5
 800866a:	47b8      	blx	r7
 800866c:	3001      	adds	r0, #1
 800866e:	d10e      	bne.n	800868e <_printf_float+0x42a>
 8008670:	e659      	b.n	8008326 <_printf_float+0xc2>
 8008672:	2301      	movs	r3, #1
 8008674:	4652      	mov	r2, sl
 8008676:	4631      	mov	r1, r6
 8008678:	4628      	mov	r0, r5
 800867a:	47b8      	blx	r7
 800867c:	3001      	adds	r0, #1
 800867e:	f43f ae52 	beq.w	8008326 <_printf_float+0xc2>
 8008682:	f108 0801 	add.w	r8, r8, #1
 8008686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008688:	3b01      	subs	r3, #1
 800868a:	4543      	cmp	r3, r8
 800868c:	dcf1      	bgt.n	8008672 <_printf_float+0x40e>
 800868e:	464b      	mov	r3, r9
 8008690:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008694:	e6dc      	b.n	8008450 <_printf_float+0x1ec>
 8008696:	f04f 0800 	mov.w	r8, #0
 800869a:	f104 0a1a 	add.w	sl, r4, #26
 800869e:	e7f2      	b.n	8008686 <_printf_float+0x422>
 80086a0:	2301      	movs	r3, #1
 80086a2:	4642      	mov	r2, r8
 80086a4:	e7df      	b.n	8008666 <_printf_float+0x402>
 80086a6:	2301      	movs	r3, #1
 80086a8:	464a      	mov	r2, r9
 80086aa:	4631      	mov	r1, r6
 80086ac:	4628      	mov	r0, r5
 80086ae:	47b8      	blx	r7
 80086b0:	3001      	adds	r0, #1
 80086b2:	f43f ae38 	beq.w	8008326 <_printf_float+0xc2>
 80086b6:	f108 0801 	add.w	r8, r8, #1
 80086ba:	68e3      	ldr	r3, [r4, #12]
 80086bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80086be:	1a5b      	subs	r3, r3, r1
 80086c0:	4543      	cmp	r3, r8
 80086c2:	dcf0      	bgt.n	80086a6 <_printf_float+0x442>
 80086c4:	e6fa      	b.n	80084bc <_printf_float+0x258>
 80086c6:	f04f 0800 	mov.w	r8, #0
 80086ca:	f104 0919 	add.w	r9, r4, #25
 80086ce:	e7f4      	b.n	80086ba <_printf_float+0x456>

080086d0 <_printf_common>:
 80086d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086d4:	4616      	mov	r6, r2
 80086d6:	4699      	mov	r9, r3
 80086d8:	688a      	ldr	r2, [r1, #8]
 80086da:	690b      	ldr	r3, [r1, #16]
 80086dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086e0:	4293      	cmp	r3, r2
 80086e2:	bfb8      	it	lt
 80086e4:	4613      	movlt	r3, r2
 80086e6:	6033      	str	r3, [r6, #0]
 80086e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086ec:	4607      	mov	r7, r0
 80086ee:	460c      	mov	r4, r1
 80086f0:	b10a      	cbz	r2, 80086f6 <_printf_common+0x26>
 80086f2:	3301      	adds	r3, #1
 80086f4:	6033      	str	r3, [r6, #0]
 80086f6:	6823      	ldr	r3, [r4, #0]
 80086f8:	0699      	lsls	r1, r3, #26
 80086fa:	bf42      	ittt	mi
 80086fc:	6833      	ldrmi	r3, [r6, #0]
 80086fe:	3302      	addmi	r3, #2
 8008700:	6033      	strmi	r3, [r6, #0]
 8008702:	6825      	ldr	r5, [r4, #0]
 8008704:	f015 0506 	ands.w	r5, r5, #6
 8008708:	d106      	bne.n	8008718 <_printf_common+0x48>
 800870a:	f104 0a19 	add.w	sl, r4, #25
 800870e:	68e3      	ldr	r3, [r4, #12]
 8008710:	6832      	ldr	r2, [r6, #0]
 8008712:	1a9b      	subs	r3, r3, r2
 8008714:	42ab      	cmp	r3, r5
 8008716:	dc26      	bgt.n	8008766 <_printf_common+0x96>
 8008718:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800871c:	1e13      	subs	r3, r2, #0
 800871e:	6822      	ldr	r2, [r4, #0]
 8008720:	bf18      	it	ne
 8008722:	2301      	movne	r3, #1
 8008724:	0692      	lsls	r2, r2, #26
 8008726:	d42b      	bmi.n	8008780 <_printf_common+0xb0>
 8008728:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800872c:	4649      	mov	r1, r9
 800872e:	4638      	mov	r0, r7
 8008730:	47c0      	blx	r8
 8008732:	3001      	adds	r0, #1
 8008734:	d01e      	beq.n	8008774 <_printf_common+0xa4>
 8008736:	6823      	ldr	r3, [r4, #0]
 8008738:	68e5      	ldr	r5, [r4, #12]
 800873a:	6832      	ldr	r2, [r6, #0]
 800873c:	f003 0306 	and.w	r3, r3, #6
 8008740:	2b04      	cmp	r3, #4
 8008742:	bf08      	it	eq
 8008744:	1aad      	subeq	r5, r5, r2
 8008746:	68a3      	ldr	r3, [r4, #8]
 8008748:	6922      	ldr	r2, [r4, #16]
 800874a:	bf0c      	ite	eq
 800874c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008750:	2500      	movne	r5, #0
 8008752:	4293      	cmp	r3, r2
 8008754:	bfc4      	itt	gt
 8008756:	1a9b      	subgt	r3, r3, r2
 8008758:	18ed      	addgt	r5, r5, r3
 800875a:	2600      	movs	r6, #0
 800875c:	341a      	adds	r4, #26
 800875e:	42b5      	cmp	r5, r6
 8008760:	d11a      	bne.n	8008798 <_printf_common+0xc8>
 8008762:	2000      	movs	r0, #0
 8008764:	e008      	b.n	8008778 <_printf_common+0xa8>
 8008766:	2301      	movs	r3, #1
 8008768:	4652      	mov	r2, sl
 800876a:	4649      	mov	r1, r9
 800876c:	4638      	mov	r0, r7
 800876e:	47c0      	blx	r8
 8008770:	3001      	adds	r0, #1
 8008772:	d103      	bne.n	800877c <_printf_common+0xac>
 8008774:	f04f 30ff 	mov.w	r0, #4294967295
 8008778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800877c:	3501      	adds	r5, #1
 800877e:	e7c6      	b.n	800870e <_printf_common+0x3e>
 8008780:	18e1      	adds	r1, r4, r3
 8008782:	1c5a      	adds	r2, r3, #1
 8008784:	2030      	movs	r0, #48	; 0x30
 8008786:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800878a:	4422      	add	r2, r4
 800878c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008790:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008794:	3302      	adds	r3, #2
 8008796:	e7c7      	b.n	8008728 <_printf_common+0x58>
 8008798:	2301      	movs	r3, #1
 800879a:	4622      	mov	r2, r4
 800879c:	4649      	mov	r1, r9
 800879e:	4638      	mov	r0, r7
 80087a0:	47c0      	blx	r8
 80087a2:	3001      	adds	r0, #1
 80087a4:	d0e6      	beq.n	8008774 <_printf_common+0xa4>
 80087a6:	3601      	adds	r6, #1
 80087a8:	e7d9      	b.n	800875e <_printf_common+0x8e>
	...

080087ac <_printf_i>:
 80087ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087b0:	7e0f      	ldrb	r7, [r1, #24]
 80087b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80087b4:	2f78      	cmp	r7, #120	; 0x78
 80087b6:	4691      	mov	r9, r2
 80087b8:	4680      	mov	r8, r0
 80087ba:	460c      	mov	r4, r1
 80087bc:	469a      	mov	sl, r3
 80087be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80087c2:	d807      	bhi.n	80087d4 <_printf_i+0x28>
 80087c4:	2f62      	cmp	r7, #98	; 0x62
 80087c6:	d80a      	bhi.n	80087de <_printf_i+0x32>
 80087c8:	2f00      	cmp	r7, #0
 80087ca:	f000 80d8 	beq.w	800897e <_printf_i+0x1d2>
 80087ce:	2f58      	cmp	r7, #88	; 0x58
 80087d0:	f000 80a3 	beq.w	800891a <_printf_i+0x16e>
 80087d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80087dc:	e03a      	b.n	8008854 <_printf_i+0xa8>
 80087de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80087e2:	2b15      	cmp	r3, #21
 80087e4:	d8f6      	bhi.n	80087d4 <_printf_i+0x28>
 80087e6:	a101      	add	r1, pc, #4	; (adr r1, 80087ec <_printf_i+0x40>)
 80087e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087ec:	08008845 	.word	0x08008845
 80087f0:	08008859 	.word	0x08008859
 80087f4:	080087d5 	.word	0x080087d5
 80087f8:	080087d5 	.word	0x080087d5
 80087fc:	080087d5 	.word	0x080087d5
 8008800:	080087d5 	.word	0x080087d5
 8008804:	08008859 	.word	0x08008859
 8008808:	080087d5 	.word	0x080087d5
 800880c:	080087d5 	.word	0x080087d5
 8008810:	080087d5 	.word	0x080087d5
 8008814:	080087d5 	.word	0x080087d5
 8008818:	08008965 	.word	0x08008965
 800881c:	08008889 	.word	0x08008889
 8008820:	08008947 	.word	0x08008947
 8008824:	080087d5 	.word	0x080087d5
 8008828:	080087d5 	.word	0x080087d5
 800882c:	08008987 	.word	0x08008987
 8008830:	080087d5 	.word	0x080087d5
 8008834:	08008889 	.word	0x08008889
 8008838:	080087d5 	.word	0x080087d5
 800883c:	080087d5 	.word	0x080087d5
 8008840:	0800894f 	.word	0x0800894f
 8008844:	682b      	ldr	r3, [r5, #0]
 8008846:	1d1a      	adds	r2, r3, #4
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	602a      	str	r2, [r5, #0]
 800884c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008850:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008854:	2301      	movs	r3, #1
 8008856:	e0a3      	b.n	80089a0 <_printf_i+0x1f4>
 8008858:	6820      	ldr	r0, [r4, #0]
 800885a:	6829      	ldr	r1, [r5, #0]
 800885c:	0606      	lsls	r6, r0, #24
 800885e:	f101 0304 	add.w	r3, r1, #4
 8008862:	d50a      	bpl.n	800887a <_printf_i+0xce>
 8008864:	680e      	ldr	r6, [r1, #0]
 8008866:	602b      	str	r3, [r5, #0]
 8008868:	2e00      	cmp	r6, #0
 800886a:	da03      	bge.n	8008874 <_printf_i+0xc8>
 800886c:	232d      	movs	r3, #45	; 0x2d
 800886e:	4276      	negs	r6, r6
 8008870:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008874:	485e      	ldr	r0, [pc, #376]	; (80089f0 <_printf_i+0x244>)
 8008876:	230a      	movs	r3, #10
 8008878:	e019      	b.n	80088ae <_printf_i+0x102>
 800887a:	680e      	ldr	r6, [r1, #0]
 800887c:	602b      	str	r3, [r5, #0]
 800887e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008882:	bf18      	it	ne
 8008884:	b236      	sxthne	r6, r6
 8008886:	e7ef      	b.n	8008868 <_printf_i+0xbc>
 8008888:	682b      	ldr	r3, [r5, #0]
 800888a:	6820      	ldr	r0, [r4, #0]
 800888c:	1d19      	adds	r1, r3, #4
 800888e:	6029      	str	r1, [r5, #0]
 8008890:	0601      	lsls	r1, r0, #24
 8008892:	d501      	bpl.n	8008898 <_printf_i+0xec>
 8008894:	681e      	ldr	r6, [r3, #0]
 8008896:	e002      	b.n	800889e <_printf_i+0xf2>
 8008898:	0646      	lsls	r6, r0, #25
 800889a:	d5fb      	bpl.n	8008894 <_printf_i+0xe8>
 800889c:	881e      	ldrh	r6, [r3, #0]
 800889e:	4854      	ldr	r0, [pc, #336]	; (80089f0 <_printf_i+0x244>)
 80088a0:	2f6f      	cmp	r7, #111	; 0x6f
 80088a2:	bf0c      	ite	eq
 80088a4:	2308      	moveq	r3, #8
 80088a6:	230a      	movne	r3, #10
 80088a8:	2100      	movs	r1, #0
 80088aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80088ae:	6865      	ldr	r5, [r4, #4]
 80088b0:	60a5      	str	r5, [r4, #8]
 80088b2:	2d00      	cmp	r5, #0
 80088b4:	bfa2      	ittt	ge
 80088b6:	6821      	ldrge	r1, [r4, #0]
 80088b8:	f021 0104 	bicge.w	r1, r1, #4
 80088bc:	6021      	strge	r1, [r4, #0]
 80088be:	b90e      	cbnz	r6, 80088c4 <_printf_i+0x118>
 80088c0:	2d00      	cmp	r5, #0
 80088c2:	d04d      	beq.n	8008960 <_printf_i+0x1b4>
 80088c4:	4615      	mov	r5, r2
 80088c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80088ca:	fb03 6711 	mls	r7, r3, r1, r6
 80088ce:	5dc7      	ldrb	r7, [r0, r7]
 80088d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80088d4:	4637      	mov	r7, r6
 80088d6:	42bb      	cmp	r3, r7
 80088d8:	460e      	mov	r6, r1
 80088da:	d9f4      	bls.n	80088c6 <_printf_i+0x11a>
 80088dc:	2b08      	cmp	r3, #8
 80088de:	d10b      	bne.n	80088f8 <_printf_i+0x14c>
 80088e0:	6823      	ldr	r3, [r4, #0]
 80088e2:	07de      	lsls	r6, r3, #31
 80088e4:	d508      	bpl.n	80088f8 <_printf_i+0x14c>
 80088e6:	6923      	ldr	r3, [r4, #16]
 80088e8:	6861      	ldr	r1, [r4, #4]
 80088ea:	4299      	cmp	r1, r3
 80088ec:	bfde      	ittt	le
 80088ee:	2330      	movle	r3, #48	; 0x30
 80088f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80088f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80088f8:	1b52      	subs	r2, r2, r5
 80088fa:	6122      	str	r2, [r4, #16]
 80088fc:	f8cd a000 	str.w	sl, [sp]
 8008900:	464b      	mov	r3, r9
 8008902:	aa03      	add	r2, sp, #12
 8008904:	4621      	mov	r1, r4
 8008906:	4640      	mov	r0, r8
 8008908:	f7ff fee2 	bl	80086d0 <_printf_common>
 800890c:	3001      	adds	r0, #1
 800890e:	d14c      	bne.n	80089aa <_printf_i+0x1fe>
 8008910:	f04f 30ff 	mov.w	r0, #4294967295
 8008914:	b004      	add	sp, #16
 8008916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800891a:	4835      	ldr	r0, [pc, #212]	; (80089f0 <_printf_i+0x244>)
 800891c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008920:	6829      	ldr	r1, [r5, #0]
 8008922:	6823      	ldr	r3, [r4, #0]
 8008924:	f851 6b04 	ldr.w	r6, [r1], #4
 8008928:	6029      	str	r1, [r5, #0]
 800892a:	061d      	lsls	r5, r3, #24
 800892c:	d514      	bpl.n	8008958 <_printf_i+0x1ac>
 800892e:	07df      	lsls	r7, r3, #31
 8008930:	bf44      	itt	mi
 8008932:	f043 0320 	orrmi.w	r3, r3, #32
 8008936:	6023      	strmi	r3, [r4, #0]
 8008938:	b91e      	cbnz	r6, 8008942 <_printf_i+0x196>
 800893a:	6823      	ldr	r3, [r4, #0]
 800893c:	f023 0320 	bic.w	r3, r3, #32
 8008940:	6023      	str	r3, [r4, #0]
 8008942:	2310      	movs	r3, #16
 8008944:	e7b0      	b.n	80088a8 <_printf_i+0xfc>
 8008946:	6823      	ldr	r3, [r4, #0]
 8008948:	f043 0320 	orr.w	r3, r3, #32
 800894c:	6023      	str	r3, [r4, #0]
 800894e:	2378      	movs	r3, #120	; 0x78
 8008950:	4828      	ldr	r0, [pc, #160]	; (80089f4 <_printf_i+0x248>)
 8008952:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008956:	e7e3      	b.n	8008920 <_printf_i+0x174>
 8008958:	0659      	lsls	r1, r3, #25
 800895a:	bf48      	it	mi
 800895c:	b2b6      	uxthmi	r6, r6
 800895e:	e7e6      	b.n	800892e <_printf_i+0x182>
 8008960:	4615      	mov	r5, r2
 8008962:	e7bb      	b.n	80088dc <_printf_i+0x130>
 8008964:	682b      	ldr	r3, [r5, #0]
 8008966:	6826      	ldr	r6, [r4, #0]
 8008968:	6961      	ldr	r1, [r4, #20]
 800896a:	1d18      	adds	r0, r3, #4
 800896c:	6028      	str	r0, [r5, #0]
 800896e:	0635      	lsls	r5, r6, #24
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	d501      	bpl.n	8008978 <_printf_i+0x1cc>
 8008974:	6019      	str	r1, [r3, #0]
 8008976:	e002      	b.n	800897e <_printf_i+0x1d2>
 8008978:	0670      	lsls	r0, r6, #25
 800897a:	d5fb      	bpl.n	8008974 <_printf_i+0x1c8>
 800897c:	8019      	strh	r1, [r3, #0]
 800897e:	2300      	movs	r3, #0
 8008980:	6123      	str	r3, [r4, #16]
 8008982:	4615      	mov	r5, r2
 8008984:	e7ba      	b.n	80088fc <_printf_i+0x150>
 8008986:	682b      	ldr	r3, [r5, #0]
 8008988:	1d1a      	adds	r2, r3, #4
 800898a:	602a      	str	r2, [r5, #0]
 800898c:	681d      	ldr	r5, [r3, #0]
 800898e:	6862      	ldr	r2, [r4, #4]
 8008990:	2100      	movs	r1, #0
 8008992:	4628      	mov	r0, r5
 8008994:	f7f7 fc3c 	bl	8000210 <memchr>
 8008998:	b108      	cbz	r0, 800899e <_printf_i+0x1f2>
 800899a:	1b40      	subs	r0, r0, r5
 800899c:	6060      	str	r0, [r4, #4]
 800899e:	6863      	ldr	r3, [r4, #4]
 80089a0:	6123      	str	r3, [r4, #16]
 80089a2:	2300      	movs	r3, #0
 80089a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089a8:	e7a8      	b.n	80088fc <_printf_i+0x150>
 80089aa:	6923      	ldr	r3, [r4, #16]
 80089ac:	462a      	mov	r2, r5
 80089ae:	4649      	mov	r1, r9
 80089b0:	4640      	mov	r0, r8
 80089b2:	47d0      	blx	sl
 80089b4:	3001      	adds	r0, #1
 80089b6:	d0ab      	beq.n	8008910 <_printf_i+0x164>
 80089b8:	6823      	ldr	r3, [r4, #0]
 80089ba:	079b      	lsls	r3, r3, #30
 80089bc:	d413      	bmi.n	80089e6 <_printf_i+0x23a>
 80089be:	68e0      	ldr	r0, [r4, #12]
 80089c0:	9b03      	ldr	r3, [sp, #12]
 80089c2:	4298      	cmp	r0, r3
 80089c4:	bfb8      	it	lt
 80089c6:	4618      	movlt	r0, r3
 80089c8:	e7a4      	b.n	8008914 <_printf_i+0x168>
 80089ca:	2301      	movs	r3, #1
 80089cc:	4632      	mov	r2, r6
 80089ce:	4649      	mov	r1, r9
 80089d0:	4640      	mov	r0, r8
 80089d2:	47d0      	blx	sl
 80089d4:	3001      	adds	r0, #1
 80089d6:	d09b      	beq.n	8008910 <_printf_i+0x164>
 80089d8:	3501      	adds	r5, #1
 80089da:	68e3      	ldr	r3, [r4, #12]
 80089dc:	9903      	ldr	r1, [sp, #12]
 80089de:	1a5b      	subs	r3, r3, r1
 80089e0:	42ab      	cmp	r3, r5
 80089e2:	dcf2      	bgt.n	80089ca <_printf_i+0x21e>
 80089e4:	e7eb      	b.n	80089be <_printf_i+0x212>
 80089e6:	2500      	movs	r5, #0
 80089e8:	f104 0619 	add.w	r6, r4, #25
 80089ec:	e7f5      	b.n	80089da <_printf_i+0x22e>
 80089ee:	bf00      	nop
 80089f0:	0800b37a 	.word	0x0800b37a
 80089f4:	0800b38b 	.word	0x0800b38b

080089f8 <iprintf>:
 80089f8:	b40f      	push	{r0, r1, r2, r3}
 80089fa:	4b0a      	ldr	r3, [pc, #40]	; (8008a24 <iprintf+0x2c>)
 80089fc:	b513      	push	{r0, r1, r4, lr}
 80089fe:	681c      	ldr	r4, [r3, #0]
 8008a00:	b124      	cbz	r4, 8008a0c <iprintf+0x14>
 8008a02:	69a3      	ldr	r3, [r4, #24]
 8008a04:	b913      	cbnz	r3, 8008a0c <iprintf+0x14>
 8008a06:	4620      	mov	r0, r4
 8008a08:	f001 f8ea 	bl	8009be0 <__sinit>
 8008a0c:	ab05      	add	r3, sp, #20
 8008a0e:	9a04      	ldr	r2, [sp, #16]
 8008a10:	68a1      	ldr	r1, [r4, #8]
 8008a12:	9301      	str	r3, [sp, #4]
 8008a14:	4620      	mov	r0, r4
 8008a16:	f001 fdcb 	bl	800a5b0 <_vfiprintf_r>
 8008a1a:	b002      	add	sp, #8
 8008a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a20:	b004      	add	sp, #16
 8008a22:	4770      	bx	lr
 8008a24:	20000014 	.word	0x20000014

08008a28 <_puts_r>:
 8008a28:	b570      	push	{r4, r5, r6, lr}
 8008a2a:	460e      	mov	r6, r1
 8008a2c:	4605      	mov	r5, r0
 8008a2e:	b118      	cbz	r0, 8008a38 <_puts_r+0x10>
 8008a30:	6983      	ldr	r3, [r0, #24]
 8008a32:	b90b      	cbnz	r3, 8008a38 <_puts_r+0x10>
 8008a34:	f001 f8d4 	bl	8009be0 <__sinit>
 8008a38:	69ab      	ldr	r3, [r5, #24]
 8008a3a:	68ac      	ldr	r4, [r5, #8]
 8008a3c:	b913      	cbnz	r3, 8008a44 <_puts_r+0x1c>
 8008a3e:	4628      	mov	r0, r5
 8008a40:	f001 f8ce 	bl	8009be0 <__sinit>
 8008a44:	4b2c      	ldr	r3, [pc, #176]	; (8008af8 <_puts_r+0xd0>)
 8008a46:	429c      	cmp	r4, r3
 8008a48:	d120      	bne.n	8008a8c <_puts_r+0x64>
 8008a4a:	686c      	ldr	r4, [r5, #4]
 8008a4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a4e:	07db      	lsls	r3, r3, #31
 8008a50:	d405      	bmi.n	8008a5e <_puts_r+0x36>
 8008a52:	89a3      	ldrh	r3, [r4, #12]
 8008a54:	0598      	lsls	r0, r3, #22
 8008a56:	d402      	bmi.n	8008a5e <_puts_r+0x36>
 8008a58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a5a:	f001 f964 	bl	8009d26 <__retarget_lock_acquire_recursive>
 8008a5e:	89a3      	ldrh	r3, [r4, #12]
 8008a60:	0719      	lsls	r1, r3, #28
 8008a62:	d51d      	bpl.n	8008aa0 <_puts_r+0x78>
 8008a64:	6923      	ldr	r3, [r4, #16]
 8008a66:	b1db      	cbz	r3, 8008aa0 <_puts_r+0x78>
 8008a68:	3e01      	subs	r6, #1
 8008a6a:	68a3      	ldr	r3, [r4, #8]
 8008a6c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008a70:	3b01      	subs	r3, #1
 8008a72:	60a3      	str	r3, [r4, #8]
 8008a74:	bb39      	cbnz	r1, 8008ac6 <_puts_r+0x9e>
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	da38      	bge.n	8008aec <_puts_r+0xc4>
 8008a7a:	4622      	mov	r2, r4
 8008a7c:	210a      	movs	r1, #10
 8008a7e:	4628      	mov	r0, r5
 8008a80:	f000 f858 	bl	8008b34 <__swbuf_r>
 8008a84:	3001      	adds	r0, #1
 8008a86:	d011      	beq.n	8008aac <_puts_r+0x84>
 8008a88:	250a      	movs	r5, #10
 8008a8a:	e011      	b.n	8008ab0 <_puts_r+0x88>
 8008a8c:	4b1b      	ldr	r3, [pc, #108]	; (8008afc <_puts_r+0xd4>)
 8008a8e:	429c      	cmp	r4, r3
 8008a90:	d101      	bne.n	8008a96 <_puts_r+0x6e>
 8008a92:	68ac      	ldr	r4, [r5, #8]
 8008a94:	e7da      	b.n	8008a4c <_puts_r+0x24>
 8008a96:	4b1a      	ldr	r3, [pc, #104]	; (8008b00 <_puts_r+0xd8>)
 8008a98:	429c      	cmp	r4, r3
 8008a9a:	bf08      	it	eq
 8008a9c:	68ec      	ldreq	r4, [r5, #12]
 8008a9e:	e7d5      	b.n	8008a4c <_puts_r+0x24>
 8008aa0:	4621      	mov	r1, r4
 8008aa2:	4628      	mov	r0, r5
 8008aa4:	f000 f898 	bl	8008bd8 <__swsetup_r>
 8008aa8:	2800      	cmp	r0, #0
 8008aaa:	d0dd      	beq.n	8008a68 <_puts_r+0x40>
 8008aac:	f04f 35ff 	mov.w	r5, #4294967295
 8008ab0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ab2:	07da      	lsls	r2, r3, #31
 8008ab4:	d405      	bmi.n	8008ac2 <_puts_r+0x9a>
 8008ab6:	89a3      	ldrh	r3, [r4, #12]
 8008ab8:	059b      	lsls	r3, r3, #22
 8008aba:	d402      	bmi.n	8008ac2 <_puts_r+0x9a>
 8008abc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008abe:	f001 f933 	bl	8009d28 <__retarget_lock_release_recursive>
 8008ac2:	4628      	mov	r0, r5
 8008ac4:	bd70      	pop	{r4, r5, r6, pc}
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	da04      	bge.n	8008ad4 <_puts_r+0xac>
 8008aca:	69a2      	ldr	r2, [r4, #24]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	dc06      	bgt.n	8008ade <_puts_r+0xb6>
 8008ad0:	290a      	cmp	r1, #10
 8008ad2:	d004      	beq.n	8008ade <_puts_r+0xb6>
 8008ad4:	6823      	ldr	r3, [r4, #0]
 8008ad6:	1c5a      	adds	r2, r3, #1
 8008ad8:	6022      	str	r2, [r4, #0]
 8008ada:	7019      	strb	r1, [r3, #0]
 8008adc:	e7c5      	b.n	8008a6a <_puts_r+0x42>
 8008ade:	4622      	mov	r2, r4
 8008ae0:	4628      	mov	r0, r5
 8008ae2:	f000 f827 	bl	8008b34 <__swbuf_r>
 8008ae6:	3001      	adds	r0, #1
 8008ae8:	d1bf      	bne.n	8008a6a <_puts_r+0x42>
 8008aea:	e7df      	b.n	8008aac <_puts_r+0x84>
 8008aec:	6823      	ldr	r3, [r4, #0]
 8008aee:	250a      	movs	r5, #10
 8008af0:	1c5a      	adds	r2, r3, #1
 8008af2:	6022      	str	r2, [r4, #0]
 8008af4:	701d      	strb	r5, [r3, #0]
 8008af6:	e7db      	b.n	8008ab0 <_puts_r+0x88>
 8008af8:	0800b44c 	.word	0x0800b44c
 8008afc:	0800b46c 	.word	0x0800b46c
 8008b00:	0800b42c 	.word	0x0800b42c

08008b04 <puts>:
 8008b04:	4b02      	ldr	r3, [pc, #8]	; (8008b10 <puts+0xc>)
 8008b06:	4601      	mov	r1, r0
 8008b08:	6818      	ldr	r0, [r3, #0]
 8008b0a:	f7ff bf8d 	b.w	8008a28 <_puts_r>
 8008b0e:	bf00      	nop
 8008b10:	20000014 	.word	0x20000014

08008b14 <_sbrk_r>:
 8008b14:	b538      	push	{r3, r4, r5, lr}
 8008b16:	4d06      	ldr	r5, [pc, #24]	; (8008b30 <_sbrk_r+0x1c>)
 8008b18:	2300      	movs	r3, #0
 8008b1a:	4604      	mov	r4, r0
 8008b1c:	4608      	mov	r0, r1
 8008b1e:	602b      	str	r3, [r5, #0]
 8008b20:	f7f9 fdec 	bl	80026fc <_sbrk>
 8008b24:	1c43      	adds	r3, r0, #1
 8008b26:	d102      	bne.n	8008b2e <_sbrk_r+0x1a>
 8008b28:	682b      	ldr	r3, [r5, #0]
 8008b2a:	b103      	cbz	r3, 8008b2e <_sbrk_r+0x1a>
 8008b2c:	6023      	str	r3, [r4, #0]
 8008b2e:	bd38      	pop	{r3, r4, r5, pc}
 8008b30:	200004cc 	.word	0x200004cc

08008b34 <__swbuf_r>:
 8008b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b36:	460e      	mov	r6, r1
 8008b38:	4614      	mov	r4, r2
 8008b3a:	4605      	mov	r5, r0
 8008b3c:	b118      	cbz	r0, 8008b46 <__swbuf_r+0x12>
 8008b3e:	6983      	ldr	r3, [r0, #24]
 8008b40:	b90b      	cbnz	r3, 8008b46 <__swbuf_r+0x12>
 8008b42:	f001 f84d 	bl	8009be0 <__sinit>
 8008b46:	4b21      	ldr	r3, [pc, #132]	; (8008bcc <__swbuf_r+0x98>)
 8008b48:	429c      	cmp	r4, r3
 8008b4a:	d12b      	bne.n	8008ba4 <__swbuf_r+0x70>
 8008b4c:	686c      	ldr	r4, [r5, #4]
 8008b4e:	69a3      	ldr	r3, [r4, #24]
 8008b50:	60a3      	str	r3, [r4, #8]
 8008b52:	89a3      	ldrh	r3, [r4, #12]
 8008b54:	071a      	lsls	r2, r3, #28
 8008b56:	d52f      	bpl.n	8008bb8 <__swbuf_r+0x84>
 8008b58:	6923      	ldr	r3, [r4, #16]
 8008b5a:	b36b      	cbz	r3, 8008bb8 <__swbuf_r+0x84>
 8008b5c:	6923      	ldr	r3, [r4, #16]
 8008b5e:	6820      	ldr	r0, [r4, #0]
 8008b60:	1ac0      	subs	r0, r0, r3
 8008b62:	6963      	ldr	r3, [r4, #20]
 8008b64:	b2f6      	uxtb	r6, r6
 8008b66:	4283      	cmp	r3, r0
 8008b68:	4637      	mov	r7, r6
 8008b6a:	dc04      	bgt.n	8008b76 <__swbuf_r+0x42>
 8008b6c:	4621      	mov	r1, r4
 8008b6e:	4628      	mov	r0, r5
 8008b70:	f000 ffa2 	bl	8009ab8 <_fflush_r>
 8008b74:	bb30      	cbnz	r0, 8008bc4 <__swbuf_r+0x90>
 8008b76:	68a3      	ldr	r3, [r4, #8]
 8008b78:	3b01      	subs	r3, #1
 8008b7a:	60a3      	str	r3, [r4, #8]
 8008b7c:	6823      	ldr	r3, [r4, #0]
 8008b7e:	1c5a      	adds	r2, r3, #1
 8008b80:	6022      	str	r2, [r4, #0]
 8008b82:	701e      	strb	r6, [r3, #0]
 8008b84:	6963      	ldr	r3, [r4, #20]
 8008b86:	3001      	adds	r0, #1
 8008b88:	4283      	cmp	r3, r0
 8008b8a:	d004      	beq.n	8008b96 <__swbuf_r+0x62>
 8008b8c:	89a3      	ldrh	r3, [r4, #12]
 8008b8e:	07db      	lsls	r3, r3, #31
 8008b90:	d506      	bpl.n	8008ba0 <__swbuf_r+0x6c>
 8008b92:	2e0a      	cmp	r6, #10
 8008b94:	d104      	bne.n	8008ba0 <__swbuf_r+0x6c>
 8008b96:	4621      	mov	r1, r4
 8008b98:	4628      	mov	r0, r5
 8008b9a:	f000 ff8d 	bl	8009ab8 <_fflush_r>
 8008b9e:	b988      	cbnz	r0, 8008bc4 <__swbuf_r+0x90>
 8008ba0:	4638      	mov	r0, r7
 8008ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ba4:	4b0a      	ldr	r3, [pc, #40]	; (8008bd0 <__swbuf_r+0x9c>)
 8008ba6:	429c      	cmp	r4, r3
 8008ba8:	d101      	bne.n	8008bae <__swbuf_r+0x7a>
 8008baa:	68ac      	ldr	r4, [r5, #8]
 8008bac:	e7cf      	b.n	8008b4e <__swbuf_r+0x1a>
 8008bae:	4b09      	ldr	r3, [pc, #36]	; (8008bd4 <__swbuf_r+0xa0>)
 8008bb0:	429c      	cmp	r4, r3
 8008bb2:	bf08      	it	eq
 8008bb4:	68ec      	ldreq	r4, [r5, #12]
 8008bb6:	e7ca      	b.n	8008b4e <__swbuf_r+0x1a>
 8008bb8:	4621      	mov	r1, r4
 8008bba:	4628      	mov	r0, r5
 8008bbc:	f000 f80c 	bl	8008bd8 <__swsetup_r>
 8008bc0:	2800      	cmp	r0, #0
 8008bc2:	d0cb      	beq.n	8008b5c <__swbuf_r+0x28>
 8008bc4:	f04f 37ff 	mov.w	r7, #4294967295
 8008bc8:	e7ea      	b.n	8008ba0 <__swbuf_r+0x6c>
 8008bca:	bf00      	nop
 8008bcc:	0800b44c 	.word	0x0800b44c
 8008bd0:	0800b46c 	.word	0x0800b46c
 8008bd4:	0800b42c 	.word	0x0800b42c

08008bd8 <__swsetup_r>:
 8008bd8:	4b32      	ldr	r3, [pc, #200]	; (8008ca4 <__swsetup_r+0xcc>)
 8008bda:	b570      	push	{r4, r5, r6, lr}
 8008bdc:	681d      	ldr	r5, [r3, #0]
 8008bde:	4606      	mov	r6, r0
 8008be0:	460c      	mov	r4, r1
 8008be2:	b125      	cbz	r5, 8008bee <__swsetup_r+0x16>
 8008be4:	69ab      	ldr	r3, [r5, #24]
 8008be6:	b913      	cbnz	r3, 8008bee <__swsetup_r+0x16>
 8008be8:	4628      	mov	r0, r5
 8008bea:	f000 fff9 	bl	8009be0 <__sinit>
 8008bee:	4b2e      	ldr	r3, [pc, #184]	; (8008ca8 <__swsetup_r+0xd0>)
 8008bf0:	429c      	cmp	r4, r3
 8008bf2:	d10f      	bne.n	8008c14 <__swsetup_r+0x3c>
 8008bf4:	686c      	ldr	r4, [r5, #4]
 8008bf6:	89a3      	ldrh	r3, [r4, #12]
 8008bf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008bfc:	0719      	lsls	r1, r3, #28
 8008bfe:	d42c      	bmi.n	8008c5a <__swsetup_r+0x82>
 8008c00:	06dd      	lsls	r5, r3, #27
 8008c02:	d411      	bmi.n	8008c28 <__swsetup_r+0x50>
 8008c04:	2309      	movs	r3, #9
 8008c06:	6033      	str	r3, [r6, #0]
 8008c08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008c0c:	81a3      	strh	r3, [r4, #12]
 8008c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c12:	e03e      	b.n	8008c92 <__swsetup_r+0xba>
 8008c14:	4b25      	ldr	r3, [pc, #148]	; (8008cac <__swsetup_r+0xd4>)
 8008c16:	429c      	cmp	r4, r3
 8008c18:	d101      	bne.n	8008c1e <__swsetup_r+0x46>
 8008c1a:	68ac      	ldr	r4, [r5, #8]
 8008c1c:	e7eb      	b.n	8008bf6 <__swsetup_r+0x1e>
 8008c1e:	4b24      	ldr	r3, [pc, #144]	; (8008cb0 <__swsetup_r+0xd8>)
 8008c20:	429c      	cmp	r4, r3
 8008c22:	bf08      	it	eq
 8008c24:	68ec      	ldreq	r4, [r5, #12]
 8008c26:	e7e6      	b.n	8008bf6 <__swsetup_r+0x1e>
 8008c28:	0758      	lsls	r0, r3, #29
 8008c2a:	d512      	bpl.n	8008c52 <__swsetup_r+0x7a>
 8008c2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c2e:	b141      	cbz	r1, 8008c42 <__swsetup_r+0x6a>
 8008c30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c34:	4299      	cmp	r1, r3
 8008c36:	d002      	beq.n	8008c3e <__swsetup_r+0x66>
 8008c38:	4630      	mov	r0, r6
 8008c3a:	f7ff f993 	bl	8007f64 <_free_r>
 8008c3e:	2300      	movs	r3, #0
 8008c40:	6363      	str	r3, [r4, #52]	; 0x34
 8008c42:	89a3      	ldrh	r3, [r4, #12]
 8008c44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008c48:	81a3      	strh	r3, [r4, #12]
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	6063      	str	r3, [r4, #4]
 8008c4e:	6923      	ldr	r3, [r4, #16]
 8008c50:	6023      	str	r3, [r4, #0]
 8008c52:	89a3      	ldrh	r3, [r4, #12]
 8008c54:	f043 0308 	orr.w	r3, r3, #8
 8008c58:	81a3      	strh	r3, [r4, #12]
 8008c5a:	6923      	ldr	r3, [r4, #16]
 8008c5c:	b94b      	cbnz	r3, 8008c72 <__swsetup_r+0x9a>
 8008c5e:	89a3      	ldrh	r3, [r4, #12]
 8008c60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008c64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c68:	d003      	beq.n	8008c72 <__swsetup_r+0x9a>
 8008c6a:	4621      	mov	r1, r4
 8008c6c:	4630      	mov	r0, r6
 8008c6e:	f001 f881 	bl	8009d74 <__smakebuf_r>
 8008c72:	89a0      	ldrh	r0, [r4, #12]
 8008c74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c78:	f010 0301 	ands.w	r3, r0, #1
 8008c7c:	d00a      	beq.n	8008c94 <__swsetup_r+0xbc>
 8008c7e:	2300      	movs	r3, #0
 8008c80:	60a3      	str	r3, [r4, #8]
 8008c82:	6963      	ldr	r3, [r4, #20]
 8008c84:	425b      	negs	r3, r3
 8008c86:	61a3      	str	r3, [r4, #24]
 8008c88:	6923      	ldr	r3, [r4, #16]
 8008c8a:	b943      	cbnz	r3, 8008c9e <__swsetup_r+0xc6>
 8008c8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008c90:	d1ba      	bne.n	8008c08 <__swsetup_r+0x30>
 8008c92:	bd70      	pop	{r4, r5, r6, pc}
 8008c94:	0781      	lsls	r1, r0, #30
 8008c96:	bf58      	it	pl
 8008c98:	6963      	ldrpl	r3, [r4, #20]
 8008c9a:	60a3      	str	r3, [r4, #8]
 8008c9c:	e7f4      	b.n	8008c88 <__swsetup_r+0xb0>
 8008c9e:	2000      	movs	r0, #0
 8008ca0:	e7f7      	b.n	8008c92 <__swsetup_r+0xba>
 8008ca2:	bf00      	nop
 8008ca4:	20000014 	.word	0x20000014
 8008ca8:	0800b44c 	.word	0x0800b44c
 8008cac:	0800b46c 	.word	0x0800b46c
 8008cb0:	0800b42c 	.word	0x0800b42c

08008cb4 <quorem>:
 8008cb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb8:	6903      	ldr	r3, [r0, #16]
 8008cba:	690c      	ldr	r4, [r1, #16]
 8008cbc:	42a3      	cmp	r3, r4
 8008cbe:	4607      	mov	r7, r0
 8008cc0:	f2c0 8081 	blt.w	8008dc6 <quorem+0x112>
 8008cc4:	3c01      	subs	r4, #1
 8008cc6:	f101 0814 	add.w	r8, r1, #20
 8008cca:	f100 0514 	add.w	r5, r0, #20
 8008cce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008cd2:	9301      	str	r3, [sp, #4]
 8008cd4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008cd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008cdc:	3301      	adds	r3, #1
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008ce4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008ce8:	fbb2 f6f3 	udiv	r6, r2, r3
 8008cec:	d331      	bcc.n	8008d52 <quorem+0x9e>
 8008cee:	f04f 0e00 	mov.w	lr, #0
 8008cf2:	4640      	mov	r0, r8
 8008cf4:	46ac      	mov	ip, r5
 8008cf6:	46f2      	mov	sl, lr
 8008cf8:	f850 2b04 	ldr.w	r2, [r0], #4
 8008cfc:	b293      	uxth	r3, r2
 8008cfe:	fb06 e303 	mla	r3, r6, r3, lr
 8008d02:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	ebaa 0303 	sub.w	r3, sl, r3
 8008d0c:	f8dc a000 	ldr.w	sl, [ip]
 8008d10:	0c12      	lsrs	r2, r2, #16
 8008d12:	fa13 f38a 	uxtah	r3, r3, sl
 8008d16:	fb06 e202 	mla	r2, r6, r2, lr
 8008d1a:	9300      	str	r3, [sp, #0]
 8008d1c:	9b00      	ldr	r3, [sp, #0]
 8008d1e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008d22:	b292      	uxth	r2, r2
 8008d24:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008d28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d2c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008d30:	4581      	cmp	r9, r0
 8008d32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d36:	f84c 3b04 	str.w	r3, [ip], #4
 8008d3a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008d3e:	d2db      	bcs.n	8008cf8 <quorem+0x44>
 8008d40:	f855 300b 	ldr.w	r3, [r5, fp]
 8008d44:	b92b      	cbnz	r3, 8008d52 <quorem+0x9e>
 8008d46:	9b01      	ldr	r3, [sp, #4]
 8008d48:	3b04      	subs	r3, #4
 8008d4a:	429d      	cmp	r5, r3
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	d32e      	bcc.n	8008dae <quorem+0xfa>
 8008d50:	613c      	str	r4, [r7, #16]
 8008d52:	4638      	mov	r0, r7
 8008d54:	f001 faea 	bl	800a32c <__mcmp>
 8008d58:	2800      	cmp	r0, #0
 8008d5a:	db24      	blt.n	8008da6 <quorem+0xf2>
 8008d5c:	3601      	adds	r6, #1
 8008d5e:	4628      	mov	r0, r5
 8008d60:	f04f 0c00 	mov.w	ip, #0
 8008d64:	f858 2b04 	ldr.w	r2, [r8], #4
 8008d68:	f8d0 e000 	ldr.w	lr, [r0]
 8008d6c:	b293      	uxth	r3, r2
 8008d6e:	ebac 0303 	sub.w	r3, ip, r3
 8008d72:	0c12      	lsrs	r2, r2, #16
 8008d74:	fa13 f38e 	uxtah	r3, r3, lr
 8008d78:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008d7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d86:	45c1      	cmp	r9, r8
 8008d88:	f840 3b04 	str.w	r3, [r0], #4
 8008d8c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008d90:	d2e8      	bcs.n	8008d64 <quorem+0xb0>
 8008d92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d9a:	b922      	cbnz	r2, 8008da6 <quorem+0xf2>
 8008d9c:	3b04      	subs	r3, #4
 8008d9e:	429d      	cmp	r5, r3
 8008da0:	461a      	mov	r2, r3
 8008da2:	d30a      	bcc.n	8008dba <quorem+0x106>
 8008da4:	613c      	str	r4, [r7, #16]
 8008da6:	4630      	mov	r0, r6
 8008da8:	b003      	add	sp, #12
 8008daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dae:	6812      	ldr	r2, [r2, #0]
 8008db0:	3b04      	subs	r3, #4
 8008db2:	2a00      	cmp	r2, #0
 8008db4:	d1cc      	bne.n	8008d50 <quorem+0x9c>
 8008db6:	3c01      	subs	r4, #1
 8008db8:	e7c7      	b.n	8008d4a <quorem+0x96>
 8008dba:	6812      	ldr	r2, [r2, #0]
 8008dbc:	3b04      	subs	r3, #4
 8008dbe:	2a00      	cmp	r2, #0
 8008dc0:	d1f0      	bne.n	8008da4 <quorem+0xf0>
 8008dc2:	3c01      	subs	r4, #1
 8008dc4:	e7eb      	b.n	8008d9e <quorem+0xea>
 8008dc6:	2000      	movs	r0, #0
 8008dc8:	e7ee      	b.n	8008da8 <quorem+0xf4>
 8008dca:	0000      	movs	r0, r0
 8008dcc:	0000      	movs	r0, r0
	...

08008dd0 <_dtoa_r>:
 8008dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dd4:	ed2d 8b04 	vpush	{d8-d9}
 8008dd8:	ec57 6b10 	vmov	r6, r7, d0
 8008ddc:	b093      	sub	sp, #76	; 0x4c
 8008dde:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008de0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008de4:	9106      	str	r1, [sp, #24]
 8008de6:	ee10 aa10 	vmov	sl, s0
 8008dea:	4604      	mov	r4, r0
 8008dec:	9209      	str	r2, [sp, #36]	; 0x24
 8008dee:	930c      	str	r3, [sp, #48]	; 0x30
 8008df0:	46bb      	mov	fp, r7
 8008df2:	b975      	cbnz	r5, 8008e12 <_dtoa_r+0x42>
 8008df4:	2010      	movs	r0, #16
 8008df6:	f7ff f8a5 	bl	8007f44 <malloc>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	6260      	str	r0, [r4, #36]	; 0x24
 8008dfe:	b920      	cbnz	r0, 8008e0a <_dtoa_r+0x3a>
 8008e00:	4ba7      	ldr	r3, [pc, #668]	; (80090a0 <_dtoa_r+0x2d0>)
 8008e02:	21ea      	movs	r1, #234	; 0xea
 8008e04:	48a7      	ldr	r0, [pc, #668]	; (80090a4 <_dtoa_r+0x2d4>)
 8008e06:	f001 fd59 	bl	800a8bc <__assert_func>
 8008e0a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008e0e:	6005      	str	r5, [r0, #0]
 8008e10:	60c5      	str	r5, [r0, #12]
 8008e12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e14:	6819      	ldr	r1, [r3, #0]
 8008e16:	b151      	cbz	r1, 8008e2e <_dtoa_r+0x5e>
 8008e18:	685a      	ldr	r2, [r3, #4]
 8008e1a:	604a      	str	r2, [r1, #4]
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	4093      	lsls	r3, r2
 8008e20:	608b      	str	r3, [r1, #8]
 8008e22:	4620      	mov	r0, r4
 8008e24:	f001 f840 	bl	8009ea8 <_Bfree>
 8008e28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	601a      	str	r2, [r3, #0]
 8008e2e:	1e3b      	subs	r3, r7, #0
 8008e30:	bfaa      	itet	ge
 8008e32:	2300      	movge	r3, #0
 8008e34:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008e38:	f8c8 3000 	strge.w	r3, [r8]
 8008e3c:	4b9a      	ldr	r3, [pc, #616]	; (80090a8 <_dtoa_r+0x2d8>)
 8008e3e:	bfbc      	itt	lt
 8008e40:	2201      	movlt	r2, #1
 8008e42:	f8c8 2000 	strlt.w	r2, [r8]
 8008e46:	ea33 030b 	bics.w	r3, r3, fp
 8008e4a:	d11b      	bne.n	8008e84 <_dtoa_r+0xb4>
 8008e4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e4e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008e52:	6013      	str	r3, [r2, #0]
 8008e54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e58:	4333      	orrs	r3, r6
 8008e5a:	f000 8592 	beq.w	8009982 <_dtoa_r+0xbb2>
 8008e5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e60:	b963      	cbnz	r3, 8008e7c <_dtoa_r+0xac>
 8008e62:	4b92      	ldr	r3, [pc, #584]	; (80090ac <_dtoa_r+0x2dc>)
 8008e64:	e022      	b.n	8008eac <_dtoa_r+0xdc>
 8008e66:	4b92      	ldr	r3, [pc, #584]	; (80090b0 <_dtoa_r+0x2e0>)
 8008e68:	9301      	str	r3, [sp, #4]
 8008e6a:	3308      	adds	r3, #8
 8008e6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008e6e:	6013      	str	r3, [r2, #0]
 8008e70:	9801      	ldr	r0, [sp, #4]
 8008e72:	b013      	add	sp, #76	; 0x4c
 8008e74:	ecbd 8b04 	vpop	{d8-d9}
 8008e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e7c:	4b8b      	ldr	r3, [pc, #556]	; (80090ac <_dtoa_r+0x2dc>)
 8008e7e:	9301      	str	r3, [sp, #4]
 8008e80:	3303      	adds	r3, #3
 8008e82:	e7f3      	b.n	8008e6c <_dtoa_r+0x9c>
 8008e84:	2200      	movs	r2, #0
 8008e86:	2300      	movs	r3, #0
 8008e88:	4650      	mov	r0, sl
 8008e8a:	4659      	mov	r1, fp
 8008e8c:	f7f7 fe34 	bl	8000af8 <__aeabi_dcmpeq>
 8008e90:	ec4b ab19 	vmov	d9, sl, fp
 8008e94:	4680      	mov	r8, r0
 8008e96:	b158      	cbz	r0, 8008eb0 <_dtoa_r+0xe0>
 8008e98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	6013      	str	r3, [r2, #0]
 8008e9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	f000 856b 	beq.w	800997c <_dtoa_r+0xbac>
 8008ea6:	4883      	ldr	r0, [pc, #524]	; (80090b4 <_dtoa_r+0x2e4>)
 8008ea8:	6018      	str	r0, [r3, #0]
 8008eaa:	1e43      	subs	r3, r0, #1
 8008eac:	9301      	str	r3, [sp, #4]
 8008eae:	e7df      	b.n	8008e70 <_dtoa_r+0xa0>
 8008eb0:	ec4b ab10 	vmov	d0, sl, fp
 8008eb4:	aa10      	add	r2, sp, #64	; 0x40
 8008eb6:	a911      	add	r1, sp, #68	; 0x44
 8008eb8:	4620      	mov	r0, r4
 8008eba:	f001 fadd 	bl	800a478 <__d2b>
 8008ebe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008ec2:	ee08 0a10 	vmov	s16, r0
 8008ec6:	2d00      	cmp	r5, #0
 8008ec8:	f000 8084 	beq.w	8008fd4 <_dtoa_r+0x204>
 8008ecc:	ee19 3a90 	vmov	r3, s19
 8008ed0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ed4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008ed8:	4656      	mov	r6, sl
 8008eda:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008ede:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008ee2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008ee6:	4b74      	ldr	r3, [pc, #464]	; (80090b8 <_dtoa_r+0x2e8>)
 8008ee8:	2200      	movs	r2, #0
 8008eea:	4630      	mov	r0, r6
 8008eec:	4639      	mov	r1, r7
 8008eee:	f7f7 f9e3 	bl	80002b8 <__aeabi_dsub>
 8008ef2:	a365      	add	r3, pc, #404	; (adr r3, 8009088 <_dtoa_r+0x2b8>)
 8008ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef8:	f7f7 fb96 	bl	8000628 <__aeabi_dmul>
 8008efc:	a364      	add	r3, pc, #400	; (adr r3, 8009090 <_dtoa_r+0x2c0>)
 8008efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f02:	f7f7 f9db 	bl	80002bc <__adddf3>
 8008f06:	4606      	mov	r6, r0
 8008f08:	4628      	mov	r0, r5
 8008f0a:	460f      	mov	r7, r1
 8008f0c:	f7f7 fb22 	bl	8000554 <__aeabi_i2d>
 8008f10:	a361      	add	r3, pc, #388	; (adr r3, 8009098 <_dtoa_r+0x2c8>)
 8008f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f16:	f7f7 fb87 	bl	8000628 <__aeabi_dmul>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	4630      	mov	r0, r6
 8008f20:	4639      	mov	r1, r7
 8008f22:	f7f7 f9cb 	bl	80002bc <__adddf3>
 8008f26:	4606      	mov	r6, r0
 8008f28:	460f      	mov	r7, r1
 8008f2a:	f7f7 fe2d 	bl	8000b88 <__aeabi_d2iz>
 8008f2e:	2200      	movs	r2, #0
 8008f30:	9000      	str	r0, [sp, #0]
 8008f32:	2300      	movs	r3, #0
 8008f34:	4630      	mov	r0, r6
 8008f36:	4639      	mov	r1, r7
 8008f38:	f7f7 fde8 	bl	8000b0c <__aeabi_dcmplt>
 8008f3c:	b150      	cbz	r0, 8008f54 <_dtoa_r+0x184>
 8008f3e:	9800      	ldr	r0, [sp, #0]
 8008f40:	f7f7 fb08 	bl	8000554 <__aeabi_i2d>
 8008f44:	4632      	mov	r2, r6
 8008f46:	463b      	mov	r3, r7
 8008f48:	f7f7 fdd6 	bl	8000af8 <__aeabi_dcmpeq>
 8008f4c:	b910      	cbnz	r0, 8008f54 <_dtoa_r+0x184>
 8008f4e:	9b00      	ldr	r3, [sp, #0]
 8008f50:	3b01      	subs	r3, #1
 8008f52:	9300      	str	r3, [sp, #0]
 8008f54:	9b00      	ldr	r3, [sp, #0]
 8008f56:	2b16      	cmp	r3, #22
 8008f58:	d85a      	bhi.n	8009010 <_dtoa_r+0x240>
 8008f5a:	9a00      	ldr	r2, [sp, #0]
 8008f5c:	4b57      	ldr	r3, [pc, #348]	; (80090bc <_dtoa_r+0x2ec>)
 8008f5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f66:	ec51 0b19 	vmov	r0, r1, d9
 8008f6a:	f7f7 fdcf 	bl	8000b0c <__aeabi_dcmplt>
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	d050      	beq.n	8009014 <_dtoa_r+0x244>
 8008f72:	9b00      	ldr	r3, [sp, #0]
 8008f74:	3b01      	subs	r3, #1
 8008f76:	9300      	str	r3, [sp, #0]
 8008f78:	2300      	movs	r3, #0
 8008f7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f7e:	1b5d      	subs	r5, r3, r5
 8008f80:	1e6b      	subs	r3, r5, #1
 8008f82:	9305      	str	r3, [sp, #20]
 8008f84:	bf45      	ittet	mi
 8008f86:	f1c5 0301 	rsbmi	r3, r5, #1
 8008f8a:	9304      	strmi	r3, [sp, #16]
 8008f8c:	2300      	movpl	r3, #0
 8008f8e:	2300      	movmi	r3, #0
 8008f90:	bf4c      	ite	mi
 8008f92:	9305      	strmi	r3, [sp, #20]
 8008f94:	9304      	strpl	r3, [sp, #16]
 8008f96:	9b00      	ldr	r3, [sp, #0]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	db3d      	blt.n	8009018 <_dtoa_r+0x248>
 8008f9c:	9b05      	ldr	r3, [sp, #20]
 8008f9e:	9a00      	ldr	r2, [sp, #0]
 8008fa0:	920a      	str	r2, [sp, #40]	; 0x28
 8008fa2:	4413      	add	r3, r2
 8008fa4:	9305      	str	r3, [sp, #20]
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	9307      	str	r3, [sp, #28]
 8008faa:	9b06      	ldr	r3, [sp, #24]
 8008fac:	2b09      	cmp	r3, #9
 8008fae:	f200 8089 	bhi.w	80090c4 <_dtoa_r+0x2f4>
 8008fb2:	2b05      	cmp	r3, #5
 8008fb4:	bfc4      	itt	gt
 8008fb6:	3b04      	subgt	r3, #4
 8008fb8:	9306      	strgt	r3, [sp, #24]
 8008fba:	9b06      	ldr	r3, [sp, #24]
 8008fbc:	f1a3 0302 	sub.w	r3, r3, #2
 8008fc0:	bfcc      	ite	gt
 8008fc2:	2500      	movgt	r5, #0
 8008fc4:	2501      	movle	r5, #1
 8008fc6:	2b03      	cmp	r3, #3
 8008fc8:	f200 8087 	bhi.w	80090da <_dtoa_r+0x30a>
 8008fcc:	e8df f003 	tbb	[pc, r3]
 8008fd0:	59383a2d 	.word	0x59383a2d
 8008fd4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008fd8:	441d      	add	r5, r3
 8008fda:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008fde:	2b20      	cmp	r3, #32
 8008fe0:	bfc1      	itttt	gt
 8008fe2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008fe6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008fea:	fa0b f303 	lslgt.w	r3, fp, r3
 8008fee:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008ff2:	bfda      	itte	le
 8008ff4:	f1c3 0320 	rsble	r3, r3, #32
 8008ff8:	fa06 f003 	lslle.w	r0, r6, r3
 8008ffc:	4318      	orrgt	r0, r3
 8008ffe:	f7f7 fa99 	bl	8000534 <__aeabi_ui2d>
 8009002:	2301      	movs	r3, #1
 8009004:	4606      	mov	r6, r0
 8009006:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800900a:	3d01      	subs	r5, #1
 800900c:	930e      	str	r3, [sp, #56]	; 0x38
 800900e:	e76a      	b.n	8008ee6 <_dtoa_r+0x116>
 8009010:	2301      	movs	r3, #1
 8009012:	e7b2      	b.n	8008f7a <_dtoa_r+0x1aa>
 8009014:	900b      	str	r0, [sp, #44]	; 0x2c
 8009016:	e7b1      	b.n	8008f7c <_dtoa_r+0x1ac>
 8009018:	9b04      	ldr	r3, [sp, #16]
 800901a:	9a00      	ldr	r2, [sp, #0]
 800901c:	1a9b      	subs	r3, r3, r2
 800901e:	9304      	str	r3, [sp, #16]
 8009020:	4253      	negs	r3, r2
 8009022:	9307      	str	r3, [sp, #28]
 8009024:	2300      	movs	r3, #0
 8009026:	930a      	str	r3, [sp, #40]	; 0x28
 8009028:	e7bf      	b.n	8008faa <_dtoa_r+0x1da>
 800902a:	2300      	movs	r3, #0
 800902c:	9308      	str	r3, [sp, #32]
 800902e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009030:	2b00      	cmp	r3, #0
 8009032:	dc55      	bgt.n	80090e0 <_dtoa_r+0x310>
 8009034:	2301      	movs	r3, #1
 8009036:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800903a:	461a      	mov	r2, r3
 800903c:	9209      	str	r2, [sp, #36]	; 0x24
 800903e:	e00c      	b.n	800905a <_dtoa_r+0x28a>
 8009040:	2301      	movs	r3, #1
 8009042:	e7f3      	b.n	800902c <_dtoa_r+0x25c>
 8009044:	2300      	movs	r3, #0
 8009046:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009048:	9308      	str	r3, [sp, #32]
 800904a:	9b00      	ldr	r3, [sp, #0]
 800904c:	4413      	add	r3, r2
 800904e:	9302      	str	r3, [sp, #8]
 8009050:	3301      	adds	r3, #1
 8009052:	2b01      	cmp	r3, #1
 8009054:	9303      	str	r3, [sp, #12]
 8009056:	bfb8      	it	lt
 8009058:	2301      	movlt	r3, #1
 800905a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800905c:	2200      	movs	r2, #0
 800905e:	6042      	str	r2, [r0, #4]
 8009060:	2204      	movs	r2, #4
 8009062:	f102 0614 	add.w	r6, r2, #20
 8009066:	429e      	cmp	r6, r3
 8009068:	6841      	ldr	r1, [r0, #4]
 800906a:	d93d      	bls.n	80090e8 <_dtoa_r+0x318>
 800906c:	4620      	mov	r0, r4
 800906e:	f000 fedb 	bl	8009e28 <_Balloc>
 8009072:	9001      	str	r0, [sp, #4]
 8009074:	2800      	cmp	r0, #0
 8009076:	d13b      	bne.n	80090f0 <_dtoa_r+0x320>
 8009078:	4b11      	ldr	r3, [pc, #68]	; (80090c0 <_dtoa_r+0x2f0>)
 800907a:	4602      	mov	r2, r0
 800907c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009080:	e6c0      	b.n	8008e04 <_dtoa_r+0x34>
 8009082:	2301      	movs	r3, #1
 8009084:	e7df      	b.n	8009046 <_dtoa_r+0x276>
 8009086:	bf00      	nop
 8009088:	636f4361 	.word	0x636f4361
 800908c:	3fd287a7 	.word	0x3fd287a7
 8009090:	8b60c8b3 	.word	0x8b60c8b3
 8009094:	3fc68a28 	.word	0x3fc68a28
 8009098:	509f79fb 	.word	0x509f79fb
 800909c:	3fd34413 	.word	0x3fd34413
 80090a0:	0800b3a9 	.word	0x0800b3a9
 80090a4:	0800b3c0 	.word	0x0800b3c0
 80090a8:	7ff00000 	.word	0x7ff00000
 80090ac:	0800b3a5 	.word	0x0800b3a5
 80090b0:	0800b39c 	.word	0x0800b39c
 80090b4:	0800b379 	.word	0x0800b379
 80090b8:	3ff80000 	.word	0x3ff80000
 80090bc:	0800b510 	.word	0x0800b510
 80090c0:	0800b41b 	.word	0x0800b41b
 80090c4:	2501      	movs	r5, #1
 80090c6:	2300      	movs	r3, #0
 80090c8:	9306      	str	r3, [sp, #24]
 80090ca:	9508      	str	r5, [sp, #32]
 80090cc:	f04f 33ff 	mov.w	r3, #4294967295
 80090d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80090d4:	2200      	movs	r2, #0
 80090d6:	2312      	movs	r3, #18
 80090d8:	e7b0      	b.n	800903c <_dtoa_r+0x26c>
 80090da:	2301      	movs	r3, #1
 80090dc:	9308      	str	r3, [sp, #32]
 80090de:	e7f5      	b.n	80090cc <_dtoa_r+0x2fc>
 80090e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80090e6:	e7b8      	b.n	800905a <_dtoa_r+0x28a>
 80090e8:	3101      	adds	r1, #1
 80090ea:	6041      	str	r1, [r0, #4]
 80090ec:	0052      	lsls	r2, r2, #1
 80090ee:	e7b8      	b.n	8009062 <_dtoa_r+0x292>
 80090f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090f2:	9a01      	ldr	r2, [sp, #4]
 80090f4:	601a      	str	r2, [r3, #0]
 80090f6:	9b03      	ldr	r3, [sp, #12]
 80090f8:	2b0e      	cmp	r3, #14
 80090fa:	f200 809d 	bhi.w	8009238 <_dtoa_r+0x468>
 80090fe:	2d00      	cmp	r5, #0
 8009100:	f000 809a 	beq.w	8009238 <_dtoa_r+0x468>
 8009104:	9b00      	ldr	r3, [sp, #0]
 8009106:	2b00      	cmp	r3, #0
 8009108:	dd32      	ble.n	8009170 <_dtoa_r+0x3a0>
 800910a:	4ab7      	ldr	r2, [pc, #732]	; (80093e8 <_dtoa_r+0x618>)
 800910c:	f003 030f 	and.w	r3, r3, #15
 8009110:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009114:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009118:	9b00      	ldr	r3, [sp, #0]
 800911a:	05d8      	lsls	r0, r3, #23
 800911c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009120:	d516      	bpl.n	8009150 <_dtoa_r+0x380>
 8009122:	4bb2      	ldr	r3, [pc, #712]	; (80093ec <_dtoa_r+0x61c>)
 8009124:	ec51 0b19 	vmov	r0, r1, d9
 8009128:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800912c:	f7f7 fba6 	bl	800087c <__aeabi_ddiv>
 8009130:	f007 070f 	and.w	r7, r7, #15
 8009134:	4682      	mov	sl, r0
 8009136:	468b      	mov	fp, r1
 8009138:	2503      	movs	r5, #3
 800913a:	4eac      	ldr	r6, [pc, #688]	; (80093ec <_dtoa_r+0x61c>)
 800913c:	b957      	cbnz	r7, 8009154 <_dtoa_r+0x384>
 800913e:	4642      	mov	r2, r8
 8009140:	464b      	mov	r3, r9
 8009142:	4650      	mov	r0, sl
 8009144:	4659      	mov	r1, fp
 8009146:	f7f7 fb99 	bl	800087c <__aeabi_ddiv>
 800914a:	4682      	mov	sl, r0
 800914c:	468b      	mov	fp, r1
 800914e:	e028      	b.n	80091a2 <_dtoa_r+0x3d2>
 8009150:	2502      	movs	r5, #2
 8009152:	e7f2      	b.n	800913a <_dtoa_r+0x36a>
 8009154:	07f9      	lsls	r1, r7, #31
 8009156:	d508      	bpl.n	800916a <_dtoa_r+0x39a>
 8009158:	4640      	mov	r0, r8
 800915a:	4649      	mov	r1, r9
 800915c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009160:	f7f7 fa62 	bl	8000628 <__aeabi_dmul>
 8009164:	3501      	adds	r5, #1
 8009166:	4680      	mov	r8, r0
 8009168:	4689      	mov	r9, r1
 800916a:	107f      	asrs	r7, r7, #1
 800916c:	3608      	adds	r6, #8
 800916e:	e7e5      	b.n	800913c <_dtoa_r+0x36c>
 8009170:	f000 809b 	beq.w	80092aa <_dtoa_r+0x4da>
 8009174:	9b00      	ldr	r3, [sp, #0]
 8009176:	4f9d      	ldr	r7, [pc, #628]	; (80093ec <_dtoa_r+0x61c>)
 8009178:	425e      	negs	r6, r3
 800917a:	4b9b      	ldr	r3, [pc, #620]	; (80093e8 <_dtoa_r+0x618>)
 800917c:	f006 020f 	and.w	r2, r6, #15
 8009180:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009188:	ec51 0b19 	vmov	r0, r1, d9
 800918c:	f7f7 fa4c 	bl	8000628 <__aeabi_dmul>
 8009190:	1136      	asrs	r6, r6, #4
 8009192:	4682      	mov	sl, r0
 8009194:	468b      	mov	fp, r1
 8009196:	2300      	movs	r3, #0
 8009198:	2502      	movs	r5, #2
 800919a:	2e00      	cmp	r6, #0
 800919c:	d17a      	bne.n	8009294 <_dtoa_r+0x4c4>
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d1d3      	bne.n	800914a <_dtoa_r+0x37a>
 80091a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	f000 8082 	beq.w	80092ae <_dtoa_r+0x4de>
 80091aa:	4b91      	ldr	r3, [pc, #580]	; (80093f0 <_dtoa_r+0x620>)
 80091ac:	2200      	movs	r2, #0
 80091ae:	4650      	mov	r0, sl
 80091b0:	4659      	mov	r1, fp
 80091b2:	f7f7 fcab 	bl	8000b0c <__aeabi_dcmplt>
 80091b6:	2800      	cmp	r0, #0
 80091b8:	d079      	beq.n	80092ae <_dtoa_r+0x4de>
 80091ba:	9b03      	ldr	r3, [sp, #12]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d076      	beq.n	80092ae <_dtoa_r+0x4de>
 80091c0:	9b02      	ldr	r3, [sp, #8]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	dd36      	ble.n	8009234 <_dtoa_r+0x464>
 80091c6:	9b00      	ldr	r3, [sp, #0]
 80091c8:	4650      	mov	r0, sl
 80091ca:	4659      	mov	r1, fp
 80091cc:	1e5f      	subs	r7, r3, #1
 80091ce:	2200      	movs	r2, #0
 80091d0:	4b88      	ldr	r3, [pc, #544]	; (80093f4 <_dtoa_r+0x624>)
 80091d2:	f7f7 fa29 	bl	8000628 <__aeabi_dmul>
 80091d6:	9e02      	ldr	r6, [sp, #8]
 80091d8:	4682      	mov	sl, r0
 80091da:	468b      	mov	fp, r1
 80091dc:	3501      	adds	r5, #1
 80091de:	4628      	mov	r0, r5
 80091e0:	f7f7 f9b8 	bl	8000554 <__aeabi_i2d>
 80091e4:	4652      	mov	r2, sl
 80091e6:	465b      	mov	r3, fp
 80091e8:	f7f7 fa1e 	bl	8000628 <__aeabi_dmul>
 80091ec:	4b82      	ldr	r3, [pc, #520]	; (80093f8 <_dtoa_r+0x628>)
 80091ee:	2200      	movs	r2, #0
 80091f0:	f7f7 f864 	bl	80002bc <__adddf3>
 80091f4:	46d0      	mov	r8, sl
 80091f6:	46d9      	mov	r9, fp
 80091f8:	4682      	mov	sl, r0
 80091fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80091fe:	2e00      	cmp	r6, #0
 8009200:	d158      	bne.n	80092b4 <_dtoa_r+0x4e4>
 8009202:	4b7e      	ldr	r3, [pc, #504]	; (80093fc <_dtoa_r+0x62c>)
 8009204:	2200      	movs	r2, #0
 8009206:	4640      	mov	r0, r8
 8009208:	4649      	mov	r1, r9
 800920a:	f7f7 f855 	bl	80002b8 <__aeabi_dsub>
 800920e:	4652      	mov	r2, sl
 8009210:	465b      	mov	r3, fp
 8009212:	4680      	mov	r8, r0
 8009214:	4689      	mov	r9, r1
 8009216:	f7f7 fc97 	bl	8000b48 <__aeabi_dcmpgt>
 800921a:	2800      	cmp	r0, #0
 800921c:	f040 8295 	bne.w	800974a <_dtoa_r+0x97a>
 8009220:	4652      	mov	r2, sl
 8009222:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009226:	4640      	mov	r0, r8
 8009228:	4649      	mov	r1, r9
 800922a:	f7f7 fc6f 	bl	8000b0c <__aeabi_dcmplt>
 800922e:	2800      	cmp	r0, #0
 8009230:	f040 8289 	bne.w	8009746 <_dtoa_r+0x976>
 8009234:	ec5b ab19 	vmov	sl, fp, d9
 8009238:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800923a:	2b00      	cmp	r3, #0
 800923c:	f2c0 8148 	blt.w	80094d0 <_dtoa_r+0x700>
 8009240:	9a00      	ldr	r2, [sp, #0]
 8009242:	2a0e      	cmp	r2, #14
 8009244:	f300 8144 	bgt.w	80094d0 <_dtoa_r+0x700>
 8009248:	4b67      	ldr	r3, [pc, #412]	; (80093e8 <_dtoa_r+0x618>)
 800924a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800924e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009254:	2b00      	cmp	r3, #0
 8009256:	f280 80d5 	bge.w	8009404 <_dtoa_r+0x634>
 800925a:	9b03      	ldr	r3, [sp, #12]
 800925c:	2b00      	cmp	r3, #0
 800925e:	f300 80d1 	bgt.w	8009404 <_dtoa_r+0x634>
 8009262:	f040 826f 	bne.w	8009744 <_dtoa_r+0x974>
 8009266:	4b65      	ldr	r3, [pc, #404]	; (80093fc <_dtoa_r+0x62c>)
 8009268:	2200      	movs	r2, #0
 800926a:	4640      	mov	r0, r8
 800926c:	4649      	mov	r1, r9
 800926e:	f7f7 f9db 	bl	8000628 <__aeabi_dmul>
 8009272:	4652      	mov	r2, sl
 8009274:	465b      	mov	r3, fp
 8009276:	f7f7 fc5d 	bl	8000b34 <__aeabi_dcmpge>
 800927a:	9e03      	ldr	r6, [sp, #12]
 800927c:	4637      	mov	r7, r6
 800927e:	2800      	cmp	r0, #0
 8009280:	f040 8245 	bne.w	800970e <_dtoa_r+0x93e>
 8009284:	9d01      	ldr	r5, [sp, #4]
 8009286:	2331      	movs	r3, #49	; 0x31
 8009288:	f805 3b01 	strb.w	r3, [r5], #1
 800928c:	9b00      	ldr	r3, [sp, #0]
 800928e:	3301      	adds	r3, #1
 8009290:	9300      	str	r3, [sp, #0]
 8009292:	e240      	b.n	8009716 <_dtoa_r+0x946>
 8009294:	07f2      	lsls	r2, r6, #31
 8009296:	d505      	bpl.n	80092a4 <_dtoa_r+0x4d4>
 8009298:	e9d7 2300 	ldrd	r2, r3, [r7]
 800929c:	f7f7 f9c4 	bl	8000628 <__aeabi_dmul>
 80092a0:	3501      	adds	r5, #1
 80092a2:	2301      	movs	r3, #1
 80092a4:	1076      	asrs	r6, r6, #1
 80092a6:	3708      	adds	r7, #8
 80092a8:	e777      	b.n	800919a <_dtoa_r+0x3ca>
 80092aa:	2502      	movs	r5, #2
 80092ac:	e779      	b.n	80091a2 <_dtoa_r+0x3d2>
 80092ae:	9f00      	ldr	r7, [sp, #0]
 80092b0:	9e03      	ldr	r6, [sp, #12]
 80092b2:	e794      	b.n	80091de <_dtoa_r+0x40e>
 80092b4:	9901      	ldr	r1, [sp, #4]
 80092b6:	4b4c      	ldr	r3, [pc, #304]	; (80093e8 <_dtoa_r+0x618>)
 80092b8:	4431      	add	r1, r6
 80092ba:	910d      	str	r1, [sp, #52]	; 0x34
 80092bc:	9908      	ldr	r1, [sp, #32]
 80092be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80092c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80092c6:	2900      	cmp	r1, #0
 80092c8:	d043      	beq.n	8009352 <_dtoa_r+0x582>
 80092ca:	494d      	ldr	r1, [pc, #308]	; (8009400 <_dtoa_r+0x630>)
 80092cc:	2000      	movs	r0, #0
 80092ce:	f7f7 fad5 	bl	800087c <__aeabi_ddiv>
 80092d2:	4652      	mov	r2, sl
 80092d4:	465b      	mov	r3, fp
 80092d6:	f7f6 ffef 	bl	80002b8 <__aeabi_dsub>
 80092da:	9d01      	ldr	r5, [sp, #4]
 80092dc:	4682      	mov	sl, r0
 80092de:	468b      	mov	fp, r1
 80092e0:	4649      	mov	r1, r9
 80092e2:	4640      	mov	r0, r8
 80092e4:	f7f7 fc50 	bl	8000b88 <__aeabi_d2iz>
 80092e8:	4606      	mov	r6, r0
 80092ea:	f7f7 f933 	bl	8000554 <__aeabi_i2d>
 80092ee:	4602      	mov	r2, r0
 80092f0:	460b      	mov	r3, r1
 80092f2:	4640      	mov	r0, r8
 80092f4:	4649      	mov	r1, r9
 80092f6:	f7f6 ffdf 	bl	80002b8 <__aeabi_dsub>
 80092fa:	3630      	adds	r6, #48	; 0x30
 80092fc:	f805 6b01 	strb.w	r6, [r5], #1
 8009300:	4652      	mov	r2, sl
 8009302:	465b      	mov	r3, fp
 8009304:	4680      	mov	r8, r0
 8009306:	4689      	mov	r9, r1
 8009308:	f7f7 fc00 	bl	8000b0c <__aeabi_dcmplt>
 800930c:	2800      	cmp	r0, #0
 800930e:	d163      	bne.n	80093d8 <_dtoa_r+0x608>
 8009310:	4642      	mov	r2, r8
 8009312:	464b      	mov	r3, r9
 8009314:	4936      	ldr	r1, [pc, #216]	; (80093f0 <_dtoa_r+0x620>)
 8009316:	2000      	movs	r0, #0
 8009318:	f7f6 ffce 	bl	80002b8 <__aeabi_dsub>
 800931c:	4652      	mov	r2, sl
 800931e:	465b      	mov	r3, fp
 8009320:	f7f7 fbf4 	bl	8000b0c <__aeabi_dcmplt>
 8009324:	2800      	cmp	r0, #0
 8009326:	f040 80b5 	bne.w	8009494 <_dtoa_r+0x6c4>
 800932a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800932c:	429d      	cmp	r5, r3
 800932e:	d081      	beq.n	8009234 <_dtoa_r+0x464>
 8009330:	4b30      	ldr	r3, [pc, #192]	; (80093f4 <_dtoa_r+0x624>)
 8009332:	2200      	movs	r2, #0
 8009334:	4650      	mov	r0, sl
 8009336:	4659      	mov	r1, fp
 8009338:	f7f7 f976 	bl	8000628 <__aeabi_dmul>
 800933c:	4b2d      	ldr	r3, [pc, #180]	; (80093f4 <_dtoa_r+0x624>)
 800933e:	4682      	mov	sl, r0
 8009340:	468b      	mov	fp, r1
 8009342:	4640      	mov	r0, r8
 8009344:	4649      	mov	r1, r9
 8009346:	2200      	movs	r2, #0
 8009348:	f7f7 f96e 	bl	8000628 <__aeabi_dmul>
 800934c:	4680      	mov	r8, r0
 800934e:	4689      	mov	r9, r1
 8009350:	e7c6      	b.n	80092e0 <_dtoa_r+0x510>
 8009352:	4650      	mov	r0, sl
 8009354:	4659      	mov	r1, fp
 8009356:	f7f7 f967 	bl	8000628 <__aeabi_dmul>
 800935a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800935c:	9d01      	ldr	r5, [sp, #4]
 800935e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009360:	4682      	mov	sl, r0
 8009362:	468b      	mov	fp, r1
 8009364:	4649      	mov	r1, r9
 8009366:	4640      	mov	r0, r8
 8009368:	f7f7 fc0e 	bl	8000b88 <__aeabi_d2iz>
 800936c:	4606      	mov	r6, r0
 800936e:	f7f7 f8f1 	bl	8000554 <__aeabi_i2d>
 8009372:	3630      	adds	r6, #48	; 0x30
 8009374:	4602      	mov	r2, r0
 8009376:	460b      	mov	r3, r1
 8009378:	4640      	mov	r0, r8
 800937a:	4649      	mov	r1, r9
 800937c:	f7f6 ff9c 	bl	80002b8 <__aeabi_dsub>
 8009380:	f805 6b01 	strb.w	r6, [r5], #1
 8009384:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009386:	429d      	cmp	r5, r3
 8009388:	4680      	mov	r8, r0
 800938a:	4689      	mov	r9, r1
 800938c:	f04f 0200 	mov.w	r2, #0
 8009390:	d124      	bne.n	80093dc <_dtoa_r+0x60c>
 8009392:	4b1b      	ldr	r3, [pc, #108]	; (8009400 <_dtoa_r+0x630>)
 8009394:	4650      	mov	r0, sl
 8009396:	4659      	mov	r1, fp
 8009398:	f7f6 ff90 	bl	80002bc <__adddf3>
 800939c:	4602      	mov	r2, r0
 800939e:	460b      	mov	r3, r1
 80093a0:	4640      	mov	r0, r8
 80093a2:	4649      	mov	r1, r9
 80093a4:	f7f7 fbd0 	bl	8000b48 <__aeabi_dcmpgt>
 80093a8:	2800      	cmp	r0, #0
 80093aa:	d173      	bne.n	8009494 <_dtoa_r+0x6c4>
 80093ac:	4652      	mov	r2, sl
 80093ae:	465b      	mov	r3, fp
 80093b0:	4913      	ldr	r1, [pc, #76]	; (8009400 <_dtoa_r+0x630>)
 80093b2:	2000      	movs	r0, #0
 80093b4:	f7f6 ff80 	bl	80002b8 <__aeabi_dsub>
 80093b8:	4602      	mov	r2, r0
 80093ba:	460b      	mov	r3, r1
 80093bc:	4640      	mov	r0, r8
 80093be:	4649      	mov	r1, r9
 80093c0:	f7f7 fba4 	bl	8000b0c <__aeabi_dcmplt>
 80093c4:	2800      	cmp	r0, #0
 80093c6:	f43f af35 	beq.w	8009234 <_dtoa_r+0x464>
 80093ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80093cc:	1e6b      	subs	r3, r5, #1
 80093ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80093d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80093d4:	2b30      	cmp	r3, #48	; 0x30
 80093d6:	d0f8      	beq.n	80093ca <_dtoa_r+0x5fa>
 80093d8:	9700      	str	r7, [sp, #0]
 80093da:	e049      	b.n	8009470 <_dtoa_r+0x6a0>
 80093dc:	4b05      	ldr	r3, [pc, #20]	; (80093f4 <_dtoa_r+0x624>)
 80093de:	f7f7 f923 	bl	8000628 <__aeabi_dmul>
 80093e2:	4680      	mov	r8, r0
 80093e4:	4689      	mov	r9, r1
 80093e6:	e7bd      	b.n	8009364 <_dtoa_r+0x594>
 80093e8:	0800b510 	.word	0x0800b510
 80093ec:	0800b4e8 	.word	0x0800b4e8
 80093f0:	3ff00000 	.word	0x3ff00000
 80093f4:	40240000 	.word	0x40240000
 80093f8:	401c0000 	.word	0x401c0000
 80093fc:	40140000 	.word	0x40140000
 8009400:	3fe00000 	.word	0x3fe00000
 8009404:	9d01      	ldr	r5, [sp, #4]
 8009406:	4656      	mov	r6, sl
 8009408:	465f      	mov	r7, fp
 800940a:	4642      	mov	r2, r8
 800940c:	464b      	mov	r3, r9
 800940e:	4630      	mov	r0, r6
 8009410:	4639      	mov	r1, r7
 8009412:	f7f7 fa33 	bl	800087c <__aeabi_ddiv>
 8009416:	f7f7 fbb7 	bl	8000b88 <__aeabi_d2iz>
 800941a:	4682      	mov	sl, r0
 800941c:	f7f7 f89a 	bl	8000554 <__aeabi_i2d>
 8009420:	4642      	mov	r2, r8
 8009422:	464b      	mov	r3, r9
 8009424:	f7f7 f900 	bl	8000628 <__aeabi_dmul>
 8009428:	4602      	mov	r2, r0
 800942a:	460b      	mov	r3, r1
 800942c:	4630      	mov	r0, r6
 800942e:	4639      	mov	r1, r7
 8009430:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009434:	f7f6 ff40 	bl	80002b8 <__aeabi_dsub>
 8009438:	f805 6b01 	strb.w	r6, [r5], #1
 800943c:	9e01      	ldr	r6, [sp, #4]
 800943e:	9f03      	ldr	r7, [sp, #12]
 8009440:	1bae      	subs	r6, r5, r6
 8009442:	42b7      	cmp	r7, r6
 8009444:	4602      	mov	r2, r0
 8009446:	460b      	mov	r3, r1
 8009448:	d135      	bne.n	80094b6 <_dtoa_r+0x6e6>
 800944a:	f7f6 ff37 	bl	80002bc <__adddf3>
 800944e:	4642      	mov	r2, r8
 8009450:	464b      	mov	r3, r9
 8009452:	4606      	mov	r6, r0
 8009454:	460f      	mov	r7, r1
 8009456:	f7f7 fb77 	bl	8000b48 <__aeabi_dcmpgt>
 800945a:	b9d0      	cbnz	r0, 8009492 <_dtoa_r+0x6c2>
 800945c:	4642      	mov	r2, r8
 800945e:	464b      	mov	r3, r9
 8009460:	4630      	mov	r0, r6
 8009462:	4639      	mov	r1, r7
 8009464:	f7f7 fb48 	bl	8000af8 <__aeabi_dcmpeq>
 8009468:	b110      	cbz	r0, 8009470 <_dtoa_r+0x6a0>
 800946a:	f01a 0f01 	tst.w	sl, #1
 800946e:	d110      	bne.n	8009492 <_dtoa_r+0x6c2>
 8009470:	4620      	mov	r0, r4
 8009472:	ee18 1a10 	vmov	r1, s16
 8009476:	f000 fd17 	bl	8009ea8 <_Bfree>
 800947a:	2300      	movs	r3, #0
 800947c:	9800      	ldr	r0, [sp, #0]
 800947e:	702b      	strb	r3, [r5, #0]
 8009480:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009482:	3001      	adds	r0, #1
 8009484:	6018      	str	r0, [r3, #0]
 8009486:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009488:	2b00      	cmp	r3, #0
 800948a:	f43f acf1 	beq.w	8008e70 <_dtoa_r+0xa0>
 800948e:	601d      	str	r5, [r3, #0]
 8009490:	e4ee      	b.n	8008e70 <_dtoa_r+0xa0>
 8009492:	9f00      	ldr	r7, [sp, #0]
 8009494:	462b      	mov	r3, r5
 8009496:	461d      	mov	r5, r3
 8009498:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800949c:	2a39      	cmp	r2, #57	; 0x39
 800949e:	d106      	bne.n	80094ae <_dtoa_r+0x6de>
 80094a0:	9a01      	ldr	r2, [sp, #4]
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d1f7      	bne.n	8009496 <_dtoa_r+0x6c6>
 80094a6:	9901      	ldr	r1, [sp, #4]
 80094a8:	2230      	movs	r2, #48	; 0x30
 80094aa:	3701      	adds	r7, #1
 80094ac:	700a      	strb	r2, [r1, #0]
 80094ae:	781a      	ldrb	r2, [r3, #0]
 80094b0:	3201      	adds	r2, #1
 80094b2:	701a      	strb	r2, [r3, #0]
 80094b4:	e790      	b.n	80093d8 <_dtoa_r+0x608>
 80094b6:	4ba6      	ldr	r3, [pc, #664]	; (8009750 <_dtoa_r+0x980>)
 80094b8:	2200      	movs	r2, #0
 80094ba:	f7f7 f8b5 	bl	8000628 <__aeabi_dmul>
 80094be:	2200      	movs	r2, #0
 80094c0:	2300      	movs	r3, #0
 80094c2:	4606      	mov	r6, r0
 80094c4:	460f      	mov	r7, r1
 80094c6:	f7f7 fb17 	bl	8000af8 <__aeabi_dcmpeq>
 80094ca:	2800      	cmp	r0, #0
 80094cc:	d09d      	beq.n	800940a <_dtoa_r+0x63a>
 80094ce:	e7cf      	b.n	8009470 <_dtoa_r+0x6a0>
 80094d0:	9a08      	ldr	r2, [sp, #32]
 80094d2:	2a00      	cmp	r2, #0
 80094d4:	f000 80d7 	beq.w	8009686 <_dtoa_r+0x8b6>
 80094d8:	9a06      	ldr	r2, [sp, #24]
 80094da:	2a01      	cmp	r2, #1
 80094dc:	f300 80ba 	bgt.w	8009654 <_dtoa_r+0x884>
 80094e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094e2:	2a00      	cmp	r2, #0
 80094e4:	f000 80b2 	beq.w	800964c <_dtoa_r+0x87c>
 80094e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80094ec:	9e07      	ldr	r6, [sp, #28]
 80094ee:	9d04      	ldr	r5, [sp, #16]
 80094f0:	9a04      	ldr	r2, [sp, #16]
 80094f2:	441a      	add	r2, r3
 80094f4:	9204      	str	r2, [sp, #16]
 80094f6:	9a05      	ldr	r2, [sp, #20]
 80094f8:	2101      	movs	r1, #1
 80094fa:	441a      	add	r2, r3
 80094fc:	4620      	mov	r0, r4
 80094fe:	9205      	str	r2, [sp, #20]
 8009500:	f000 fd8a 	bl	800a018 <__i2b>
 8009504:	4607      	mov	r7, r0
 8009506:	2d00      	cmp	r5, #0
 8009508:	dd0c      	ble.n	8009524 <_dtoa_r+0x754>
 800950a:	9b05      	ldr	r3, [sp, #20]
 800950c:	2b00      	cmp	r3, #0
 800950e:	dd09      	ble.n	8009524 <_dtoa_r+0x754>
 8009510:	42ab      	cmp	r3, r5
 8009512:	9a04      	ldr	r2, [sp, #16]
 8009514:	bfa8      	it	ge
 8009516:	462b      	movge	r3, r5
 8009518:	1ad2      	subs	r2, r2, r3
 800951a:	9204      	str	r2, [sp, #16]
 800951c:	9a05      	ldr	r2, [sp, #20]
 800951e:	1aed      	subs	r5, r5, r3
 8009520:	1ad3      	subs	r3, r2, r3
 8009522:	9305      	str	r3, [sp, #20]
 8009524:	9b07      	ldr	r3, [sp, #28]
 8009526:	b31b      	cbz	r3, 8009570 <_dtoa_r+0x7a0>
 8009528:	9b08      	ldr	r3, [sp, #32]
 800952a:	2b00      	cmp	r3, #0
 800952c:	f000 80af 	beq.w	800968e <_dtoa_r+0x8be>
 8009530:	2e00      	cmp	r6, #0
 8009532:	dd13      	ble.n	800955c <_dtoa_r+0x78c>
 8009534:	4639      	mov	r1, r7
 8009536:	4632      	mov	r2, r6
 8009538:	4620      	mov	r0, r4
 800953a:	f000 fe2d 	bl	800a198 <__pow5mult>
 800953e:	ee18 2a10 	vmov	r2, s16
 8009542:	4601      	mov	r1, r0
 8009544:	4607      	mov	r7, r0
 8009546:	4620      	mov	r0, r4
 8009548:	f000 fd7c 	bl	800a044 <__multiply>
 800954c:	ee18 1a10 	vmov	r1, s16
 8009550:	4680      	mov	r8, r0
 8009552:	4620      	mov	r0, r4
 8009554:	f000 fca8 	bl	8009ea8 <_Bfree>
 8009558:	ee08 8a10 	vmov	s16, r8
 800955c:	9b07      	ldr	r3, [sp, #28]
 800955e:	1b9a      	subs	r2, r3, r6
 8009560:	d006      	beq.n	8009570 <_dtoa_r+0x7a0>
 8009562:	ee18 1a10 	vmov	r1, s16
 8009566:	4620      	mov	r0, r4
 8009568:	f000 fe16 	bl	800a198 <__pow5mult>
 800956c:	ee08 0a10 	vmov	s16, r0
 8009570:	2101      	movs	r1, #1
 8009572:	4620      	mov	r0, r4
 8009574:	f000 fd50 	bl	800a018 <__i2b>
 8009578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800957a:	2b00      	cmp	r3, #0
 800957c:	4606      	mov	r6, r0
 800957e:	f340 8088 	ble.w	8009692 <_dtoa_r+0x8c2>
 8009582:	461a      	mov	r2, r3
 8009584:	4601      	mov	r1, r0
 8009586:	4620      	mov	r0, r4
 8009588:	f000 fe06 	bl	800a198 <__pow5mult>
 800958c:	9b06      	ldr	r3, [sp, #24]
 800958e:	2b01      	cmp	r3, #1
 8009590:	4606      	mov	r6, r0
 8009592:	f340 8081 	ble.w	8009698 <_dtoa_r+0x8c8>
 8009596:	f04f 0800 	mov.w	r8, #0
 800959a:	6933      	ldr	r3, [r6, #16]
 800959c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80095a0:	6918      	ldr	r0, [r3, #16]
 80095a2:	f000 fce9 	bl	8009f78 <__hi0bits>
 80095a6:	f1c0 0020 	rsb	r0, r0, #32
 80095aa:	9b05      	ldr	r3, [sp, #20]
 80095ac:	4418      	add	r0, r3
 80095ae:	f010 001f 	ands.w	r0, r0, #31
 80095b2:	f000 8092 	beq.w	80096da <_dtoa_r+0x90a>
 80095b6:	f1c0 0320 	rsb	r3, r0, #32
 80095ba:	2b04      	cmp	r3, #4
 80095bc:	f340 808a 	ble.w	80096d4 <_dtoa_r+0x904>
 80095c0:	f1c0 001c 	rsb	r0, r0, #28
 80095c4:	9b04      	ldr	r3, [sp, #16]
 80095c6:	4403      	add	r3, r0
 80095c8:	9304      	str	r3, [sp, #16]
 80095ca:	9b05      	ldr	r3, [sp, #20]
 80095cc:	4403      	add	r3, r0
 80095ce:	4405      	add	r5, r0
 80095d0:	9305      	str	r3, [sp, #20]
 80095d2:	9b04      	ldr	r3, [sp, #16]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	dd07      	ble.n	80095e8 <_dtoa_r+0x818>
 80095d8:	ee18 1a10 	vmov	r1, s16
 80095dc:	461a      	mov	r2, r3
 80095de:	4620      	mov	r0, r4
 80095e0:	f000 fe34 	bl	800a24c <__lshift>
 80095e4:	ee08 0a10 	vmov	s16, r0
 80095e8:	9b05      	ldr	r3, [sp, #20]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	dd05      	ble.n	80095fa <_dtoa_r+0x82a>
 80095ee:	4631      	mov	r1, r6
 80095f0:	461a      	mov	r2, r3
 80095f2:	4620      	mov	r0, r4
 80095f4:	f000 fe2a 	bl	800a24c <__lshift>
 80095f8:	4606      	mov	r6, r0
 80095fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d06e      	beq.n	80096de <_dtoa_r+0x90e>
 8009600:	ee18 0a10 	vmov	r0, s16
 8009604:	4631      	mov	r1, r6
 8009606:	f000 fe91 	bl	800a32c <__mcmp>
 800960a:	2800      	cmp	r0, #0
 800960c:	da67      	bge.n	80096de <_dtoa_r+0x90e>
 800960e:	9b00      	ldr	r3, [sp, #0]
 8009610:	3b01      	subs	r3, #1
 8009612:	ee18 1a10 	vmov	r1, s16
 8009616:	9300      	str	r3, [sp, #0]
 8009618:	220a      	movs	r2, #10
 800961a:	2300      	movs	r3, #0
 800961c:	4620      	mov	r0, r4
 800961e:	f000 fc65 	bl	8009eec <__multadd>
 8009622:	9b08      	ldr	r3, [sp, #32]
 8009624:	ee08 0a10 	vmov	s16, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	f000 81b1 	beq.w	8009990 <_dtoa_r+0xbc0>
 800962e:	2300      	movs	r3, #0
 8009630:	4639      	mov	r1, r7
 8009632:	220a      	movs	r2, #10
 8009634:	4620      	mov	r0, r4
 8009636:	f000 fc59 	bl	8009eec <__multadd>
 800963a:	9b02      	ldr	r3, [sp, #8]
 800963c:	2b00      	cmp	r3, #0
 800963e:	4607      	mov	r7, r0
 8009640:	f300 808e 	bgt.w	8009760 <_dtoa_r+0x990>
 8009644:	9b06      	ldr	r3, [sp, #24]
 8009646:	2b02      	cmp	r3, #2
 8009648:	dc51      	bgt.n	80096ee <_dtoa_r+0x91e>
 800964a:	e089      	b.n	8009760 <_dtoa_r+0x990>
 800964c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800964e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009652:	e74b      	b.n	80094ec <_dtoa_r+0x71c>
 8009654:	9b03      	ldr	r3, [sp, #12]
 8009656:	1e5e      	subs	r6, r3, #1
 8009658:	9b07      	ldr	r3, [sp, #28]
 800965a:	42b3      	cmp	r3, r6
 800965c:	bfbf      	itttt	lt
 800965e:	9b07      	ldrlt	r3, [sp, #28]
 8009660:	9607      	strlt	r6, [sp, #28]
 8009662:	1af2      	sublt	r2, r6, r3
 8009664:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009666:	bfb6      	itet	lt
 8009668:	189b      	addlt	r3, r3, r2
 800966a:	1b9e      	subge	r6, r3, r6
 800966c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800966e:	9b03      	ldr	r3, [sp, #12]
 8009670:	bfb8      	it	lt
 8009672:	2600      	movlt	r6, #0
 8009674:	2b00      	cmp	r3, #0
 8009676:	bfb7      	itett	lt
 8009678:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800967c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009680:	1a9d      	sublt	r5, r3, r2
 8009682:	2300      	movlt	r3, #0
 8009684:	e734      	b.n	80094f0 <_dtoa_r+0x720>
 8009686:	9e07      	ldr	r6, [sp, #28]
 8009688:	9d04      	ldr	r5, [sp, #16]
 800968a:	9f08      	ldr	r7, [sp, #32]
 800968c:	e73b      	b.n	8009506 <_dtoa_r+0x736>
 800968e:	9a07      	ldr	r2, [sp, #28]
 8009690:	e767      	b.n	8009562 <_dtoa_r+0x792>
 8009692:	9b06      	ldr	r3, [sp, #24]
 8009694:	2b01      	cmp	r3, #1
 8009696:	dc18      	bgt.n	80096ca <_dtoa_r+0x8fa>
 8009698:	f1ba 0f00 	cmp.w	sl, #0
 800969c:	d115      	bne.n	80096ca <_dtoa_r+0x8fa>
 800969e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80096a2:	b993      	cbnz	r3, 80096ca <_dtoa_r+0x8fa>
 80096a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80096a8:	0d1b      	lsrs	r3, r3, #20
 80096aa:	051b      	lsls	r3, r3, #20
 80096ac:	b183      	cbz	r3, 80096d0 <_dtoa_r+0x900>
 80096ae:	9b04      	ldr	r3, [sp, #16]
 80096b0:	3301      	adds	r3, #1
 80096b2:	9304      	str	r3, [sp, #16]
 80096b4:	9b05      	ldr	r3, [sp, #20]
 80096b6:	3301      	adds	r3, #1
 80096b8:	9305      	str	r3, [sp, #20]
 80096ba:	f04f 0801 	mov.w	r8, #1
 80096be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	f47f af6a 	bne.w	800959a <_dtoa_r+0x7ca>
 80096c6:	2001      	movs	r0, #1
 80096c8:	e76f      	b.n	80095aa <_dtoa_r+0x7da>
 80096ca:	f04f 0800 	mov.w	r8, #0
 80096ce:	e7f6      	b.n	80096be <_dtoa_r+0x8ee>
 80096d0:	4698      	mov	r8, r3
 80096d2:	e7f4      	b.n	80096be <_dtoa_r+0x8ee>
 80096d4:	f43f af7d 	beq.w	80095d2 <_dtoa_r+0x802>
 80096d8:	4618      	mov	r0, r3
 80096da:	301c      	adds	r0, #28
 80096dc:	e772      	b.n	80095c4 <_dtoa_r+0x7f4>
 80096de:	9b03      	ldr	r3, [sp, #12]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	dc37      	bgt.n	8009754 <_dtoa_r+0x984>
 80096e4:	9b06      	ldr	r3, [sp, #24]
 80096e6:	2b02      	cmp	r3, #2
 80096e8:	dd34      	ble.n	8009754 <_dtoa_r+0x984>
 80096ea:	9b03      	ldr	r3, [sp, #12]
 80096ec:	9302      	str	r3, [sp, #8]
 80096ee:	9b02      	ldr	r3, [sp, #8]
 80096f0:	b96b      	cbnz	r3, 800970e <_dtoa_r+0x93e>
 80096f2:	4631      	mov	r1, r6
 80096f4:	2205      	movs	r2, #5
 80096f6:	4620      	mov	r0, r4
 80096f8:	f000 fbf8 	bl	8009eec <__multadd>
 80096fc:	4601      	mov	r1, r0
 80096fe:	4606      	mov	r6, r0
 8009700:	ee18 0a10 	vmov	r0, s16
 8009704:	f000 fe12 	bl	800a32c <__mcmp>
 8009708:	2800      	cmp	r0, #0
 800970a:	f73f adbb 	bgt.w	8009284 <_dtoa_r+0x4b4>
 800970e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009710:	9d01      	ldr	r5, [sp, #4]
 8009712:	43db      	mvns	r3, r3
 8009714:	9300      	str	r3, [sp, #0]
 8009716:	f04f 0800 	mov.w	r8, #0
 800971a:	4631      	mov	r1, r6
 800971c:	4620      	mov	r0, r4
 800971e:	f000 fbc3 	bl	8009ea8 <_Bfree>
 8009722:	2f00      	cmp	r7, #0
 8009724:	f43f aea4 	beq.w	8009470 <_dtoa_r+0x6a0>
 8009728:	f1b8 0f00 	cmp.w	r8, #0
 800972c:	d005      	beq.n	800973a <_dtoa_r+0x96a>
 800972e:	45b8      	cmp	r8, r7
 8009730:	d003      	beq.n	800973a <_dtoa_r+0x96a>
 8009732:	4641      	mov	r1, r8
 8009734:	4620      	mov	r0, r4
 8009736:	f000 fbb7 	bl	8009ea8 <_Bfree>
 800973a:	4639      	mov	r1, r7
 800973c:	4620      	mov	r0, r4
 800973e:	f000 fbb3 	bl	8009ea8 <_Bfree>
 8009742:	e695      	b.n	8009470 <_dtoa_r+0x6a0>
 8009744:	2600      	movs	r6, #0
 8009746:	4637      	mov	r7, r6
 8009748:	e7e1      	b.n	800970e <_dtoa_r+0x93e>
 800974a:	9700      	str	r7, [sp, #0]
 800974c:	4637      	mov	r7, r6
 800974e:	e599      	b.n	8009284 <_dtoa_r+0x4b4>
 8009750:	40240000 	.word	0x40240000
 8009754:	9b08      	ldr	r3, [sp, #32]
 8009756:	2b00      	cmp	r3, #0
 8009758:	f000 80ca 	beq.w	80098f0 <_dtoa_r+0xb20>
 800975c:	9b03      	ldr	r3, [sp, #12]
 800975e:	9302      	str	r3, [sp, #8]
 8009760:	2d00      	cmp	r5, #0
 8009762:	dd05      	ble.n	8009770 <_dtoa_r+0x9a0>
 8009764:	4639      	mov	r1, r7
 8009766:	462a      	mov	r2, r5
 8009768:	4620      	mov	r0, r4
 800976a:	f000 fd6f 	bl	800a24c <__lshift>
 800976e:	4607      	mov	r7, r0
 8009770:	f1b8 0f00 	cmp.w	r8, #0
 8009774:	d05b      	beq.n	800982e <_dtoa_r+0xa5e>
 8009776:	6879      	ldr	r1, [r7, #4]
 8009778:	4620      	mov	r0, r4
 800977a:	f000 fb55 	bl	8009e28 <_Balloc>
 800977e:	4605      	mov	r5, r0
 8009780:	b928      	cbnz	r0, 800978e <_dtoa_r+0x9be>
 8009782:	4b87      	ldr	r3, [pc, #540]	; (80099a0 <_dtoa_r+0xbd0>)
 8009784:	4602      	mov	r2, r0
 8009786:	f240 21ea 	movw	r1, #746	; 0x2ea
 800978a:	f7ff bb3b 	b.w	8008e04 <_dtoa_r+0x34>
 800978e:	693a      	ldr	r2, [r7, #16]
 8009790:	3202      	adds	r2, #2
 8009792:	0092      	lsls	r2, r2, #2
 8009794:	f107 010c 	add.w	r1, r7, #12
 8009798:	300c      	adds	r0, #12
 800979a:	f000 fb2b 	bl	8009df4 <memcpy>
 800979e:	2201      	movs	r2, #1
 80097a0:	4629      	mov	r1, r5
 80097a2:	4620      	mov	r0, r4
 80097a4:	f000 fd52 	bl	800a24c <__lshift>
 80097a8:	9b01      	ldr	r3, [sp, #4]
 80097aa:	f103 0901 	add.w	r9, r3, #1
 80097ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80097b2:	4413      	add	r3, r2
 80097b4:	9305      	str	r3, [sp, #20]
 80097b6:	f00a 0301 	and.w	r3, sl, #1
 80097ba:	46b8      	mov	r8, r7
 80097bc:	9304      	str	r3, [sp, #16]
 80097be:	4607      	mov	r7, r0
 80097c0:	4631      	mov	r1, r6
 80097c2:	ee18 0a10 	vmov	r0, s16
 80097c6:	f7ff fa75 	bl	8008cb4 <quorem>
 80097ca:	4641      	mov	r1, r8
 80097cc:	9002      	str	r0, [sp, #8]
 80097ce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80097d2:	ee18 0a10 	vmov	r0, s16
 80097d6:	f000 fda9 	bl	800a32c <__mcmp>
 80097da:	463a      	mov	r2, r7
 80097dc:	9003      	str	r0, [sp, #12]
 80097de:	4631      	mov	r1, r6
 80097e0:	4620      	mov	r0, r4
 80097e2:	f000 fdbf 	bl	800a364 <__mdiff>
 80097e6:	68c2      	ldr	r2, [r0, #12]
 80097e8:	f109 3bff 	add.w	fp, r9, #4294967295
 80097ec:	4605      	mov	r5, r0
 80097ee:	bb02      	cbnz	r2, 8009832 <_dtoa_r+0xa62>
 80097f0:	4601      	mov	r1, r0
 80097f2:	ee18 0a10 	vmov	r0, s16
 80097f6:	f000 fd99 	bl	800a32c <__mcmp>
 80097fa:	4602      	mov	r2, r0
 80097fc:	4629      	mov	r1, r5
 80097fe:	4620      	mov	r0, r4
 8009800:	9207      	str	r2, [sp, #28]
 8009802:	f000 fb51 	bl	8009ea8 <_Bfree>
 8009806:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800980a:	ea43 0102 	orr.w	r1, r3, r2
 800980e:	9b04      	ldr	r3, [sp, #16]
 8009810:	430b      	orrs	r3, r1
 8009812:	464d      	mov	r5, r9
 8009814:	d10f      	bne.n	8009836 <_dtoa_r+0xa66>
 8009816:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800981a:	d02a      	beq.n	8009872 <_dtoa_r+0xaa2>
 800981c:	9b03      	ldr	r3, [sp, #12]
 800981e:	2b00      	cmp	r3, #0
 8009820:	dd02      	ble.n	8009828 <_dtoa_r+0xa58>
 8009822:	9b02      	ldr	r3, [sp, #8]
 8009824:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009828:	f88b a000 	strb.w	sl, [fp]
 800982c:	e775      	b.n	800971a <_dtoa_r+0x94a>
 800982e:	4638      	mov	r0, r7
 8009830:	e7ba      	b.n	80097a8 <_dtoa_r+0x9d8>
 8009832:	2201      	movs	r2, #1
 8009834:	e7e2      	b.n	80097fc <_dtoa_r+0xa2c>
 8009836:	9b03      	ldr	r3, [sp, #12]
 8009838:	2b00      	cmp	r3, #0
 800983a:	db04      	blt.n	8009846 <_dtoa_r+0xa76>
 800983c:	9906      	ldr	r1, [sp, #24]
 800983e:	430b      	orrs	r3, r1
 8009840:	9904      	ldr	r1, [sp, #16]
 8009842:	430b      	orrs	r3, r1
 8009844:	d122      	bne.n	800988c <_dtoa_r+0xabc>
 8009846:	2a00      	cmp	r2, #0
 8009848:	ddee      	ble.n	8009828 <_dtoa_r+0xa58>
 800984a:	ee18 1a10 	vmov	r1, s16
 800984e:	2201      	movs	r2, #1
 8009850:	4620      	mov	r0, r4
 8009852:	f000 fcfb 	bl	800a24c <__lshift>
 8009856:	4631      	mov	r1, r6
 8009858:	ee08 0a10 	vmov	s16, r0
 800985c:	f000 fd66 	bl	800a32c <__mcmp>
 8009860:	2800      	cmp	r0, #0
 8009862:	dc03      	bgt.n	800986c <_dtoa_r+0xa9c>
 8009864:	d1e0      	bne.n	8009828 <_dtoa_r+0xa58>
 8009866:	f01a 0f01 	tst.w	sl, #1
 800986a:	d0dd      	beq.n	8009828 <_dtoa_r+0xa58>
 800986c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009870:	d1d7      	bne.n	8009822 <_dtoa_r+0xa52>
 8009872:	2339      	movs	r3, #57	; 0x39
 8009874:	f88b 3000 	strb.w	r3, [fp]
 8009878:	462b      	mov	r3, r5
 800987a:	461d      	mov	r5, r3
 800987c:	3b01      	subs	r3, #1
 800987e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009882:	2a39      	cmp	r2, #57	; 0x39
 8009884:	d071      	beq.n	800996a <_dtoa_r+0xb9a>
 8009886:	3201      	adds	r2, #1
 8009888:	701a      	strb	r2, [r3, #0]
 800988a:	e746      	b.n	800971a <_dtoa_r+0x94a>
 800988c:	2a00      	cmp	r2, #0
 800988e:	dd07      	ble.n	80098a0 <_dtoa_r+0xad0>
 8009890:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009894:	d0ed      	beq.n	8009872 <_dtoa_r+0xaa2>
 8009896:	f10a 0301 	add.w	r3, sl, #1
 800989a:	f88b 3000 	strb.w	r3, [fp]
 800989e:	e73c      	b.n	800971a <_dtoa_r+0x94a>
 80098a0:	9b05      	ldr	r3, [sp, #20]
 80098a2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80098a6:	4599      	cmp	r9, r3
 80098a8:	d047      	beq.n	800993a <_dtoa_r+0xb6a>
 80098aa:	ee18 1a10 	vmov	r1, s16
 80098ae:	2300      	movs	r3, #0
 80098b0:	220a      	movs	r2, #10
 80098b2:	4620      	mov	r0, r4
 80098b4:	f000 fb1a 	bl	8009eec <__multadd>
 80098b8:	45b8      	cmp	r8, r7
 80098ba:	ee08 0a10 	vmov	s16, r0
 80098be:	f04f 0300 	mov.w	r3, #0
 80098c2:	f04f 020a 	mov.w	r2, #10
 80098c6:	4641      	mov	r1, r8
 80098c8:	4620      	mov	r0, r4
 80098ca:	d106      	bne.n	80098da <_dtoa_r+0xb0a>
 80098cc:	f000 fb0e 	bl	8009eec <__multadd>
 80098d0:	4680      	mov	r8, r0
 80098d2:	4607      	mov	r7, r0
 80098d4:	f109 0901 	add.w	r9, r9, #1
 80098d8:	e772      	b.n	80097c0 <_dtoa_r+0x9f0>
 80098da:	f000 fb07 	bl	8009eec <__multadd>
 80098de:	4639      	mov	r1, r7
 80098e0:	4680      	mov	r8, r0
 80098e2:	2300      	movs	r3, #0
 80098e4:	220a      	movs	r2, #10
 80098e6:	4620      	mov	r0, r4
 80098e8:	f000 fb00 	bl	8009eec <__multadd>
 80098ec:	4607      	mov	r7, r0
 80098ee:	e7f1      	b.n	80098d4 <_dtoa_r+0xb04>
 80098f0:	9b03      	ldr	r3, [sp, #12]
 80098f2:	9302      	str	r3, [sp, #8]
 80098f4:	9d01      	ldr	r5, [sp, #4]
 80098f6:	ee18 0a10 	vmov	r0, s16
 80098fa:	4631      	mov	r1, r6
 80098fc:	f7ff f9da 	bl	8008cb4 <quorem>
 8009900:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009904:	9b01      	ldr	r3, [sp, #4]
 8009906:	f805 ab01 	strb.w	sl, [r5], #1
 800990a:	1aea      	subs	r2, r5, r3
 800990c:	9b02      	ldr	r3, [sp, #8]
 800990e:	4293      	cmp	r3, r2
 8009910:	dd09      	ble.n	8009926 <_dtoa_r+0xb56>
 8009912:	ee18 1a10 	vmov	r1, s16
 8009916:	2300      	movs	r3, #0
 8009918:	220a      	movs	r2, #10
 800991a:	4620      	mov	r0, r4
 800991c:	f000 fae6 	bl	8009eec <__multadd>
 8009920:	ee08 0a10 	vmov	s16, r0
 8009924:	e7e7      	b.n	80098f6 <_dtoa_r+0xb26>
 8009926:	9b02      	ldr	r3, [sp, #8]
 8009928:	2b00      	cmp	r3, #0
 800992a:	bfc8      	it	gt
 800992c:	461d      	movgt	r5, r3
 800992e:	9b01      	ldr	r3, [sp, #4]
 8009930:	bfd8      	it	le
 8009932:	2501      	movle	r5, #1
 8009934:	441d      	add	r5, r3
 8009936:	f04f 0800 	mov.w	r8, #0
 800993a:	ee18 1a10 	vmov	r1, s16
 800993e:	2201      	movs	r2, #1
 8009940:	4620      	mov	r0, r4
 8009942:	f000 fc83 	bl	800a24c <__lshift>
 8009946:	4631      	mov	r1, r6
 8009948:	ee08 0a10 	vmov	s16, r0
 800994c:	f000 fcee 	bl	800a32c <__mcmp>
 8009950:	2800      	cmp	r0, #0
 8009952:	dc91      	bgt.n	8009878 <_dtoa_r+0xaa8>
 8009954:	d102      	bne.n	800995c <_dtoa_r+0xb8c>
 8009956:	f01a 0f01 	tst.w	sl, #1
 800995a:	d18d      	bne.n	8009878 <_dtoa_r+0xaa8>
 800995c:	462b      	mov	r3, r5
 800995e:	461d      	mov	r5, r3
 8009960:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009964:	2a30      	cmp	r2, #48	; 0x30
 8009966:	d0fa      	beq.n	800995e <_dtoa_r+0xb8e>
 8009968:	e6d7      	b.n	800971a <_dtoa_r+0x94a>
 800996a:	9a01      	ldr	r2, [sp, #4]
 800996c:	429a      	cmp	r2, r3
 800996e:	d184      	bne.n	800987a <_dtoa_r+0xaaa>
 8009970:	9b00      	ldr	r3, [sp, #0]
 8009972:	3301      	adds	r3, #1
 8009974:	9300      	str	r3, [sp, #0]
 8009976:	2331      	movs	r3, #49	; 0x31
 8009978:	7013      	strb	r3, [r2, #0]
 800997a:	e6ce      	b.n	800971a <_dtoa_r+0x94a>
 800997c:	4b09      	ldr	r3, [pc, #36]	; (80099a4 <_dtoa_r+0xbd4>)
 800997e:	f7ff ba95 	b.w	8008eac <_dtoa_r+0xdc>
 8009982:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009984:	2b00      	cmp	r3, #0
 8009986:	f47f aa6e 	bne.w	8008e66 <_dtoa_r+0x96>
 800998a:	4b07      	ldr	r3, [pc, #28]	; (80099a8 <_dtoa_r+0xbd8>)
 800998c:	f7ff ba8e 	b.w	8008eac <_dtoa_r+0xdc>
 8009990:	9b02      	ldr	r3, [sp, #8]
 8009992:	2b00      	cmp	r3, #0
 8009994:	dcae      	bgt.n	80098f4 <_dtoa_r+0xb24>
 8009996:	9b06      	ldr	r3, [sp, #24]
 8009998:	2b02      	cmp	r3, #2
 800999a:	f73f aea8 	bgt.w	80096ee <_dtoa_r+0x91e>
 800999e:	e7a9      	b.n	80098f4 <_dtoa_r+0xb24>
 80099a0:	0800b41b 	.word	0x0800b41b
 80099a4:	0800b378 	.word	0x0800b378
 80099a8:	0800b39c 	.word	0x0800b39c

080099ac <__sflush_r>:
 80099ac:	898a      	ldrh	r2, [r1, #12]
 80099ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099b2:	4605      	mov	r5, r0
 80099b4:	0710      	lsls	r0, r2, #28
 80099b6:	460c      	mov	r4, r1
 80099b8:	d458      	bmi.n	8009a6c <__sflush_r+0xc0>
 80099ba:	684b      	ldr	r3, [r1, #4]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	dc05      	bgt.n	80099cc <__sflush_r+0x20>
 80099c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	dc02      	bgt.n	80099cc <__sflush_r+0x20>
 80099c6:	2000      	movs	r0, #0
 80099c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099ce:	2e00      	cmp	r6, #0
 80099d0:	d0f9      	beq.n	80099c6 <__sflush_r+0x1a>
 80099d2:	2300      	movs	r3, #0
 80099d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80099d8:	682f      	ldr	r7, [r5, #0]
 80099da:	602b      	str	r3, [r5, #0]
 80099dc:	d032      	beq.n	8009a44 <__sflush_r+0x98>
 80099de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80099e0:	89a3      	ldrh	r3, [r4, #12]
 80099e2:	075a      	lsls	r2, r3, #29
 80099e4:	d505      	bpl.n	80099f2 <__sflush_r+0x46>
 80099e6:	6863      	ldr	r3, [r4, #4]
 80099e8:	1ac0      	subs	r0, r0, r3
 80099ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099ec:	b10b      	cbz	r3, 80099f2 <__sflush_r+0x46>
 80099ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80099f0:	1ac0      	subs	r0, r0, r3
 80099f2:	2300      	movs	r3, #0
 80099f4:	4602      	mov	r2, r0
 80099f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099f8:	6a21      	ldr	r1, [r4, #32]
 80099fa:	4628      	mov	r0, r5
 80099fc:	47b0      	blx	r6
 80099fe:	1c43      	adds	r3, r0, #1
 8009a00:	89a3      	ldrh	r3, [r4, #12]
 8009a02:	d106      	bne.n	8009a12 <__sflush_r+0x66>
 8009a04:	6829      	ldr	r1, [r5, #0]
 8009a06:	291d      	cmp	r1, #29
 8009a08:	d82c      	bhi.n	8009a64 <__sflush_r+0xb8>
 8009a0a:	4a2a      	ldr	r2, [pc, #168]	; (8009ab4 <__sflush_r+0x108>)
 8009a0c:	40ca      	lsrs	r2, r1
 8009a0e:	07d6      	lsls	r6, r2, #31
 8009a10:	d528      	bpl.n	8009a64 <__sflush_r+0xb8>
 8009a12:	2200      	movs	r2, #0
 8009a14:	6062      	str	r2, [r4, #4]
 8009a16:	04d9      	lsls	r1, r3, #19
 8009a18:	6922      	ldr	r2, [r4, #16]
 8009a1a:	6022      	str	r2, [r4, #0]
 8009a1c:	d504      	bpl.n	8009a28 <__sflush_r+0x7c>
 8009a1e:	1c42      	adds	r2, r0, #1
 8009a20:	d101      	bne.n	8009a26 <__sflush_r+0x7a>
 8009a22:	682b      	ldr	r3, [r5, #0]
 8009a24:	b903      	cbnz	r3, 8009a28 <__sflush_r+0x7c>
 8009a26:	6560      	str	r0, [r4, #84]	; 0x54
 8009a28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a2a:	602f      	str	r7, [r5, #0]
 8009a2c:	2900      	cmp	r1, #0
 8009a2e:	d0ca      	beq.n	80099c6 <__sflush_r+0x1a>
 8009a30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a34:	4299      	cmp	r1, r3
 8009a36:	d002      	beq.n	8009a3e <__sflush_r+0x92>
 8009a38:	4628      	mov	r0, r5
 8009a3a:	f7fe fa93 	bl	8007f64 <_free_r>
 8009a3e:	2000      	movs	r0, #0
 8009a40:	6360      	str	r0, [r4, #52]	; 0x34
 8009a42:	e7c1      	b.n	80099c8 <__sflush_r+0x1c>
 8009a44:	6a21      	ldr	r1, [r4, #32]
 8009a46:	2301      	movs	r3, #1
 8009a48:	4628      	mov	r0, r5
 8009a4a:	47b0      	blx	r6
 8009a4c:	1c41      	adds	r1, r0, #1
 8009a4e:	d1c7      	bne.n	80099e0 <__sflush_r+0x34>
 8009a50:	682b      	ldr	r3, [r5, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d0c4      	beq.n	80099e0 <__sflush_r+0x34>
 8009a56:	2b1d      	cmp	r3, #29
 8009a58:	d001      	beq.n	8009a5e <__sflush_r+0xb2>
 8009a5a:	2b16      	cmp	r3, #22
 8009a5c:	d101      	bne.n	8009a62 <__sflush_r+0xb6>
 8009a5e:	602f      	str	r7, [r5, #0]
 8009a60:	e7b1      	b.n	80099c6 <__sflush_r+0x1a>
 8009a62:	89a3      	ldrh	r3, [r4, #12]
 8009a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a68:	81a3      	strh	r3, [r4, #12]
 8009a6a:	e7ad      	b.n	80099c8 <__sflush_r+0x1c>
 8009a6c:	690f      	ldr	r7, [r1, #16]
 8009a6e:	2f00      	cmp	r7, #0
 8009a70:	d0a9      	beq.n	80099c6 <__sflush_r+0x1a>
 8009a72:	0793      	lsls	r3, r2, #30
 8009a74:	680e      	ldr	r6, [r1, #0]
 8009a76:	bf08      	it	eq
 8009a78:	694b      	ldreq	r3, [r1, #20]
 8009a7a:	600f      	str	r7, [r1, #0]
 8009a7c:	bf18      	it	ne
 8009a7e:	2300      	movne	r3, #0
 8009a80:	eba6 0807 	sub.w	r8, r6, r7
 8009a84:	608b      	str	r3, [r1, #8]
 8009a86:	f1b8 0f00 	cmp.w	r8, #0
 8009a8a:	dd9c      	ble.n	80099c6 <__sflush_r+0x1a>
 8009a8c:	6a21      	ldr	r1, [r4, #32]
 8009a8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009a90:	4643      	mov	r3, r8
 8009a92:	463a      	mov	r2, r7
 8009a94:	4628      	mov	r0, r5
 8009a96:	47b0      	blx	r6
 8009a98:	2800      	cmp	r0, #0
 8009a9a:	dc06      	bgt.n	8009aaa <__sflush_r+0xfe>
 8009a9c:	89a3      	ldrh	r3, [r4, #12]
 8009a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009aa2:	81a3      	strh	r3, [r4, #12]
 8009aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa8:	e78e      	b.n	80099c8 <__sflush_r+0x1c>
 8009aaa:	4407      	add	r7, r0
 8009aac:	eba8 0800 	sub.w	r8, r8, r0
 8009ab0:	e7e9      	b.n	8009a86 <__sflush_r+0xda>
 8009ab2:	bf00      	nop
 8009ab4:	20400001 	.word	0x20400001

08009ab8 <_fflush_r>:
 8009ab8:	b538      	push	{r3, r4, r5, lr}
 8009aba:	690b      	ldr	r3, [r1, #16]
 8009abc:	4605      	mov	r5, r0
 8009abe:	460c      	mov	r4, r1
 8009ac0:	b913      	cbnz	r3, 8009ac8 <_fflush_r+0x10>
 8009ac2:	2500      	movs	r5, #0
 8009ac4:	4628      	mov	r0, r5
 8009ac6:	bd38      	pop	{r3, r4, r5, pc}
 8009ac8:	b118      	cbz	r0, 8009ad2 <_fflush_r+0x1a>
 8009aca:	6983      	ldr	r3, [r0, #24]
 8009acc:	b90b      	cbnz	r3, 8009ad2 <_fflush_r+0x1a>
 8009ace:	f000 f887 	bl	8009be0 <__sinit>
 8009ad2:	4b14      	ldr	r3, [pc, #80]	; (8009b24 <_fflush_r+0x6c>)
 8009ad4:	429c      	cmp	r4, r3
 8009ad6:	d11b      	bne.n	8009b10 <_fflush_r+0x58>
 8009ad8:	686c      	ldr	r4, [r5, #4]
 8009ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d0ef      	beq.n	8009ac2 <_fflush_r+0xa>
 8009ae2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ae4:	07d0      	lsls	r0, r2, #31
 8009ae6:	d404      	bmi.n	8009af2 <_fflush_r+0x3a>
 8009ae8:	0599      	lsls	r1, r3, #22
 8009aea:	d402      	bmi.n	8009af2 <_fflush_r+0x3a>
 8009aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009aee:	f000 f91a 	bl	8009d26 <__retarget_lock_acquire_recursive>
 8009af2:	4628      	mov	r0, r5
 8009af4:	4621      	mov	r1, r4
 8009af6:	f7ff ff59 	bl	80099ac <__sflush_r>
 8009afa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009afc:	07da      	lsls	r2, r3, #31
 8009afe:	4605      	mov	r5, r0
 8009b00:	d4e0      	bmi.n	8009ac4 <_fflush_r+0xc>
 8009b02:	89a3      	ldrh	r3, [r4, #12]
 8009b04:	059b      	lsls	r3, r3, #22
 8009b06:	d4dd      	bmi.n	8009ac4 <_fflush_r+0xc>
 8009b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b0a:	f000 f90d 	bl	8009d28 <__retarget_lock_release_recursive>
 8009b0e:	e7d9      	b.n	8009ac4 <_fflush_r+0xc>
 8009b10:	4b05      	ldr	r3, [pc, #20]	; (8009b28 <_fflush_r+0x70>)
 8009b12:	429c      	cmp	r4, r3
 8009b14:	d101      	bne.n	8009b1a <_fflush_r+0x62>
 8009b16:	68ac      	ldr	r4, [r5, #8]
 8009b18:	e7df      	b.n	8009ada <_fflush_r+0x22>
 8009b1a:	4b04      	ldr	r3, [pc, #16]	; (8009b2c <_fflush_r+0x74>)
 8009b1c:	429c      	cmp	r4, r3
 8009b1e:	bf08      	it	eq
 8009b20:	68ec      	ldreq	r4, [r5, #12]
 8009b22:	e7da      	b.n	8009ada <_fflush_r+0x22>
 8009b24:	0800b44c 	.word	0x0800b44c
 8009b28:	0800b46c 	.word	0x0800b46c
 8009b2c:	0800b42c 	.word	0x0800b42c

08009b30 <std>:
 8009b30:	2300      	movs	r3, #0
 8009b32:	b510      	push	{r4, lr}
 8009b34:	4604      	mov	r4, r0
 8009b36:	e9c0 3300 	strd	r3, r3, [r0]
 8009b3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b3e:	6083      	str	r3, [r0, #8]
 8009b40:	8181      	strh	r1, [r0, #12]
 8009b42:	6643      	str	r3, [r0, #100]	; 0x64
 8009b44:	81c2      	strh	r2, [r0, #14]
 8009b46:	6183      	str	r3, [r0, #24]
 8009b48:	4619      	mov	r1, r3
 8009b4a:	2208      	movs	r2, #8
 8009b4c:	305c      	adds	r0, #92	; 0x5c
 8009b4e:	f7fe fa01 	bl	8007f54 <memset>
 8009b52:	4b05      	ldr	r3, [pc, #20]	; (8009b68 <std+0x38>)
 8009b54:	6263      	str	r3, [r4, #36]	; 0x24
 8009b56:	4b05      	ldr	r3, [pc, #20]	; (8009b6c <std+0x3c>)
 8009b58:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b5a:	4b05      	ldr	r3, [pc, #20]	; (8009b70 <std+0x40>)
 8009b5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b5e:	4b05      	ldr	r3, [pc, #20]	; (8009b74 <std+0x44>)
 8009b60:	6224      	str	r4, [r4, #32]
 8009b62:	6323      	str	r3, [r4, #48]	; 0x30
 8009b64:	bd10      	pop	{r4, pc}
 8009b66:	bf00      	nop
 8009b68:	0800a811 	.word	0x0800a811
 8009b6c:	0800a833 	.word	0x0800a833
 8009b70:	0800a86b 	.word	0x0800a86b
 8009b74:	0800a88f 	.word	0x0800a88f

08009b78 <_cleanup_r>:
 8009b78:	4901      	ldr	r1, [pc, #4]	; (8009b80 <_cleanup_r+0x8>)
 8009b7a:	f000 b8af 	b.w	8009cdc <_fwalk_reent>
 8009b7e:	bf00      	nop
 8009b80:	08009ab9 	.word	0x08009ab9

08009b84 <__sfmoreglue>:
 8009b84:	b570      	push	{r4, r5, r6, lr}
 8009b86:	2268      	movs	r2, #104	; 0x68
 8009b88:	1e4d      	subs	r5, r1, #1
 8009b8a:	4355      	muls	r5, r2
 8009b8c:	460e      	mov	r6, r1
 8009b8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009b92:	f7fe fa53 	bl	800803c <_malloc_r>
 8009b96:	4604      	mov	r4, r0
 8009b98:	b140      	cbz	r0, 8009bac <__sfmoreglue+0x28>
 8009b9a:	2100      	movs	r1, #0
 8009b9c:	e9c0 1600 	strd	r1, r6, [r0]
 8009ba0:	300c      	adds	r0, #12
 8009ba2:	60a0      	str	r0, [r4, #8]
 8009ba4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ba8:	f7fe f9d4 	bl	8007f54 <memset>
 8009bac:	4620      	mov	r0, r4
 8009bae:	bd70      	pop	{r4, r5, r6, pc}

08009bb0 <__sfp_lock_acquire>:
 8009bb0:	4801      	ldr	r0, [pc, #4]	; (8009bb8 <__sfp_lock_acquire+0x8>)
 8009bb2:	f000 b8b8 	b.w	8009d26 <__retarget_lock_acquire_recursive>
 8009bb6:	bf00      	nop
 8009bb8:	200004c9 	.word	0x200004c9

08009bbc <__sfp_lock_release>:
 8009bbc:	4801      	ldr	r0, [pc, #4]	; (8009bc4 <__sfp_lock_release+0x8>)
 8009bbe:	f000 b8b3 	b.w	8009d28 <__retarget_lock_release_recursive>
 8009bc2:	bf00      	nop
 8009bc4:	200004c9 	.word	0x200004c9

08009bc8 <__sinit_lock_acquire>:
 8009bc8:	4801      	ldr	r0, [pc, #4]	; (8009bd0 <__sinit_lock_acquire+0x8>)
 8009bca:	f000 b8ac 	b.w	8009d26 <__retarget_lock_acquire_recursive>
 8009bce:	bf00      	nop
 8009bd0:	200004ca 	.word	0x200004ca

08009bd4 <__sinit_lock_release>:
 8009bd4:	4801      	ldr	r0, [pc, #4]	; (8009bdc <__sinit_lock_release+0x8>)
 8009bd6:	f000 b8a7 	b.w	8009d28 <__retarget_lock_release_recursive>
 8009bda:	bf00      	nop
 8009bdc:	200004ca 	.word	0x200004ca

08009be0 <__sinit>:
 8009be0:	b510      	push	{r4, lr}
 8009be2:	4604      	mov	r4, r0
 8009be4:	f7ff fff0 	bl	8009bc8 <__sinit_lock_acquire>
 8009be8:	69a3      	ldr	r3, [r4, #24]
 8009bea:	b11b      	cbz	r3, 8009bf4 <__sinit+0x14>
 8009bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bf0:	f7ff bff0 	b.w	8009bd4 <__sinit_lock_release>
 8009bf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009bf8:	6523      	str	r3, [r4, #80]	; 0x50
 8009bfa:	4b13      	ldr	r3, [pc, #76]	; (8009c48 <__sinit+0x68>)
 8009bfc:	4a13      	ldr	r2, [pc, #76]	; (8009c4c <__sinit+0x6c>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	62a2      	str	r2, [r4, #40]	; 0x28
 8009c02:	42a3      	cmp	r3, r4
 8009c04:	bf04      	itt	eq
 8009c06:	2301      	moveq	r3, #1
 8009c08:	61a3      	streq	r3, [r4, #24]
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	f000 f820 	bl	8009c50 <__sfp>
 8009c10:	6060      	str	r0, [r4, #4]
 8009c12:	4620      	mov	r0, r4
 8009c14:	f000 f81c 	bl	8009c50 <__sfp>
 8009c18:	60a0      	str	r0, [r4, #8]
 8009c1a:	4620      	mov	r0, r4
 8009c1c:	f000 f818 	bl	8009c50 <__sfp>
 8009c20:	2200      	movs	r2, #0
 8009c22:	60e0      	str	r0, [r4, #12]
 8009c24:	2104      	movs	r1, #4
 8009c26:	6860      	ldr	r0, [r4, #4]
 8009c28:	f7ff ff82 	bl	8009b30 <std>
 8009c2c:	68a0      	ldr	r0, [r4, #8]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	2109      	movs	r1, #9
 8009c32:	f7ff ff7d 	bl	8009b30 <std>
 8009c36:	68e0      	ldr	r0, [r4, #12]
 8009c38:	2202      	movs	r2, #2
 8009c3a:	2112      	movs	r1, #18
 8009c3c:	f7ff ff78 	bl	8009b30 <std>
 8009c40:	2301      	movs	r3, #1
 8009c42:	61a3      	str	r3, [r4, #24]
 8009c44:	e7d2      	b.n	8009bec <__sinit+0xc>
 8009c46:	bf00      	nop
 8009c48:	0800b364 	.word	0x0800b364
 8009c4c:	08009b79 	.word	0x08009b79

08009c50 <__sfp>:
 8009c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c52:	4607      	mov	r7, r0
 8009c54:	f7ff ffac 	bl	8009bb0 <__sfp_lock_acquire>
 8009c58:	4b1e      	ldr	r3, [pc, #120]	; (8009cd4 <__sfp+0x84>)
 8009c5a:	681e      	ldr	r6, [r3, #0]
 8009c5c:	69b3      	ldr	r3, [r6, #24]
 8009c5e:	b913      	cbnz	r3, 8009c66 <__sfp+0x16>
 8009c60:	4630      	mov	r0, r6
 8009c62:	f7ff ffbd 	bl	8009be0 <__sinit>
 8009c66:	3648      	adds	r6, #72	; 0x48
 8009c68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009c6c:	3b01      	subs	r3, #1
 8009c6e:	d503      	bpl.n	8009c78 <__sfp+0x28>
 8009c70:	6833      	ldr	r3, [r6, #0]
 8009c72:	b30b      	cbz	r3, 8009cb8 <__sfp+0x68>
 8009c74:	6836      	ldr	r6, [r6, #0]
 8009c76:	e7f7      	b.n	8009c68 <__sfp+0x18>
 8009c78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009c7c:	b9d5      	cbnz	r5, 8009cb4 <__sfp+0x64>
 8009c7e:	4b16      	ldr	r3, [pc, #88]	; (8009cd8 <__sfp+0x88>)
 8009c80:	60e3      	str	r3, [r4, #12]
 8009c82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c86:	6665      	str	r5, [r4, #100]	; 0x64
 8009c88:	f000 f84c 	bl	8009d24 <__retarget_lock_init_recursive>
 8009c8c:	f7ff ff96 	bl	8009bbc <__sfp_lock_release>
 8009c90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009c94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009c98:	6025      	str	r5, [r4, #0]
 8009c9a:	61a5      	str	r5, [r4, #24]
 8009c9c:	2208      	movs	r2, #8
 8009c9e:	4629      	mov	r1, r5
 8009ca0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ca4:	f7fe f956 	bl	8007f54 <memset>
 8009ca8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009cac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cb4:	3468      	adds	r4, #104	; 0x68
 8009cb6:	e7d9      	b.n	8009c6c <__sfp+0x1c>
 8009cb8:	2104      	movs	r1, #4
 8009cba:	4638      	mov	r0, r7
 8009cbc:	f7ff ff62 	bl	8009b84 <__sfmoreglue>
 8009cc0:	4604      	mov	r4, r0
 8009cc2:	6030      	str	r0, [r6, #0]
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	d1d5      	bne.n	8009c74 <__sfp+0x24>
 8009cc8:	f7ff ff78 	bl	8009bbc <__sfp_lock_release>
 8009ccc:	230c      	movs	r3, #12
 8009cce:	603b      	str	r3, [r7, #0]
 8009cd0:	e7ee      	b.n	8009cb0 <__sfp+0x60>
 8009cd2:	bf00      	nop
 8009cd4:	0800b364 	.word	0x0800b364
 8009cd8:	ffff0001 	.word	0xffff0001

08009cdc <_fwalk_reent>:
 8009cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ce0:	4606      	mov	r6, r0
 8009ce2:	4688      	mov	r8, r1
 8009ce4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009ce8:	2700      	movs	r7, #0
 8009cea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009cee:	f1b9 0901 	subs.w	r9, r9, #1
 8009cf2:	d505      	bpl.n	8009d00 <_fwalk_reent+0x24>
 8009cf4:	6824      	ldr	r4, [r4, #0]
 8009cf6:	2c00      	cmp	r4, #0
 8009cf8:	d1f7      	bne.n	8009cea <_fwalk_reent+0xe>
 8009cfa:	4638      	mov	r0, r7
 8009cfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d00:	89ab      	ldrh	r3, [r5, #12]
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d907      	bls.n	8009d16 <_fwalk_reent+0x3a>
 8009d06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d0a:	3301      	adds	r3, #1
 8009d0c:	d003      	beq.n	8009d16 <_fwalk_reent+0x3a>
 8009d0e:	4629      	mov	r1, r5
 8009d10:	4630      	mov	r0, r6
 8009d12:	47c0      	blx	r8
 8009d14:	4307      	orrs	r7, r0
 8009d16:	3568      	adds	r5, #104	; 0x68
 8009d18:	e7e9      	b.n	8009cee <_fwalk_reent+0x12>
	...

08009d1c <_localeconv_r>:
 8009d1c:	4800      	ldr	r0, [pc, #0]	; (8009d20 <_localeconv_r+0x4>)
 8009d1e:	4770      	bx	lr
 8009d20:	20000168 	.word	0x20000168

08009d24 <__retarget_lock_init_recursive>:
 8009d24:	4770      	bx	lr

08009d26 <__retarget_lock_acquire_recursive>:
 8009d26:	4770      	bx	lr

08009d28 <__retarget_lock_release_recursive>:
 8009d28:	4770      	bx	lr

08009d2a <__swhatbuf_r>:
 8009d2a:	b570      	push	{r4, r5, r6, lr}
 8009d2c:	460e      	mov	r6, r1
 8009d2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d32:	2900      	cmp	r1, #0
 8009d34:	b096      	sub	sp, #88	; 0x58
 8009d36:	4614      	mov	r4, r2
 8009d38:	461d      	mov	r5, r3
 8009d3a:	da08      	bge.n	8009d4e <__swhatbuf_r+0x24>
 8009d3c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009d40:	2200      	movs	r2, #0
 8009d42:	602a      	str	r2, [r5, #0]
 8009d44:	061a      	lsls	r2, r3, #24
 8009d46:	d410      	bmi.n	8009d6a <__swhatbuf_r+0x40>
 8009d48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d4c:	e00e      	b.n	8009d6c <__swhatbuf_r+0x42>
 8009d4e:	466a      	mov	r2, sp
 8009d50:	f000 fdf4 	bl	800a93c <_fstat_r>
 8009d54:	2800      	cmp	r0, #0
 8009d56:	dbf1      	blt.n	8009d3c <__swhatbuf_r+0x12>
 8009d58:	9a01      	ldr	r2, [sp, #4]
 8009d5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d62:	425a      	negs	r2, r3
 8009d64:	415a      	adcs	r2, r3
 8009d66:	602a      	str	r2, [r5, #0]
 8009d68:	e7ee      	b.n	8009d48 <__swhatbuf_r+0x1e>
 8009d6a:	2340      	movs	r3, #64	; 0x40
 8009d6c:	2000      	movs	r0, #0
 8009d6e:	6023      	str	r3, [r4, #0]
 8009d70:	b016      	add	sp, #88	; 0x58
 8009d72:	bd70      	pop	{r4, r5, r6, pc}

08009d74 <__smakebuf_r>:
 8009d74:	898b      	ldrh	r3, [r1, #12]
 8009d76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d78:	079d      	lsls	r5, r3, #30
 8009d7a:	4606      	mov	r6, r0
 8009d7c:	460c      	mov	r4, r1
 8009d7e:	d507      	bpl.n	8009d90 <__smakebuf_r+0x1c>
 8009d80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d84:	6023      	str	r3, [r4, #0]
 8009d86:	6123      	str	r3, [r4, #16]
 8009d88:	2301      	movs	r3, #1
 8009d8a:	6163      	str	r3, [r4, #20]
 8009d8c:	b002      	add	sp, #8
 8009d8e:	bd70      	pop	{r4, r5, r6, pc}
 8009d90:	ab01      	add	r3, sp, #4
 8009d92:	466a      	mov	r2, sp
 8009d94:	f7ff ffc9 	bl	8009d2a <__swhatbuf_r>
 8009d98:	9900      	ldr	r1, [sp, #0]
 8009d9a:	4605      	mov	r5, r0
 8009d9c:	4630      	mov	r0, r6
 8009d9e:	f7fe f94d 	bl	800803c <_malloc_r>
 8009da2:	b948      	cbnz	r0, 8009db8 <__smakebuf_r+0x44>
 8009da4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009da8:	059a      	lsls	r2, r3, #22
 8009daa:	d4ef      	bmi.n	8009d8c <__smakebuf_r+0x18>
 8009dac:	f023 0303 	bic.w	r3, r3, #3
 8009db0:	f043 0302 	orr.w	r3, r3, #2
 8009db4:	81a3      	strh	r3, [r4, #12]
 8009db6:	e7e3      	b.n	8009d80 <__smakebuf_r+0xc>
 8009db8:	4b0d      	ldr	r3, [pc, #52]	; (8009df0 <__smakebuf_r+0x7c>)
 8009dba:	62b3      	str	r3, [r6, #40]	; 0x28
 8009dbc:	89a3      	ldrh	r3, [r4, #12]
 8009dbe:	6020      	str	r0, [r4, #0]
 8009dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dc4:	81a3      	strh	r3, [r4, #12]
 8009dc6:	9b00      	ldr	r3, [sp, #0]
 8009dc8:	6163      	str	r3, [r4, #20]
 8009dca:	9b01      	ldr	r3, [sp, #4]
 8009dcc:	6120      	str	r0, [r4, #16]
 8009dce:	b15b      	cbz	r3, 8009de8 <__smakebuf_r+0x74>
 8009dd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dd4:	4630      	mov	r0, r6
 8009dd6:	f000 fdc3 	bl	800a960 <_isatty_r>
 8009dda:	b128      	cbz	r0, 8009de8 <__smakebuf_r+0x74>
 8009ddc:	89a3      	ldrh	r3, [r4, #12]
 8009dde:	f023 0303 	bic.w	r3, r3, #3
 8009de2:	f043 0301 	orr.w	r3, r3, #1
 8009de6:	81a3      	strh	r3, [r4, #12]
 8009de8:	89a0      	ldrh	r0, [r4, #12]
 8009dea:	4305      	orrs	r5, r0
 8009dec:	81a5      	strh	r5, [r4, #12]
 8009dee:	e7cd      	b.n	8009d8c <__smakebuf_r+0x18>
 8009df0:	08009b79 	.word	0x08009b79

08009df4 <memcpy>:
 8009df4:	440a      	add	r2, r1
 8009df6:	4291      	cmp	r1, r2
 8009df8:	f100 33ff 	add.w	r3, r0, #4294967295
 8009dfc:	d100      	bne.n	8009e00 <memcpy+0xc>
 8009dfe:	4770      	bx	lr
 8009e00:	b510      	push	{r4, lr}
 8009e02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e0a:	4291      	cmp	r1, r2
 8009e0c:	d1f9      	bne.n	8009e02 <memcpy+0xe>
 8009e0e:	bd10      	pop	{r4, pc}

08009e10 <__malloc_lock>:
 8009e10:	4801      	ldr	r0, [pc, #4]	; (8009e18 <__malloc_lock+0x8>)
 8009e12:	f7ff bf88 	b.w	8009d26 <__retarget_lock_acquire_recursive>
 8009e16:	bf00      	nop
 8009e18:	200004c8 	.word	0x200004c8

08009e1c <__malloc_unlock>:
 8009e1c:	4801      	ldr	r0, [pc, #4]	; (8009e24 <__malloc_unlock+0x8>)
 8009e1e:	f7ff bf83 	b.w	8009d28 <__retarget_lock_release_recursive>
 8009e22:	bf00      	nop
 8009e24:	200004c8 	.word	0x200004c8

08009e28 <_Balloc>:
 8009e28:	b570      	push	{r4, r5, r6, lr}
 8009e2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009e2c:	4604      	mov	r4, r0
 8009e2e:	460d      	mov	r5, r1
 8009e30:	b976      	cbnz	r6, 8009e50 <_Balloc+0x28>
 8009e32:	2010      	movs	r0, #16
 8009e34:	f7fe f886 	bl	8007f44 <malloc>
 8009e38:	4602      	mov	r2, r0
 8009e3a:	6260      	str	r0, [r4, #36]	; 0x24
 8009e3c:	b920      	cbnz	r0, 8009e48 <_Balloc+0x20>
 8009e3e:	4b18      	ldr	r3, [pc, #96]	; (8009ea0 <_Balloc+0x78>)
 8009e40:	4818      	ldr	r0, [pc, #96]	; (8009ea4 <_Balloc+0x7c>)
 8009e42:	2166      	movs	r1, #102	; 0x66
 8009e44:	f000 fd3a 	bl	800a8bc <__assert_func>
 8009e48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e4c:	6006      	str	r6, [r0, #0]
 8009e4e:	60c6      	str	r6, [r0, #12]
 8009e50:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009e52:	68f3      	ldr	r3, [r6, #12]
 8009e54:	b183      	cbz	r3, 8009e78 <_Balloc+0x50>
 8009e56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e58:	68db      	ldr	r3, [r3, #12]
 8009e5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009e5e:	b9b8      	cbnz	r0, 8009e90 <_Balloc+0x68>
 8009e60:	2101      	movs	r1, #1
 8009e62:	fa01 f605 	lsl.w	r6, r1, r5
 8009e66:	1d72      	adds	r2, r6, #5
 8009e68:	0092      	lsls	r2, r2, #2
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	f000 fb60 	bl	800a530 <_calloc_r>
 8009e70:	b160      	cbz	r0, 8009e8c <_Balloc+0x64>
 8009e72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009e76:	e00e      	b.n	8009e96 <_Balloc+0x6e>
 8009e78:	2221      	movs	r2, #33	; 0x21
 8009e7a:	2104      	movs	r1, #4
 8009e7c:	4620      	mov	r0, r4
 8009e7e:	f000 fb57 	bl	800a530 <_calloc_r>
 8009e82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e84:	60f0      	str	r0, [r6, #12]
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d1e4      	bne.n	8009e56 <_Balloc+0x2e>
 8009e8c:	2000      	movs	r0, #0
 8009e8e:	bd70      	pop	{r4, r5, r6, pc}
 8009e90:	6802      	ldr	r2, [r0, #0]
 8009e92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009e96:	2300      	movs	r3, #0
 8009e98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009e9c:	e7f7      	b.n	8009e8e <_Balloc+0x66>
 8009e9e:	bf00      	nop
 8009ea0:	0800b3a9 	.word	0x0800b3a9
 8009ea4:	0800b48c 	.word	0x0800b48c

08009ea8 <_Bfree>:
 8009ea8:	b570      	push	{r4, r5, r6, lr}
 8009eaa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009eac:	4605      	mov	r5, r0
 8009eae:	460c      	mov	r4, r1
 8009eb0:	b976      	cbnz	r6, 8009ed0 <_Bfree+0x28>
 8009eb2:	2010      	movs	r0, #16
 8009eb4:	f7fe f846 	bl	8007f44 <malloc>
 8009eb8:	4602      	mov	r2, r0
 8009eba:	6268      	str	r0, [r5, #36]	; 0x24
 8009ebc:	b920      	cbnz	r0, 8009ec8 <_Bfree+0x20>
 8009ebe:	4b09      	ldr	r3, [pc, #36]	; (8009ee4 <_Bfree+0x3c>)
 8009ec0:	4809      	ldr	r0, [pc, #36]	; (8009ee8 <_Bfree+0x40>)
 8009ec2:	218a      	movs	r1, #138	; 0x8a
 8009ec4:	f000 fcfa 	bl	800a8bc <__assert_func>
 8009ec8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ecc:	6006      	str	r6, [r0, #0]
 8009ece:	60c6      	str	r6, [r0, #12]
 8009ed0:	b13c      	cbz	r4, 8009ee2 <_Bfree+0x3a>
 8009ed2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009ed4:	6862      	ldr	r2, [r4, #4]
 8009ed6:	68db      	ldr	r3, [r3, #12]
 8009ed8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009edc:	6021      	str	r1, [r4, #0]
 8009ede:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009ee2:	bd70      	pop	{r4, r5, r6, pc}
 8009ee4:	0800b3a9 	.word	0x0800b3a9
 8009ee8:	0800b48c 	.word	0x0800b48c

08009eec <__multadd>:
 8009eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ef0:	690d      	ldr	r5, [r1, #16]
 8009ef2:	4607      	mov	r7, r0
 8009ef4:	460c      	mov	r4, r1
 8009ef6:	461e      	mov	r6, r3
 8009ef8:	f101 0c14 	add.w	ip, r1, #20
 8009efc:	2000      	movs	r0, #0
 8009efe:	f8dc 3000 	ldr.w	r3, [ip]
 8009f02:	b299      	uxth	r1, r3
 8009f04:	fb02 6101 	mla	r1, r2, r1, r6
 8009f08:	0c1e      	lsrs	r6, r3, #16
 8009f0a:	0c0b      	lsrs	r3, r1, #16
 8009f0c:	fb02 3306 	mla	r3, r2, r6, r3
 8009f10:	b289      	uxth	r1, r1
 8009f12:	3001      	adds	r0, #1
 8009f14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009f18:	4285      	cmp	r5, r0
 8009f1a:	f84c 1b04 	str.w	r1, [ip], #4
 8009f1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009f22:	dcec      	bgt.n	8009efe <__multadd+0x12>
 8009f24:	b30e      	cbz	r6, 8009f6a <__multadd+0x7e>
 8009f26:	68a3      	ldr	r3, [r4, #8]
 8009f28:	42ab      	cmp	r3, r5
 8009f2a:	dc19      	bgt.n	8009f60 <__multadd+0x74>
 8009f2c:	6861      	ldr	r1, [r4, #4]
 8009f2e:	4638      	mov	r0, r7
 8009f30:	3101      	adds	r1, #1
 8009f32:	f7ff ff79 	bl	8009e28 <_Balloc>
 8009f36:	4680      	mov	r8, r0
 8009f38:	b928      	cbnz	r0, 8009f46 <__multadd+0x5a>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	4b0c      	ldr	r3, [pc, #48]	; (8009f70 <__multadd+0x84>)
 8009f3e:	480d      	ldr	r0, [pc, #52]	; (8009f74 <__multadd+0x88>)
 8009f40:	21b5      	movs	r1, #181	; 0xb5
 8009f42:	f000 fcbb 	bl	800a8bc <__assert_func>
 8009f46:	6922      	ldr	r2, [r4, #16]
 8009f48:	3202      	adds	r2, #2
 8009f4a:	f104 010c 	add.w	r1, r4, #12
 8009f4e:	0092      	lsls	r2, r2, #2
 8009f50:	300c      	adds	r0, #12
 8009f52:	f7ff ff4f 	bl	8009df4 <memcpy>
 8009f56:	4621      	mov	r1, r4
 8009f58:	4638      	mov	r0, r7
 8009f5a:	f7ff ffa5 	bl	8009ea8 <_Bfree>
 8009f5e:	4644      	mov	r4, r8
 8009f60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009f64:	3501      	adds	r5, #1
 8009f66:	615e      	str	r6, [r3, #20]
 8009f68:	6125      	str	r5, [r4, #16]
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f70:	0800b41b 	.word	0x0800b41b
 8009f74:	0800b48c 	.word	0x0800b48c

08009f78 <__hi0bits>:
 8009f78:	0c03      	lsrs	r3, r0, #16
 8009f7a:	041b      	lsls	r3, r3, #16
 8009f7c:	b9d3      	cbnz	r3, 8009fb4 <__hi0bits+0x3c>
 8009f7e:	0400      	lsls	r0, r0, #16
 8009f80:	2310      	movs	r3, #16
 8009f82:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009f86:	bf04      	itt	eq
 8009f88:	0200      	lsleq	r0, r0, #8
 8009f8a:	3308      	addeq	r3, #8
 8009f8c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009f90:	bf04      	itt	eq
 8009f92:	0100      	lsleq	r0, r0, #4
 8009f94:	3304      	addeq	r3, #4
 8009f96:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009f9a:	bf04      	itt	eq
 8009f9c:	0080      	lsleq	r0, r0, #2
 8009f9e:	3302      	addeq	r3, #2
 8009fa0:	2800      	cmp	r0, #0
 8009fa2:	db05      	blt.n	8009fb0 <__hi0bits+0x38>
 8009fa4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009fa8:	f103 0301 	add.w	r3, r3, #1
 8009fac:	bf08      	it	eq
 8009fae:	2320      	moveq	r3, #32
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	4770      	bx	lr
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	e7e4      	b.n	8009f82 <__hi0bits+0xa>

08009fb8 <__lo0bits>:
 8009fb8:	6803      	ldr	r3, [r0, #0]
 8009fba:	f013 0207 	ands.w	r2, r3, #7
 8009fbe:	4601      	mov	r1, r0
 8009fc0:	d00b      	beq.n	8009fda <__lo0bits+0x22>
 8009fc2:	07da      	lsls	r2, r3, #31
 8009fc4:	d423      	bmi.n	800a00e <__lo0bits+0x56>
 8009fc6:	0798      	lsls	r0, r3, #30
 8009fc8:	bf49      	itett	mi
 8009fca:	085b      	lsrmi	r3, r3, #1
 8009fcc:	089b      	lsrpl	r3, r3, #2
 8009fce:	2001      	movmi	r0, #1
 8009fd0:	600b      	strmi	r3, [r1, #0]
 8009fd2:	bf5c      	itt	pl
 8009fd4:	600b      	strpl	r3, [r1, #0]
 8009fd6:	2002      	movpl	r0, #2
 8009fd8:	4770      	bx	lr
 8009fda:	b298      	uxth	r0, r3
 8009fdc:	b9a8      	cbnz	r0, 800a00a <__lo0bits+0x52>
 8009fde:	0c1b      	lsrs	r3, r3, #16
 8009fe0:	2010      	movs	r0, #16
 8009fe2:	b2da      	uxtb	r2, r3
 8009fe4:	b90a      	cbnz	r2, 8009fea <__lo0bits+0x32>
 8009fe6:	3008      	adds	r0, #8
 8009fe8:	0a1b      	lsrs	r3, r3, #8
 8009fea:	071a      	lsls	r2, r3, #28
 8009fec:	bf04      	itt	eq
 8009fee:	091b      	lsreq	r3, r3, #4
 8009ff0:	3004      	addeq	r0, #4
 8009ff2:	079a      	lsls	r2, r3, #30
 8009ff4:	bf04      	itt	eq
 8009ff6:	089b      	lsreq	r3, r3, #2
 8009ff8:	3002      	addeq	r0, #2
 8009ffa:	07da      	lsls	r2, r3, #31
 8009ffc:	d403      	bmi.n	800a006 <__lo0bits+0x4e>
 8009ffe:	085b      	lsrs	r3, r3, #1
 800a000:	f100 0001 	add.w	r0, r0, #1
 800a004:	d005      	beq.n	800a012 <__lo0bits+0x5a>
 800a006:	600b      	str	r3, [r1, #0]
 800a008:	4770      	bx	lr
 800a00a:	4610      	mov	r0, r2
 800a00c:	e7e9      	b.n	8009fe2 <__lo0bits+0x2a>
 800a00e:	2000      	movs	r0, #0
 800a010:	4770      	bx	lr
 800a012:	2020      	movs	r0, #32
 800a014:	4770      	bx	lr
	...

0800a018 <__i2b>:
 800a018:	b510      	push	{r4, lr}
 800a01a:	460c      	mov	r4, r1
 800a01c:	2101      	movs	r1, #1
 800a01e:	f7ff ff03 	bl	8009e28 <_Balloc>
 800a022:	4602      	mov	r2, r0
 800a024:	b928      	cbnz	r0, 800a032 <__i2b+0x1a>
 800a026:	4b05      	ldr	r3, [pc, #20]	; (800a03c <__i2b+0x24>)
 800a028:	4805      	ldr	r0, [pc, #20]	; (800a040 <__i2b+0x28>)
 800a02a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a02e:	f000 fc45 	bl	800a8bc <__assert_func>
 800a032:	2301      	movs	r3, #1
 800a034:	6144      	str	r4, [r0, #20]
 800a036:	6103      	str	r3, [r0, #16]
 800a038:	bd10      	pop	{r4, pc}
 800a03a:	bf00      	nop
 800a03c:	0800b41b 	.word	0x0800b41b
 800a040:	0800b48c 	.word	0x0800b48c

0800a044 <__multiply>:
 800a044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a048:	4691      	mov	r9, r2
 800a04a:	690a      	ldr	r2, [r1, #16]
 800a04c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a050:	429a      	cmp	r2, r3
 800a052:	bfb8      	it	lt
 800a054:	460b      	movlt	r3, r1
 800a056:	460c      	mov	r4, r1
 800a058:	bfbc      	itt	lt
 800a05a:	464c      	movlt	r4, r9
 800a05c:	4699      	movlt	r9, r3
 800a05e:	6927      	ldr	r7, [r4, #16]
 800a060:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a064:	68a3      	ldr	r3, [r4, #8]
 800a066:	6861      	ldr	r1, [r4, #4]
 800a068:	eb07 060a 	add.w	r6, r7, sl
 800a06c:	42b3      	cmp	r3, r6
 800a06e:	b085      	sub	sp, #20
 800a070:	bfb8      	it	lt
 800a072:	3101      	addlt	r1, #1
 800a074:	f7ff fed8 	bl	8009e28 <_Balloc>
 800a078:	b930      	cbnz	r0, 800a088 <__multiply+0x44>
 800a07a:	4602      	mov	r2, r0
 800a07c:	4b44      	ldr	r3, [pc, #272]	; (800a190 <__multiply+0x14c>)
 800a07e:	4845      	ldr	r0, [pc, #276]	; (800a194 <__multiply+0x150>)
 800a080:	f240 115d 	movw	r1, #349	; 0x15d
 800a084:	f000 fc1a 	bl	800a8bc <__assert_func>
 800a088:	f100 0514 	add.w	r5, r0, #20
 800a08c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a090:	462b      	mov	r3, r5
 800a092:	2200      	movs	r2, #0
 800a094:	4543      	cmp	r3, r8
 800a096:	d321      	bcc.n	800a0dc <__multiply+0x98>
 800a098:	f104 0314 	add.w	r3, r4, #20
 800a09c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a0a0:	f109 0314 	add.w	r3, r9, #20
 800a0a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a0a8:	9202      	str	r2, [sp, #8]
 800a0aa:	1b3a      	subs	r2, r7, r4
 800a0ac:	3a15      	subs	r2, #21
 800a0ae:	f022 0203 	bic.w	r2, r2, #3
 800a0b2:	3204      	adds	r2, #4
 800a0b4:	f104 0115 	add.w	r1, r4, #21
 800a0b8:	428f      	cmp	r7, r1
 800a0ba:	bf38      	it	cc
 800a0bc:	2204      	movcc	r2, #4
 800a0be:	9201      	str	r2, [sp, #4]
 800a0c0:	9a02      	ldr	r2, [sp, #8]
 800a0c2:	9303      	str	r3, [sp, #12]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d80c      	bhi.n	800a0e2 <__multiply+0x9e>
 800a0c8:	2e00      	cmp	r6, #0
 800a0ca:	dd03      	ble.n	800a0d4 <__multiply+0x90>
 800a0cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d05a      	beq.n	800a18a <__multiply+0x146>
 800a0d4:	6106      	str	r6, [r0, #16]
 800a0d6:	b005      	add	sp, #20
 800a0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0dc:	f843 2b04 	str.w	r2, [r3], #4
 800a0e0:	e7d8      	b.n	800a094 <__multiply+0x50>
 800a0e2:	f8b3 a000 	ldrh.w	sl, [r3]
 800a0e6:	f1ba 0f00 	cmp.w	sl, #0
 800a0ea:	d024      	beq.n	800a136 <__multiply+0xf2>
 800a0ec:	f104 0e14 	add.w	lr, r4, #20
 800a0f0:	46a9      	mov	r9, r5
 800a0f2:	f04f 0c00 	mov.w	ip, #0
 800a0f6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a0fa:	f8d9 1000 	ldr.w	r1, [r9]
 800a0fe:	fa1f fb82 	uxth.w	fp, r2
 800a102:	b289      	uxth	r1, r1
 800a104:	fb0a 110b 	mla	r1, sl, fp, r1
 800a108:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a10c:	f8d9 2000 	ldr.w	r2, [r9]
 800a110:	4461      	add	r1, ip
 800a112:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a116:	fb0a c20b 	mla	r2, sl, fp, ip
 800a11a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a11e:	b289      	uxth	r1, r1
 800a120:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a124:	4577      	cmp	r7, lr
 800a126:	f849 1b04 	str.w	r1, [r9], #4
 800a12a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a12e:	d8e2      	bhi.n	800a0f6 <__multiply+0xb2>
 800a130:	9a01      	ldr	r2, [sp, #4]
 800a132:	f845 c002 	str.w	ip, [r5, r2]
 800a136:	9a03      	ldr	r2, [sp, #12]
 800a138:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a13c:	3304      	adds	r3, #4
 800a13e:	f1b9 0f00 	cmp.w	r9, #0
 800a142:	d020      	beq.n	800a186 <__multiply+0x142>
 800a144:	6829      	ldr	r1, [r5, #0]
 800a146:	f104 0c14 	add.w	ip, r4, #20
 800a14a:	46ae      	mov	lr, r5
 800a14c:	f04f 0a00 	mov.w	sl, #0
 800a150:	f8bc b000 	ldrh.w	fp, [ip]
 800a154:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a158:	fb09 220b 	mla	r2, r9, fp, r2
 800a15c:	4492      	add	sl, r2
 800a15e:	b289      	uxth	r1, r1
 800a160:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a164:	f84e 1b04 	str.w	r1, [lr], #4
 800a168:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a16c:	f8be 1000 	ldrh.w	r1, [lr]
 800a170:	0c12      	lsrs	r2, r2, #16
 800a172:	fb09 1102 	mla	r1, r9, r2, r1
 800a176:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a17a:	4567      	cmp	r7, ip
 800a17c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a180:	d8e6      	bhi.n	800a150 <__multiply+0x10c>
 800a182:	9a01      	ldr	r2, [sp, #4]
 800a184:	50a9      	str	r1, [r5, r2]
 800a186:	3504      	adds	r5, #4
 800a188:	e79a      	b.n	800a0c0 <__multiply+0x7c>
 800a18a:	3e01      	subs	r6, #1
 800a18c:	e79c      	b.n	800a0c8 <__multiply+0x84>
 800a18e:	bf00      	nop
 800a190:	0800b41b 	.word	0x0800b41b
 800a194:	0800b48c 	.word	0x0800b48c

0800a198 <__pow5mult>:
 800a198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a19c:	4615      	mov	r5, r2
 800a19e:	f012 0203 	ands.w	r2, r2, #3
 800a1a2:	4606      	mov	r6, r0
 800a1a4:	460f      	mov	r7, r1
 800a1a6:	d007      	beq.n	800a1b8 <__pow5mult+0x20>
 800a1a8:	4c25      	ldr	r4, [pc, #148]	; (800a240 <__pow5mult+0xa8>)
 800a1aa:	3a01      	subs	r2, #1
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a1b2:	f7ff fe9b 	bl	8009eec <__multadd>
 800a1b6:	4607      	mov	r7, r0
 800a1b8:	10ad      	asrs	r5, r5, #2
 800a1ba:	d03d      	beq.n	800a238 <__pow5mult+0xa0>
 800a1bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a1be:	b97c      	cbnz	r4, 800a1e0 <__pow5mult+0x48>
 800a1c0:	2010      	movs	r0, #16
 800a1c2:	f7fd febf 	bl	8007f44 <malloc>
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	6270      	str	r0, [r6, #36]	; 0x24
 800a1ca:	b928      	cbnz	r0, 800a1d8 <__pow5mult+0x40>
 800a1cc:	4b1d      	ldr	r3, [pc, #116]	; (800a244 <__pow5mult+0xac>)
 800a1ce:	481e      	ldr	r0, [pc, #120]	; (800a248 <__pow5mult+0xb0>)
 800a1d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a1d4:	f000 fb72 	bl	800a8bc <__assert_func>
 800a1d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a1dc:	6004      	str	r4, [r0, #0]
 800a1de:	60c4      	str	r4, [r0, #12]
 800a1e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a1e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a1e8:	b94c      	cbnz	r4, 800a1fe <__pow5mult+0x66>
 800a1ea:	f240 2171 	movw	r1, #625	; 0x271
 800a1ee:	4630      	mov	r0, r6
 800a1f0:	f7ff ff12 	bl	800a018 <__i2b>
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	f8c8 0008 	str.w	r0, [r8, #8]
 800a1fa:	4604      	mov	r4, r0
 800a1fc:	6003      	str	r3, [r0, #0]
 800a1fe:	f04f 0900 	mov.w	r9, #0
 800a202:	07eb      	lsls	r3, r5, #31
 800a204:	d50a      	bpl.n	800a21c <__pow5mult+0x84>
 800a206:	4639      	mov	r1, r7
 800a208:	4622      	mov	r2, r4
 800a20a:	4630      	mov	r0, r6
 800a20c:	f7ff ff1a 	bl	800a044 <__multiply>
 800a210:	4639      	mov	r1, r7
 800a212:	4680      	mov	r8, r0
 800a214:	4630      	mov	r0, r6
 800a216:	f7ff fe47 	bl	8009ea8 <_Bfree>
 800a21a:	4647      	mov	r7, r8
 800a21c:	106d      	asrs	r5, r5, #1
 800a21e:	d00b      	beq.n	800a238 <__pow5mult+0xa0>
 800a220:	6820      	ldr	r0, [r4, #0]
 800a222:	b938      	cbnz	r0, 800a234 <__pow5mult+0x9c>
 800a224:	4622      	mov	r2, r4
 800a226:	4621      	mov	r1, r4
 800a228:	4630      	mov	r0, r6
 800a22a:	f7ff ff0b 	bl	800a044 <__multiply>
 800a22e:	6020      	str	r0, [r4, #0]
 800a230:	f8c0 9000 	str.w	r9, [r0]
 800a234:	4604      	mov	r4, r0
 800a236:	e7e4      	b.n	800a202 <__pow5mult+0x6a>
 800a238:	4638      	mov	r0, r7
 800a23a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a23e:	bf00      	nop
 800a240:	0800b5d8 	.word	0x0800b5d8
 800a244:	0800b3a9 	.word	0x0800b3a9
 800a248:	0800b48c 	.word	0x0800b48c

0800a24c <__lshift>:
 800a24c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a250:	460c      	mov	r4, r1
 800a252:	6849      	ldr	r1, [r1, #4]
 800a254:	6923      	ldr	r3, [r4, #16]
 800a256:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a25a:	68a3      	ldr	r3, [r4, #8]
 800a25c:	4607      	mov	r7, r0
 800a25e:	4691      	mov	r9, r2
 800a260:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a264:	f108 0601 	add.w	r6, r8, #1
 800a268:	42b3      	cmp	r3, r6
 800a26a:	db0b      	blt.n	800a284 <__lshift+0x38>
 800a26c:	4638      	mov	r0, r7
 800a26e:	f7ff fddb 	bl	8009e28 <_Balloc>
 800a272:	4605      	mov	r5, r0
 800a274:	b948      	cbnz	r0, 800a28a <__lshift+0x3e>
 800a276:	4602      	mov	r2, r0
 800a278:	4b2a      	ldr	r3, [pc, #168]	; (800a324 <__lshift+0xd8>)
 800a27a:	482b      	ldr	r0, [pc, #172]	; (800a328 <__lshift+0xdc>)
 800a27c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a280:	f000 fb1c 	bl	800a8bc <__assert_func>
 800a284:	3101      	adds	r1, #1
 800a286:	005b      	lsls	r3, r3, #1
 800a288:	e7ee      	b.n	800a268 <__lshift+0x1c>
 800a28a:	2300      	movs	r3, #0
 800a28c:	f100 0114 	add.w	r1, r0, #20
 800a290:	f100 0210 	add.w	r2, r0, #16
 800a294:	4618      	mov	r0, r3
 800a296:	4553      	cmp	r3, sl
 800a298:	db37      	blt.n	800a30a <__lshift+0xbe>
 800a29a:	6920      	ldr	r0, [r4, #16]
 800a29c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a2a0:	f104 0314 	add.w	r3, r4, #20
 800a2a4:	f019 091f 	ands.w	r9, r9, #31
 800a2a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a2ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a2b0:	d02f      	beq.n	800a312 <__lshift+0xc6>
 800a2b2:	f1c9 0e20 	rsb	lr, r9, #32
 800a2b6:	468a      	mov	sl, r1
 800a2b8:	f04f 0c00 	mov.w	ip, #0
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	fa02 f209 	lsl.w	r2, r2, r9
 800a2c2:	ea42 020c 	orr.w	r2, r2, ip
 800a2c6:	f84a 2b04 	str.w	r2, [sl], #4
 800a2ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2ce:	4298      	cmp	r0, r3
 800a2d0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a2d4:	d8f2      	bhi.n	800a2bc <__lshift+0x70>
 800a2d6:	1b03      	subs	r3, r0, r4
 800a2d8:	3b15      	subs	r3, #21
 800a2da:	f023 0303 	bic.w	r3, r3, #3
 800a2de:	3304      	adds	r3, #4
 800a2e0:	f104 0215 	add.w	r2, r4, #21
 800a2e4:	4290      	cmp	r0, r2
 800a2e6:	bf38      	it	cc
 800a2e8:	2304      	movcc	r3, #4
 800a2ea:	f841 c003 	str.w	ip, [r1, r3]
 800a2ee:	f1bc 0f00 	cmp.w	ip, #0
 800a2f2:	d001      	beq.n	800a2f8 <__lshift+0xac>
 800a2f4:	f108 0602 	add.w	r6, r8, #2
 800a2f8:	3e01      	subs	r6, #1
 800a2fa:	4638      	mov	r0, r7
 800a2fc:	612e      	str	r6, [r5, #16]
 800a2fe:	4621      	mov	r1, r4
 800a300:	f7ff fdd2 	bl	8009ea8 <_Bfree>
 800a304:	4628      	mov	r0, r5
 800a306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a30a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a30e:	3301      	adds	r3, #1
 800a310:	e7c1      	b.n	800a296 <__lshift+0x4a>
 800a312:	3904      	subs	r1, #4
 800a314:	f853 2b04 	ldr.w	r2, [r3], #4
 800a318:	f841 2f04 	str.w	r2, [r1, #4]!
 800a31c:	4298      	cmp	r0, r3
 800a31e:	d8f9      	bhi.n	800a314 <__lshift+0xc8>
 800a320:	e7ea      	b.n	800a2f8 <__lshift+0xac>
 800a322:	bf00      	nop
 800a324:	0800b41b 	.word	0x0800b41b
 800a328:	0800b48c 	.word	0x0800b48c

0800a32c <__mcmp>:
 800a32c:	b530      	push	{r4, r5, lr}
 800a32e:	6902      	ldr	r2, [r0, #16]
 800a330:	690c      	ldr	r4, [r1, #16]
 800a332:	1b12      	subs	r2, r2, r4
 800a334:	d10e      	bne.n	800a354 <__mcmp+0x28>
 800a336:	f100 0314 	add.w	r3, r0, #20
 800a33a:	3114      	adds	r1, #20
 800a33c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a340:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a344:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a348:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a34c:	42a5      	cmp	r5, r4
 800a34e:	d003      	beq.n	800a358 <__mcmp+0x2c>
 800a350:	d305      	bcc.n	800a35e <__mcmp+0x32>
 800a352:	2201      	movs	r2, #1
 800a354:	4610      	mov	r0, r2
 800a356:	bd30      	pop	{r4, r5, pc}
 800a358:	4283      	cmp	r3, r0
 800a35a:	d3f3      	bcc.n	800a344 <__mcmp+0x18>
 800a35c:	e7fa      	b.n	800a354 <__mcmp+0x28>
 800a35e:	f04f 32ff 	mov.w	r2, #4294967295
 800a362:	e7f7      	b.n	800a354 <__mcmp+0x28>

0800a364 <__mdiff>:
 800a364:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a368:	460c      	mov	r4, r1
 800a36a:	4606      	mov	r6, r0
 800a36c:	4611      	mov	r1, r2
 800a36e:	4620      	mov	r0, r4
 800a370:	4690      	mov	r8, r2
 800a372:	f7ff ffdb 	bl	800a32c <__mcmp>
 800a376:	1e05      	subs	r5, r0, #0
 800a378:	d110      	bne.n	800a39c <__mdiff+0x38>
 800a37a:	4629      	mov	r1, r5
 800a37c:	4630      	mov	r0, r6
 800a37e:	f7ff fd53 	bl	8009e28 <_Balloc>
 800a382:	b930      	cbnz	r0, 800a392 <__mdiff+0x2e>
 800a384:	4b3a      	ldr	r3, [pc, #232]	; (800a470 <__mdiff+0x10c>)
 800a386:	4602      	mov	r2, r0
 800a388:	f240 2132 	movw	r1, #562	; 0x232
 800a38c:	4839      	ldr	r0, [pc, #228]	; (800a474 <__mdiff+0x110>)
 800a38e:	f000 fa95 	bl	800a8bc <__assert_func>
 800a392:	2301      	movs	r3, #1
 800a394:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a398:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a39c:	bfa4      	itt	ge
 800a39e:	4643      	movge	r3, r8
 800a3a0:	46a0      	movge	r8, r4
 800a3a2:	4630      	mov	r0, r6
 800a3a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a3a8:	bfa6      	itte	ge
 800a3aa:	461c      	movge	r4, r3
 800a3ac:	2500      	movge	r5, #0
 800a3ae:	2501      	movlt	r5, #1
 800a3b0:	f7ff fd3a 	bl	8009e28 <_Balloc>
 800a3b4:	b920      	cbnz	r0, 800a3c0 <__mdiff+0x5c>
 800a3b6:	4b2e      	ldr	r3, [pc, #184]	; (800a470 <__mdiff+0x10c>)
 800a3b8:	4602      	mov	r2, r0
 800a3ba:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a3be:	e7e5      	b.n	800a38c <__mdiff+0x28>
 800a3c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a3c4:	6926      	ldr	r6, [r4, #16]
 800a3c6:	60c5      	str	r5, [r0, #12]
 800a3c8:	f104 0914 	add.w	r9, r4, #20
 800a3cc:	f108 0514 	add.w	r5, r8, #20
 800a3d0:	f100 0e14 	add.w	lr, r0, #20
 800a3d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a3d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a3dc:	f108 0210 	add.w	r2, r8, #16
 800a3e0:	46f2      	mov	sl, lr
 800a3e2:	2100      	movs	r1, #0
 800a3e4:	f859 3b04 	ldr.w	r3, [r9], #4
 800a3e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a3ec:	fa1f f883 	uxth.w	r8, r3
 800a3f0:	fa11 f18b 	uxtah	r1, r1, fp
 800a3f4:	0c1b      	lsrs	r3, r3, #16
 800a3f6:	eba1 0808 	sub.w	r8, r1, r8
 800a3fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a3fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a402:	fa1f f888 	uxth.w	r8, r8
 800a406:	1419      	asrs	r1, r3, #16
 800a408:	454e      	cmp	r6, r9
 800a40a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a40e:	f84a 3b04 	str.w	r3, [sl], #4
 800a412:	d8e7      	bhi.n	800a3e4 <__mdiff+0x80>
 800a414:	1b33      	subs	r3, r6, r4
 800a416:	3b15      	subs	r3, #21
 800a418:	f023 0303 	bic.w	r3, r3, #3
 800a41c:	3304      	adds	r3, #4
 800a41e:	3415      	adds	r4, #21
 800a420:	42a6      	cmp	r6, r4
 800a422:	bf38      	it	cc
 800a424:	2304      	movcc	r3, #4
 800a426:	441d      	add	r5, r3
 800a428:	4473      	add	r3, lr
 800a42a:	469e      	mov	lr, r3
 800a42c:	462e      	mov	r6, r5
 800a42e:	4566      	cmp	r6, ip
 800a430:	d30e      	bcc.n	800a450 <__mdiff+0xec>
 800a432:	f10c 0203 	add.w	r2, ip, #3
 800a436:	1b52      	subs	r2, r2, r5
 800a438:	f022 0203 	bic.w	r2, r2, #3
 800a43c:	3d03      	subs	r5, #3
 800a43e:	45ac      	cmp	ip, r5
 800a440:	bf38      	it	cc
 800a442:	2200      	movcc	r2, #0
 800a444:	441a      	add	r2, r3
 800a446:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a44a:	b17b      	cbz	r3, 800a46c <__mdiff+0x108>
 800a44c:	6107      	str	r7, [r0, #16]
 800a44e:	e7a3      	b.n	800a398 <__mdiff+0x34>
 800a450:	f856 8b04 	ldr.w	r8, [r6], #4
 800a454:	fa11 f288 	uxtah	r2, r1, r8
 800a458:	1414      	asrs	r4, r2, #16
 800a45a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a45e:	b292      	uxth	r2, r2
 800a460:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a464:	f84e 2b04 	str.w	r2, [lr], #4
 800a468:	1421      	asrs	r1, r4, #16
 800a46a:	e7e0      	b.n	800a42e <__mdiff+0xca>
 800a46c:	3f01      	subs	r7, #1
 800a46e:	e7ea      	b.n	800a446 <__mdiff+0xe2>
 800a470:	0800b41b 	.word	0x0800b41b
 800a474:	0800b48c 	.word	0x0800b48c

0800a478 <__d2b>:
 800a478:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a47c:	4689      	mov	r9, r1
 800a47e:	2101      	movs	r1, #1
 800a480:	ec57 6b10 	vmov	r6, r7, d0
 800a484:	4690      	mov	r8, r2
 800a486:	f7ff fccf 	bl	8009e28 <_Balloc>
 800a48a:	4604      	mov	r4, r0
 800a48c:	b930      	cbnz	r0, 800a49c <__d2b+0x24>
 800a48e:	4602      	mov	r2, r0
 800a490:	4b25      	ldr	r3, [pc, #148]	; (800a528 <__d2b+0xb0>)
 800a492:	4826      	ldr	r0, [pc, #152]	; (800a52c <__d2b+0xb4>)
 800a494:	f240 310a 	movw	r1, #778	; 0x30a
 800a498:	f000 fa10 	bl	800a8bc <__assert_func>
 800a49c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a4a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a4a4:	bb35      	cbnz	r5, 800a4f4 <__d2b+0x7c>
 800a4a6:	2e00      	cmp	r6, #0
 800a4a8:	9301      	str	r3, [sp, #4]
 800a4aa:	d028      	beq.n	800a4fe <__d2b+0x86>
 800a4ac:	4668      	mov	r0, sp
 800a4ae:	9600      	str	r6, [sp, #0]
 800a4b0:	f7ff fd82 	bl	8009fb8 <__lo0bits>
 800a4b4:	9900      	ldr	r1, [sp, #0]
 800a4b6:	b300      	cbz	r0, 800a4fa <__d2b+0x82>
 800a4b8:	9a01      	ldr	r2, [sp, #4]
 800a4ba:	f1c0 0320 	rsb	r3, r0, #32
 800a4be:	fa02 f303 	lsl.w	r3, r2, r3
 800a4c2:	430b      	orrs	r3, r1
 800a4c4:	40c2      	lsrs	r2, r0
 800a4c6:	6163      	str	r3, [r4, #20]
 800a4c8:	9201      	str	r2, [sp, #4]
 800a4ca:	9b01      	ldr	r3, [sp, #4]
 800a4cc:	61a3      	str	r3, [r4, #24]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	bf14      	ite	ne
 800a4d2:	2202      	movne	r2, #2
 800a4d4:	2201      	moveq	r2, #1
 800a4d6:	6122      	str	r2, [r4, #16]
 800a4d8:	b1d5      	cbz	r5, 800a510 <__d2b+0x98>
 800a4da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a4de:	4405      	add	r5, r0
 800a4e0:	f8c9 5000 	str.w	r5, [r9]
 800a4e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a4e8:	f8c8 0000 	str.w	r0, [r8]
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	b003      	add	sp, #12
 800a4f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a4f8:	e7d5      	b.n	800a4a6 <__d2b+0x2e>
 800a4fa:	6161      	str	r1, [r4, #20]
 800a4fc:	e7e5      	b.n	800a4ca <__d2b+0x52>
 800a4fe:	a801      	add	r0, sp, #4
 800a500:	f7ff fd5a 	bl	8009fb8 <__lo0bits>
 800a504:	9b01      	ldr	r3, [sp, #4]
 800a506:	6163      	str	r3, [r4, #20]
 800a508:	2201      	movs	r2, #1
 800a50a:	6122      	str	r2, [r4, #16]
 800a50c:	3020      	adds	r0, #32
 800a50e:	e7e3      	b.n	800a4d8 <__d2b+0x60>
 800a510:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a514:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a518:	f8c9 0000 	str.w	r0, [r9]
 800a51c:	6918      	ldr	r0, [r3, #16]
 800a51e:	f7ff fd2b 	bl	8009f78 <__hi0bits>
 800a522:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a526:	e7df      	b.n	800a4e8 <__d2b+0x70>
 800a528:	0800b41b 	.word	0x0800b41b
 800a52c:	0800b48c 	.word	0x0800b48c

0800a530 <_calloc_r>:
 800a530:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a532:	fba1 2402 	umull	r2, r4, r1, r2
 800a536:	b94c      	cbnz	r4, 800a54c <_calloc_r+0x1c>
 800a538:	4611      	mov	r1, r2
 800a53a:	9201      	str	r2, [sp, #4]
 800a53c:	f7fd fd7e 	bl	800803c <_malloc_r>
 800a540:	9a01      	ldr	r2, [sp, #4]
 800a542:	4605      	mov	r5, r0
 800a544:	b930      	cbnz	r0, 800a554 <_calloc_r+0x24>
 800a546:	4628      	mov	r0, r5
 800a548:	b003      	add	sp, #12
 800a54a:	bd30      	pop	{r4, r5, pc}
 800a54c:	220c      	movs	r2, #12
 800a54e:	6002      	str	r2, [r0, #0]
 800a550:	2500      	movs	r5, #0
 800a552:	e7f8      	b.n	800a546 <_calloc_r+0x16>
 800a554:	4621      	mov	r1, r4
 800a556:	f7fd fcfd 	bl	8007f54 <memset>
 800a55a:	e7f4      	b.n	800a546 <_calloc_r+0x16>

0800a55c <__sfputc_r>:
 800a55c:	6893      	ldr	r3, [r2, #8]
 800a55e:	3b01      	subs	r3, #1
 800a560:	2b00      	cmp	r3, #0
 800a562:	b410      	push	{r4}
 800a564:	6093      	str	r3, [r2, #8]
 800a566:	da08      	bge.n	800a57a <__sfputc_r+0x1e>
 800a568:	6994      	ldr	r4, [r2, #24]
 800a56a:	42a3      	cmp	r3, r4
 800a56c:	db01      	blt.n	800a572 <__sfputc_r+0x16>
 800a56e:	290a      	cmp	r1, #10
 800a570:	d103      	bne.n	800a57a <__sfputc_r+0x1e>
 800a572:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a576:	f7fe badd 	b.w	8008b34 <__swbuf_r>
 800a57a:	6813      	ldr	r3, [r2, #0]
 800a57c:	1c58      	adds	r0, r3, #1
 800a57e:	6010      	str	r0, [r2, #0]
 800a580:	7019      	strb	r1, [r3, #0]
 800a582:	4608      	mov	r0, r1
 800a584:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a588:	4770      	bx	lr

0800a58a <__sfputs_r>:
 800a58a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a58c:	4606      	mov	r6, r0
 800a58e:	460f      	mov	r7, r1
 800a590:	4614      	mov	r4, r2
 800a592:	18d5      	adds	r5, r2, r3
 800a594:	42ac      	cmp	r4, r5
 800a596:	d101      	bne.n	800a59c <__sfputs_r+0x12>
 800a598:	2000      	movs	r0, #0
 800a59a:	e007      	b.n	800a5ac <__sfputs_r+0x22>
 800a59c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5a0:	463a      	mov	r2, r7
 800a5a2:	4630      	mov	r0, r6
 800a5a4:	f7ff ffda 	bl	800a55c <__sfputc_r>
 800a5a8:	1c43      	adds	r3, r0, #1
 800a5aa:	d1f3      	bne.n	800a594 <__sfputs_r+0xa>
 800a5ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a5b0 <_vfiprintf_r>:
 800a5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b4:	460d      	mov	r5, r1
 800a5b6:	b09d      	sub	sp, #116	; 0x74
 800a5b8:	4614      	mov	r4, r2
 800a5ba:	4698      	mov	r8, r3
 800a5bc:	4606      	mov	r6, r0
 800a5be:	b118      	cbz	r0, 800a5c8 <_vfiprintf_r+0x18>
 800a5c0:	6983      	ldr	r3, [r0, #24]
 800a5c2:	b90b      	cbnz	r3, 800a5c8 <_vfiprintf_r+0x18>
 800a5c4:	f7ff fb0c 	bl	8009be0 <__sinit>
 800a5c8:	4b89      	ldr	r3, [pc, #548]	; (800a7f0 <_vfiprintf_r+0x240>)
 800a5ca:	429d      	cmp	r5, r3
 800a5cc:	d11b      	bne.n	800a606 <_vfiprintf_r+0x56>
 800a5ce:	6875      	ldr	r5, [r6, #4]
 800a5d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5d2:	07d9      	lsls	r1, r3, #31
 800a5d4:	d405      	bmi.n	800a5e2 <_vfiprintf_r+0x32>
 800a5d6:	89ab      	ldrh	r3, [r5, #12]
 800a5d8:	059a      	lsls	r2, r3, #22
 800a5da:	d402      	bmi.n	800a5e2 <_vfiprintf_r+0x32>
 800a5dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5de:	f7ff fba2 	bl	8009d26 <__retarget_lock_acquire_recursive>
 800a5e2:	89ab      	ldrh	r3, [r5, #12]
 800a5e4:	071b      	lsls	r3, r3, #28
 800a5e6:	d501      	bpl.n	800a5ec <_vfiprintf_r+0x3c>
 800a5e8:	692b      	ldr	r3, [r5, #16]
 800a5ea:	b9eb      	cbnz	r3, 800a628 <_vfiprintf_r+0x78>
 800a5ec:	4629      	mov	r1, r5
 800a5ee:	4630      	mov	r0, r6
 800a5f0:	f7fe faf2 	bl	8008bd8 <__swsetup_r>
 800a5f4:	b1c0      	cbz	r0, 800a628 <_vfiprintf_r+0x78>
 800a5f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5f8:	07dc      	lsls	r4, r3, #31
 800a5fa:	d50e      	bpl.n	800a61a <_vfiprintf_r+0x6a>
 800a5fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a600:	b01d      	add	sp, #116	; 0x74
 800a602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a606:	4b7b      	ldr	r3, [pc, #492]	; (800a7f4 <_vfiprintf_r+0x244>)
 800a608:	429d      	cmp	r5, r3
 800a60a:	d101      	bne.n	800a610 <_vfiprintf_r+0x60>
 800a60c:	68b5      	ldr	r5, [r6, #8]
 800a60e:	e7df      	b.n	800a5d0 <_vfiprintf_r+0x20>
 800a610:	4b79      	ldr	r3, [pc, #484]	; (800a7f8 <_vfiprintf_r+0x248>)
 800a612:	429d      	cmp	r5, r3
 800a614:	bf08      	it	eq
 800a616:	68f5      	ldreq	r5, [r6, #12]
 800a618:	e7da      	b.n	800a5d0 <_vfiprintf_r+0x20>
 800a61a:	89ab      	ldrh	r3, [r5, #12]
 800a61c:	0598      	lsls	r0, r3, #22
 800a61e:	d4ed      	bmi.n	800a5fc <_vfiprintf_r+0x4c>
 800a620:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a622:	f7ff fb81 	bl	8009d28 <__retarget_lock_release_recursive>
 800a626:	e7e9      	b.n	800a5fc <_vfiprintf_r+0x4c>
 800a628:	2300      	movs	r3, #0
 800a62a:	9309      	str	r3, [sp, #36]	; 0x24
 800a62c:	2320      	movs	r3, #32
 800a62e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a632:	f8cd 800c 	str.w	r8, [sp, #12]
 800a636:	2330      	movs	r3, #48	; 0x30
 800a638:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a7fc <_vfiprintf_r+0x24c>
 800a63c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a640:	f04f 0901 	mov.w	r9, #1
 800a644:	4623      	mov	r3, r4
 800a646:	469a      	mov	sl, r3
 800a648:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a64c:	b10a      	cbz	r2, 800a652 <_vfiprintf_r+0xa2>
 800a64e:	2a25      	cmp	r2, #37	; 0x25
 800a650:	d1f9      	bne.n	800a646 <_vfiprintf_r+0x96>
 800a652:	ebba 0b04 	subs.w	fp, sl, r4
 800a656:	d00b      	beq.n	800a670 <_vfiprintf_r+0xc0>
 800a658:	465b      	mov	r3, fp
 800a65a:	4622      	mov	r2, r4
 800a65c:	4629      	mov	r1, r5
 800a65e:	4630      	mov	r0, r6
 800a660:	f7ff ff93 	bl	800a58a <__sfputs_r>
 800a664:	3001      	adds	r0, #1
 800a666:	f000 80aa 	beq.w	800a7be <_vfiprintf_r+0x20e>
 800a66a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a66c:	445a      	add	r2, fp
 800a66e:	9209      	str	r2, [sp, #36]	; 0x24
 800a670:	f89a 3000 	ldrb.w	r3, [sl]
 800a674:	2b00      	cmp	r3, #0
 800a676:	f000 80a2 	beq.w	800a7be <_vfiprintf_r+0x20e>
 800a67a:	2300      	movs	r3, #0
 800a67c:	f04f 32ff 	mov.w	r2, #4294967295
 800a680:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a684:	f10a 0a01 	add.w	sl, sl, #1
 800a688:	9304      	str	r3, [sp, #16]
 800a68a:	9307      	str	r3, [sp, #28]
 800a68c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a690:	931a      	str	r3, [sp, #104]	; 0x68
 800a692:	4654      	mov	r4, sl
 800a694:	2205      	movs	r2, #5
 800a696:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a69a:	4858      	ldr	r0, [pc, #352]	; (800a7fc <_vfiprintf_r+0x24c>)
 800a69c:	f7f5 fdb8 	bl	8000210 <memchr>
 800a6a0:	9a04      	ldr	r2, [sp, #16]
 800a6a2:	b9d8      	cbnz	r0, 800a6dc <_vfiprintf_r+0x12c>
 800a6a4:	06d1      	lsls	r1, r2, #27
 800a6a6:	bf44      	itt	mi
 800a6a8:	2320      	movmi	r3, #32
 800a6aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6ae:	0713      	lsls	r3, r2, #28
 800a6b0:	bf44      	itt	mi
 800a6b2:	232b      	movmi	r3, #43	; 0x2b
 800a6b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6b8:	f89a 3000 	ldrb.w	r3, [sl]
 800a6bc:	2b2a      	cmp	r3, #42	; 0x2a
 800a6be:	d015      	beq.n	800a6ec <_vfiprintf_r+0x13c>
 800a6c0:	9a07      	ldr	r2, [sp, #28]
 800a6c2:	4654      	mov	r4, sl
 800a6c4:	2000      	movs	r0, #0
 800a6c6:	f04f 0c0a 	mov.w	ip, #10
 800a6ca:	4621      	mov	r1, r4
 800a6cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6d0:	3b30      	subs	r3, #48	; 0x30
 800a6d2:	2b09      	cmp	r3, #9
 800a6d4:	d94e      	bls.n	800a774 <_vfiprintf_r+0x1c4>
 800a6d6:	b1b0      	cbz	r0, 800a706 <_vfiprintf_r+0x156>
 800a6d8:	9207      	str	r2, [sp, #28]
 800a6da:	e014      	b.n	800a706 <_vfiprintf_r+0x156>
 800a6dc:	eba0 0308 	sub.w	r3, r0, r8
 800a6e0:	fa09 f303 	lsl.w	r3, r9, r3
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	9304      	str	r3, [sp, #16]
 800a6e8:	46a2      	mov	sl, r4
 800a6ea:	e7d2      	b.n	800a692 <_vfiprintf_r+0xe2>
 800a6ec:	9b03      	ldr	r3, [sp, #12]
 800a6ee:	1d19      	adds	r1, r3, #4
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	9103      	str	r1, [sp, #12]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	bfbb      	ittet	lt
 800a6f8:	425b      	neglt	r3, r3
 800a6fa:	f042 0202 	orrlt.w	r2, r2, #2
 800a6fe:	9307      	strge	r3, [sp, #28]
 800a700:	9307      	strlt	r3, [sp, #28]
 800a702:	bfb8      	it	lt
 800a704:	9204      	strlt	r2, [sp, #16]
 800a706:	7823      	ldrb	r3, [r4, #0]
 800a708:	2b2e      	cmp	r3, #46	; 0x2e
 800a70a:	d10c      	bne.n	800a726 <_vfiprintf_r+0x176>
 800a70c:	7863      	ldrb	r3, [r4, #1]
 800a70e:	2b2a      	cmp	r3, #42	; 0x2a
 800a710:	d135      	bne.n	800a77e <_vfiprintf_r+0x1ce>
 800a712:	9b03      	ldr	r3, [sp, #12]
 800a714:	1d1a      	adds	r2, r3, #4
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	9203      	str	r2, [sp, #12]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	bfb8      	it	lt
 800a71e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a722:	3402      	adds	r4, #2
 800a724:	9305      	str	r3, [sp, #20]
 800a726:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a80c <_vfiprintf_r+0x25c>
 800a72a:	7821      	ldrb	r1, [r4, #0]
 800a72c:	2203      	movs	r2, #3
 800a72e:	4650      	mov	r0, sl
 800a730:	f7f5 fd6e 	bl	8000210 <memchr>
 800a734:	b140      	cbz	r0, 800a748 <_vfiprintf_r+0x198>
 800a736:	2340      	movs	r3, #64	; 0x40
 800a738:	eba0 000a 	sub.w	r0, r0, sl
 800a73c:	fa03 f000 	lsl.w	r0, r3, r0
 800a740:	9b04      	ldr	r3, [sp, #16]
 800a742:	4303      	orrs	r3, r0
 800a744:	3401      	adds	r4, #1
 800a746:	9304      	str	r3, [sp, #16]
 800a748:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a74c:	482c      	ldr	r0, [pc, #176]	; (800a800 <_vfiprintf_r+0x250>)
 800a74e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a752:	2206      	movs	r2, #6
 800a754:	f7f5 fd5c 	bl	8000210 <memchr>
 800a758:	2800      	cmp	r0, #0
 800a75a:	d03f      	beq.n	800a7dc <_vfiprintf_r+0x22c>
 800a75c:	4b29      	ldr	r3, [pc, #164]	; (800a804 <_vfiprintf_r+0x254>)
 800a75e:	bb1b      	cbnz	r3, 800a7a8 <_vfiprintf_r+0x1f8>
 800a760:	9b03      	ldr	r3, [sp, #12]
 800a762:	3307      	adds	r3, #7
 800a764:	f023 0307 	bic.w	r3, r3, #7
 800a768:	3308      	adds	r3, #8
 800a76a:	9303      	str	r3, [sp, #12]
 800a76c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a76e:	443b      	add	r3, r7
 800a770:	9309      	str	r3, [sp, #36]	; 0x24
 800a772:	e767      	b.n	800a644 <_vfiprintf_r+0x94>
 800a774:	fb0c 3202 	mla	r2, ip, r2, r3
 800a778:	460c      	mov	r4, r1
 800a77a:	2001      	movs	r0, #1
 800a77c:	e7a5      	b.n	800a6ca <_vfiprintf_r+0x11a>
 800a77e:	2300      	movs	r3, #0
 800a780:	3401      	adds	r4, #1
 800a782:	9305      	str	r3, [sp, #20]
 800a784:	4619      	mov	r1, r3
 800a786:	f04f 0c0a 	mov.w	ip, #10
 800a78a:	4620      	mov	r0, r4
 800a78c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a790:	3a30      	subs	r2, #48	; 0x30
 800a792:	2a09      	cmp	r2, #9
 800a794:	d903      	bls.n	800a79e <_vfiprintf_r+0x1ee>
 800a796:	2b00      	cmp	r3, #0
 800a798:	d0c5      	beq.n	800a726 <_vfiprintf_r+0x176>
 800a79a:	9105      	str	r1, [sp, #20]
 800a79c:	e7c3      	b.n	800a726 <_vfiprintf_r+0x176>
 800a79e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7a2:	4604      	mov	r4, r0
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	e7f0      	b.n	800a78a <_vfiprintf_r+0x1da>
 800a7a8:	ab03      	add	r3, sp, #12
 800a7aa:	9300      	str	r3, [sp, #0]
 800a7ac:	462a      	mov	r2, r5
 800a7ae:	4b16      	ldr	r3, [pc, #88]	; (800a808 <_vfiprintf_r+0x258>)
 800a7b0:	a904      	add	r1, sp, #16
 800a7b2:	4630      	mov	r0, r6
 800a7b4:	f7fd fd56 	bl	8008264 <_printf_float>
 800a7b8:	4607      	mov	r7, r0
 800a7ba:	1c78      	adds	r0, r7, #1
 800a7bc:	d1d6      	bne.n	800a76c <_vfiprintf_r+0x1bc>
 800a7be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7c0:	07d9      	lsls	r1, r3, #31
 800a7c2:	d405      	bmi.n	800a7d0 <_vfiprintf_r+0x220>
 800a7c4:	89ab      	ldrh	r3, [r5, #12]
 800a7c6:	059a      	lsls	r2, r3, #22
 800a7c8:	d402      	bmi.n	800a7d0 <_vfiprintf_r+0x220>
 800a7ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7cc:	f7ff faac 	bl	8009d28 <__retarget_lock_release_recursive>
 800a7d0:	89ab      	ldrh	r3, [r5, #12]
 800a7d2:	065b      	lsls	r3, r3, #25
 800a7d4:	f53f af12 	bmi.w	800a5fc <_vfiprintf_r+0x4c>
 800a7d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7da:	e711      	b.n	800a600 <_vfiprintf_r+0x50>
 800a7dc:	ab03      	add	r3, sp, #12
 800a7de:	9300      	str	r3, [sp, #0]
 800a7e0:	462a      	mov	r2, r5
 800a7e2:	4b09      	ldr	r3, [pc, #36]	; (800a808 <_vfiprintf_r+0x258>)
 800a7e4:	a904      	add	r1, sp, #16
 800a7e6:	4630      	mov	r0, r6
 800a7e8:	f7fd ffe0 	bl	80087ac <_printf_i>
 800a7ec:	e7e4      	b.n	800a7b8 <_vfiprintf_r+0x208>
 800a7ee:	bf00      	nop
 800a7f0:	0800b44c 	.word	0x0800b44c
 800a7f4:	0800b46c 	.word	0x0800b46c
 800a7f8:	0800b42c 	.word	0x0800b42c
 800a7fc:	0800b5e4 	.word	0x0800b5e4
 800a800:	0800b5ee 	.word	0x0800b5ee
 800a804:	08008265 	.word	0x08008265
 800a808:	0800a58b 	.word	0x0800a58b
 800a80c:	0800b5ea 	.word	0x0800b5ea

0800a810 <__sread>:
 800a810:	b510      	push	{r4, lr}
 800a812:	460c      	mov	r4, r1
 800a814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a818:	f000 f8d6 	bl	800a9c8 <_read_r>
 800a81c:	2800      	cmp	r0, #0
 800a81e:	bfab      	itete	ge
 800a820:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a822:	89a3      	ldrhlt	r3, [r4, #12]
 800a824:	181b      	addge	r3, r3, r0
 800a826:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a82a:	bfac      	ite	ge
 800a82c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a82e:	81a3      	strhlt	r3, [r4, #12]
 800a830:	bd10      	pop	{r4, pc}

0800a832 <__swrite>:
 800a832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a836:	461f      	mov	r7, r3
 800a838:	898b      	ldrh	r3, [r1, #12]
 800a83a:	05db      	lsls	r3, r3, #23
 800a83c:	4605      	mov	r5, r0
 800a83e:	460c      	mov	r4, r1
 800a840:	4616      	mov	r6, r2
 800a842:	d505      	bpl.n	800a850 <__swrite+0x1e>
 800a844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a848:	2302      	movs	r3, #2
 800a84a:	2200      	movs	r2, #0
 800a84c:	f000 f898 	bl	800a980 <_lseek_r>
 800a850:	89a3      	ldrh	r3, [r4, #12]
 800a852:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a856:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a85a:	81a3      	strh	r3, [r4, #12]
 800a85c:	4632      	mov	r2, r6
 800a85e:	463b      	mov	r3, r7
 800a860:	4628      	mov	r0, r5
 800a862:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a866:	f000 b817 	b.w	800a898 <_write_r>

0800a86a <__sseek>:
 800a86a:	b510      	push	{r4, lr}
 800a86c:	460c      	mov	r4, r1
 800a86e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a872:	f000 f885 	bl	800a980 <_lseek_r>
 800a876:	1c43      	adds	r3, r0, #1
 800a878:	89a3      	ldrh	r3, [r4, #12]
 800a87a:	bf15      	itete	ne
 800a87c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a87e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a882:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a886:	81a3      	strheq	r3, [r4, #12]
 800a888:	bf18      	it	ne
 800a88a:	81a3      	strhne	r3, [r4, #12]
 800a88c:	bd10      	pop	{r4, pc}

0800a88e <__sclose>:
 800a88e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a892:	f000 b831 	b.w	800a8f8 <_close_r>
	...

0800a898 <_write_r>:
 800a898:	b538      	push	{r3, r4, r5, lr}
 800a89a:	4d07      	ldr	r5, [pc, #28]	; (800a8b8 <_write_r+0x20>)
 800a89c:	4604      	mov	r4, r0
 800a89e:	4608      	mov	r0, r1
 800a8a0:	4611      	mov	r1, r2
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	602a      	str	r2, [r5, #0]
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	f7f7 fed7 	bl	800265a <_write>
 800a8ac:	1c43      	adds	r3, r0, #1
 800a8ae:	d102      	bne.n	800a8b6 <_write_r+0x1e>
 800a8b0:	682b      	ldr	r3, [r5, #0]
 800a8b2:	b103      	cbz	r3, 800a8b6 <_write_r+0x1e>
 800a8b4:	6023      	str	r3, [r4, #0]
 800a8b6:	bd38      	pop	{r3, r4, r5, pc}
 800a8b8:	200004cc 	.word	0x200004cc

0800a8bc <__assert_func>:
 800a8bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a8be:	4614      	mov	r4, r2
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	4b09      	ldr	r3, [pc, #36]	; (800a8e8 <__assert_func+0x2c>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	4605      	mov	r5, r0
 800a8c8:	68d8      	ldr	r0, [r3, #12]
 800a8ca:	b14c      	cbz	r4, 800a8e0 <__assert_func+0x24>
 800a8cc:	4b07      	ldr	r3, [pc, #28]	; (800a8ec <__assert_func+0x30>)
 800a8ce:	9100      	str	r1, [sp, #0]
 800a8d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a8d4:	4906      	ldr	r1, [pc, #24]	; (800a8f0 <__assert_func+0x34>)
 800a8d6:	462b      	mov	r3, r5
 800a8d8:	f000 f81e 	bl	800a918 <fiprintf>
 800a8dc:	f000 f893 	bl	800aa06 <abort>
 800a8e0:	4b04      	ldr	r3, [pc, #16]	; (800a8f4 <__assert_func+0x38>)
 800a8e2:	461c      	mov	r4, r3
 800a8e4:	e7f3      	b.n	800a8ce <__assert_func+0x12>
 800a8e6:	bf00      	nop
 800a8e8:	20000014 	.word	0x20000014
 800a8ec:	0800b5f5 	.word	0x0800b5f5
 800a8f0:	0800b602 	.word	0x0800b602
 800a8f4:	0800b630 	.word	0x0800b630

0800a8f8 <_close_r>:
 800a8f8:	b538      	push	{r3, r4, r5, lr}
 800a8fa:	4d06      	ldr	r5, [pc, #24]	; (800a914 <_close_r+0x1c>)
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	4604      	mov	r4, r0
 800a900:	4608      	mov	r0, r1
 800a902:	602b      	str	r3, [r5, #0]
 800a904:	f7f7 fec5 	bl	8002692 <_close>
 800a908:	1c43      	adds	r3, r0, #1
 800a90a:	d102      	bne.n	800a912 <_close_r+0x1a>
 800a90c:	682b      	ldr	r3, [r5, #0]
 800a90e:	b103      	cbz	r3, 800a912 <_close_r+0x1a>
 800a910:	6023      	str	r3, [r4, #0]
 800a912:	bd38      	pop	{r3, r4, r5, pc}
 800a914:	200004cc 	.word	0x200004cc

0800a918 <fiprintf>:
 800a918:	b40e      	push	{r1, r2, r3}
 800a91a:	b503      	push	{r0, r1, lr}
 800a91c:	4601      	mov	r1, r0
 800a91e:	ab03      	add	r3, sp, #12
 800a920:	4805      	ldr	r0, [pc, #20]	; (800a938 <fiprintf+0x20>)
 800a922:	f853 2b04 	ldr.w	r2, [r3], #4
 800a926:	6800      	ldr	r0, [r0, #0]
 800a928:	9301      	str	r3, [sp, #4]
 800a92a:	f7ff fe41 	bl	800a5b0 <_vfiprintf_r>
 800a92e:	b002      	add	sp, #8
 800a930:	f85d eb04 	ldr.w	lr, [sp], #4
 800a934:	b003      	add	sp, #12
 800a936:	4770      	bx	lr
 800a938:	20000014 	.word	0x20000014

0800a93c <_fstat_r>:
 800a93c:	b538      	push	{r3, r4, r5, lr}
 800a93e:	4d07      	ldr	r5, [pc, #28]	; (800a95c <_fstat_r+0x20>)
 800a940:	2300      	movs	r3, #0
 800a942:	4604      	mov	r4, r0
 800a944:	4608      	mov	r0, r1
 800a946:	4611      	mov	r1, r2
 800a948:	602b      	str	r3, [r5, #0]
 800a94a:	f7f7 feae 	bl	80026aa <_fstat>
 800a94e:	1c43      	adds	r3, r0, #1
 800a950:	d102      	bne.n	800a958 <_fstat_r+0x1c>
 800a952:	682b      	ldr	r3, [r5, #0]
 800a954:	b103      	cbz	r3, 800a958 <_fstat_r+0x1c>
 800a956:	6023      	str	r3, [r4, #0]
 800a958:	bd38      	pop	{r3, r4, r5, pc}
 800a95a:	bf00      	nop
 800a95c:	200004cc 	.word	0x200004cc

0800a960 <_isatty_r>:
 800a960:	b538      	push	{r3, r4, r5, lr}
 800a962:	4d06      	ldr	r5, [pc, #24]	; (800a97c <_isatty_r+0x1c>)
 800a964:	2300      	movs	r3, #0
 800a966:	4604      	mov	r4, r0
 800a968:	4608      	mov	r0, r1
 800a96a:	602b      	str	r3, [r5, #0]
 800a96c:	f7f7 fead 	bl	80026ca <_isatty>
 800a970:	1c43      	adds	r3, r0, #1
 800a972:	d102      	bne.n	800a97a <_isatty_r+0x1a>
 800a974:	682b      	ldr	r3, [r5, #0]
 800a976:	b103      	cbz	r3, 800a97a <_isatty_r+0x1a>
 800a978:	6023      	str	r3, [r4, #0]
 800a97a:	bd38      	pop	{r3, r4, r5, pc}
 800a97c:	200004cc 	.word	0x200004cc

0800a980 <_lseek_r>:
 800a980:	b538      	push	{r3, r4, r5, lr}
 800a982:	4d07      	ldr	r5, [pc, #28]	; (800a9a0 <_lseek_r+0x20>)
 800a984:	4604      	mov	r4, r0
 800a986:	4608      	mov	r0, r1
 800a988:	4611      	mov	r1, r2
 800a98a:	2200      	movs	r2, #0
 800a98c:	602a      	str	r2, [r5, #0]
 800a98e:	461a      	mov	r2, r3
 800a990:	f7f7 fea6 	bl	80026e0 <_lseek>
 800a994:	1c43      	adds	r3, r0, #1
 800a996:	d102      	bne.n	800a99e <_lseek_r+0x1e>
 800a998:	682b      	ldr	r3, [r5, #0]
 800a99a:	b103      	cbz	r3, 800a99e <_lseek_r+0x1e>
 800a99c:	6023      	str	r3, [r4, #0]
 800a99e:	bd38      	pop	{r3, r4, r5, pc}
 800a9a0:	200004cc 	.word	0x200004cc

0800a9a4 <__ascii_mbtowc>:
 800a9a4:	b082      	sub	sp, #8
 800a9a6:	b901      	cbnz	r1, 800a9aa <__ascii_mbtowc+0x6>
 800a9a8:	a901      	add	r1, sp, #4
 800a9aa:	b142      	cbz	r2, 800a9be <__ascii_mbtowc+0x1a>
 800a9ac:	b14b      	cbz	r3, 800a9c2 <__ascii_mbtowc+0x1e>
 800a9ae:	7813      	ldrb	r3, [r2, #0]
 800a9b0:	600b      	str	r3, [r1, #0]
 800a9b2:	7812      	ldrb	r2, [r2, #0]
 800a9b4:	1e10      	subs	r0, r2, #0
 800a9b6:	bf18      	it	ne
 800a9b8:	2001      	movne	r0, #1
 800a9ba:	b002      	add	sp, #8
 800a9bc:	4770      	bx	lr
 800a9be:	4610      	mov	r0, r2
 800a9c0:	e7fb      	b.n	800a9ba <__ascii_mbtowc+0x16>
 800a9c2:	f06f 0001 	mvn.w	r0, #1
 800a9c6:	e7f8      	b.n	800a9ba <__ascii_mbtowc+0x16>

0800a9c8 <_read_r>:
 800a9c8:	b538      	push	{r3, r4, r5, lr}
 800a9ca:	4d07      	ldr	r5, [pc, #28]	; (800a9e8 <_read_r+0x20>)
 800a9cc:	4604      	mov	r4, r0
 800a9ce:	4608      	mov	r0, r1
 800a9d0:	4611      	mov	r1, r2
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	602a      	str	r2, [r5, #0]
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	f7f7 fe22 	bl	8002620 <_read>
 800a9dc:	1c43      	adds	r3, r0, #1
 800a9de:	d102      	bne.n	800a9e6 <_read_r+0x1e>
 800a9e0:	682b      	ldr	r3, [r5, #0]
 800a9e2:	b103      	cbz	r3, 800a9e6 <_read_r+0x1e>
 800a9e4:	6023      	str	r3, [r4, #0]
 800a9e6:	bd38      	pop	{r3, r4, r5, pc}
 800a9e8:	200004cc 	.word	0x200004cc

0800a9ec <__ascii_wctomb>:
 800a9ec:	b149      	cbz	r1, 800aa02 <__ascii_wctomb+0x16>
 800a9ee:	2aff      	cmp	r2, #255	; 0xff
 800a9f0:	bf85      	ittet	hi
 800a9f2:	238a      	movhi	r3, #138	; 0x8a
 800a9f4:	6003      	strhi	r3, [r0, #0]
 800a9f6:	700a      	strbls	r2, [r1, #0]
 800a9f8:	f04f 30ff 	movhi.w	r0, #4294967295
 800a9fc:	bf98      	it	ls
 800a9fe:	2001      	movls	r0, #1
 800aa00:	4770      	bx	lr
 800aa02:	4608      	mov	r0, r1
 800aa04:	4770      	bx	lr

0800aa06 <abort>:
 800aa06:	b508      	push	{r3, lr}
 800aa08:	2006      	movs	r0, #6
 800aa0a:	f000 f82b 	bl	800aa64 <raise>
 800aa0e:	2001      	movs	r0, #1
 800aa10:	f7f7 fdfc 	bl	800260c <_exit>

0800aa14 <_raise_r>:
 800aa14:	291f      	cmp	r1, #31
 800aa16:	b538      	push	{r3, r4, r5, lr}
 800aa18:	4604      	mov	r4, r0
 800aa1a:	460d      	mov	r5, r1
 800aa1c:	d904      	bls.n	800aa28 <_raise_r+0x14>
 800aa1e:	2316      	movs	r3, #22
 800aa20:	6003      	str	r3, [r0, #0]
 800aa22:	f04f 30ff 	mov.w	r0, #4294967295
 800aa26:	bd38      	pop	{r3, r4, r5, pc}
 800aa28:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aa2a:	b112      	cbz	r2, 800aa32 <_raise_r+0x1e>
 800aa2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa30:	b94b      	cbnz	r3, 800aa46 <_raise_r+0x32>
 800aa32:	4620      	mov	r0, r4
 800aa34:	f000 f830 	bl	800aa98 <_getpid_r>
 800aa38:	462a      	mov	r2, r5
 800aa3a:	4601      	mov	r1, r0
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa42:	f000 b817 	b.w	800aa74 <_kill_r>
 800aa46:	2b01      	cmp	r3, #1
 800aa48:	d00a      	beq.n	800aa60 <_raise_r+0x4c>
 800aa4a:	1c59      	adds	r1, r3, #1
 800aa4c:	d103      	bne.n	800aa56 <_raise_r+0x42>
 800aa4e:	2316      	movs	r3, #22
 800aa50:	6003      	str	r3, [r0, #0]
 800aa52:	2001      	movs	r0, #1
 800aa54:	e7e7      	b.n	800aa26 <_raise_r+0x12>
 800aa56:	2400      	movs	r4, #0
 800aa58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aa5c:	4628      	mov	r0, r5
 800aa5e:	4798      	blx	r3
 800aa60:	2000      	movs	r0, #0
 800aa62:	e7e0      	b.n	800aa26 <_raise_r+0x12>

0800aa64 <raise>:
 800aa64:	4b02      	ldr	r3, [pc, #8]	; (800aa70 <raise+0xc>)
 800aa66:	4601      	mov	r1, r0
 800aa68:	6818      	ldr	r0, [r3, #0]
 800aa6a:	f7ff bfd3 	b.w	800aa14 <_raise_r>
 800aa6e:	bf00      	nop
 800aa70:	20000014 	.word	0x20000014

0800aa74 <_kill_r>:
 800aa74:	b538      	push	{r3, r4, r5, lr}
 800aa76:	4d07      	ldr	r5, [pc, #28]	; (800aa94 <_kill_r+0x20>)
 800aa78:	2300      	movs	r3, #0
 800aa7a:	4604      	mov	r4, r0
 800aa7c:	4608      	mov	r0, r1
 800aa7e:	4611      	mov	r1, r2
 800aa80:	602b      	str	r3, [r5, #0]
 800aa82:	f7f7 fdb3 	bl	80025ec <_kill>
 800aa86:	1c43      	adds	r3, r0, #1
 800aa88:	d102      	bne.n	800aa90 <_kill_r+0x1c>
 800aa8a:	682b      	ldr	r3, [r5, #0]
 800aa8c:	b103      	cbz	r3, 800aa90 <_kill_r+0x1c>
 800aa8e:	6023      	str	r3, [r4, #0]
 800aa90:	bd38      	pop	{r3, r4, r5, pc}
 800aa92:	bf00      	nop
 800aa94:	200004cc 	.word	0x200004cc

0800aa98 <_getpid_r>:
 800aa98:	f7f7 bda0 	b.w	80025dc <_getpid>
 800aa9c:	0000      	movs	r0, r0
	...

0800aaa0 <exp>:
 800aaa0:	b538      	push	{r3, r4, r5, lr}
 800aaa2:	ed2d 8b02 	vpush	{d8}
 800aaa6:	ec55 4b10 	vmov	r4, r5, d0
 800aaaa:	f000 f881 	bl	800abb0 <__ieee754_exp>
 800aaae:	eeb0 8a40 	vmov.f32	s16, s0
 800aab2:	eef0 8a60 	vmov.f32	s17, s1
 800aab6:	ec45 4b10 	vmov	d0, r4, r5
 800aaba:	f000 fbe7 	bl	800b28c <finite>
 800aabe:	b168      	cbz	r0, 800aadc <exp+0x3c>
 800aac0:	a317      	add	r3, pc, #92	; (adr r3, 800ab20 <exp+0x80>)
 800aac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac6:	4620      	mov	r0, r4
 800aac8:	4629      	mov	r1, r5
 800aaca:	f7f6 f83d 	bl	8000b48 <__aeabi_dcmpgt>
 800aace:	b160      	cbz	r0, 800aaea <exp+0x4a>
 800aad0:	f7fd fa0e 	bl	8007ef0 <__errno>
 800aad4:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 800ab10 <exp+0x70>
 800aad8:	2322      	movs	r3, #34	; 0x22
 800aada:	6003      	str	r3, [r0, #0]
 800aadc:	eeb0 0a48 	vmov.f32	s0, s16
 800aae0:	eef0 0a68 	vmov.f32	s1, s17
 800aae4:	ecbd 8b02 	vpop	{d8}
 800aae8:	bd38      	pop	{r3, r4, r5, pc}
 800aaea:	a30f      	add	r3, pc, #60	; (adr r3, 800ab28 <exp+0x88>)
 800aaec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf0:	4620      	mov	r0, r4
 800aaf2:	4629      	mov	r1, r5
 800aaf4:	f7f6 f80a 	bl	8000b0c <__aeabi_dcmplt>
 800aaf8:	2800      	cmp	r0, #0
 800aafa:	d0ef      	beq.n	800aadc <exp+0x3c>
 800aafc:	f7fd f9f8 	bl	8007ef0 <__errno>
 800ab00:	2322      	movs	r3, #34	; 0x22
 800ab02:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800ab18 <exp+0x78>
 800ab06:	6003      	str	r3, [r0, #0]
 800ab08:	e7e8      	b.n	800aadc <exp+0x3c>
 800ab0a:	bf00      	nop
 800ab0c:	f3af 8000 	nop.w
 800ab10:	00000000 	.word	0x00000000
 800ab14:	7ff00000 	.word	0x7ff00000
	...
 800ab20:	fefa39ef 	.word	0xfefa39ef
 800ab24:	40862e42 	.word	0x40862e42
 800ab28:	d52d3051 	.word	0xd52d3051
 800ab2c:	c0874910 	.word	0xc0874910

0800ab30 <log>:
 800ab30:	b538      	push	{r3, r4, r5, lr}
 800ab32:	ed2d 8b02 	vpush	{d8}
 800ab36:	ec55 4b10 	vmov	r4, r5, d0
 800ab3a:	f000 f9bd 	bl	800aeb8 <__ieee754_log>
 800ab3e:	4622      	mov	r2, r4
 800ab40:	462b      	mov	r3, r5
 800ab42:	4620      	mov	r0, r4
 800ab44:	4629      	mov	r1, r5
 800ab46:	eeb0 8a40 	vmov.f32	s16, s0
 800ab4a:	eef0 8a60 	vmov.f32	s17, s1
 800ab4e:	f7f6 f805 	bl	8000b5c <__aeabi_dcmpun>
 800ab52:	b998      	cbnz	r0, 800ab7c <log+0x4c>
 800ab54:	2200      	movs	r2, #0
 800ab56:	2300      	movs	r3, #0
 800ab58:	4620      	mov	r0, r4
 800ab5a:	4629      	mov	r1, r5
 800ab5c:	f7f5 fff4 	bl	8000b48 <__aeabi_dcmpgt>
 800ab60:	b960      	cbnz	r0, 800ab7c <log+0x4c>
 800ab62:	2200      	movs	r2, #0
 800ab64:	2300      	movs	r3, #0
 800ab66:	4620      	mov	r0, r4
 800ab68:	4629      	mov	r1, r5
 800ab6a:	f7f5 ffc5 	bl	8000af8 <__aeabi_dcmpeq>
 800ab6e:	b160      	cbz	r0, 800ab8a <log+0x5a>
 800ab70:	f7fd f9be 	bl	8007ef0 <__errno>
 800ab74:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800aba0 <log+0x70>
 800ab78:	2322      	movs	r3, #34	; 0x22
 800ab7a:	6003      	str	r3, [r0, #0]
 800ab7c:	eeb0 0a48 	vmov.f32	s0, s16
 800ab80:	eef0 0a68 	vmov.f32	s1, s17
 800ab84:	ecbd 8b02 	vpop	{d8}
 800ab88:	bd38      	pop	{r3, r4, r5, pc}
 800ab8a:	f7fd f9b1 	bl	8007ef0 <__errno>
 800ab8e:	ecbd 8b02 	vpop	{d8}
 800ab92:	2321      	movs	r3, #33	; 0x21
 800ab94:	6003      	str	r3, [r0, #0]
 800ab96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab9a:	4803      	ldr	r0, [pc, #12]	; (800aba8 <log+0x78>)
 800ab9c:	f000 bb84 	b.w	800b2a8 <nan>
 800aba0:	00000000 	.word	0x00000000
 800aba4:	fff00000 	.word	0xfff00000
 800aba8:	0800b630 	.word	0x0800b630
 800abac:	00000000 	.word	0x00000000

0800abb0 <__ieee754_exp>:
 800abb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abb4:	ec55 4b10 	vmov	r4, r5, d0
 800abb8:	49b5      	ldr	r1, [pc, #724]	; (800ae90 <__ieee754_exp+0x2e0>)
 800abba:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800abbe:	428b      	cmp	r3, r1
 800abc0:	ed2d 8b04 	vpush	{d8-d9}
 800abc4:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800abc8:	d93d      	bls.n	800ac46 <__ieee754_exp+0x96>
 800abca:	49b2      	ldr	r1, [pc, #712]	; (800ae94 <__ieee754_exp+0x2e4>)
 800abcc:	428b      	cmp	r3, r1
 800abce:	d918      	bls.n	800ac02 <__ieee754_exp+0x52>
 800abd0:	ee10 3a10 	vmov	r3, s0
 800abd4:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800abd8:	4313      	orrs	r3, r2
 800abda:	d009      	beq.n	800abf0 <__ieee754_exp+0x40>
 800abdc:	ee10 2a10 	vmov	r2, s0
 800abe0:	462b      	mov	r3, r5
 800abe2:	4620      	mov	r0, r4
 800abe4:	4629      	mov	r1, r5
 800abe6:	f7f5 fb69 	bl	80002bc <__adddf3>
 800abea:	4604      	mov	r4, r0
 800abec:	460d      	mov	r5, r1
 800abee:	e002      	b.n	800abf6 <__ieee754_exp+0x46>
 800abf0:	b10e      	cbz	r6, 800abf6 <__ieee754_exp+0x46>
 800abf2:	2400      	movs	r4, #0
 800abf4:	2500      	movs	r5, #0
 800abf6:	ecbd 8b04 	vpop	{d8-d9}
 800abfa:	ec45 4b10 	vmov	d0, r4, r5
 800abfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac02:	a38d      	add	r3, pc, #564	; (adr r3, 800ae38 <__ieee754_exp+0x288>)
 800ac04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac08:	ee10 0a10 	vmov	r0, s0
 800ac0c:	4629      	mov	r1, r5
 800ac0e:	f7f5 ff9b 	bl	8000b48 <__aeabi_dcmpgt>
 800ac12:	4607      	mov	r7, r0
 800ac14:	b130      	cbz	r0, 800ac24 <__ieee754_exp+0x74>
 800ac16:	ecbd 8b04 	vpop	{d8-d9}
 800ac1a:	2000      	movs	r0, #0
 800ac1c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac20:	f000 bb2b 	b.w	800b27a <__math_oflow>
 800ac24:	a386      	add	r3, pc, #536	; (adr r3, 800ae40 <__ieee754_exp+0x290>)
 800ac26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac2a:	4620      	mov	r0, r4
 800ac2c:	4629      	mov	r1, r5
 800ac2e:	f7f5 ff6d 	bl	8000b0c <__aeabi_dcmplt>
 800ac32:	2800      	cmp	r0, #0
 800ac34:	f000 808b 	beq.w	800ad4e <__ieee754_exp+0x19e>
 800ac38:	ecbd 8b04 	vpop	{d8-d9}
 800ac3c:	4638      	mov	r0, r7
 800ac3e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac42:	f000 bb11 	b.w	800b268 <__math_uflow>
 800ac46:	4a94      	ldr	r2, [pc, #592]	; (800ae98 <__ieee754_exp+0x2e8>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	f240 80ac 	bls.w	800ada6 <__ieee754_exp+0x1f6>
 800ac4e:	4a93      	ldr	r2, [pc, #588]	; (800ae9c <__ieee754_exp+0x2ec>)
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d87c      	bhi.n	800ad4e <__ieee754_exp+0x19e>
 800ac54:	4b92      	ldr	r3, [pc, #584]	; (800aea0 <__ieee754_exp+0x2f0>)
 800ac56:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ac5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5e:	ee10 0a10 	vmov	r0, s0
 800ac62:	4629      	mov	r1, r5
 800ac64:	f7f5 fb28 	bl	80002b8 <__aeabi_dsub>
 800ac68:	4b8e      	ldr	r3, [pc, #568]	; (800aea4 <__ieee754_exp+0x2f4>)
 800ac6a:	00f7      	lsls	r7, r6, #3
 800ac6c:	443b      	add	r3, r7
 800ac6e:	ed93 7b00 	vldr	d7, [r3]
 800ac72:	f1c6 0a01 	rsb	sl, r6, #1
 800ac76:	4680      	mov	r8, r0
 800ac78:	4689      	mov	r9, r1
 800ac7a:	ebaa 0a06 	sub.w	sl, sl, r6
 800ac7e:	eeb0 8a47 	vmov.f32	s16, s14
 800ac82:	eef0 8a67 	vmov.f32	s17, s15
 800ac86:	ec53 2b18 	vmov	r2, r3, d8
 800ac8a:	4640      	mov	r0, r8
 800ac8c:	4649      	mov	r1, r9
 800ac8e:	f7f5 fb13 	bl	80002b8 <__aeabi_dsub>
 800ac92:	4604      	mov	r4, r0
 800ac94:	460d      	mov	r5, r1
 800ac96:	4622      	mov	r2, r4
 800ac98:	462b      	mov	r3, r5
 800ac9a:	4620      	mov	r0, r4
 800ac9c:	4629      	mov	r1, r5
 800ac9e:	f7f5 fcc3 	bl	8000628 <__aeabi_dmul>
 800aca2:	a369      	add	r3, pc, #420	; (adr r3, 800ae48 <__ieee754_exp+0x298>)
 800aca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca8:	4606      	mov	r6, r0
 800acaa:	460f      	mov	r7, r1
 800acac:	f7f5 fcbc 	bl	8000628 <__aeabi_dmul>
 800acb0:	a367      	add	r3, pc, #412	; (adr r3, 800ae50 <__ieee754_exp+0x2a0>)
 800acb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb6:	f7f5 faff 	bl	80002b8 <__aeabi_dsub>
 800acba:	4632      	mov	r2, r6
 800acbc:	463b      	mov	r3, r7
 800acbe:	f7f5 fcb3 	bl	8000628 <__aeabi_dmul>
 800acc2:	a365      	add	r3, pc, #404	; (adr r3, 800ae58 <__ieee754_exp+0x2a8>)
 800acc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc8:	f7f5 faf8 	bl	80002bc <__adddf3>
 800accc:	4632      	mov	r2, r6
 800acce:	463b      	mov	r3, r7
 800acd0:	f7f5 fcaa 	bl	8000628 <__aeabi_dmul>
 800acd4:	a362      	add	r3, pc, #392	; (adr r3, 800ae60 <__ieee754_exp+0x2b0>)
 800acd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acda:	f7f5 faed 	bl	80002b8 <__aeabi_dsub>
 800acde:	4632      	mov	r2, r6
 800ace0:	463b      	mov	r3, r7
 800ace2:	f7f5 fca1 	bl	8000628 <__aeabi_dmul>
 800ace6:	a360      	add	r3, pc, #384	; (adr r3, 800ae68 <__ieee754_exp+0x2b8>)
 800ace8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acec:	f7f5 fae6 	bl	80002bc <__adddf3>
 800acf0:	4632      	mov	r2, r6
 800acf2:	463b      	mov	r3, r7
 800acf4:	f7f5 fc98 	bl	8000628 <__aeabi_dmul>
 800acf8:	4602      	mov	r2, r0
 800acfa:	460b      	mov	r3, r1
 800acfc:	4620      	mov	r0, r4
 800acfe:	4629      	mov	r1, r5
 800ad00:	f7f5 fada 	bl	80002b8 <__aeabi_dsub>
 800ad04:	4602      	mov	r2, r0
 800ad06:	460b      	mov	r3, r1
 800ad08:	4606      	mov	r6, r0
 800ad0a:	460f      	mov	r7, r1
 800ad0c:	4620      	mov	r0, r4
 800ad0e:	4629      	mov	r1, r5
 800ad10:	f7f5 fc8a 	bl	8000628 <__aeabi_dmul>
 800ad14:	ec41 0b19 	vmov	d9, r0, r1
 800ad18:	f1ba 0f00 	cmp.w	sl, #0
 800ad1c:	d15d      	bne.n	800adda <__ieee754_exp+0x22a>
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ad24:	4630      	mov	r0, r6
 800ad26:	4639      	mov	r1, r7
 800ad28:	f7f5 fac6 	bl	80002b8 <__aeabi_dsub>
 800ad2c:	4602      	mov	r2, r0
 800ad2e:	460b      	mov	r3, r1
 800ad30:	ec51 0b19 	vmov	r0, r1, d9
 800ad34:	f7f5 fda2 	bl	800087c <__aeabi_ddiv>
 800ad38:	4622      	mov	r2, r4
 800ad3a:	462b      	mov	r3, r5
 800ad3c:	f7f5 fabc 	bl	80002b8 <__aeabi_dsub>
 800ad40:	4602      	mov	r2, r0
 800ad42:	460b      	mov	r3, r1
 800ad44:	2000      	movs	r0, #0
 800ad46:	4958      	ldr	r1, [pc, #352]	; (800aea8 <__ieee754_exp+0x2f8>)
 800ad48:	f7f5 fab6 	bl	80002b8 <__aeabi_dsub>
 800ad4c:	e74d      	b.n	800abea <__ieee754_exp+0x3a>
 800ad4e:	4857      	ldr	r0, [pc, #348]	; (800aeac <__ieee754_exp+0x2fc>)
 800ad50:	a347      	add	r3, pc, #284	; (adr r3, 800ae70 <__ieee754_exp+0x2c0>)
 800ad52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad56:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800ad5a:	4629      	mov	r1, r5
 800ad5c:	4620      	mov	r0, r4
 800ad5e:	f7f5 fc63 	bl	8000628 <__aeabi_dmul>
 800ad62:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ad66:	f7f5 faa9 	bl	80002bc <__adddf3>
 800ad6a:	f7f5 ff0d 	bl	8000b88 <__aeabi_d2iz>
 800ad6e:	4682      	mov	sl, r0
 800ad70:	f7f5 fbf0 	bl	8000554 <__aeabi_i2d>
 800ad74:	a340      	add	r3, pc, #256	; (adr r3, 800ae78 <__ieee754_exp+0x2c8>)
 800ad76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad7a:	4606      	mov	r6, r0
 800ad7c:	460f      	mov	r7, r1
 800ad7e:	f7f5 fc53 	bl	8000628 <__aeabi_dmul>
 800ad82:	4602      	mov	r2, r0
 800ad84:	460b      	mov	r3, r1
 800ad86:	4620      	mov	r0, r4
 800ad88:	4629      	mov	r1, r5
 800ad8a:	f7f5 fa95 	bl	80002b8 <__aeabi_dsub>
 800ad8e:	a33c      	add	r3, pc, #240	; (adr r3, 800ae80 <__ieee754_exp+0x2d0>)
 800ad90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad94:	4680      	mov	r8, r0
 800ad96:	4689      	mov	r9, r1
 800ad98:	4630      	mov	r0, r6
 800ad9a:	4639      	mov	r1, r7
 800ad9c:	f7f5 fc44 	bl	8000628 <__aeabi_dmul>
 800ada0:	ec41 0b18 	vmov	d8, r0, r1
 800ada4:	e76f      	b.n	800ac86 <__ieee754_exp+0xd6>
 800ada6:	4a42      	ldr	r2, [pc, #264]	; (800aeb0 <__ieee754_exp+0x300>)
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d811      	bhi.n	800add0 <__ieee754_exp+0x220>
 800adac:	a336      	add	r3, pc, #216	; (adr r3, 800ae88 <__ieee754_exp+0x2d8>)
 800adae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb2:	ee10 0a10 	vmov	r0, s0
 800adb6:	4629      	mov	r1, r5
 800adb8:	f7f5 fa80 	bl	80002bc <__adddf3>
 800adbc:	4b3a      	ldr	r3, [pc, #232]	; (800aea8 <__ieee754_exp+0x2f8>)
 800adbe:	2200      	movs	r2, #0
 800adc0:	f7f5 fec2 	bl	8000b48 <__aeabi_dcmpgt>
 800adc4:	b138      	cbz	r0, 800add6 <__ieee754_exp+0x226>
 800adc6:	4b38      	ldr	r3, [pc, #224]	; (800aea8 <__ieee754_exp+0x2f8>)
 800adc8:	2200      	movs	r2, #0
 800adca:	4620      	mov	r0, r4
 800adcc:	4629      	mov	r1, r5
 800adce:	e70a      	b.n	800abe6 <__ieee754_exp+0x36>
 800add0:	f04f 0a00 	mov.w	sl, #0
 800add4:	e75f      	b.n	800ac96 <__ieee754_exp+0xe6>
 800add6:	4682      	mov	sl, r0
 800add8:	e75d      	b.n	800ac96 <__ieee754_exp+0xe6>
 800adda:	4632      	mov	r2, r6
 800addc:	463b      	mov	r3, r7
 800adde:	2000      	movs	r0, #0
 800ade0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800ade4:	f7f5 fa68 	bl	80002b8 <__aeabi_dsub>
 800ade8:	4602      	mov	r2, r0
 800adea:	460b      	mov	r3, r1
 800adec:	ec51 0b19 	vmov	r0, r1, d9
 800adf0:	f7f5 fd44 	bl	800087c <__aeabi_ddiv>
 800adf4:	4602      	mov	r2, r0
 800adf6:	460b      	mov	r3, r1
 800adf8:	ec51 0b18 	vmov	r0, r1, d8
 800adfc:	f7f5 fa5c 	bl	80002b8 <__aeabi_dsub>
 800ae00:	4642      	mov	r2, r8
 800ae02:	464b      	mov	r3, r9
 800ae04:	f7f5 fa58 	bl	80002b8 <__aeabi_dsub>
 800ae08:	4602      	mov	r2, r0
 800ae0a:	460b      	mov	r3, r1
 800ae0c:	2000      	movs	r0, #0
 800ae0e:	4926      	ldr	r1, [pc, #152]	; (800aea8 <__ieee754_exp+0x2f8>)
 800ae10:	f7f5 fa52 	bl	80002b8 <__aeabi_dsub>
 800ae14:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800ae18:	4592      	cmp	sl, r2
 800ae1a:	db02      	blt.n	800ae22 <__ieee754_exp+0x272>
 800ae1c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800ae20:	e6e3      	b.n	800abea <__ieee754_exp+0x3a>
 800ae22:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800ae26:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800ae30:	f7f5 fbfa 	bl	8000628 <__aeabi_dmul>
 800ae34:	e6d9      	b.n	800abea <__ieee754_exp+0x3a>
 800ae36:	bf00      	nop
 800ae38:	fefa39ef 	.word	0xfefa39ef
 800ae3c:	40862e42 	.word	0x40862e42
 800ae40:	d52d3051 	.word	0xd52d3051
 800ae44:	c0874910 	.word	0xc0874910
 800ae48:	72bea4d0 	.word	0x72bea4d0
 800ae4c:	3e663769 	.word	0x3e663769
 800ae50:	c5d26bf1 	.word	0xc5d26bf1
 800ae54:	3ebbbd41 	.word	0x3ebbbd41
 800ae58:	af25de2c 	.word	0xaf25de2c
 800ae5c:	3f11566a 	.word	0x3f11566a
 800ae60:	16bebd93 	.word	0x16bebd93
 800ae64:	3f66c16c 	.word	0x3f66c16c
 800ae68:	5555553e 	.word	0x5555553e
 800ae6c:	3fc55555 	.word	0x3fc55555
 800ae70:	652b82fe 	.word	0x652b82fe
 800ae74:	3ff71547 	.word	0x3ff71547
 800ae78:	fee00000 	.word	0xfee00000
 800ae7c:	3fe62e42 	.word	0x3fe62e42
 800ae80:	35793c76 	.word	0x35793c76
 800ae84:	3dea39ef 	.word	0x3dea39ef
 800ae88:	8800759c 	.word	0x8800759c
 800ae8c:	7e37e43c 	.word	0x7e37e43c
 800ae90:	40862e41 	.word	0x40862e41
 800ae94:	7fefffff 	.word	0x7fefffff
 800ae98:	3fd62e42 	.word	0x3fd62e42
 800ae9c:	3ff0a2b1 	.word	0x3ff0a2b1
 800aea0:	0800b750 	.word	0x0800b750
 800aea4:	0800b760 	.word	0x0800b760
 800aea8:	3ff00000 	.word	0x3ff00000
 800aeac:	0800b740 	.word	0x0800b740
 800aeb0:	3defffff 	.word	0x3defffff
 800aeb4:	00000000 	.word	0x00000000

0800aeb8 <__ieee754_log>:
 800aeb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aebc:	ec51 0b10 	vmov	r0, r1, d0
 800aec0:	ed2d 8b04 	vpush	{d8-d9}
 800aec4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800aec8:	b083      	sub	sp, #12
 800aeca:	460d      	mov	r5, r1
 800aecc:	da29      	bge.n	800af22 <__ieee754_log+0x6a>
 800aece:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aed2:	4303      	orrs	r3, r0
 800aed4:	ee10 2a10 	vmov	r2, s0
 800aed8:	d10c      	bne.n	800aef4 <__ieee754_log+0x3c>
 800aeda:	49cf      	ldr	r1, [pc, #828]	; (800b218 <__ieee754_log+0x360>)
 800aedc:	2200      	movs	r2, #0
 800aede:	2300      	movs	r3, #0
 800aee0:	2000      	movs	r0, #0
 800aee2:	f7f5 fccb 	bl	800087c <__aeabi_ddiv>
 800aee6:	ec41 0b10 	vmov	d0, r0, r1
 800aeea:	b003      	add	sp, #12
 800aeec:	ecbd 8b04 	vpop	{d8-d9}
 800aef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aef4:	2900      	cmp	r1, #0
 800aef6:	da05      	bge.n	800af04 <__ieee754_log+0x4c>
 800aef8:	460b      	mov	r3, r1
 800aefa:	f7f5 f9dd 	bl	80002b8 <__aeabi_dsub>
 800aefe:	2200      	movs	r2, #0
 800af00:	2300      	movs	r3, #0
 800af02:	e7ee      	b.n	800aee2 <__ieee754_log+0x2a>
 800af04:	4bc5      	ldr	r3, [pc, #788]	; (800b21c <__ieee754_log+0x364>)
 800af06:	2200      	movs	r2, #0
 800af08:	f7f5 fb8e 	bl	8000628 <__aeabi_dmul>
 800af0c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800af10:	460d      	mov	r5, r1
 800af12:	4ac3      	ldr	r2, [pc, #780]	; (800b220 <__ieee754_log+0x368>)
 800af14:	4295      	cmp	r5, r2
 800af16:	dd06      	ble.n	800af26 <__ieee754_log+0x6e>
 800af18:	4602      	mov	r2, r0
 800af1a:	460b      	mov	r3, r1
 800af1c:	f7f5 f9ce 	bl	80002bc <__adddf3>
 800af20:	e7e1      	b.n	800aee6 <__ieee754_log+0x2e>
 800af22:	2300      	movs	r3, #0
 800af24:	e7f5      	b.n	800af12 <__ieee754_log+0x5a>
 800af26:	152c      	asrs	r4, r5, #20
 800af28:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800af2c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800af30:	441c      	add	r4, r3
 800af32:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800af36:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800af3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800af3e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800af42:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800af46:	ea42 0105 	orr.w	r1, r2, r5
 800af4a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800af4e:	2200      	movs	r2, #0
 800af50:	4bb4      	ldr	r3, [pc, #720]	; (800b224 <__ieee754_log+0x36c>)
 800af52:	f7f5 f9b1 	bl	80002b8 <__aeabi_dsub>
 800af56:	1cab      	adds	r3, r5, #2
 800af58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af5c:	2b02      	cmp	r3, #2
 800af5e:	4682      	mov	sl, r0
 800af60:	468b      	mov	fp, r1
 800af62:	f04f 0200 	mov.w	r2, #0
 800af66:	dc53      	bgt.n	800b010 <__ieee754_log+0x158>
 800af68:	2300      	movs	r3, #0
 800af6a:	f7f5 fdc5 	bl	8000af8 <__aeabi_dcmpeq>
 800af6e:	b1d0      	cbz	r0, 800afa6 <__ieee754_log+0xee>
 800af70:	2c00      	cmp	r4, #0
 800af72:	f000 8122 	beq.w	800b1ba <__ieee754_log+0x302>
 800af76:	4620      	mov	r0, r4
 800af78:	f7f5 faec 	bl	8000554 <__aeabi_i2d>
 800af7c:	a390      	add	r3, pc, #576	; (adr r3, 800b1c0 <__ieee754_log+0x308>)
 800af7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af82:	4606      	mov	r6, r0
 800af84:	460f      	mov	r7, r1
 800af86:	f7f5 fb4f 	bl	8000628 <__aeabi_dmul>
 800af8a:	a38f      	add	r3, pc, #572	; (adr r3, 800b1c8 <__ieee754_log+0x310>)
 800af8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af90:	4604      	mov	r4, r0
 800af92:	460d      	mov	r5, r1
 800af94:	4630      	mov	r0, r6
 800af96:	4639      	mov	r1, r7
 800af98:	f7f5 fb46 	bl	8000628 <__aeabi_dmul>
 800af9c:	4602      	mov	r2, r0
 800af9e:	460b      	mov	r3, r1
 800afa0:	4620      	mov	r0, r4
 800afa2:	4629      	mov	r1, r5
 800afa4:	e7ba      	b.n	800af1c <__ieee754_log+0x64>
 800afa6:	a38a      	add	r3, pc, #552	; (adr r3, 800b1d0 <__ieee754_log+0x318>)
 800afa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afac:	4650      	mov	r0, sl
 800afae:	4659      	mov	r1, fp
 800afb0:	f7f5 fb3a 	bl	8000628 <__aeabi_dmul>
 800afb4:	4602      	mov	r2, r0
 800afb6:	460b      	mov	r3, r1
 800afb8:	2000      	movs	r0, #0
 800afba:	499b      	ldr	r1, [pc, #620]	; (800b228 <__ieee754_log+0x370>)
 800afbc:	f7f5 f97c 	bl	80002b8 <__aeabi_dsub>
 800afc0:	4652      	mov	r2, sl
 800afc2:	4606      	mov	r6, r0
 800afc4:	460f      	mov	r7, r1
 800afc6:	465b      	mov	r3, fp
 800afc8:	4650      	mov	r0, sl
 800afca:	4659      	mov	r1, fp
 800afcc:	f7f5 fb2c 	bl	8000628 <__aeabi_dmul>
 800afd0:	4602      	mov	r2, r0
 800afd2:	460b      	mov	r3, r1
 800afd4:	4630      	mov	r0, r6
 800afd6:	4639      	mov	r1, r7
 800afd8:	f7f5 fb26 	bl	8000628 <__aeabi_dmul>
 800afdc:	4606      	mov	r6, r0
 800afde:	460f      	mov	r7, r1
 800afe0:	b914      	cbnz	r4, 800afe8 <__ieee754_log+0x130>
 800afe2:	4632      	mov	r2, r6
 800afe4:	463b      	mov	r3, r7
 800afe6:	e0a2      	b.n	800b12e <__ieee754_log+0x276>
 800afe8:	4620      	mov	r0, r4
 800afea:	f7f5 fab3 	bl	8000554 <__aeabi_i2d>
 800afee:	a374      	add	r3, pc, #464	; (adr r3, 800b1c0 <__ieee754_log+0x308>)
 800aff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff4:	4680      	mov	r8, r0
 800aff6:	4689      	mov	r9, r1
 800aff8:	f7f5 fb16 	bl	8000628 <__aeabi_dmul>
 800affc:	a372      	add	r3, pc, #456	; (adr r3, 800b1c8 <__ieee754_log+0x310>)
 800affe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b002:	4604      	mov	r4, r0
 800b004:	460d      	mov	r5, r1
 800b006:	4640      	mov	r0, r8
 800b008:	4649      	mov	r1, r9
 800b00a:	f7f5 fb0d 	bl	8000628 <__aeabi_dmul>
 800b00e:	e0a7      	b.n	800b160 <__ieee754_log+0x2a8>
 800b010:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b014:	f7f5 f952 	bl	80002bc <__adddf3>
 800b018:	4602      	mov	r2, r0
 800b01a:	460b      	mov	r3, r1
 800b01c:	4650      	mov	r0, sl
 800b01e:	4659      	mov	r1, fp
 800b020:	f7f5 fc2c 	bl	800087c <__aeabi_ddiv>
 800b024:	ec41 0b18 	vmov	d8, r0, r1
 800b028:	4620      	mov	r0, r4
 800b02a:	f7f5 fa93 	bl	8000554 <__aeabi_i2d>
 800b02e:	ec53 2b18 	vmov	r2, r3, d8
 800b032:	ec41 0b19 	vmov	d9, r0, r1
 800b036:	ec51 0b18 	vmov	r0, r1, d8
 800b03a:	f7f5 faf5 	bl	8000628 <__aeabi_dmul>
 800b03e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800b042:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800b046:	9301      	str	r3, [sp, #4]
 800b048:	4602      	mov	r2, r0
 800b04a:	460b      	mov	r3, r1
 800b04c:	4680      	mov	r8, r0
 800b04e:	4689      	mov	r9, r1
 800b050:	f7f5 faea 	bl	8000628 <__aeabi_dmul>
 800b054:	a360      	add	r3, pc, #384	; (adr r3, 800b1d8 <__ieee754_log+0x320>)
 800b056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05a:	4606      	mov	r6, r0
 800b05c:	460f      	mov	r7, r1
 800b05e:	f7f5 fae3 	bl	8000628 <__aeabi_dmul>
 800b062:	a35f      	add	r3, pc, #380	; (adr r3, 800b1e0 <__ieee754_log+0x328>)
 800b064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b068:	f7f5 f928 	bl	80002bc <__adddf3>
 800b06c:	4632      	mov	r2, r6
 800b06e:	463b      	mov	r3, r7
 800b070:	f7f5 fada 	bl	8000628 <__aeabi_dmul>
 800b074:	a35c      	add	r3, pc, #368	; (adr r3, 800b1e8 <__ieee754_log+0x330>)
 800b076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b07a:	f7f5 f91f 	bl	80002bc <__adddf3>
 800b07e:	4632      	mov	r2, r6
 800b080:	463b      	mov	r3, r7
 800b082:	f7f5 fad1 	bl	8000628 <__aeabi_dmul>
 800b086:	a35a      	add	r3, pc, #360	; (adr r3, 800b1f0 <__ieee754_log+0x338>)
 800b088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b08c:	f7f5 f916 	bl	80002bc <__adddf3>
 800b090:	4642      	mov	r2, r8
 800b092:	464b      	mov	r3, r9
 800b094:	f7f5 fac8 	bl	8000628 <__aeabi_dmul>
 800b098:	a357      	add	r3, pc, #348	; (adr r3, 800b1f8 <__ieee754_log+0x340>)
 800b09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b09e:	4680      	mov	r8, r0
 800b0a0:	4689      	mov	r9, r1
 800b0a2:	4630      	mov	r0, r6
 800b0a4:	4639      	mov	r1, r7
 800b0a6:	f7f5 fabf 	bl	8000628 <__aeabi_dmul>
 800b0aa:	a355      	add	r3, pc, #340	; (adr r3, 800b200 <__ieee754_log+0x348>)
 800b0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b0:	f7f5 f904 	bl	80002bc <__adddf3>
 800b0b4:	4632      	mov	r2, r6
 800b0b6:	463b      	mov	r3, r7
 800b0b8:	f7f5 fab6 	bl	8000628 <__aeabi_dmul>
 800b0bc:	a352      	add	r3, pc, #328	; (adr r3, 800b208 <__ieee754_log+0x350>)
 800b0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c2:	f7f5 f8fb 	bl	80002bc <__adddf3>
 800b0c6:	4632      	mov	r2, r6
 800b0c8:	463b      	mov	r3, r7
 800b0ca:	f7f5 faad 	bl	8000628 <__aeabi_dmul>
 800b0ce:	460b      	mov	r3, r1
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	4649      	mov	r1, r9
 800b0d4:	4640      	mov	r0, r8
 800b0d6:	f7f5 f8f1 	bl	80002bc <__adddf3>
 800b0da:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800b0de:	9b01      	ldr	r3, [sp, #4]
 800b0e0:	3551      	adds	r5, #81	; 0x51
 800b0e2:	431d      	orrs	r5, r3
 800b0e4:	2d00      	cmp	r5, #0
 800b0e6:	4680      	mov	r8, r0
 800b0e8:	4689      	mov	r9, r1
 800b0ea:	dd48      	ble.n	800b17e <__ieee754_log+0x2c6>
 800b0ec:	4b4e      	ldr	r3, [pc, #312]	; (800b228 <__ieee754_log+0x370>)
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	4650      	mov	r0, sl
 800b0f2:	4659      	mov	r1, fp
 800b0f4:	f7f5 fa98 	bl	8000628 <__aeabi_dmul>
 800b0f8:	4652      	mov	r2, sl
 800b0fa:	465b      	mov	r3, fp
 800b0fc:	f7f5 fa94 	bl	8000628 <__aeabi_dmul>
 800b100:	4602      	mov	r2, r0
 800b102:	460b      	mov	r3, r1
 800b104:	4606      	mov	r6, r0
 800b106:	460f      	mov	r7, r1
 800b108:	4640      	mov	r0, r8
 800b10a:	4649      	mov	r1, r9
 800b10c:	f7f5 f8d6 	bl	80002bc <__adddf3>
 800b110:	ec53 2b18 	vmov	r2, r3, d8
 800b114:	f7f5 fa88 	bl	8000628 <__aeabi_dmul>
 800b118:	4680      	mov	r8, r0
 800b11a:	4689      	mov	r9, r1
 800b11c:	b964      	cbnz	r4, 800b138 <__ieee754_log+0x280>
 800b11e:	4602      	mov	r2, r0
 800b120:	460b      	mov	r3, r1
 800b122:	4630      	mov	r0, r6
 800b124:	4639      	mov	r1, r7
 800b126:	f7f5 f8c7 	bl	80002b8 <__aeabi_dsub>
 800b12a:	4602      	mov	r2, r0
 800b12c:	460b      	mov	r3, r1
 800b12e:	4650      	mov	r0, sl
 800b130:	4659      	mov	r1, fp
 800b132:	f7f5 f8c1 	bl	80002b8 <__aeabi_dsub>
 800b136:	e6d6      	b.n	800aee6 <__ieee754_log+0x2e>
 800b138:	a321      	add	r3, pc, #132	; (adr r3, 800b1c0 <__ieee754_log+0x308>)
 800b13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13e:	ec51 0b19 	vmov	r0, r1, d9
 800b142:	f7f5 fa71 	bl	8000628 <__aeabi_dmul>
 800b146:	a320      	add	r3, pc, #128	; (adr r3, 800b1c8 <__ieee754_log+0x310>)
 800b148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14c:	4604      	mov	r4, r0
 800b14e:	460d      	mov	r5, r1
 800b150:	ec51 0b19 	vmov	r0, r1, d9
 800b154:	f7f5 fa68 	bl	8000628 <__aeabi_dmul>
 800b158:	4642      	mov	r2, r8
 800b15a:	464b      	mov	r3, r9
 800b15c:	f7f5 f8ae 	bl	80002bc <__adddf3>
 800b160:	4602      	mov	r2, r0
 800b162:	460b      	mov	r3, r1
 800b164:	4630      	mov	r0, r6
 800b166:	4639      	mov	r1, r7
 800b168:	f7f5 f8a6 	bl	80002b8 <__aeabi_dsub>
 800b16c:	4652      	mov	r2, sl
 800b16e:	465b      	mov	r3, fp
 800b170:	f7f5 f8a2 	bl	80002b8 <__aeabi_dsub>
 800b174:	4602      	mov	r2, r0
 800b176:	460b      	mov	r3, r1
 800b178:	4620      	mov	r0, r4
 800b17a:	4629      	mov	r1, r5
 800b17c:	e7d9      	b.n	800b132 <__ieee754_log+0x27a>
 800b17e:	4602      	mov	r2, r0
 800b180:	460b      	mov	r3, r1
 800b182:	4650      	mov	r0, sl
 800b184:	4659      	mov	r1, fp
 800b186:	f7f5 f897 	bl	80002b8 <__aeabi_dsub>
 800b18a:	ec53 2b18 	vmov	r2, r3, d8
 800b18e:	f7f5 fa4b 	bl	8000628 <__aeabi_dmul>
 800b192:	4606      	mov	r6, r0
 800b194:	460f      	mov	r7, r1
 800b196:	2c00      	cmp	r4, #0
 800b198:	f43f af23 	beq.w	800afe2 <__ieee754_log+0x12a>
 800b19c:	a308      	add	r3, pc, #32	; (adr r3, 800b1c0 <__ieee754_log+0x308>)
 800b19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a2:	ec51 0b19 	vmov	r0, r1, d9
 800b1a6:	f7f5 fa3f 	bl	8000628 <__aeabi_dmul>
 800b1aa:	a307      	add	r3, pc, #28	; (adr r3, 800b1c8 <__ieee754_log+0x310>)
 800b1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b0:	4604      	mov	r4, r0
 800b1b2:	460d      	mov	r5, r1
 800b1b4:	ec51 0b19 	vmov	r0, r1, d9
 800b1b8:	e727      	b.n	800b00a <__ieee754_log+0x152>
 800b1ba:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800b210 <__ieee754_log+0x358>
 800b1be:	e694      	b.n	800aeea <__ieee754_log+0x32>
 800b1c0:	fee00000 	.word	0xfee00000
 800b1c4:	3fe62e42 	.word	0x3fe62e42
 800b1c8:	35793c76 	.word	0x35793c76
 800b1cc:	3dea39ef 	.word	0x3dea39ef
 800b1d0:	55555555 	.word	0x55555555
 800b1d4:	3fd55555 	.word	0x3fd55555
 800b1d8:	df3e5244 	.word	0xdf3e5244
 800b1dc:	3fc2f112 	.word	0x3fc2f112
 800b1e0:	96cb03de 	.word	0x96cb03de
 800b1e4:	3fc74664 	.word	0x3fc74664
 800b1e8:	94229359 	.word	0x94229359
 800b1ec:	3fd24924 	.word	0x3fd24924
 800b1f0:	55555593 	.word	0x55555593
 800b1f4:	3fe55555 	.word	0x3fe55555
 800b1f8:	d078c69f 	.word	0xd078c69f
 800b1fc:	3fc39a09 	.word	0x3fc39a09
 800b200:	1d8e78af 	.word	0x1d8e78af
 800b204:	3fcc71c5 	.word	0x3fcc71c5
 800b208:	9997fa04 	.word	0x9997fa04
 800b20c:	3fd99999 	.word	0x3fd99999
	...
 800b218:	c3500000 	.word	0xc3500000
 800b21c:	43500000 	.word	0x43500000
 800b220:	7fefffff 	.word	0x7fefffff
 800b224:	3ff00000 	.word	0x3ff00000
 800b228:	3fe00000 	.word	0x3fe00000

0800b22c <with_errno>:
 800b22c:	b570      	push	{r4, r5, r6, lr}
 800b22e:	4604      	mov	r4, r0
 800b230:	460d      	mov	r5, r1
 800b232:	4616      	mov	r6, r2
 800b234:	f7fc fe5c 	bl	8007ef0 <__errno>
 800b238:	4629      	mov	r1, r5
 800b23a:	6006      	str	r6, [r0, #0]
 800b23c:	4620      	mov	r0, r4
 800b23e:	bd70      	pop	{r4, r5, r6, pc}

0800b240 <xflow>:
 800b240:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b242:	4614      	mov	r4, r2
 800b244:	461d      	mov	r5, r3
 800b246:	b108      	cbz	r0, 800b24c <xflow+0xc>
 800b248:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b24c:	e9cd 2300 	strd	r2, r3, [sp]
 800b250:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b254:	4620      	mov	r0, r4
 800b256:	4629      	mov	r1, r5
 800b258:	f7f5 f9e6 	bl	8000628 <__aeabi_dmul>
 800b25c:	2222      	movs	r2, #34	; 0x22
 800b25e:	b003      	add	sp, #12
 800b260:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b264:	f7ff bfe2 	b.w	800b22c <with_errno>

0800b268 <__math_uflow>:
 800b268:	b508      	push	{r3, lr}
 800b26a:	2200      	movs	r2, #0
 800b26c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b270:	f7ff ffe6 	bl	800b240 <xflow>
 800b274:	ec41 0b10 	vmov	d0, r0, r1
 800b278:	bd08      	pop	{r3, pc}

0800b27a <__math_oflow>:
 800b27a:	b508      	push	{r3, lr}
 800b27c:	2200      	movs	r2, #0
 800b27e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800b282:	f7ff ffdd 	bl	800b240 <xflow>
 800b286:	ec41 0b10 	vmov	d0, r0, r1
 800b28a:	bd08      	pop	{r3, pc}

0800b28c <finite>:
 800b28c:	b082      	sub	sp, #8
 800b28e:	ed8d 0b00 	vstr	d0, [sp]
 800b292:	9801      	ldr	r0, [sp, #4]
 800b294:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b298:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b29c:	0fc0      	lsrs	r0, r0, #31
 800b29e:	b002      	add	sp, #8
 800b2a0:	4770      	bx	lr
 800b2a2:	0000      	movs	r0, r0
 800b2a4:	0000      	movs	r0, r0
	...

0800b2a8 <nan>:
 800b2a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b2b0 <nan+0x8>
 800b2ac:	4770      	bx	lr
 800b2ae:	bf00      	nop
 800b2b0:	00000000 	.word	0x00000000
 800b2b4:	7ff80000 	.word	0x7ff80000

0800b2b8 <_init>:
 800b2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ba:	bf00      	nop
 800b2bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2be:	bc08      	pop	{r3}
 800b2c0:	469e      	mov	lr, r3
 800b2c2:	4770      	bx	lr

0800b2c4 <_fini>:
 800b2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2c6:	bf00      	nop
 800b2c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2ca:	bc08      	pop	{r3}
 800b2cc:	469e      	mov	lr, r3
 800b2ce:	4770      	bx	lr
